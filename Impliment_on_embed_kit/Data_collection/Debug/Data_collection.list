
Data_collection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008124  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001988  080082c8  080082c8  000092c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c50  08009c50  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009c50  08009c50  0000ac50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c58  08009c58  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c58  08009c58  0000ac58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c5c  08009c5c  0000ac5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009c60  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000189c  200001e8  08009e48  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a84  08009e48  0000ba84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9c1  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002343  00000000  00000000  00017bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00019f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001571b  00000000  00000000  0001aa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000df14  00000000  00000000  0003018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a295  00000000  00000000  0003e09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c8334  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000898  00000000  00000000  000c8377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f14  00000000  00000000  000c8c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000ccb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080082ac 	.word	0x080082ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	080082ac 	.word	0x080082ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	480c      	ldr	r0, [pc, #48]	@ (8000ee8 <ST7789_WriteCommand+0x40>)
 8000eb8:	f002 fd8e 	bl	80039d8 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4809      	ldr	r0, [pc, #36]	@ (8000ee8 <ST7789_WriteCommand+0x40>)
 8000ec2:	f002 fd89 	bl	80039d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000ec6:	1df9      	adds	r1, r7, #7
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4807      	ldr	r0, [pc, #28]	@ (8000eec <ST7789_WriteCommand+0x44>)
 8000ed0:	f003 fa7d 	bl	80043ce <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <ST7789_WriteCommand+0x40>)
 8000eda:	f002 fd7d 	bl	80039d8 <HAL_GPIO_WritePin>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	20000b64 	.word	0x20000b64

08000ef0 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000efa:	2200      	movs	r2, #0
 8000efc:	2110      	movs	r1, #16
 8000efe:	4820      	ldr	r0, [pc, #128]	@ (8000f80 <ST7789_WriteData+0x90>)
 8000f00:	f002 fd6a 	bl	80039d8 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000f04:	2201      	movs	r2, #1
 8000f06:	2102      	movs	r1, #2
 8000f08:	481d      	ldr	r0, [pc, #116]	@ (8000f80 <ST7789_WriteData+0x90>)
 8000f0a:	f002 fd65 	bl	80039d8 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000f0e:	e02a      	b.n	8000f66 <ST7789_WriteData+0x76>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f16:	4293      	cmp	r3, r2
 8000f18:	bf28      	it	cs
 8000f1a:	4613      	movcs	r3, r2
 8000f1c:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <ST7789_WriteData+0x94>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d30e      	bcc.n	8000f48 <ST7789_WriteData+0x58>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4815      	ldr	r0, [pc, #84]	@ (8000f88 <ST7789_WriteData+0x98>)
 8000f32:	f003 fd39 	bl	80049a8 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8000f36:	bf00      	nop
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <ST7789_WriteData+0x98>)
 8000f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d1f8      	bne.n	8000f38 <ST7789_WriteData+0x48>
 8000f46:	e006      	b.n	8000f56 <ST7789_WriteData+0x66>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000f48:	89fa      	ldrh	r2, [r7, #14]
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <ST7789_WriteData+0x98>)
 8000f52:	f003 fa3c 	bl	80043ce <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1d1      	bne.n	8000f10 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <ST7789_WriteData+0x90>)
 8000f72:	f002 fd31 	bl	80039d8 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020000 	.word	0x40020000
 8000f84:	20000010 	.word	0x20000010
 8000f88:	20000b64 	.word	0x20000b64

08000f8c <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000f96:	2200      	movs	r2, #0
 8000f98:	2110      	movs	r1, #16
 8000f9a:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <ST7789_WriteSmallData+0x40>)
 8000f9c:	f002 fd1c 	bl	80039d8 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <ST7789_WriteSmallData+0x40>)
 8000fa6:	f002 fd17 	bl	80039d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000faa:	1df9      	adds	r1, r7, #7
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4807      	ldr	r0, [pc, #28]	@ (8000fd0 <ST7789_WriteSmallData+0x44>)
 8000fb4:	f003 fa0b 	bl	80043ce <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4803      	ldr	r0, [pc, #12]	@ (8000fcc <ST7789_WriteSmallData+0x40>)
 8000fbe:	f002 fd0b 	bl	80039d8 <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	20000b64 	.word	0x20000b64

08000fd4 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000fde:	2036      	movs	r0, #54	@ 0x36
 8000fe0:	f7ff ff62 	bl	8000ea8 <ST7789_WriteCommand>
	switch (m) {
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d81a      	bhi.n	8001020 <ST7789_SetRotation+0x4c>
 8000fea:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff0 <ST7789_SetRotation+0x1c>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	08001009 	.word	0x08001009
 8000ff8:	08001011 	.word	0x08001011
 8000ffc:	08001019 	.word	0x08001019
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001000:	20c0      	movs	r0, #192	@ 0xc0
 8001002:	f7ff ffc3 	bl	8000f8c <ST7789_WriteSmallData>
		break;
 8001006:	e00c      	b.n	8001022 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001008:	20a0      	movs	r0, #160	@ 0xa0
 800100a:	f7ff ffbf 	bl	8000f8c <ST7789_WriteSmallData>
		break;
 800100e:	e008      	b.n	8001022 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff ffbb 	bl	8000f8c <ST7789_WriteSmallData>
		break;
 8001016:	e004      	b.n	8001022 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001018:	2060      	movs	r0, #96	@ 0x60
 800101a:	f7ff ffb7 	bl	8000f8c <ST7789_WriteSmallData>
		break;
 800101e:	e000      	b.n	8001022 <ST7789_SetRotation+0x4e>
	default:
		break;
 8001020:	bf00      	nop
	}
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop

0800102c <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	4604      	mov	r4, r0
 8001034:	4608      	mov	r0, r1
 8001036:	4611      	mov	r1, r2
 8001038:	461a      	mov	r2, r3
 800103a:	4623      	mov	r3, r4
 800103c:	80fb      	strh	r3, [r7, #6]
 800103e:	4603      	mov	r3, r0
 8001040:	80bb      	strh	r3, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	807b      	strh	r3, [r7, #2]
 8001046:	4613      	mov	r3, r2
 8001048:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800104a:	2200      	movs	r2, #0
 800104c:	2110      	movs	r1, #16
 800104e:	4824      	ldr	r0, [pc, #144]	@ (80010e0 <ST7789_SetAddressWindow+0xb4>)
 8001050:	f002 fcc2 	bl	80039d8 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	82fb      	strh	r3, [r7, #22]
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	827b      	strh	r3, [r7, #18]
 8001060:	883b      	ldrh	r3, [r7, #0]
 8001062:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001064:	202a      	movs	r0, #42	@ 0x2a
 8001066:	f7ff ff1f 	bl	8000ea8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800106a:	8afb      	ldrh	r3, [r7, #22]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	b29b      	uxth	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	733b      	strb	r3, [r7, #12]
 8001074:	8afb      	ldrh	r3, [r7, #22]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	737b      	strb	r3, [r7, #13]
 800107a:	8abb      	ldrh	r3, [r7, #20]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b29b      	uxth	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	73bb      	strb	r3, [r7, #14]
 8001084:	8abb      	ldrh	r3, [r7, #20]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2104      	movs	r1, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff2d 	bl	8000ef0 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001096:	202b      	movs	r0, #43	@ 0x2b
 8001098:	f7ff ff06 	bl	8000ea8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800109c:	8a7b      	ldrh	r3, [r7, #18]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	723b      	strb	r3, [r7, #8]
 80010a6:	8a7b      	ldrh	r3, [r7, #18]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	727b      	strb	r3, [r7, #9]
 80010ac:	8a3b      	ldrh	r3, [r7, #16]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	72bb      	strb	r3, [r7, #10]
 80010b6:	8a3b      	ldrh	r3, [r7, #16]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	2104      	movs	r1, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff14 	bl	8000ef0 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80010c8:	202c      	movs	r0, #44	@ 0x2c
 80010ca:	f7ff feed 	bl	8000ea8 <ST7789_WriteCommand>
	ST7789_UnSelect();
 80010ce:	2201      	movs	r2, #1
 80010d0:	2110      	movs	r1, #16
 80010d2:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <ST7789_SetAddressWindow+0xb4>)
 80010d4:	f002 fc80 	bl	80039d8 <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd90      	pop	{r4, r7, pc}
 80010e0:	40020000 	.word	0x40020000

080010e4 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b08b      	sub	sp, #44	@ 0x2c
 80010e8:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 80010ea:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010ee:	2100      	movs	r1, #0
 80010f0:	484a      	ldr	r0, [pc, #296]	@ (800121c <ST7789_Init+0x138>)
 80010f2:	f005 f8a5 	bl	8006240 <memset>
	#endif
	HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f001 fe2c 	bl	8002d54 <HAL_Delay>
    ST7789_RST_Clr();
 80010fc:	2200      	movs	r2, #0
 80010fe:	2108      	movs	r1, #8
 8001100:	4847      	ldr	r0, [pc, #284]	@ (8001220 <ST7789_Init+0x13c>)
 8001102:	f002 fc69 	bl	80039d8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001106:	200a      	movs	r0, #10
 8001108:	f001 fe24 	bl	8002d54 <HAL_Delay>
    ST7789_RST_Set();
 800110c:	2201      	movs	r2, #1
 800110e:	2108      	movs	r1, #8
 8001110:	4843      	ldr	r0, [pc, #268]	@ (8001220 <ST7789_Init+0x13c>)
 8001112:	f002 fc61 	bl	80039d8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001116:	2014      	movs	r0, #20
 8001118:	f001 fe1c 	bl	8002d54 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800111c:	203a      	movs	r0, #58	@ 0x3a
 800111e:	f7ff fec3 	bl	8000ea8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001122:	2055      	movs	r0, #85	@ 0x55
 8001124:	f7ff ff32 	bl	8000f8c <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001128:	20b2      	movs	r0, #178	@ 0xb2
 800112a:	f7ff febd 	bl	8000ea8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800112e:	4a3d      	ldr	r2, [pc, #244]	@ (8001224 <ST7789_Init+0x140>)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001138:	6018      	str	r0, [r3, #0]
 800113a:	3304      	adds	r3, #4
 800113c:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2105      	movs	r1, #5
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fed3 	bl	8000ef0 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff ff42 	bl	8000fd4 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001150:	20b7      	movs	r0, #183	@ 0xb7
 8001152:	f7ff fea9 	bl	8000ea8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001156:	2035      	movs	r0, #53	@ 0x35
 8001158:	f7ff ff18 	bl	8000f8c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800115c:	20bb      	movs	r0, #187	@ 0xbb
 800115e:	f7ff fea3 	bl	8000ea8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001162:	2019      	movs	r0, #25
 8001164:	f7ff ff12 	bl	8000f8c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001168:	20c0      	movs	r0, #192	@ 0xc0
 800116a:	f7ff fe9d 	bl	8000ea8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800116e:	202c      	movs	r0, #44	@ 0x2c
 8001170:	f7ff ff0c 	bl	8000f8c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001174:	20c2      	movs	r0, #194	@ 0xc2
 8001176:	f7ff fe97 	bl	8000ea8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff ff06 	bl	8000f8c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001180:	20c3      	movs	r0, #195	@ 0xc3
 8001182:	f7ff fe91 	bl	8000ea8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001186:	2012      	movs	r0, #18
 8001188:	f7ff ff00 	bl	8000f8c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 800118c:	20c4      	movs	r0, #196	@ 0xc4
 800118e:	f7ff fe8b 	bl	8000ea8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001192:	2020      	movs	r0, #32
 8001194:	f7ff fefa 	bl	8000f8c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001198:	20c6      	movs	r0, #198	@ 0xc6
 800119a:	f7ff fe85 	bl	8000ea8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800119e:	200f      	movs	r0, #15
 80011a0:	f7ff fef4 	bl	8000f8c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80011a4:	20d0      	movs	r0, #208	@ 0xd0
 80011a6:	f7ff fe7f 	bl	8000ea8 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80011aa:	20a4      	movs	r0, #164	@ 0xa4
 80011ac:	f7ff feee 	bl	8000f8c <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80011b0:	20a1      	movs	r0, #161	@ 0xa1
 80011b2:	f7ff feeb 	bl	8000f8c <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80011b6:	20e0      	movs	r0, #224	@ 0xe0
 80011b8:	f7ff fe76 	bl	8000ea8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80011bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <ST7789_Init+0x144>)
 80011be:	f107 0410 	add.w	r4, r7, #16
 80011c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c4:	c407      	stmia	r4!, {r0, r1, r2}
 80011c6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	210e      	movs	r1, #14
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fe8e 	bl	8000ef0 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80011d4:	20e1      	movs	r0, #225	@ 0xe1
 80011d6:	f7ff fe67 	bl	8000ea8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <ST7789_Init+0x148>)
 80011dc:	463c      	mov	r4, r7
 80011de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e0:	c407      	stmia	r4!, {r0, r1, r2}
 80011e2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80011e4:	463b      	mov	r3, r7
 80011e6:	210e      	movs	r1, #14
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fe81 	bl	8000ef0 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 80011ee:	2021      	movs	r0, #33	@ 0x21
 80011f0:	f7ff fe5a 	bl	8000ea8 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80011f4:	2011      	movs	r0, #17
 80011f6:	f7ff fe57 	bl	8000ea8 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80011fa:	2013      	movs	r0, #19
 80011fc:	f7ff fe54 	bl	8000ea8 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001200:	2029      	movs	r0, #41	@ 0x29
 8001202:	f7ff fe51 	bl	8000ea8 <ST7789_WriteCommand>

	HAL_Delay(50);
 8001206:	2032      	movs	r0, #50	@ 0x32
 8001208:	f001 fda4 	bl	8002d54 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f80f 	bl	8001230 <ST7789_Fill_Color>
}
 8001212:	bf00      	nop
 8001214:	372c      	adds	r7, #44	@ 0x2c
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	bf00      	nop
 800121c:	20000204 	.word	0x20000204
 8001220:	40020000 	.word	0x40020000
 8001224:	080082c8 	.word	0x080082c8
 8001228:	080082d0 	.word	0x080082d0
 800122c:	080082e0 	.word	0x080082e0

08001230 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800123a:	f240 133f 	movw	r3, #319	@ 0x13f
 800123e:	22ef      	movs	r2, #239	@ 0xef
 8001240:	2100      	movs	r1, #0
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff fef2 	bl	800102c <ST7789_SetAddressWindow>
	ST7789_Select();
 8001248:	2200      	movs	r2, #0
 800124a:	2110      	movs	r1, #16
 800124c:	4810      	ldr	r0, [pc, #64]	@ (8001290 <ST7789_Fill_Color+0x60>)
 800124e:	f002 fbc3 	bl	80039d8 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	81fb      	strh	r3, [r7, #14]
 8001256:	e00e      	b.n	8001276 <ST7789_Fill_Color+0x46>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <ST7789_Fill_Color+0x64>)
 8001262:	f004 ffed 	bl	8006240 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001266:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 800126a:	480a      	ldr	r0, [pc, #40]	@ (8001294 <ST7789_Fill_Color+0x64>)
 800126c:	f7ff fe40 	bl	8000ef0 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001270:	89fb      	ldrh	r3, [r7, #14]
 8001272:	3301      	adds	r3, #1
 8001274:	81fb      	strh	r3, [r7, #14]
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	2b3f      	cmp	r3, #63	@ 0x3f
 800127a:	d9ed      	bls.n	8001258 <ST7789_Fill_Color+0x28>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 800127c:	2201      	movs	r2, #1
 800127e:	2110      	movs	r1, #16
 8001280:	4803      	ldr	r0, [pc, #12]	@ (8001290 <ST7789_Fill_Color+0x60>)
 8001282:	f002 fba9 	bl	80039d8 <HAL_GPIO_WritePin>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40020000 	.word	0x40020000
 8001294:	20000204 	.word	0x20000204

08001298 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
 80012a2:	460b      	mov	r3, r1
 80012a4:	80bb      	strh	r3, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	2bef      	cmp	r3, #239	@ 0xef
 80012ae:	d822      	bhi.n	80012f6 <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80012b6:	d21e      	bcs.n	80012f6 <ST7789_DrawPixel+0x5e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	88b9      	ldrh	r1, [r7, #4]
 80012be:	88f8      	ldrh	r0, [r7, #6]
 80012c0:	f7ff feb4 	bl	800102c <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	0a1b      	lsrs	r3, r3, #8
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	733b      	strb	r3, [r7, #12]
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80012d4:	2200      	movs	r2, #0
 80012d6:	2110      	movs	r1, #16
 80012d8:	4809      	ldr	r0, [pc, #36]	@ (8001300 <ST7789_DrawPixel+0x68>)
 80012da:	f002 fb7d 	bl	80039d8 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2102      	movs	r1, #2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe03 	bl	8000ef0 <ST7789_WriteData>
	ST7789_UnSelect();
 80012ea:	2201      	movs	r2, #1
 80012ec:	2110      	movs	r1, #16
 80012ee:	4804      	ldr	r0, [pc, #16]	@ (8001300 <ST7789_DrawPixel+0x68>)
 80012f0:	f002 fb72 	bl	80039d8 <HAL_GPIO_WritePin>
 80012f4:	e000      	b.n	80012f8 <ST7789_DrawPixel+0x60>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80012f6:	bf00      	nop
}
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40020000 	.word	0x40020000

08001304 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	4604      	mov	r4, r0
 800130c:	4608      	mov	r0, r1
 800130e:	4611      	mov	r1, r2
 8001310:	461a      	mov	r2, r3
 8001312:	4623      	mov	r3, r4
 8001314:	80fb      	strh	r3, [r7, #6]
 8001316:	4603      	mov	r3, r0
 8001318:	80bb      	strh	r3, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	807b      	strh	r3, [r7, #2]
 800131e:	4613      	mov	r3, r2
 8001320:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8001322:	883a      	ldrh	r2, [r7, #0]
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800132c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001330:	8879      	ldrh	r1, [r7, #2]
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	1acb      	subs	r3, r1, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	bfb8      	it	lt
 800133a:	425b      	neglt	r3, r3
 800133c:	429a      	cmp	r2, r3
 800133e:	bfcc      	ite	gt
 8001340:	2301      	movgt	r3, #1
 8001342:	2300      	movle	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8001348:	8a7b      	ldrh	r3, [r7, #18]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <ST7789_DrawLine+0x62>
		swap = x0;
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8001356:	8a3b      	ldrh	r3, [r7, #16]
 8001358:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 800135e:	883b      	ldrh	r3, [r7, #0]
 8001360:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8001362:	8a3b      	ldrh	r3, [r7, #16]
 8001364:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8001366:	88fa      	ldrh	r2, [r7, #6]
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	429a      	cmp	r2, r3
 800136c:	d90b      	bls.n	8001386 <ST7789_DrawLine+0x82>
		swap = x0;
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8001376:	8a3b      	ldrh	r3, [r7, #16]
 8001378:	807b      	strh	r3, [r7, #2]

		swap = y0;
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 800137e:	883b      	ldrh	r3, [r7, #0]
 8001380:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8001382:	8a3b      	ldrh	r3, [r7, #16]
 8001384:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	b29b      	uxth	r3, r3
 800138e:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8001390:	883a      	ldrh	r2, [r7, #0]
 8001392:	88bb      	ldrh	r3, [r7, #4]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	bfb8      	it	lt
 800139a:	425b      	neglt	r3, r3
 800139c:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 800139e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a2:	0fda      	lsrs	r2, r3, #31
 80013a4:	4413      	add	r3, r2
 80013a6:	105b      	asrs	r3, r3, #1
 80013a8:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 80013aa:	88ba      	ldrh	r2, [r7, #4]
 80013ac:	883b      	ldrh	r3, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d202      	bcs.n	80013b8 <ST7789_DrawLine+0xb4>
        ystep = 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	82bb      	strh	r3, [r7, #20]
 80013b6:	e028      	b.n	800140a <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 80013b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013bc:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 80013be:	e024      	b.n	800140a <ST7789_DrawLine+0x106>
        if (steep) {
 80013c0:	8a7b      	ldrh	r3, [r7, #18]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 80013c6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80013c8:	88f9      	ldrh	r1, [r7, #6]
 80013ca:	88bb      	ldrh	r3, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff63 	bl	8001298 <ST7789_DrawPixel>
 80013d2:	e005      	b.n	80013e0 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 80013d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80013d6:	88b9      	ldrh	r1, [r7, #4]
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff5c 	bl	8001298 <ST7789_DrawPixel>
        }
        err -= dy;
 80013e0:	8afa      	ldrh	r2, [r7, #22]
 80013e2:	89bb      	ldrh	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 80013ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da08      	bge.n	8001404 <ST7789_DrawLine+0x100>
            y0 += ystep;
 80013f2:	8aba      	ldrh	r2, [r7, #20]
 80013f4:	88bb      	ldrh	r3, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80013fa:	8afa      	ldrh	r2, [r7, #22]
 80013fc:	89fb      	ldrh	r3, [r7, #14]
 80013fe:	4413      	add	r3, r2
 8001400:	b29b      	uxth	r3, r3
 8001402:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	3301      	adds	r3, #1
 8001408:	80fb      	strh	r3, [r7, #6]
 800140a:	88fa      	ldrh	r2, [r7, #6]
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	429a      	cmp	r2, r3
 8001410:	d9d6      	bls.n	80013c0 <ST7789_DrawLine+0xbc>
        }
    }
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}

0800141c <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b085      	sub	sp, #20
 8001420:	af02      	add	r7, sp, #8
 8001422:	4604      	mov	r4, r0
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	4603      	mov	r3, r0
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	807b      	strh	r3, [r7, #2]
 8001436:	4613      	mov	r3, r2
 8001438:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800143a:	2200      	movs	r2, #0
 800143c:	2110      	movs	r1, #16
 800143e:	4818      	ldr	r0, [pc, #96]	@ (80014a0 <ST7789_DrawRectangle+0x84>)
 8001440:	f002 faca 	bl	80039d8 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8001444:	88bc      	ldrh	r4, [r7, #4]
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	88b9      	ldrh	r1, [r7, #4]
 800144a:	88f8      	ldrh	r0, [r7, #6]
 800144c:	8b3b      	ldrh	r3, [r7, #24]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	4623      	mov	r3, r4
 8001452:	f7ff ff57 	bl	8001304 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 8001456:	883c      	ldrh	r4, [r7, #0]
 8001458:	88fa      	ldrh	r2, [r7, #6]
 800145a:	88b9      	ldrh	r1, [r7, #4]
 800145c:	88f8      	ldrh	r0, [r7, #6]
 800145e:	8b3b      	ldrh	r3, [r7, #24]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	4623      	mov	r3, r4
 8001464:	f7ff ff4e 	bl	8001304 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 8001468:	883c      	ldrh	r4, [r7, #0]
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	8839      	ldrh	r1, [r7, #0]
 800146e:	88f8      	ldrh	r0, [r7, #6]
 8001470:	8b3b      	ldrh	r3, [r7, #24]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	4623      	mov	r3, r4
 8001476:	f7ff ff45 	bl	8001304 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 800147a:	883c      	ldrh	r4, [r7, #0]
 800147c:	887a      	ldrh	r2, [r7, #2]
 800147e:	88b9      	ldrh	r1, [r7, #4]
 8001480:	8878      	ldrh	r0, [r7, #2]
 8001482:	8b3b      	ldrh	r3, [r7, #24]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	4623      	mov	r3, r4
 8001488:	f7ff ff3c 	bl	8001304 <ST7789_DrawLine>
	ST7789_UnSelect();
 800148c:	2201      	movs	r2, #1
 800148e:	2110      	movs	r1, #16
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <ST7789_DrawRectangle+0x84>)
 8001492:	f002 faa1 	bl	80039d8 <HAL_GPIO_WritePin>
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	40020000 	.word	0x40020000

080014a4 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80014a4:	b082      	sub	sp, #8
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b088      	sub	sp, #32
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
 80014b2:	460b      	mov	r3, r1
 80014b4:	80bb      	strh	r3, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 80014ba:	2200      	movs	r2, #0
 80014bc:	2110      	movs	r1, #16
 80014be:	4837      	ldr	r0, [pc, #220]	@ (800159c <ST7789_WriteChar+0xf8>)
 80014c0:	f002 fa8a 	bl	80039d8 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80014c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014c8:	461a      	mov	r2, r3
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	4413      	add	r3, r2
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80014d8:	4619      	mov	r1, r3
 80014da:	88bb      	ldrh	r3, [r7, #4]
 80014dc:	440b      	add	r3, r1
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	88b9      	ldrh	r1, [r7, #4]
 80014e6:	88f8      	ldrh	r0, [r7, #6]
 80014e8:	f7ff fda0 	bl	800102c <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	e041      	b.n	8001576 <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 80014f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	3b20      	subs	r3, #32
 80014f8:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	4619      	mov	r1, r3
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	440b      	add	r3, r1
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	e027      	b.n	8001564 <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00e      	beq.n	8001542 <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001524:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001526:	0a1b      	lsrs	r3, r3, #8
 8001528:	b29b      	uxth	r3, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	743b      	strb	r3, [r7, #16]
 800152e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001530:	b2db      	uxtb	r3, r3
 8001532:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	2102      	movs	r1, #2
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fcd8 	bl	8000ef0 <ST7789_WriteData>
 8001540:	e00d      	b.n	800155e <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001542:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	733b      	strb	r3, [r7, #12]
 800154c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800154e:	b2db      	uxtb	r3, r3
 8001550:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2102      	movs	r1, #2
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fcc9 	bl	8000ef0 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	3301      	adds	r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001568:	461a      	mov	r2, r3
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4293      	cmp	r3, r2
 800156e:	d3d1      	bcc.n	8001514 <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	3301      	adds	r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800157a:	461a      	mov	r2, r3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	4293      	cmp	r3, r2
 8001580:	d3b7      	bcc.n	80014f2 <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 8001582:	2201      	movs	r2, #1
 8001584:	2110      	movs	r1, #16
 8001586:	4805      	ldr	r0, [pc, #20]	@ (800159c <ST7789_WriteChar+0xf8>)
 8001588:	f002 fa26 	bl	80039d8 <HAL_GPIO_WritePin>
}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001596:	b002      	add	sp, #8
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40020000 	.word	0x40020000

080015a0 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80015a0:	b082      	sub	sp, #8
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af04      	add	r7, sp, #16
 80015a8:	603a      	str	r2, [r7, #0]
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	4603      	mov	r3, r0
 80015ae:	80fb      	strh	r3, [r7, #6]
 80015b0:	460b      	mov	r3, r1
 80015b2:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 80015b4:	2200      	movs	r2, #0
 80015b6:	2110      	movs	r1, #16
 80015b8:	4822      	ldr	r0, [pc, #136]	@ (8001644 <ST7789_WriteString+0xa4>)
 80015ba:	f002 fa0d 	bl	80039d8 <HAL_GPIO_WritePin>
	while (*str) {
 80015be:	e02e      	b.n	800161e <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	7d3a      	ldrb	r2, [r7, #20]
 80015c4:	4413      	add	r3, r2
 80015c6:	2bef      	cmp	r3, #239	@ 0xef
 80015c8:	dd14      	ble.n	80015f4 <ST7789_WriteString+0x54>
			x = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80015ce:	7d7b      	ldrb	r3, [r7, #21]
 80015d0:	461a      	mov	r2, r3
 80015d2:	88bb      	ldrh	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	7d7a      	ldrb	r2, [r7, #21]
 80015dc:	4413      	add	r3, r2
 80015de:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80015e2:	da21      	bge.n	8001628 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d103      	bne.n	80015f4 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	603b      	str	r3, [r7, #0]
				continue;
 80015f2:	e014      	b.n	800161e <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	88b9      	ldrh	r1, [r7, #4]
 80015fa:	88f8      	ldrh	r0, [r7, #6]
 80015fc:	8c3b      	ldrh	r3, [r7, #32]
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	8bbb      	ldrh	r3, [r7, #28]
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f7ff ff4b 	bl	80014a4 <ST7789_WriteChar>
		x += font.width;
 800160e:	7d3b      	ldrb	r3, [r7, #20]
 8001610:	461a      	mov	r2, r3
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	4413      	add	r3, r2
 8001616:	80fb      	strh	r3, [r7, #6]
		str++;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	603b      	str	r3, [r7, #0]
	while (*str) {
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1cc      	bne.n	80015c0 <ST7789_WriteString+0x20>
 8001626:	e000      	b.n	800162a <ST7789_WriteString+0x8a>
				break;
 8001628:	bf00      	nop
	}
	ST7789_UnSelect();
 800162a:	2201      	movs	r2, #1
 800162c:	2110      	movs	r1, #16
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <ST7789_WriteString+0xa4>)
 8001630:	f002 f9d2 	bl	80039d8 <HAL_GPIO_WritePin>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800163e:	b002      	add	sp, #8
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40020000 	.word	0x40020000

08001648 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b087      	sub	sp, #28
 800164c:	af02      	add	r7, sp, #8
 800164e:	4604      	mov	r4, r0
 8001650:	4608      	mov	r0, r1
 8001652:	4611      	mov	r1, r2
 8001654:	461a      	mov	r2, r3
 8001656:	4623      	mov	r3, r4
 8001658:	80fb      	strh	r3, [r7, #6]
 800165a:	4603      	mov	r3, r0
 800165c:	80bb      	strh	r3, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]
 8001662:	4613      	mov	r3, r2
 8001664:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001666:	2200      	movs	r2, #0
 8001668:	2110      	movs	r1, #16
 800166a:	4823      	ldr	r0, [pc, #140]	@ (80016f8 <ST7789_DrawFilledRectangle+0xb0>)
 800166c:	f002 f9b4 	bl	80039d8 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	2bef      	cmp	r3, #239	@ 0xef
 8001674:	d83c      	bhi.n	80016f0 <ST7789_DrawFilledRectangle+0xa8>
 8001676:	88bb      	ldrh	r3, [r7, #4]
 8001678:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800167c:	d238      	bcs.n	80016f0 <ST7789_DrawFilledRectangle+0xa8>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 800167e:	88fa      	ldrh	r2, [r7, #6]
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	4413      	add	r3, r2
 8001684:	2bef      	cmp	r3, #239	@ 0xef
 8001686:	dd03      	ble.n	8001690 <ST7789_DrawFilledRectangle+0x48>
		w = ST7789_WIDTH - x;
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800168e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8001690:	88ba      	ldrh	r2, [r7, #4]
 8001692:	883b      	ldrh	r3, [r7, #0]
 8001694:	4413      	add	r3, r2
 8001696:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800169a:	db03      	blt.n	80016a4 <ST7789_DrawFilledRectangle+0x5c>
		h = ST7789_HEIGHT - y;
 800169c:	88bb      	ldrh	r3, [r7, #4]
 800169e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80016a2:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e017      	b.n	80016da <ST7789_DrawFilledRectangle+0x92>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	b299      	uxth	r1, r3
 80016b4:	88fa      	ldrh	r2, [r7, #6]
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	4413      	add	r3, r2
 80016ba:	b29c      	uxth	r4, r3
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	88bb      	ldrh	r3, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	88f8      	ldrh	r0, [r7, #6]
 80016c8:	8c3b      	ldrh	r3, [r7, #32]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	4622      	mov	r2, r4
 80016d0:	f7ff fe18 	bl	8001304 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	3301      	adds	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	883a      	ldrh	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d2e2      	bcs.n	80016aa <ST7789_DrawFilledRectangle+0x62>
	}
	ST7789_UnSelect();
 80016e4:	2201      	movs	r2, #1
 80016e6:	2110      	movs	r1, #16
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <ST7789_DrawFilledRectangle+0xb0>)
 80016ea:	f002 f975 	bl	80039d8 <HAL_GPIO_WritePin>
 80016ee:	e000      	b.n	80016f2 <ST7789_DrawFilledRectangle+0xaa>
		return;
 80016f0:	bf00      	nop
}
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	40020000 	.word	0x40020000

080016fc <clearCNNinput>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clearCNNinput(volatile float *in_mat)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < INPUT_SIZE; i++)
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e01d      	b.n	800174e <clearCNNinput+0x52>
	{
		for (j = 0; j < INPUT_SIZE; j ++)
 8001712:	2300      	movs	r3, #0
 8001714:	73bb      	strb	r3, [r7, #14]
 8001716:	e014      	b.n	8001742 <clearCNNinput+0x46>
		{
			uint16_t in_mat_idx = i * INPUT_SIZE + j;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	b29b      	uxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	00d2      	lsls	r2, r2, #3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	b29a      	uxth	r2, r3
 8001726:	7bbb      	ldrb	r3, [r7, #14]
 8001728:	b29b      	uxth	r3, r3
 800172a:	4413      	add	r3, r2
 800172c:	81bb      	strh	r3, [r7, #12]
			in_mat[in_mat_idx] = 0;
 800172e:	89bb      	ldrh	r3, [r7, #12]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
		for (j = 0; j < INPUT_SIZE; j ++)
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	3301      	adds	r3, #1
 8001740:	73bb      	strb	r3, [r7, #14]
 8001742:	7bbb      	ldrb	r3, [r7, #14]
 8001744:	2b1b      	cmp	r3, #27
 8001746:	d9e7      	bls.n	8001718 <clearCNNinput+0x1c>
	for (i = 0; i < INPUT_SIZE; i++)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	3301      	adds	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b1b      	cmp	r3, #27
 8001752:	d9de      	bls.n	8001712 <clearCNNinput+0x16>
		}
	}
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <resetButtonPressed>:

void resetButtonPressed(volatile float* cnn_input, volatile uint16_t coordinate_x, volatile uint16_t coordinate_y)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af04      	add	r7, sp, #16
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
 8001770:	4613      	mov	r3, r2
 8001772:	803b      	strh	r3, [r7, #0]
	if ((coordinate_x > 157 && coordinate_x < 208) &&
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	b29b      	uxth	r3, r3
 8001778:	2b9d      	cmp	r3, #157	@ 0x9d
 800177a:	d947      	bls.n	800180c <resetButtonPressed+0xa8>
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	b29b      	uxth	r3, r3
 8001780:	2bcf      	cmp	r3, #207	@ 0xcf
 8001782:	d843      	bhi.n	800180c <resetButtonPressed+0xa8>
		(coordinate_y >  23 && coordinate_y <  43))
 8001784:	883b      	ldrh	r3, [r7, #0]
 8001786:	b29b      	uxth	r3, r3
	if ((coordinate_x > 157 && coordinate_x < 208) &&
 8001788:	2b17      	cmp	r3, #23
 800178a:	d93f      	bls.n	800180c <resetButtonPressed+0xa8>
		(coordinate_y >  23 && coordinate_y <  43))
 800178c:	883b      	ldrh	r3, [r7, #0]
 800178e:	b29b      	uxth	r3, r3
 8001790:	2b2a      	cmp	r3, #42	@ 0x2a
 8001792:	d83b      	bhi.n	800180c <resetButtonPressed+0xa8>
	{
		ST7789_DrawFilledRectangle(10, 90, 220, 220, WHITE);
 8001794:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	23dc      	movs	r3, #220	@ 0xdc
 800179c:	22dc      	movs	r2, #220	@ 0xdc
 800179e:	215a      	movs	r1, #90	@ 0x5a
 80017a0:	200a      	movs	r0, #10
 80017a2:	f7ff ff51 	bl	8001648 <ST7789_DrawFilledRectangle>
		ST7789_DrawFilledRectangle(10, 10, 28, 28, WHITE);
 80017a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	231c      	movs	r3, #28
 80017ae:	221c      	movs	r2, #28
 80017b0:	210a      	movs	r1, #10
 80017b2:	200a      	movs	r0, #10
 80017b4:	f7ff ff48 	bl	8001648 <ST7789_DrawFilledRectangle>
		HAL_Delay(100);
 80017b8:	2064      	movs	r0, #100	@ 0x64
 80017ba:	f001 facb 	bl	8002d54 <HAL_Delay>
		ST7789_WriteString(45, 10, "Predicted: _", Font_7x10, RED, WHITE);
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <resetButtonPressed+0xb0>)
 80017c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c4:	9202      	str	r2, [sp, #8]
 80017c6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80017ca:	9201      	str	r2, [sp, #4]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	9200      	str	r2, [sp, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a11      	ldr	r2, [pc, #68]	@ (8001818 <resetButtonPressed+0xb4>)
 80017d4:	210a      	movs	r1, #10
 80017d6:	202d      	movs	r0, #45	@ 0x2d
 80017d8:	f7ff fee2 	bl	80015a0 <ST7789_WriteString>
		ST7789_WriteString(45, 25, "         ", Font_7x10, RED, WHITE);
 80017dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <resetButtonPressed+0xb0>)
 80017de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e2:	9202      	str	r2, [sp, #8]
 80017e4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80017e8:	9201      	str	r2, [sp, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	9200      	str	r2, [sp, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <resetButtonPressed+0xb8>)
 80017f2:	2119      	movs	r1, #25
 80017f4:	202d      	movs	r0, #45	@ 0x2d
 80017f6:	f7ff fed3 	bl	80015a0 <ST7789_WriteString>
		clearCNNinput(cnn_input);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff7e 	bl	80016fc <clearCNNinput>
		data_count ++;
 8001800:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <resetButtonPressed+0xbc>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <resetButtonPressed+0xbc>)
 800180a:	801a      	strh	r2, [r3, #0]
	}
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	08008378 	.word	0x08008378
 800181c:	08008388 	.word	0x08008388
 8001820:	200018fc 	.word	0x200018fc

08001824 <drawInterface>:

void drawInterface()
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af04      	add	r7, sp, #16
	// Turn screen Black
//	ST7789_InvertColors(ST7789_INVOFF);
	ST7789_Fill_Color(WHITE);
 800182a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800182e:	f7ff fcff 	bl	8001230 <ST7789_Fill_Color>
	HAL_Delay(500);
 8001832:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001836:	f001 fa8d 	bl	8002d54 <HAL_Delay>
//	ST7789_WriteString(10, 20, "Touch Test", Font_11x18, RED, WHITE);
//	HAL_Delay(500);

	// Draw resset button
	ST7789_DrawFilledRectangle(158, 8, 59, 22, BLACK);
 800183a:	2300      	movs	r3, #0
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2316      	movs	r3, #22
 8001840:	223b      	movs	r2, #59	@ 0x3b
 8001842:	2108      	movs	r1, #8
 8001844:	209e      	movs	r0, #158	@ 0x9e
 8001846:	f7ff feff 	bl	8001648 <ST7789_DrawFilledRectangle>
	ST7789_WriteString(160, 10, "RESET", Font_11x18, CYAN, BLACK);// 160~226 - 20~38
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <drawInterface+0xd4>)
 800184c:	2200      	movs	r2, #0
 800184e:	9202      	str	r2, [sp, #8]
 8001850:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001854:	9201      	str	r2, [sp, #4]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	9200      	str	r2, [sp, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a27      	ldr	r2, [pc, #156]	@ (80018fc <drawInterface+0xd8>)
 800185e:	210a      	movs	r1, #10
 8001860:	20a0      	movs	r0, #160	@ 0xa0
 8001862:	f7ff fe9d 	bl	80015a0 <ST7789_WriteString>

	// Draw CNN button
	ST7789_DrawFilledRectangle(158, 38, 59, 22, BLACK);
 8001866:	2300      	movs	r3, #0
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2316      	movs	r3, #22
 800186c:	223b      	movs	r2, #59	@ 0x3b
 800186e:	2126      	movs	r1, #38	@ 0x26
 8001870:	209e      	movs	r0, #158	@ 0x9e
 8001872:	f7ff fee9 	bl	8001648 <ST7789_DrawFilledRectangle>
	ST7789_WriteString(160, 40, "SEND ", Font_11x18, CYAN, BLACK);// 160~226 - 20~38
 8001876:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <drawInterface+0xd4>)
 8001878:	2200      	movs	r2, #0
 800187a:	9202      	str	r2, [sp, #8]
 800187c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001880:	9201      	str	r2, [sp, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	9200      	str	r2, [sp, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1d      	ldr	r2, [pc, #116]	@ (8001900 <drawInterface+0xdc>)
 800188a:	2128      	movs	r1, #40	@ 0x28
 800188c:	20a0      	movs	r0, #160	@ 0xa0
 800188e:	f7ff fe87 	bl	80015a0 <ST7789_WriteString>

	// Minimap border
	ST7789_DrawRectangle(8, 8, 40, 40, BLACK);
 8001892:	2300      	movs	r3, #0
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2328      	movs	r3, #40	@ 0x28
 8001898:	2228      	movs	r2, #40	@ 0x28
 800189a:	2108      	movs	r1, #8
 800189c:	2008      	movs	r0, #8
 800189e:	f7ff fdbd 	bl	800141c <ST7789_DrawRectangle>
	ST7789_WriteString(8, 45, "CNN input:", Font_7x10, RED, WHITE);
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <drawInterface+0xe0>)
 80018a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018a8:	9202      	str	r2, [sp, #8]
 80018aa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80018ae:	9201      	str	r2, [sp, #4]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	9200      	str	r2, [sp, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <drawInterface+0xe4>)
 80018b8:	212d      	movs	r1, #45	@ 0x2d
 80018ba:	2008      	movs	r0, #8
 80018bc:	f7ff fe70 	bl	80015a0 <ST7789_WriteString>
	ST7789_WriteString(45, 10, "Predicted: _", Font_7x10, RED, WHITE);
 80018c0:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <drawInterface+0xe0>)
 80018c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018c6:	9202      	str	r2, [sp, #8]
 80018c8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80018cc:	9201      	str	r2, [sp, #4]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	9200      	str	r2, [sp, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <drawInterface+0xe8>)
 80018d6:	210a      	movs	r1, #10
 80018d8:	202d      	movs	r0, #45	@ 0x2d
 80018da:	f7ff fe61 	bl	80015a0 <ST7789_WriteString>

	// Draw drawing border
	ST7789_DrawRectangle(8, 88, 232, 312, BLACK);
 80018de:	2300      	movs	r3, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	f44f 739c 	mov.w	r3, #312	@ 0x138
 80018e6:	22e8      	movs	r2, #232	@ 0xe8
 80018e8:	2158      	movs	r1, #88	@ 0x58
 80018ea:	2008      	movs	r0, #8
 80018ec:	f7ff fd96 	bl	800141c <ST7789_DrawRectangle>
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008
 80018fc:	08008394 	.word	0x08008394
 8001900:	0800839c 	.word	0x0800839c
 8001904:	20000000 	.word	0x20000000
 8001908:	080083a4 	.word	0x080083a4
 800190c:	08008378 	.word	0x08008378

08001910 <drawMinimap>:

void drawMinimap(volatile float *in_mat)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	// (x1, y1) = (10, 10)
	uint8_t i = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	73bb      	strb	r3, [r7, #14]
	uint16_t in_mat_idx = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	81bb      	strh	r3, [r7, #12]

	// Loop through matrix and draw pixels
	for (i = 0; i < INPUT_SIZE; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e033      	b.n	8001992 <drawMinimap+0x82>
	{
		for (j = 0; j < INPUT_SIZE; j++)
 800192a:	2300      	movs	r3, #0
 800192c:	73bb      	strb	r3, [r7, #14]
 800192e:	e02a      	b.n	8001986 <drawMinimap+0x76>
		{
			in_mat_idx = i * INPUT_SIZE + j;  // Calculate the index once per loop
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	00d2      	lsls	r2, r2, #3
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	b29a      	uxth	r2, r3
 800193e:	7bbb      	ldrb	r3, [r7, #14]
 8001940:	b29b      	uxth	r3, r3
 8001942:	4413      	add	r3, r2
 8001944:	81bb      	strh	r3, [r7, #12]
			uint16_t color = (in_mat[in_mat_idx] == 0) ? WHITE : RED; // Determine color
 8001946:	89bb      	ldrh	r3, [r7, #12]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	d102      	bne.n	8001962 <drawMinimap+0x52>
 800195c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001960:	e001      	b.n	8001966 <drawMinimap+0x56>
 8001962:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001966:	817b      	strh	r3, [r7, #10]
			ST7789_DrawPixel(10 + i, 10 + j, color);  // Draw pixel with selected color
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	b29b      	uxth	r3, r3
 800196c:	330a      	adds	r3, #10
 800196e:	b298      	uxth	r0, r3
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	b29b      	uxth	r3, r3
 8001974:	330a      	adds	r3, #10
 8001976:	b29b      	uxth	r3, r3
 8001978:	897a      	ldrh	r2, [r7, #10]
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff fc8c 	bl	8001298 <ST7789_DrawPixel>
		for (j = 0; j < INPUT_SIZE; j++)
 8001980:	7bbb      	ldrb	r3, [r7, #14]
 8001982:	3301      	adds	r3, #1
 8001984:	73bb      	strb	r3, [r7, #14]
 8001986:	7bbb      	ldrb	r3, [r7, #14]
 8001988:	2b1b      	cmp	r3, #27
 800198a:	d9d1      	bls.n	8001930 <drawMinimap+0x20>
	for (i = 0; i < INPUT_SIZE; i++)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	3301      	adds	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	2b1b      	cmp	r3, #27
 8001996:	d9c8      	bls.n	800192a <drawMinimap+0x1a>
		}
	}
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b09c      	sub	sp, #112	@ 0x70
 80019a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019aa:	f001 f961 	bl	8002c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ae:	f000 fa81 	bl	8001eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b2:	f000 fba1 	bl	80020f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80019b6:	f000 fb7f 	bl	80020b8 <MX_DMA_Init>
  MX_SPI1_Init();
 80019ba:	f000 fae5 	bl	8001f88 <MX_SPI1_Init>
  MX_SPI2_Init();
 80019be:	f000 fb19 	bl	8001ff4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80019c2:	f000 fb4f 	bl	8002064 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 80019c6:	f7ff fb8d 	bl	80010e4 <ST7789_Init>

  xpt2046_spi(&hspi2);
 80019ca:	4852      	ldr	r0, [pc, #328]	@ (8001b14 <main+0x170>)
 80019cc:	f000 ff68 	bl	80028a0 <xpt2046_spi>
  xpt2046_init();
 80019d0:	f000 fe68 	bl	80026a4 <xpt2046_init>

  ST7789_Init();
 80019d4:	f7ff fb86 	bl	80010e4 <ST7789_Init>
  ST7789_Init();
 80019d8:	f7ff fb84 	bl	80010e4 <ST7789_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  ST7789_Test();
  char print_string[30];
  uint8_t change_flag = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  volatile uint16_t coordinate_x = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  volatile uint16_t coordinate_y = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (uint16_t i = 0; i < INPUT_SIZE; i++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80019f0:	e025      	b.n	8001a3e <main+0x9a>
	{
		for (uint16_t j = 0; j < INPUT_SIZE; j++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80019f8:	e018      	b.n	8001a2c <main+0x88>
		{
			uint16_t in_mat_idx = i * INPUT_SIZE + j;  // Calculate the index once per loop
 80019fa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80019fe:	461a      	mov	r2, r3
 8001a00:	00d2      	lsls	r2, r2, #3
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			cnn_input[in_mat_idx] = 0;
 8001a12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001a16:	4a40      	ldr	r2, [pc, #256]	@ (8001b18 <main+0x174>)
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
		for (uint16_t j = 0; j < INPUT_SIZE; j++)
 8001a22:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001a26:	3301      	adds	r3, #1
 8001a28:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8001a2c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001a30:	2b1b      	cmp	r3, #27
 8001a32:	d9e2      	bls.n	80019fa <main+0x56>
	for (uint16_t i = 0; i < INPUT_SIZE; i++)
 8001a34:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8001a3e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001a42:	2b1b      	cmp	r3, #27
 8001a44:	d9d5      	bls.n	80019f2 <main+0x4e>
		}
	}

  drawInterface();
 8001a46:	f7ff feed 	bl	8001824 <drawInterface>
  while (1)
  {
	uint16_t pre_coordinate_x = coordinate_x;
 8001a4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a4c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	uint16_t pre_coordinate_y = coordinate_y;
 8001a50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a52:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	xpt2046_read_position(&coordinate_x, &coordinate_y);
 8001a56:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001a5a:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 f8e3 	bl	8002c2c <xpt2046_read_position>
	if (coordinate_x == 0 && coordinate_y == 0)
 8001a66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d15c      	bne.n	8001b28 <main+0x184>
 8001a6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d158      	bne.n	8001b28 <main+0x184>
	{
		// do smt
		if (change_flag != 0)
 8001a76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 808b 	beq.w	8001b96 <main+0x1f2>
		{
			ST7789_DrawFilledRectangle(38, 66, 60, 10, WHITE);
 8001a80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	230a      	movs	r3, #10
 8001a88:	223c      	movs	r2, #60	@ 0x3c
 8001a8a:	2142      	movs	r1, #66	@ 0x42
 8001a8c:	2026      	movs	r0, #38	@ 0x26
 8001a8e:	f7ff fddb 	bl	8001648 <ST7789_DrawFilledRectangle>
			sprintf(print_string,"x = 0");
 8001a92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a96:	4921      	ldr	r1, [pc, #132]	@ (8001b1c <main+0x178>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f004 fad9 	bl	8006050 <siprintf>
			ST7789_WriteString(10, 66, print_string, Font_7x10, RED, WHITE);
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <main+0x17c>)
 8001aa0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001aa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aa8:	9202      	str	r2, [sp, #8]
 8001aaa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001aae:	9201      	str	r2, [sp, #4]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	9200      	str	r2, [sp, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	460a      	mov	r2, r1
 8001ab8:	2142      	movs	r1, #66	@ 0x42
 8001aba:	200a      	movs	r0, #10
 8001abc:	f7ff fd70 	bl	80015a0 <ST7789_WriteString>
			HAL_Delay(50);
 8001ac0:	2032      	movs	r0, #50	@ 0x32
 8001ac2:	f001 f947 	bl	8002d54 <HAL_Delay>
			ST7789_DrawFilledRectangle(38, 78, 60, 9, WHITE);
 8001ac6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2309      	movs	r3, #9
 8001ace:	223c      	movs	r2, #60	@ 0x3c
 8001ad0:	214e      	movs	r1, #78	@ 0x4e
 8001ad2:	2026      	movs	r0, #38	@ 0x26
 8001ad4:	f7ff fdb8 	bl	8001648 <ST7789_DrawFilledRectangle>
			sprintf(print_string,"y = 0");
 8001ad8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001adc:	4911      	ldr	r1, [pc, #68]	@ (8001b24 <main+0x180>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 fab6 	bl	8006050 <siprintf>
			ST7789_WriteString(10, 78, print_string, Font_7x10, RED, WHITE);
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <main+0x17c>)
 8001ae6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aee:	9202      	str	r2, [sp, #8]
 8001af0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001af4:	9201      	str	r2, [sp, #4]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	9200      	str	r2, [sp, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	460a      	mov	r2, r1
 8001afe:	214e      	movs	r1, #78	@ 0x4e
 8001b00:	200a      	movs	r0, #10
 8001b02:	f7ff fd4d 	bl	80015a0 <ST7789_WriteString>
			HAL_Delay(50);
 8001b06:	2032      	movs	r0, #50	@ 0x32
 8001b08:	f001 f924 	bl	8002d54 <HAL_Delay>
			change_flag = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (change_flag != 0)
 8001b12:	e040      	b.n	8001b96 <main+0x1f2>
 8001b14:	20000bbc 	.word	0x20000bbc
 8001b18:	20000cbc 	.word	0x20000cbc
 8001b1c:	080083b0 	.word	0x080083b0
 8001b20:	20000000 	.word	0x20000000
 8001b24:	080083b8 	.word	0x080083b8
		}
	}
	else
	{
		// update screen
		sprintf(print_string,"x = %d", coordinate_x);
 8001b28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b32:	49a7      	ldr	r1, [pc, #668]	@ (8001dd0 <main+0x42c>)
 8001b34:	4618      	mov	r0, r3
 8001b36:	f004 fa8b 	bl	8006050 <siprintf>
		ST7789_WriteString(10, 66, print_string, Font_7x10, RED, WHITE);
 8001b3a:	4ba6      	ldr	r3, [pc, #664]	@ (8001dd4 <main+0x430>)
 8001b3c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b44:	9202      	str	r2, [sp, #8]
 8001b46:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001b4a:	9201      	str	r2, [sp, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	9200      	str	r2, [sp, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	460a      	mov	r2, r1
 8001b54:	2142      	movs	r1, #66	@ 0x42
 8001b56:	200a      	movs	r0, #10
 8001b58:	f7ff fd22 	bl	80015a0 <ST7789_WriteString>
//		HAL_Delay(100);
		sprintf(print_string,"y = %d", coordinate_y );
 8001b5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b66:	499c      	ldr	r1, [pc, #624]	@ (8001dd8 <main+0x434>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f004 fa71 	bl	8006050 <siprintf>
		ST7789_WriteString(10, 78, print_string, Font_7x10, RED, WHITE);
 8001b6e:	4b99      	ldr	r3, [pc, #612]	@ (8001dd4 <main+0x430>)
 8001b70:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001b74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b78:	9202      	str	r2, [sp, #8]
 8001b7a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001b7e:	9201      	str	r2, [sp, #4]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	9200      	str	r2, [sp, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	460a      	mov	r2, r1
 8001b88:	214e      	movs	r1, #78	@ 0x4e
 8001b8a:	200a      	movs	r0, #10
 8001b8c:	f7ff fd08 	bl	80015a0 <ST7789_WriteString>
//		HAL_Delay(100);
		change_flag = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

//	// Draw function
	if (
			// bounding of draw box
			(coordinate_x >  25 && coordinate_x < 221) &&
 8001b96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b98:	b29b      	uxth	r3, r3
	if (
 8001b9a:	2b19      	cmp	r3, #25
 8001b9c:	f240 80c9 	bls.w	8001d32 <main+0x38e>
			(coordinate_x >  25 && coordinate_x < 221) &&
 8001ba0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2bdc      	cmp	r3, #220	@ 0xdc
 8001ba6:	f200 80c4 	bhi.w	8001d32 <main+0x38e>
			(coordinate_y > 108 && coordinate_y < 307) &&
 8001baa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bac:	b29b      	uxth	r3, r3
			(coordinate_x >  25 && coordinate_x < 221) &&
 8001bae:	2b6c      	cmp	r3, #108	@ 0x6c
 8001bb0:	f240 80bf 	bls.w	8001d32 <main+0x38e>
			(coordinate_y > 108 && coordinate_y < 307) &&
 8001bb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8001bbc:	f200 80b9 	bhi.w	8001d32 <main+0x38e>
			// prevent jumping in value
			(coordinate_x < pre_coordinate_x + 10) && (coordinate_x > pre_coordinate_x - 10) &&
 8001bc0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001bc4:	3309      	adds	r3, #9
 8001bc6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bc8:	b292      	uxth	r2, r2
			(coordinate_y > 108 && coordinate_y < 307) &&
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	f2c0 80b1 	blt.w	8001d32 <main+0x38e>
			(coordinate_x < pre_coordinate_x + 10) && (coordinate_x > pre_coordinate_x - 10) &&
 8001bd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001bd4:	3b09      	subs	r3, #9
 8001bd6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bd8:	b292      	uxth	r2, r2
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	f300 80a9 	bgt.w	8001d32 <main+0x38e>
			(coordinate_y < pre_coordinate_y + 10) && (coordinate_y > pre_coordinate_y - 10)
 8001be0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001be4:	3309      	adds	r3, #9
 8001be6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001be8:	b292      	uxth	r2, r2
			(coordinate_x < pre_coordinate_x + 10) && (coordinate_x > pre_coordinate_x - 10) &&
 8001bea:	4293      	cmp	r3, r2
 8001bec:	f2c0 80a1 	blt.w	8001d32 <main+0x38e>
			(coordinate_y < pre_coordinate_y + 10) && (coordinate_y > pre_coordinate_y - 10)
 8001bf0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001bf4:	3b09      	subs	r3, #9
 8001bf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bf8:	b292      	uxth	r2, r2
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	f300 8099 	bgt.w	8001d32 <main+0x38e>
		)
	{
		ST7789_DrawFilledRectangle(coordinate_x - 4, coordinate_y - 4, 8, 8, RED);
 8001c00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b04      	subs	r3, #4
 8001c06:	b298      	uxth	r0, r3
 8001c08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b04      	subs	r3, #4
 8001c0e:	b299      	uxth	r1, r3
 8001c10:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2308      	movs	r3, #8
 8001c18:	2208      	movs	r2, #8
 8001c1a:	f7ff fd15 	bl	8001648 <ST7789_DrawFilledRectangle>

		// update input mat
		uint8_t cnn_input_idx_x = (coordinate_x - 25)/ 7;
 8001c1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b19      	subs	r3, #25
 8001c24:	4a6d      	ldr	r2, [pc, #436]	@ (8001ddc <main+0x438>)
 8001c26:	fb82 1203 	smull	r1, r2, r2, r3
 8001c2a:	441a      	add	r2, r3
 8001c2c:	1092      	asrs	r2, r2, #2
 8001c2e:	17db      	asrs	r3, r3, #31
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		uint8_t cnn_input_idx_y = (coordinate_y - 108)/ 7;
 8001c36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3b6c      	subs	r3, #108	@ 0x6c
 8001c3c:	4a67      	ldr	r2, [pc, #412]	@ (8001ddc <main+0x438>)
 8001c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c42:	441a      	add	r2, r3
 8001c44:	1092      	asrs	r2, r2, #2
 8001c46:	17db      	asrs	r3, r3, #31
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
		// make the input bolder - enlarge the input to 4 pixel
		uint16_t cnn_input_index00 = cnn_input_idx_x * INPUT_SIZE + cnn_input_idx_y;
 8001c4e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	00d2      	lsls	r2, r2, #3
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
//		uint16_t cnn_input_index01 = (cnn_input_idx_x - 1) * INPUT_SIZE + cnn_input_idx_y - 1;
//		uint16_t cnn_input_index02 = (cnn_input_idx_x - 1) * INPUT_SIZE + cnn_input_idx_y;
//		uint16_t cnn_input_index03 = (cnn_input_idx_x - 1) * INPUT_SIZE + cnn_input_idx_y + 1;
//		uint16_t cnn_input_index04 = cnn_input_idx_x * INPUT_SIZE + cnn_input_idx_y - 1;
		uint16_t cnn_input_index05 = cnn_input_idx_x * INPUT_SIZE + cnn_input_idx_y + 1;
 8001c6a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	00d2      	lsls	r2, r2, #3
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
//		uint16_t cnn_input_index06 = (cnn_input_idx_x + 1) * INPUT_SIZE + cnn_input_idx_y - 1;
		uint16_t cnn_input_index07 = (cnn_input_idx_x + 1) * INPUT_SIZE + cnn_input_idx_y;
 8001c8a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001c8e:	3301      	adds	r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	00d2      	lsls	r2, r2, #3
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		uint16_t cnn_input_index08 = (cnn_input_idx_x + 1) * INPUT_SIZE + cnn_input_idx_y + 1;
 8001ca8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001cac:	3301      	adds	r3, #1
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	00d2      	lsls	r2, r2, #3
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

		if (cnn_input_index00 < INPUT_SIZE * INPUT_SIZE)
 8001cca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cce:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 8001cd2:	d207      	bcs.n	8001ce4 <main+0x340>
		{
		    cnn_input[cnn_input_index00] = 1.0f;
 8001cd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cd8:	4a41      	ldr	r2, [pc, #260]	@ (8001de0 <main+0x43c>)
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ce2:	601a      	str	r2, [r3, #0]
//		if (cnn_input_index04 < INPUT_SIZE * INPUT_SIZE)
//		{
//			cnn_input[cnn_input_index04] = 1.0f;
//		}

		if (cnn_input_index05 < INPUT_SIZE * INPUT_SIZE)
 8001ce4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001ce8:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 8001cec:	d207      	bcs.n	8001cfe <main+0x35a>
		{
			cnn_input[cnn_input_index05] = 1.0f;
 8001cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001cf2:	4a3b      	ldr	r2, [pc, #236]	@ (8001de0 <main+0x43c>)
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001cfc:	601a      	str	r2, [r3, #0]
//		if (cnn_input_index06 < INPUT_SIZE * INPUT_SIZE)
//		{
//			cnn_input[cnn_input_index06] = 1.0f;
//		}

		if (cnn_input_index07 < INPUT_SIZE * INPUT_SIZE)
 8001cfe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001d02:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 8001d06:	d207      	bcs.n	8001d18 <main+0x374>
		{
			cnn_input[cnn_input_index07] = 1.0f;
 8001d08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001d0c:	4a34      	ldr	r2, [pc, #208]	@ (8001de0 <main+0x43c>)
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d16:	601a      	str	r2, [r3, #0]
		}

		if (cnn_input_index08 < INPUT_SIZE * INPUT_SIZE)
 8001d18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d1c:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 8001d20:	d207      	bcs.n	8001d32 <main+0x38e>
		{
			cnn_input[cnn_input_index08] = 1.0f;
 8001d22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d26:	4a2e      	ldr	r2, [pc, #184]	@ (8001de0 <main+0x43c>)
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d30:	601a      	str	r2, [r3, #0]
	}

	uint8_t buffer_uart[30];
	uint16_t in_mat_idx;
	// CNN button: SEND DATA TO PC BUTTON
	if ((coordinate_x > 157 && coordinate_x < 208) &&
 8001d32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2b9d      	cmp	r3, #157	@ 0x9d
 8001d38:	f240 80a4 	bls.w	8001e84 <main+0x4e0>
 8001d3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2bcf      	cmp	r3, #207	@ 0xcf
 8001d42:	f200 809f 	bhi.w	8001e84 <main+0x4e0>
	    (coordinate_y > 59 && coordinate_y < 71)) {
 8001d46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d48:	b29b      	uxth	r3, r3
	if ((coordinate_x > 157 && coordinate_x < 208) &&
 8001d4a:	2b3b      	cmp	r3, #59	@ 0x3b
 8001d4c:	f240 809a 	bls.w	8001e84 <main+0x4e0>
	    (coordinate_y > 59 && coordinate_y < 71)) {
 8001d50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b46      	cmp	r3, #70	@ 0x46
 8001d56:	f200 8095 	bhi.w	8001e84 <main+0x4e0>
	    sprintf((char *)buffer_uart, "A %d\n", data_count);
 8001d5a:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <main+0x440>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	4921      	ldr	r1, [pc, #132]	@ (8001de8 <main+0x444>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f004 f973 	bl	8006050 <siprintf>
//	    sprintf((char *)buffer_uart, "B %d\n", data_count);
	    HAL_UART_Transmit(&huart1, buffer_uart, strlen((char *)buffer_uart), 100);
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fa87 	bl	8000280 <strlen>
 8001d72:	4603      	mov	r3, r0
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	1d39      	adds	r1, r7, #4
 8001d78:	2364      	movs	r3, #100	@ 0x64
 8001d7a:	481c      	ldr	r0, [pc, #112]	@ (8001dec <main+0x448>)
 8001d7c:	f003 f892 	bl	8004ea4 <HAL_UART_Transmit>
	    for (uint8_t i = 0; i < INPUT_SIZE; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 8001d86:	e056      	b.n	8001e36 <main+0x492>
	    	{
	    		for (uint8_t j = 0; j < INPUT_SIZE; j++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
 8001d8e:	e049      	b.n	8001e24 <main+0x480>
	    		{
	    			in_mat_idx = j * INPUT_SIZE + i;  // Calculate the index once per loop
 8001d90:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	00d2      	lsls	r2, r2, #3
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

	    	        if (cnn_input[in_mat_idx] != 0) {
 8001dac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001db0:	4a0b      	ldr	r2, [pc, #44]	@ (8001de0 <main+0x43c>)
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	d017      	beq.n	8001df4 <main+0x450>
	    	            sprintf((char *)buffer_uart, "1, ");
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	490a      	ldr	r1, [pc, #40]	@ (8001df0 <main+0x44c>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 f941 	bl	8006050 <siprintf>
 8001dce:	e016      	b.n	8001dfe <main+0x45a>
 8001dd0:	080083c0 	.word	0x080083c0
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	080083c8 	.word	0x080083c8
 8001ddc:	92492493 	.word	0x92492493
 8001de0:	20000cbc 	.word	0x20000cbc
 8001de4:	200018fc 	.word	0x200018fc
 8001de8:	080083d0 	.word	0x080083d0
 8001dec:	20000c74 	.word	0x20000c74
 8001df0:	080083d8 	.word	0x080083d8
	    	        } else {
	    	            sprintf((char *)buffer_uart, "0, ");
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	4929      	ldr	r1, [pc, #164]	@ (8001e9c <main+0x4f8>)
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f004 f929 	bl	8006050 <siprintf>
	    	        }
	    	        HAL_UART_Transmit(&huart1, buffer_uart, strlen((char *)buffer_uart), 100);
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fa3d 	bl	8000280 <strlen>
 8001e06:	4603      	mov	r3, r0
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	1d39      	adds	r1, r7, #4
 8001e0c:	2364      	movs	r3, #100	@ 0x64
 8001e0e:	4824      	ldr	r0, [pc, #144]	@ (8001ea0 <main+0x4fc>)
 8001e10:	f003 f848 	bl	8004ea4 <HAL_UART_Transmit>
	    	        HAL_Delay(5);
 8001e14:	2005      	movs	r0, #5
 8001e16:	f000 ff9d 	bl	8002d54 <HAL_Delay>
	    		for (uint8_t j = 0; j < INPUT_SIZE; j++)
 8001e1a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
 8001e24:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001e28:	2b1b      	cmp	r3, #27
 8001e2a:	d9b1      	bls.n	8001d90 <main+0x3ec>
	    for (uint8_t i = 0; i < INPUT_SIZE; i++)
 8001e2c:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001e30:	3301      	adds	r3, #1
 8001e32:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 8001e36:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001e3a:	2b1b      	cmp	r3, #27
 8001e3c:	d9a4      	bls.n	8001d88 <main+0x3e4>
	    		}
	    	}

	    sprintf((char *)buffer_uart, "\nDone\n");
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4918      	ldr	r1, [pc, #96]	@ (8001ea4 <main+0x500>)
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 f904 	bl	8006050 <siprintf>
	    HAL_UART_Transmit(&huart1, buffer_uart, strlen((char *)buffer_uart), 100);
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fa18 	bl	8000280 <strlen>
 8001e50:	4603      	mov	r3, r0
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	1d39      	adds	r1, r7, #4
 8001e56:	2364      	movs	r3, #100	@ 0x64
 8001e58:	4811      	ldr	r0, [pc, #68]	@ (8001ea0 <main+0x4fc>)
 8001e5a:	f003 f823 	bl	8004ea4 <HAL_UART_Transmit>
	    HAL_Delay(1000);
 8001e5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e62:	f000 ff77 	bl	8002d54 <HAL_Delay>
	    ST7789_WriteString(45, 25, "SENT done", Font_7x10, RED, WHITE);
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <main+0x504>)
 8001e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e6c:	9202      	str	r2, [sp, #8]
 8001e6e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e72:	9201      	str	r2, [sp, #4]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	9200      	str	r2, [sp, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001eac <main+0x508>)
 8001e7c:	2119      	movs	r1, #25
 8001e7e:	202d      	movs	r0, #45	@ 0x2d
 8001e80:	f7ff fb8e 	bl	80015a0 <ST7789_WriteString>
	}


	// draw mini drawin plane
	drawMinimap(cnn_input);
 8001e84:	480a      	ldr	r0, [pc, #40]	@ (8001eb0 <main+0x50c>)
 8001e86:	f7ff fd43 	bl	8001910 <drawMinimap>

	// Reset button
	resetButtonPressed(cnn_input,  coordinate_x, coordinate_y);
 8001e8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e90:	b292      	uxth	r2, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	4806      	ldr	r0, [pc, #24]	@ (8001eb0 <main+0x50c>)
 8001e96:	f7ff fc65 	bl	8001764 <resetButtonPressed>
  {
 8001e9a:	e5d6      	b.n	8001a4a <main+0xa6>
 8001e9c:	080083dc 	.word	0x080083dc
 8001ea0:	20000c74 	.word	0x20000c74
 8001ea4:	080083e0 	.word	0x080083e0
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	080083e8 	.word	0x080083e8
 8001eb0:	20000cbc 	.word	0x20000cbc

08001eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b094      	sub	sp, #80	@ 0x50
 8001eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eba:	f107 0320 	add.w	r3, r7, #32
 8001ebe:	2230      	movs	r2, #48	@ 0x30
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 f9bc 	bl	8006240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	4b28      	ldr	r3, [pc, #160]	@ (8001f80 <SystemClock_Config+0xcc>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	4a27      	ldr	r2, [pc, #156]	@ (8001f80 <SystemClock_Config+0xcc>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee8:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <SystemClock_Config+0xcc>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	4b22      	ldr	r3, [pc, #136]	@ (8001f84 <SystemClock_Config+0xd0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f00:	4a20      	ldr	r2, [pc, #128]	@ (8001f84 <SystemClock_Config+0xd0>)
 8001f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <SystemClock_Config+0xd0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f14:	2301      	movs	r3, #1
 8001f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f28:	2319      	movs	r3, #25
 8001f2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f2c:	23a8      	movs	r3, #168	@ 0xa8
 8001f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f30:	2302      	movs	r3, #2
 8001f32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f34:	2304      	movs	r3, #4
 8001f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f38:	f107 0320 	add.w	r3, r7, #32
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f001 fd65 	bl	8003a0c <HAL_RCC_OscConfig>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f48:	f000 f94a 	bl	80021e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f4c:	230f      	movs	r3, #15
 8001f4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f50:	2302      	movs	r3, #2
 8001f52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	2102      	movs	r1, #2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 ffc7 	bl	8003efc <HAL_RCC_ClockConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f74:	f000 f934 	bl	80021e0 <Error_Handler>
  }
}
 8001f78:	bf00      	nop
 8001f7a:	3750      	adds	r7, #80	@ 0x50
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40007000 	.word	0x40007000

08001f88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001f8e:	4a18      	ldr	r2, [pc, #96]	@ (8001ff0 <MX_SPI1_Init+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f92:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001f94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fa8:	2202      	movs	r2, #2
 8001faa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fd4:	220a      	movs	r2, #10
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fd8:	4804      	ldr	r0, [pc, #16]	@ (8001fec <MX_SPI1_Init+0x64>)
 8001fda:	f002 f96f 	bl	80042bc <HAL_SPI_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fe4:	f000 f8fc 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000b64 	.word	0x20000b64
 8001ff0:	40013000 	.word	0x40013000

08001ff4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	@ (800205c <MX_SPI2_Init+0x68>)
 8001ffa:	4a19      	ldr	r2, [pc, #100]	@ (8002060 <MX_SPI2_Init+0x6c>)
 8001ffc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ffe:	4b17      	ldr	r3, [pc, #92]	@ (800205c <MX_SPI2_Init+0x68>)
 8002000:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002004:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <MX_SPI2_Init+0x68>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <MX_SPI2_Init+0x68>)
 800200e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002012:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <MX_SPI2_Init+0x68>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <MX_SPI2_Init+0x68>)
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002020:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <MX_SPI2_Init+0x68>)
 8002022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002026:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <MX_SPI2_Init+0x68>)
 800202a:	2210      	movs	r2, #16
 800202c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800202e:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <MX_SPI2_Init+0x68>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002034:	4b09      	ldr	r3, [pc, #36]	@ (800205c <MX_SPI2_Init+0x68>)
 8002036:	2200      	movs	r2, #0
 8002038:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800203a:	4b08      	ldr	r3, [pc, #32]	@ (800205c <MX_SPI2_Init+0x68>)
 800203c:	2200      	movs	r2, #0
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <MX_SPI2_Init+0x68>)
 8002042:	220a      	movs	r2, #10
 8002044:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	@ (800205c <MX_SPI2_Init+0x68>)
 8002048:	f002 f938 	bl	80042bc <HAL_SPI_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002052:	f000 f8c5 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000bbc 	.word	0x20000bbc
 8002060:	40003800 	.word	0x40003800

08002064 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <MX_USART1_UART_Init+0x4c>)
 800206a:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <MX_USART1_UART_Init+0x50>)
 800206c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <MX_USART1_UART_Init+0x4c>)
 8002070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002074:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <MX_USART1_UART_Init+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <MX_USART1_UART_Init+0x4c>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <MX_USART1_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <MX_USART1_UART_Init+0x4c>)
 800208a:	220c      	movs	r2, #12
 800208c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208e:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <MX_USART1_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <MX_USART1_UART_Init+0x4c>)
 8002096:	2200      	movs	r2, #0
 8002098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800209a:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <MX_USART1_UART_Init+0x4c>)
 800209c:	f002 feb2 	bl	8004e04 <HAL_UART_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020a6:	f000 f89b 	bl	80021e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000c74 	.word	0x20000c74
 80020b4:	40011000 	.word	0x40011000

080020b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <MX_DMA_Init+0x3c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	4a0b      	ldr	r2, [pc, #44]	@ (80020f4 <MX_DMA_Init+0x3c>)
 80020c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <MX_DMA_Init+0x3c>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	203b      	movs	r0, #59	@ 0x3b
 80020e0:	f000 ff37 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80020e4:	203b      	movs	r0, #59	@ 0x3b
 80020e6:	f000 ff50 	bl	8002f8a <HAL_NVIC_EnableIRQ>

}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b30      	ldr	r3, [pc, #192]	@ (80021d4 <MX_GPIO_Init+0xdc>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a2f      	ldr	r2, [pc, #188]	@ (80021d4 <MX_GPIO_Init+0xdc>)
 8002118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <MX_GPIO_Init+0xdc>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <MX_GPIO_Init+0xdc>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	4a28      	ldr	r2, [pc, #160]	@ (80021d4 <MX_GPIO_Init+0xdc>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	@ 0x30
 800213a:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <MX_GPIO_Init+0xdc>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <MX_GPIO_Init+0xdc>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4a21      	ldr	r2, [pc, #132]	@ (80021d4 <MX_GPIO_Init+0xdc>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b1f      	ldr	r3, [pc, #124]	@ (80021d4 <MX_GPIO_Init+0xdc>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	211a      	movs	r1, #26
 8002166:	481c      	ldr	r0, [pc, #112]	@ (80021d8 <MX_GPIO_Init+0xe0>)
 8002168:	f001 fc36 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002172:	481a      	ldr	r0, [pc, #104]	@ (80021dc <MX_GPIO_Init+0xe4>)
 8002174:	f001 fc30 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin;
 8002178:	231a      	movs	r3, #26
 800217a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800217c:	2311      	movs	r3, #17
 800217e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002184:	2302      	movs	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	4619      	mov	r1, r3
 800218e:	4812      	ldr	r0, [pc, #72]	@ (80021d8 <MX_GPIO_Init+0xe0>)
 8002190:	f001 fa86 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8002194:	2302      	movs	r3, #2
 8002196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002198:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800219c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	4619      	mov	r1, r3
 80021a8:	480c      	ldr	r0, [pc, #48]	@ (80021dc <MX_GPIO_Init+0xe4>)
 80021aa:	f001 fa79 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 80021ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021b4:	2311      	movs	r3, #17
 80021b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	4619      	mov	r1, r3
 80021c6:	4805      	ldr	r0, [pc, #20]	@ (80021dc <MX_GPIO_Init+0xe4>)
 80021c8:	f001 fa6a 	bl	80036a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021cc:	bf00      	nop
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020400 	.word	0x40020400

080021e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e4:	b672      	cpsid	i
}
 80021e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <Error_Handler+0x8>

080021ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <HAL_MspInit+0x4c>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002238 <HAL_MspInit+0x4c>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002200:	6453      	str	r3, [r2, #68]	@ 0x44
 8002202:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <HAL_MspInit+0x4c>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <HAL_MspInit+0x4c>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	4a08      	ldr	r2, [pc, #32]	@ (8002238 <HAL_MspInit+0x4c>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800221c:	6413      	str	r3, [r2, #64]	@ 0x40
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_MspInit+0x4c>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800

0800223c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	@ 0x30
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a49      	ldr	r2, [pc, #292]	@ (8002380 <HAL_SPI_MspInit+0x144>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d15a      	bne.n	8002314 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	4b48      	ldr	r3, [pc, #288]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	4a47      	ldr	r2, [pc, #284]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 8002268:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800226c:	6453      	str	r3, [r2, #68]	@ 0x44
 800226e:	4b45      	ldr	r3, [pc, #276]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	4b41      	ldr	r3, [pc, #260]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	4a40      	ldr	r2, [pc, #256]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6313      	str	r3, [r2, #48]	@ 0x30
 800228a:	4b3e      	ldr	r3, [pc, #248]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002296:	23e0      	movs	r3, #224	@ 0xe0
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a6:	2305      	movs	r3, #5
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	4619      	mov	r1, r3
 80022b0:	4835      	ldr	r0, [pc, #212]	@ (8002388 <HAL_SPI_MspInit+0x14c>)
 80022b2:	f001 f9f5 	bl	80036a0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80022b6:	4b35      	ldr	r3, [pc, #212]	@ (800238c <HAL_SPI_MspInit+0x150>)
 80022b8:	4a35      	ldr	r2, [pc, #212]	@ (8002390 <HAL_SPI_MspInit+0x154>)
 80022ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80022bc:	4b33      	ldr	r3, [pc, #204]	@ (800238c <HAL_SPI_MspInit+0x150>)
 80022be:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80022c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022c4:	4b31      	ldr	r3, [pc, #196]	@ (800238c <HAL_SPI_MspInit+0x150>)
 80022c6:	2240      	movs	r2, #64	@ 0x40
 80022c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ca:	4b30      	ldr	r3, [pc, #192]	@ (800238c <HAL_SPI_MspInit+0x150>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022d0:	4b2e      	ldr	r3, [pc, #184]	@ (800238c <HAL_SPI_MspInit+0x150>)
 80022d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022d8:	4b2c      	ldr	r3, [pc, #176]	@ (800238c <HAL_SPI_MspInit+0x150>)
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022de:	4b2b      	ldr	r3, [pc, #172]	@ (800238c <HAL_SPI_MspInit+0x150>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80022e4:	4b29      	ldr	r3, [pc, #164]	@ (800238c <HAL_SPI_MspInit+0x150>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022ea:	4b28      	ldr	r3, [pc, #160]	@ (800238c <HAL_SPI_MspInit+0x150>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022f0:	4b26      	ldr	r3, [pc, #152]	@ (800238c <HAL_SPI_MspInit+0x150>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80022f6:	4825      	ldr	r0, [pc, #148]	@ (800238c <HAL_SPI_MspInit+0x150>)
 80022f8:	f000 fe62 	bl	8002fc0 <HAL_DMA_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8002302:	f7ff ff6d 	bl	80021e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a20      	ldr	r2, [pc, #128]	@ (800238c <HAL_SPI_MspInit+0x150>)
 800230a:	649a      	str	r2, [r3, #72]	@ 0x48
 800230c:	4a1f      	ldr	r2, [pc, #124]	@ (800238c <HAL_SPI_MspInit+0x150>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002312:	e031      	b.n	8002378 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1e      	ldr	r2, [pc, #120]	@ (8002394 <HAL_SPI_MspInit+0x158>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d12c      	bne.n	8002378 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b18      	ldr	r3, [pc, #96]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	4a17      	ldr	r2, [pc, #92]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800232c:	6413      	str	r3, [r2, #64]	@ 0x40
 800232e:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	4a10      	ldr	r2, [pc, #64]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6313      	str	r3, [r2, #48]	@ 0x30
 800234a:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <HAL_SPI_MspInit+0x148>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002356:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 800235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002368:	2305      	movs	r3, #5
 800236a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4619      	mov	r1, r3
 8002372:	4809      	ldr	r0, [pc, #36]	@ (8002398 <HAL_SPI_MspInit+0x15c>)
 8002374:	f001 f994 	bl	80036a0 <HAL_GPIO_Init>
}
 8002378:	bf00      	nop
 800237a:	3730      	adds	r7, #48	@ 0x30
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40013000 	.word	0x40013000
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000
 800238c:	20000c14 	.word	0x20000c14
 8002390:	40026458 	.word	0x40026458
 8002394:	40003800 	.word	0x40003800
 8002398:	40020400 	.word	0x40020400

0800239c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	@ 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a19      	ldr	r2, [pc, #100]	@ (8002420 <HAL_UART_MspInit+0x84>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d12c      	bne.n	8002418 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	4b18      	ldr	r3, [pc, #96]	@ (8002424 <HAL_UART_MspInit+0x88>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	4a17      	ldr	r2, [pc, #92]	@ (8002424 <HAL_UART_MspInit+0x88>)
 80023c8:	f043 0310 	orr.w	r3, r3, #16
 80023cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HAL_UART_MspInit+0x88>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_UART_MspInit+0x88>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4a10      	ldr	r2, [pc, #64]	@ (8002424 <HAL_UART_MspInit+0x88>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <HAL_UART_MspInit+0x88>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002408:	2307      	movs	r3, #7
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4805      	ldr	r0, [pc, #20]	@ (8002428 <HAL_UART_MspInit+0x8c>)
 8002414:	f001 f944 	bl	80036a0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002418:	bf00      	nop
 800241a:	3728      	adds	r7, #40	@ 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40011000 	.word	0x40011000
 8002424:	40023800 	.word	0x40023800
 8002428:	40020000 	.word	0x40020000

0800242c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <NMI_Handler+0x4>

08002434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <HardFault_Handler+0x4>

0800243c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <MemManage_Handler+0x4>

08002444 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <BusFault_Handler+0x4>

0800244c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <UsageFault_Handler+0x4>

08002454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002482:	f000 fc47 	bl	8002d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002490:	4802      	ldr	r0, [pc, #8]	@ (800249c <DMA2_Stream3_IRQHandler+0x10>)
 8002492:	f000 fe9b 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000c14 	.word	0x20000c14

080024a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return 1;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_kill>:

int _kill(int pid, int sig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ba:	f003 ff13 	bl	80062e4 <__errno>
 80024be:	4603      	mov	r3, r0
 80024c0:	2216      	movs	r2, #22
 80024c2:	601a      	str	r2, [r3, #0]
  return -1;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_exit>:

void _exit (int status)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ffe7 	bl	80024b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024e2:	bf00      	nop
 80024e4:	e7fd      	b.n	80024e2 <_exit+0x12>

080024e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e00a      	b.n	800250e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024f8:	f3af 8000 	nop.w
 80024fc:	4601      	mov	r1, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	60ba      	str	r2, [r7, #8]
 8002504:	b2ca      	uxtb	r2, r1
 8002506:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3301      	adds	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	dbf0      	blt.n	80024f8 <_read+0x12>
  }

  return len;
 8002516:	687b      	ldr	r3, [r7, #4]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e009      	b.n	8002546 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	60ba      	str	r2, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	429a      	cmp	r2, r3
 800254c:	dbf1      	blt.n	8002532 <_write+0x12>
  }
  return len;
 800254e:	687b      	ldr	r3, [r7, #4]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_close>:

int _close(int file)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002580:	605a      	str	r2, [r3, #4]
  return 0;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_isatty>:

int _isatty(int file)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002598:	2301      	movs	r3, #1
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c8:	4a14      	ldr	r2, [pc, #80]	@ (800261c <_sbrk+0x5c>)
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <_sbrk+0x60>)
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d4:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025dc:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <_sbrk+0x64>)
 80025de:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <_sbrk+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e2:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d207      	bcs.n	8002600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f0:	f003 fe78 	bl	80062e4 <__errno>
 80025f4:	4603      	mov	r3, r0
 80025f6:	220c      	movs	r2, #12
 80025f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	e009      	b.n	8002614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002600:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002606:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <_sbrk+0x64>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	4a05      	ldr	r2, [pc, #20]	@ (8002624 <_sbrk+0x64>)
 8002610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002612:	68fb      	ldr	r3, [r7, #12]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20018000 	.word	0x20018000
 8002620:	00000400 	.word	0x00000400
 8002624:	20001900 	.word	0x20001900
 8002628:	20001a88 	.word	0x20001a88

0800262c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <SystemInit+0x20>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	4a05      	ldr	r2, [pc, #20]	@ (800264c <SystemInit+0x20>)
 8002638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800263c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002688 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002654:	f7ff ffea 	bl	800262c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002658:	480c      	ldr	r0, [pc, #48]	@ (800268c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800265a:	490d      	ldr	r1, [pc, #52]	@ (8002690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800265c:	4a0d      	ldr	r2, [pc, #52]	@ (8002694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002660:	e002      	b.n	8002668 <LoopCopyDataInit>

08002662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002666:	3304      	adds	r3, #4

08002668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800266c:	d3f9      	bcc.n	8002662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266e:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002670:	4c0a      	ldr	r4, [pc, #40]	@ (800269c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002674:	e001      	b.n	800267a <LoopFillZerobss>

08002676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002678:	3204      	adds	r2, #4

0800267a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800267c:	d3fb      	bcc.n	8002676 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800267e:	f003 fe37 	bl	80062f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002682:	f7ff f98f 	bl	80019a4 <main>
  bx  lr    
 8002686:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002688:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800268c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002690:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002694:	08009c60 	.word	0x08009c60
  ldr r2, =_sbss
 8002698:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800269c:	20001a84 	.word	0x20001a84

080026a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <ADC_IRQHandler>
	...

080026a4 <xpt2046_init>:

/**
 * Init the moduel
 */
void xpt2046_init()
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	ts_ControlByte.bitMode = XPT2046_12BIT_MODE;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <xpt2046_init+0x80>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	709a      	strb	r2, [r3, #2]
	ts_ControlByte.powerMode = XPT2046_REFERENCE_OFF_ADC_ON;
 80026ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <xpt2046_init+0x80>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	711a      	strb	r2, [r3, #4]
	ts_ControlByte.reference = XPT2046_DFR_MODE;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <xpt2046_init+0x80>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	70da      	strb	r2, [r3, #3]
	ts_ControlByte.channel = XPT2046_DFR_X; //by default
 80026ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <xpt2046_init+0x80>)
 80026bc:	2250      	movs	r2, #80	@ 0x50
 80026be:	705a      	strb	r2, [r3, #1]
	ts_ControlByte.startBit = XPT2046_START;
 80026c0:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <xpt2046_init+0x80>)
 80026c2:	2280      	movs	r2, #128	@ 0x80
 80026c4:	701a      	strb	r2, [r3, #0]
	ts_Orientation = XPT2046_ORIENTATION_PORTRAIT_MIRROR;
 80026c6:	4b18      	ldr	r3, [pc, #96]	@ (8002728 <xpt2046_init+0x84>)
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]
	ts_Size.width = XPT2046_WIDTH;
 80026cc:	4b17      	ldr	r3, [pc, #92]	@ (800272c <xpt2046_init+0x88>)
 80026ce:	22f0      	movs	r2, #240	@ 0xf0
 80026d0:	801a      	strh	r2, [r3, #0]
	ts_Size.height = XPT2046_HEIGHT;
 80026d2:	4b16      	ldr	r3, [pc, #88]	@ (800272c <xpt2046_init+0x88>)
 80026d4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80026d8:	805a      	strh	r2, [r3, #2]
	ts_Cs_Pin = XPT2046_CS_Pin;
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <xpt2046_init+0x8c>)
 80026dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026e0:	801a      	strh	r2, [r3, #0]
	ts_Cs_Port = XPT2046_CS_Port;
 80026e2:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <xpt2046_init+0x90>)
 80026e4:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <xpt2046_init+0x94>)
 80026e6:	601a      	str	r2, [r3, #0]
	ts_Penirq_Pin = XPT2046_PENIRQ_Pin;
 80026e8:	4b14      	ldr	r3, [pc, #80]	@ (800273c <xpt2046_init+0x98>)
 80026ea:	2202      	movs	r2, #2
 80026ec:	801a      	strh	r2, [r3, #0]
	ts_Penirq_Port = XPT2046_PENIRQ_Port;
 80026ee:	4b14      	ldr	r3, [pc, #80]	@ (8002740 <xpt2046_init+0x9c>)
 80026f0:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <xpt2046_init+0x94>)
 80026f2:	601a      	str	r2, [r3, #0]
	command = ts_ControlByte.bitMode |  ts_ControlByte.powerMode |ts_ControlByte.reference |ts_ControlByte.channel |ts_ControlByte.startBit;
 80026f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002724 <xpt2046_init+0x80>)
 80026f6:	789a      	ldrb	r2, [r3, #2]
 80026f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <xpt2046_init+0x80>)
 80026fa:	791b      	ldrb	r3, [r3, #4]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <xpt2046_init+0x80>)
 8002702:	78db      	ldrb	r3, [r3, #3]
 8002704:	4313      	orrs	r3, r2
 8002706:	b2da      	uxtb	r2, r3
 8002708:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <xpt2046_init+0x80>)
 800270a:	785b      	ldrb	r3, [r3, #1]
 800270c:	4313      	orrs	r3, r2
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <xpt2046_init+0x80>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4313      	orrs	r3, r2
 8002716:	b2da      	uxtb	r2, r3
 8002718:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <xpt2046_init+0xa0>)
 800271a:	701a      	strb	r2, [r3, #0]
	xpt2046_unselect();
 800271c:	f000 f834 	bl	8002788 <xpt2046_unselect>
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2000191c 	.word	0x2000191c
 8002728:	20001916 	.word	0x20001916
 800272c:	20001918 	.word	0x20001918
 8002730:	2000192c 	.word	0x2000192c
 8002734:	20001924 	.word	0x20001924
 8002738:	40020400 	.word	0x40020400
 800273c:	2000192e 	.word	0x2000192e
 8002740:	20001928 	.word	0x20001928
 8002744:	20001930 	.word	0x20001930

08002748 <xpt2046_zthreshold>:
	ts_Penirq_Port = penirq_port;
	ts_Penirq_Pin = penirq_pin;
}

uint16_t xpt2046_zthreshold()
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
	if(ts_ControlByte.bitMode == XPT2046_8BIT_MODE)
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <xpt2046_zthreshold+0x1c>)
 800274e:	789b      	ldrb	r3, [r3, #2]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d101      	bne.n	8002758 <xpt2046_zthreshold+0x10>
	{
		return Z_THRESHOLD_08BIT;
 8002754:	2307      	movs	r3, #7
 8002756:	e000      	b.n	800275a <xpt2046_zthreshold+0x12>
	}else
	{
		return Z_THRESHOLD_12BIT;
 8002758:	2328      	movs	r3, #40	@ 0x28
	}
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	2000191c 	.word	0x2000191c

08002768 <xpt2046_select>:
void xpt2046_select()
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ts_Cs_Port,ts_Cs_Pin,GPIO_PIN_RESET);
 800276c:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <xpt2046_select+0x18>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a04      	ldr	r2, [pc, #16]	@ (8002784 <xpt2046_select+0x1c>)
 8002772:	8811      	ldrh	r1, [r2, #0]
 8002774:	2200      	movs	r2, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f001 f92e 	bl	80039d8 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(XPT2046_CS_Port,XPT2046_CS_Pin,GPIO_PIN_RESET);
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20001924 	.word	0x20001924
 8002784:	2000192c 	.word	0x2000192c

08002788 <xpt2046_unselect>:

void xpt2046_unselect()
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ts_Cs_Port,ts_Cs_Pin,GPIO_PIN_SET);
 800278c:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <xpt2046_unselect+0x18>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <xpt2046_unselect+0x1c>)
 8002792:	8811      	ldrh	r1, [r2, #0]
 8002794:	2201      	movs	r2, #1
 8002796:	4618      	mov	r0, r3
 8002798:	f001 f91e 	bl	80039d8 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(XPT2046_CS_Port,XPT2046_CS_Pin,GPIO_PIN_SET);
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20001924 	.word	0x20001924
 80027a4:	2000192c 	.word	0x2000192c

080027a8 <xpt2046_interrupt>:

uint8_t xpt2046_interrupt()
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ts_Penirq_Port,ts_Penirq_Pin) == GPIO_PIN_RESET; //Means touchScreen was pressed
 80027ac:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <xpt2046_interrupt+0x24>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a07      	ldr	r2, [pc, #28]	@ (80027d0 <xpt2046_interrupt+0x28>)
 80027b2:	8812      	ldrh	r2, [r2, #0]
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 f8f6 	bl	80039a8 <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf0c      	ite	eq
 80027c2:	2301      	moveq	r3, #1
 80027c4:	2300      	movne	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20001928 	.word	0x20001928
 80027d0:	2000192e 	.word	0x2000192e

080027d4 <xpt2046_pressed>:

uint8_t xpt2046_pressed()
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
	if(xpt2046_interruptions_activated())
 80027da:	f000 f819 	bl	8002810 <xpt2046_interruptions_activated>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <xpt2046_pressed+0x18>
	{
		return xpt2046_interrupt();
 80027e4:	f7ff ffe0 	bl	80027a8 <xpt2046_interrupt>
 80027e8:	4603      	mov	r3, r0
 80027ea:	e00b      	b.n	8002804 <xpt2046_pressed+0x30>
	}else
	{
		uint16_t zt =  xpt2046_zthreshold();
 80027ec:	f7ff ffac 	bl	8002748 <xpt2046_zthreshold>
 80027f0:	4603      	mov	r3, r0
 80027f2:	80fb      	strh	r3, [r7, #6]
		return (ts_CoordinatesRaw.z1 > zt );
 80027f4:	4b05      	ldr	r3, [pc, #20]	@ (800280c <xpt2046_pressed+0x38>)
 80027f6:	889b      	ldrh	r3, [r3, #4]
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	bf34      	ite	cc
 80027fe:	2301      	movcc	r3, #1
 8002800:	2300      	movcs	r3, #0
 8002802:	b2db      	uxtb	r3, r3
	}
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20001908 	.word	0x20001908

08002810 <xpt2046_interruptions_activated>:

uint8_t xpt2046_interruptions_activated()
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
	return (ts_ControlByte.powerMode == XPT2046_POWER_DOWN || ts_ControlByte.powerMode == XPT2046_REFERENCE_ON_ADC_OFF);
 8002814:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <xpt2046_interruptions_activated+0x28>)
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <xpt2046_interruptions_activated+0x14>
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <xpt2046_interruptions_activated+0x28>)
 800281e:	791b      	ldrb	r3, [r3, #4]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d101      	bne.n	8002828 <xpt2046_interruptions_activated+0x18>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <xpt2046_interruptions_activated+0x1a>
 8002828:	2300      	movs	r3, #0
 800282a:	b2db      	uxtb	r3, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	2000191c 	.word	0x2000191c

0800283c <xpt2046_control_byte_update>:
/**
 * Generate control byte
 */
void xpt2046_control_byte_update()
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
	command =  ts_ControlByte.startBit |  ts_ControlByte.channel | ts_ControlByte.bitMode | ts_ControlByte.reference | ts_ControlByte.powerMode  ;
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <xpt2046_control_byte_update+0x38>)
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <xpt2046_control_byte_update+0x38>)
 8002846:	785b      	ldrb	r3, [r3, #1]
 8002848:	4313      	orrs	r3, r2
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <xpt2046_control_byte_update+0x38>)
 800284e:	789b      	ldrb	r3, [r3, #2]
 8002850:	4313      	orrs	r3, r2
 8002852:	b2da      	uxtb	r2, r3
 8002854:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <xpt2046_control_byte_update+0x38>)
 8002856:	78db      	ldrb	r3, [r3, #3]
 8002858:	4313      	orrs	r3, r2
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <xpt2046_control_byte_update+0x38>)
 800285e:	791b      	ldrb	r3, [r3, #4]
 8002860:	4313      	orrs	r3, r2
 8002862:	b2da      	uxtb	r2, r3
 8002864:	4b04      	ldr	r3, [pc, #16]	@ (8002878 <xpt2046_control_byte_update+0x3c>)
 8002866:	701a      	strb	r2, [r3, #0]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	2000191c 	.word	0x2000191c
 8002878:	20001930 	.word	0x20001930

0800287c <xpt2046_max_measurement>:


/**
 * Return max value depending on bit mode.
 */
uint16_t xpt2046_max_measurement(){
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
	if(ts_ControlByte.bitMode == XPT2046_8BIT_MODE)
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <xpt2046_max_measurement+0x20>)
 8002882:	789b      	ldrb	r3, [r3, #2]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d101      	bne.n	800288c <xpt2046_max_measurement+0x10>
	{
		return 120; //This must be calibrated
 8002888:	2378      	movs	r3, #120	@ 0x78
 800288a:	e001      	b.n	8002890 <xpt2046_max_measurement+0x14>
	}else
	{
		return 1900; // this value must be calibrated on your on touch screen
 800288c:	f240 736c 	movw	r3, #1900	@ 0x76c
	}
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	2000191c 	.word	0x2000191c

080028a0 <xpt2046_spi>:
}
/**
 *  Set internal SPI to user defined SPI port
 */
void xpt2046_spi(SPI_HandleTypeDef* spi)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	spiPort =  spi;
 80028a8:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <xpt2046_spi+0x1c>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6013      	str	r3, [r2, #0]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20001904 	.word	0x20001904

080028c0 <xpt2046_update>:


/**
 * Update X,Y,Z values of touchScreen
 */
void xpt2046_update(){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	@ 0x30
 80028c4:	af02      	add	r7, sp, #8
	xpt2046_select();
 80028c6:	f7ff ff4f 	bl	8002768 <xpt2046_select>

	if(xpt2046_interruptions_activated())
 80028ca:	f7ff ffa1 	bl	8002810 <xpt2046_interruptions_activated>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <xpt2046_update+0x20>
	{
		/* this means Interrupt pin was enabled*/
		if(!xpt2046_interrupt())
 80028d4:	f7ff ff68 	bl	80027a8 <xpt2046_interrupt>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 819c 	beq.w	8002c18 <xpt2046_update+0x358>
		}


	}

	uint8_t zeros[2] = { 0x00,0x00};
 80028e0:	2300      	movs	r3, #0
 80028e2:	823b      	strh	r3, [r7, #16]
	uint32_t x_avg = 0, y_avg = 0,z1_avg=0,z2_avg=0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < AVERAGE_POINTS; i++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	e0ad      	b.n	8002a56 <xpt2046_update+0x196>
	{
		ts_ControlByte.channel = XPT2046_DFR_X;
 80028fa:	4b98      	ldr	r3, [pc, #608]	@ (8002b5c <xpt2046_update+0x29c>)
 80028fc:	2250      	movs	r2, #80	@ 0x50
 80028fe:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 8002900:	f7ff ff9c 	bl	800283c <xpt2046_control_byte_update>

		uint8_t receiveByteX[2] = {0x00,0x00};
 8002904:	2300      	movs	r3, #0
 8002906:	81bb      	strh	r3, [r7, #12]

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8002908:	4b95      	ldr	r3, [pc, #596]	@ (8002b60 <xpt2046_update+0x2a0>)
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
 8002910:	2201      	movs	r2, #1
 8002912:	4994      	ldr	r1, [pc, #592]	@ (8002b64 <xpt2046_update+0x2a4>)
 8002914:	f001 fd5b 	bl	80043ce <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteX,sizeof(receiveByteX),HAL_MAX_DELAY);
 8002918:	4b91      	ldr	r3, [pc, #580]	@ (8002b60 <xpt2046_update+0x2a0>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	f107 020c 	add.w	r2, r7, #12
 8002920:	f107 0110 	add.w	r1, r7, #16
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2302      	movs	r3, #2
 800292c:	f001 fe93 	bl	8004656 <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Y;
 8002930:	4b8a      	ldr	r3, [pc, #552]	@ (8002b5c <xpt2046_update+0x29c>)
 8002932:	2210      	movs	r2, #16
 8002934:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 8002936:	f7ff ff81 	bl	800283c <xpt2046_control_byte_update>

		uint8_t receiveByteY[2] = {0x00,0x00};
 800293a:	2300      	movs	r3, #0
 800293c:	813b      	strh	r3, [r7, #8]
		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 800293e:	4b88      	ldr	r3, [pc, #544]	@ (8002b60 <xpt2046_update+0x2a0>)
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
 8002946:	2201      	movs	r2, #1
 8002948:	4986      	ldr	r1, [pc, #536]	@ (8002b64 <xpt2046_update+0x2a4>)
 800294a:	f001 fd40 	bl	80043ce <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteY,sizeof(receiveByteY),HAL_MAX_DELAY);
 800294e:	4b84      	ldr	r3, [pc, #528]	@ (8002b60 <xpt2046_update+0x2a0>)
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	f107 0208 	add.w	r2, r7, #8
 8002956:	f107 0110 	add.w	r1, r7, #16
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2302      	movs	r3, #2
 8002962:	f001 fe78 	bl	8004656 <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Z1;
 8002966:	4b7d      	ldr	r3, [pc, #500]	@ (8002b5c <xpt2046_update+0x29c>)
 8002968:	2230      	movs	r2, #48	@ 0x30
 800296a:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 800296c:	f7ff ff66 	bl	800283c <xpt2046_control_byte_update>
		uint8_t receiveByteZ1[2] = {0x00,0x00};
 8002970:	2300      	movs	r3, #0
 8002972:	80bb      	strh	r3, [r7, #4]

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8002974:	4b7a      	ldr	r3, [pc, #488]	@ (8002b60 <xpt2046_update+0x2a0>)
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	2201      	movs	r2, #1
 800297e:	4979      	ldr	r1, [pc, #484]	@ (8002b64 <xpt2046_update+0x2a4>)
 8002980:	f001 fd25 	bl	80043ce <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteZ1,sizeof(receiveByteZ1),HAL_MAX_DELAY);
 8002984:	4b76      	ldr	r3, [pc, #472]	@ (8002b60 <xpt2046_update+0x2a0>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	1d3a      	adds	r2, r7, #4
 800298a:	f107 0110 	add.w	r1, r7, #16
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2302      	movs	r3, #2
 8002996:	f001 fe5e 	bl	8004656 <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Z2;
 800299a:	4b70      	ldr	r3, [pc, #448]	@ (8002b5c <xpt2046_update+0x29c>)
 800299c:	2240      	movs	r2, #64	@ 0x40
 800299e:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 80029a0:	f7ff ff4c 	bl	800283c <xpt2046_control_byte_update>
		uint8_t receiveByteZ2[2] = {0x00,0x00};
 80029a4:	2300      	movs	r3, #0
 80029a6:	803b      	strh	r3, [r7, #0]

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 80029a8:	4b6d      	ldr	r3, [pc, #436]	@ (8002b60 <xpt2046_update+0x2a0>)
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	2201      	movs	r2, #1
 80029b2:	496c      	ldr	r1, [pc, #432]	@ (8002b64 <xpt2046_update+0x2a4>)
 80029b4:	f001 fd0b 	bl	80043ce <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteZ2,sizeof(receiveByteZ2),HAL_MAX_DELAY);
 80029b8:	4b69      	ldr	r3, [pc, #420]	@ (8002b60 <xpt2046_update+0x2a0>)
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	463a      	mov	r2, r7
 80029be:	f107 0110 	add.w	r1, r7, #16
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2302      	movs	r3, #2
 80029ca:	f001 fe44 	bl	8004656 <HAL_SPI_TransmitReceive>
		if(ts_ControlByte.bitMode == XPT2046_12BIT_MODE)
 80029ce:	4b63      	ldr	r3, [pc, #396]	@ (8002b5c <xpt2046_update+0x29c>)
 80029d0:	789b      	ldrb	r3, [r3, #2]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d128      	bne.n	8002a28 <xpt2046_update+0x168>
		{
			x_avg+= 	(receiveByteX[1] 	<< 4) | (receiveByteX[0] 	>> 4);
 80029d6:	7b7b      	ldrb	r3, [r7, #13]
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	7b3a      	ldrb	r2, [r7, #12]
 80029dc:	0912      	lsrs	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	4313      	orrs	r3, r2
 80029e2:	461a      	mov	r2, r3
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	4413      	add	r3, r2
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
			y_avg+= 	(receiveByteY[1] 	<< 4) | (receiveByteY[0] 	>> 4);
 80029ea:	7a7b      	ldrb	r3, [r7, #9]
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	7a3a      	ldrb	r2, [r7, #8]
 80029f0:	0912      	lsrs	r2, r2, #4
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4313      	orrs	r3, r2
 80029f6:	461a      	mov	r2, r3
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	4413      	add	r3, r2
 80029fc:	623b      	str	r3, [r7, #32]
			z1_avg+= 	(receiveByteZ1[1] 	<< 4) | (receiveByteZ1[0] 	>> 4);
 80029fe:	797b      	ldrb	r3, [r7, #5]
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	793a      	ldrb	r2, [r7, #4]
 8002a04:	0912      	lsrs	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	61fb      	str	r3, [r7, #28]
			z2_avg+= 	(receiveByteZ2[1] 	<< 4) | (receiveByteZ2[0] 	>> 4);
 8002a12:	787b      	ldrb	r3, [r7, #1]
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	783a      	ldrb	r2, [r7, #0]
 8002a18:	0912      	lsrs	r2, r2, #4
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	461a      	mov	r2, r3
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e013      	b.n	8002a50 <xpt2046_update+0x190>
		}else
		{
			x_avg+= 	(receiveByteX[1]);
 8002a28:	7b7b      	ldrb	r3, [r7, #13]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	4413      	add	r3, r2
 8002a30:	627b      	str	r3, [r7, #36]	@ 0x24
			y_avg+= 	(receiveByteY[1]) ;
 8002a32:	7a7b      	ldrb	r3, [r7, #9]
 8002a34:	461a      	mov	r2, r3
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	4413      	add	r3, r2
 8002a3a:	623b      	str	r3, [r7, #32]
			z1_avg+= 	(receiveByteZ1[1]);
 8002a3c:	797b      	ldrb	r3, [r7, #5]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	61fb      	str	r3, [r7, #28]
			z2_avg+= 	(receiveByteZ2[1]);
 8002a46:	787b      	ldrb	r3, [r7, #1]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < AVERAGE_POINTS; i++)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3301      	adds	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b09      	cmp	r3, #9
 8002a5a:	f77f af4e 	ble.w	80028fa <xpt2046_update+0x3a>
		}

	}

	ts_CoordinatesRaw.x = x_avg/AVERAGE_POINTS;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	4a41      	ldr	r2, [pc, #260]	@ (8002b68 <xpt2046_update+0x2a8>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	4b40      	ldr	r3, [pc, #256]	@ (8002b6c <xpt2046_update+0x2ac>)
 8002a6c:	801a      	strh	r2, [r3, #0]
	ts_CoordinatesRaw.y = y_avg/AVERAGE_POINTS;
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	4a3d      	ldr	r2, [pc, #244]	@ (8002b68 <xpt2046_update+0x2a8>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	08db      	lsrs	r3, r3, #3
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b6c <xpt2046_update+0x2ac>)
 8002a7c:	805a      	strh	r2, [r3, #2]
	ts_CoordinatesRaw.z1 = z1_avg/AVERAGE_POINTS;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	4a39      	ldr	r2, [pc, #228]	@ (8002b68 <xpt2046_update+0x2a8>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	08db      	lsrs	r3, r3, #3
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4b38      	ldr	r3, [pc, #224]	@ (8002b6c <xpt2046_update+0x2ac>)
 8002a8c:	809a      	strh	r2, [r3, #4]
	ts_CoordinatesRaw.z2 = z2_avg/AVERAGE_POINTS;
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4a35      	ldr	r2, [pc, #212]	@ (8002b68 <xpt2046_update+0x2a8>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	08db      	lsrs	r3, r3, #3
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	4b34      	ldr	r3, [pc, #208]	@ (8002b6c <xpt2046_update+0x2ac>)
 8002a9c:	80da      	strh	r2, [r3, #6]
	uint16_t max = xpt2046_max_measurement();
 8002a9e:	f7ff feed 	bl	800287c <xpt2046_max_measurement>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	827b      	strh	r3, [r7, #18]
	/* Consider (0,0) as the top left point of the screen */
	switch(ts_Orientation)
 8002aa6:	4b32      	ldr	r3, [pc, #200]	@ (8002b70 <xpt2046_update+0x2b0>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	f200 80b0 	bhi.w	8002c10 <xpt2046_update+0x350>
 8002ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab8 <xpt2046_update+0x1f8>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002ac9 	.word	0x08002ac9
 8002abc:	08002b13 	.word	0x08002b13
 8002ac0:	08002b7d 	.word	0x08002b7d
 8002ac4:	08002bc7 	.word	0x08002bc7
	{
		case XPT2046_ORIENTATION_PORTRAIT:
		{
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <xpt2046_update+0x2b4>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	8a7b      	ldrh	r3, [r7, #18]
 8002ad0:	4a26      	ldr	r2, [pc, #152]	@ (8002b6c <xpt2046_update+0x2ac>)
 8002ad2:	8812      	ldrh	r2, [r2, #0]
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	fb03 f201 	mul.w	r2, r3, r1
 8002ada:	8a7b      	ldrh	r3, [r7, #18]
 8002adc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b0c      	subs	r3, #12
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	4b24      	ldr	r3, [pc, #144]	@ (8002b78 <xpt2046_update+0x2b8>)
 8002ae8:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8002aea:	4b22      	ldr	r3, [pc, #136]	@ (8002b74 <xpt2046_update+0x2b4>)
 8002aec:	885b      	ldrh	r3, [r3, #2]
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b6c <xpt2046_update+0x2ac>)
 8002af2:	885b      	ldrh	r3, [r3, #2]
 8002af4:	fb03 f202 	mul.w	r2, r3, r2
 8002af8:	8a7b      	ldrh	r3, [r7, #18]
 8002afa:	fb92 f3f3 	sdiv	r3, r2, r3
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3310      	adds	r3, #16
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b1c      	ldr	r3, [pc, #112]	@ (8002b78 <xpt2046_update+0x2b8>)
 8002b06:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8002b08:	4b18      	ldr	r3, [pc, #96]	@ (8002b6c <xpt2046_update+0x2ac>)
 8002b0a:	889a      	ldrh	r2, [r3, #4]
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <xpt2046_update+0x2b8>)
 8002b0e:	809a      	strh	r2, [r3, #4]
			break;
 8002b10:	e07f      	b.n	8002c12 <xpt2046_update+0x352>
		}
		case XPT2046_ORIENTATION_LANDSCAPE:
		{
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8002b12:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <xpt2046_update+0x2b4>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	4619      	mov	r1, r3
 8002b18:	8a7b      	ldrh	r3, [r7, #18]
 8002b1a:	4a14      	ldr	r2, [pc, #80]	@ (8002b6c <xpt2046_update+0x2ac>)
 8002b1c:	8852      	ldrh	r2, [r2, #2]
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	fb03 f201 	mul.w	r2, r3, r1
 8002b24:	8a7b      	ldrh	r3, [r7, #18]
 8002b26:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3310      	adds	r3, #16
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <xpt2046_update+0x2b8>)
 8002b32:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <xpt2046_update+0x2b4>)
 8002b36:	885b      	ldrh	r3, [r3, #2]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <xpt2046_update+0x2ac>)
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	fb03 f202 	mul.w	r2, r3, r2
 8002b42:	8a7b      	ldrh	r3, [r7, #18]
 8002b44:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b0c      	subs	r3, #12
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <xpt2046_update+0x2b8>)
 8002b50:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <xpt2046_update+0x2ac>)
 8002b54:	889a      	ldrh	r2, [r3, #4]
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <xpt2046_update+0x2b8>)
 8002b58:	809a      	strh	r2, [r3, #4]
			break;
 8002b5a:	e05a      	b.n	8002c12 <xpt2046_update+0x352>
 8002b5c:	2000191c 	.word	0x2000191c
 8002b60:	20001904 	.word	0x20001904
 8002b64:	20001930 	.word	0x20001930
 8002b68:	cccccccd 	.word	0xcccccccd
 8002b6c:	20001908 	.word	0x20001908
 8002b70:	20001916 	.word	0x20001916
 8002b74:	20001918 	.word	0x20001918
 8002b78:	20001910 	.word	0x20001910
		}
		case XPT2046_ORIENTATION_PORTRAIT_MIRROR:
		{
			ts_Coordinates.x = (ts_Size.width * (ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8002b7c:	4b28      	ldr	r3, [pc, #160]	@ (8002c20 <xpt2046_update+0x360>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b28      	ldr	r3, [pc, #160]	@ (8002c24 <xpt2046_update+0x364>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	fb03 f202 	mul.w	r2, r3, r2
 8002b8a:	8a7b      	ldrh	r3, [r7, #18]
 8002b8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b0c      	subs	r3, #12
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <xpt2046_update+0x368>)
 8002b98:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8002b9a:	4b21      	ldr	r3, [pc, #132]	@ (8002c20 <xpt2046_update+0x360>)
 8002b9c:	885b      	ldrh	r3, [r3, #2]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	8a7b      	ldrh	r3, [r7, #18]
 8002ba2:	4a20      	ldr	r2, [pc, #128]	@ (8002c24 <xpt2046_update+0x364>)
 8002ba4:	8852      	ldrh	r2, [r2, #2]
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	fb03 f201 	mul.w	r2, r3, r1
 8002bac:	8a7b      	ldrh	r3, [r7, #18]
 8002bae:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3310      	adds	r3, #16
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <xpt2046_update+0x368>)
 8002bba:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8002bbc:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <xpt2046_update+0x364>)
 8002bbe:	889a      	ldrh	r2, [r3, #4]
 8002bc0:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <xpt2046_update+0x368>)
 8002bc2:	809a      	strh	r2, [r3, #4]
			break;
 8002bc4:	e025      	b.n	8002c12 <xpt2046_update+0x352>
		}
		case XPT2046_ORIENTATION_LANDSCAPE_MIRROR:
		{
			ts_Coordinates.x = (ts_Size.width *  (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8002bc6:	4b16      	ldr	r3, [pc, #88]	@ (8002c20 <xpt2046_update+0x360>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <xpt2046_update+0x364>)
 8002bce:	885b      	ldrh	r3, [r3, #2]
 8002bd0:	fb03 f202 	mul.w	r2, r3, r2
 8002bd4:	8a7b      	ldrh	r3, [r7, #18]
 8002bd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3310      	adds	r3, #16
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <xpt2046_update+0x368>)
 8002be2:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (max- ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8002be4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <xpt2046_update+0x360>)
 8002be6:	885b      	ldrh	r3, [r3, #2]
 8002be8:	4619      	mov	r1, r3
 8002bea:	8a7b      	ldrh	r3, [r7, #18]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <xpt2046_update+0x364>)
 8002bee:	8812      	ldrh	r2, [r2, #0]
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	fb03 f201 	mul.w	r2, r3, r1
 8002bf6:	8a7b      	ldrh	r3, [r7, #18]
 8002bf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b0c      	subs	r3, #12
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <xpt2046_update+0x368>)
 8002c04:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8002c06:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <xpt2046_update+0x364>)
 8002c08:	889a      	ldrh	r2, [r3, #4]
 8002c0a:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <xpt2046_update+0x368>)
 8002c0c:	809a      	strh	r2, [r3, #4]
			break;
 8002c0e:	e000      	b.n	8002c12 <xpt2046_update+0x352>
		}
		default:
		{
			break;
 8002c10:	bf00      	nop
		}
	}


	xpt2046_unselect();
 8002c12:	f7ff fdb9 	bl	8002788 <xpt2046_unselect>
 8002c16:	e000      	b.n	8002c1a <xpt2046_update+0x35a>
			return;
 8002c18:	bf00      	nop
}
 8002c1a:	3728      	adds	r7, #40	@ 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20001918 	.word	0x20001918
 8002c24:	20001908 	.word	0x20001908
 8002c28:	20001910 	.word	0x20001910

08002c2c <xpt2046_read_position>:

/* by default return 0,0 if the screen isn't pressed*/
void xpt2046_read_position(uint16_t* x, uint16_t* y)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
	xpt2046_update();
 8002c36:	f7ff fe43 	bl	80028c0 <xpt2046_update>
	if(xpt2046_pressed())
 8002c3a:	f7ff fdcb 	bl	80027d4 <xpt2046_pressed>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <xpt2046_read_position+0x2a>
	{
		*x = ts_Coordinates.x;
 8002c44:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <xpt2046_read_position+0x40>)
 8002c46:	881a      	ldrh	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	801a      	strh	r2, [r3, #0]
		*y = ts_Coordinates.y;
 8002c4c:	4b07      	ldr	r3, [pc, #28]	@ (8002c6c <xpt2046_read_position+0x40>)
 8002c4e:	885a      	ldrh	r2, [r3, #2]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	801a      	strh	r2, [r3, #0]
	}else
	{
		*x = 0;
		*y = 0;
	}
}
 8002c54:	e005      	b.n	8002c62 <xpt2046_read_position+0x36>
		*x = 0;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	801a      	strh	r2, [r3, #0]
		*y = 0;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	801a      	strh	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20001910 	.word	0x20001910

08002c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c74:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <HAL_Init+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb0 <HAL_Init+0x40>)
 8002c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_Init+0x40>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <HAL_Init+0x40>)
 8002c86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c8c:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <HAL_Init+0x40>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a07      	ldr	r2, [pc, #28]	@ (8002cb0 <HAL_Init+0x40>)
 8002c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c98:	2003      	movs	r0, #3
 8002c9a:	f000 f94f 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c9e:	200f      	movs	r0, #15
 8002ca0:	f000 f808 	bl	8002cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ca4:	f7ff faa2 	bl	80021ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023c00 	.word	0x40023c00

08002cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cbc:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <HAL_InitTick+0x54>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <HAL_InitTick+0x58>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f967 	bl	8002fa6 <HAL_SYSTICK_Config>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00e      	b.n	8002d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d80a      	bhi.n	8002cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	f000 f92f 	bl	8002f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cf4:	4a06      	ldr	r2, [pc, #24]	@ (8002d10 <HAL_InitTick+0x5c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e000      	b.n	8002d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000014 	.word	0x20000014
 8002d0c:	2000001c 	.word	0x2000001c
 8002d10:	20000018 	.word	0x20000018

08002d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d18:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <HAL_IncTick+0x20>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_IncTick+0x24>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4413      	add	r3, r2
 8002d24:	4a04      	ldr	r2, [pc, #16]	@ (8002d38 <HAL_IncTick+0x24>)
 8002d26:	6013      	str	r3, [r2, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	2000001c 	.word	0x2000001c
 8002d38:	20001934 	.word	0x20001934

08002d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d40:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <HAL_GetTick+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20001934 	.word	0x20001934

08002d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d5c:	f7ff ffee 	bl	8002d3c <HAL_GetTick>
 8002d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d005      	beq.n	8002d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d98 <HAL_Delay+0x44>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4413      	add	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d7a:	bf00      	nop
 8002d7c:	f7ff ffde 	bl	8002d3c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d8f7      	bhi.n	8002d7c <HAL_Delay+0x28>
  {
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	2000001c 	.word	0x2000001c

08002d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dac:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db8:	4013      	ands	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dce:	4a04      	ldr	r2, [pc, #16]	@ (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	60d3      	str	r3, [r2, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de8:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <__NVIC_GetPriorityGrouping+0x18>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f003 0307 	and.w	r3, r3, #7
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	db0b      	blt.n	8002e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4907      	ldr	r1, [pc, #28]	@ (8002e38 <__NVIC_EnableIRQ+0x38>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2001      	movs	r0, #1
 8002e22:	fa00 f202 	lsl.w	r2, r0, r2
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db0a      	blt.n	8002e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	490c      	ldr	r1, [pc, #48]	@ (8002e88 <__NVIC_SetPriority+0x4c>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e64:	e00a      	b.n	8002e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4908      	ldr	r1, [pc, #32]	@ (8002e8c <__NVIC_SetPriority+0x50>)
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3b04      	subs	r3, #4
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	440b      	add	r3, r1
 8002e7a:	761a      	strb	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	@ 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f1c3 0307 	rsb	r3, r3, #7
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf28      	it	cs
 8002eae:	2304      	movcs	r3, #4
 8002eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d902      	bls.n	8002ec0 <NVIC_EncodePriority+0x30>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3b03      	subs	r3, #3
 8002ebe:	e000      	b.n	8002ec2 <NVIC_EncodePriority+0x32>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	4313      	orrs	r3, r2
         );
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f08:	d301      	bcc.n	8002f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00f      	b.n	8002f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <SysTick_Config+0x40>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f16:	210f      	movs	r1, #15
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f7ff ff8e 	bl	8002e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <SysTick_Config+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <SysTick_Config+0x40>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff29 	bl	8002d9c <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f64:	f7ff ff3e 	bl	8002de4 <__NVIC_GetPriorityGrouping>
 8002f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ff8e 	bl	8002e90 <NVIC_EncodePriority>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff5d 	bl	8002e3c <__NVIC_SetPriority>
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff31 	bl	8002e00 <__NVIC_EnableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ffa2 	bl	8002ef8 <SysTick_Config>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff feb6 	bl	8002d3c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e099      	b.n	8003110 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ffc:	e00f      	b.n	800301e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ffe:	f7ff fe9d 	bl	8002d3c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b05      	cmp	r3, #5
 800300a:	d908      	bls.n	800301e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2203      	movs	r2, #3
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e078      	b.n	8003110 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e8      	bne.n	8002ffe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <HAL_DMA_Init+0x158>)
 8003038:	4013      	ands	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003056:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003062:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	2b04      	cmp	r3, #4
 8003076:	d107      	bne.n	8003088 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	4313      	orrs	r3, r2
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0307 	bic.w	r3, r3, #7
 800309e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d117      	bne.n	80030e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa6f 	bl	80035a8 <DMA_CheckFifoParam>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2240      	movs	r2, #64	@ 0x40
 80030d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030de:	2301      	movs	r3, #1
 80030e0:	e016      	b.n	8003110 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa26 	bl	800353c <DMA_CalcBaseAndBitshift>
 80030f0:	4603      	mov	r3, r0
 80030f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	223f      	movs	r2, #63	@ 0x3f
 80030fa:	409a      	lsls	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	f010803f 	.word	0xf010803f

0800311c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_DMA_Start_IT+0x26>
 800313e:	2302      	movs	r3, #2
 8003140:	e040      	b.n	80031c4 <HAL_DMA_Start_IT+0xa8>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d12f      	bne.n	80031b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2202      	movs	r2, #2
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f9b8 	bl	80034e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003174:	223f      	movs	r2, #63	@ 0x3f
 8003176:	409a      	lsls	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0216 	orr.w	r2, r2, #22
 800318a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0208 	orr.w	r2, r2, #8
 80031a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e005      	b.n	80031c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031be:	2302      	movs	r3, #2
 80031c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003414 <HAL_DMA_IRQHandler+0x248>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a8e      	ldr	r2, [pc, #568]	@ (8003418 <HAL_DMA_IRQHandler+0x24c>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0a9b      	lsrs	r3, r3, #10
 80031e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	2208      	movs	r2, #8
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01a      	beq.n	8003238 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0204 	bic.w	r2, r2, #4
 800321e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	2208      	movs	r2, #8
 8003226:	409a      	lsls	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	2201      	movs	r2, #1
 800323e:	409a      	lsls	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	2201      	movs	r2, #1
 800325c:	409a      	lsls	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	2204      	movs	r2, #4
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d012      	beq.n	80032a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	2204      	movs	r2, #4
 8003292:	409a      	lsls	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329c:	f043 0204 	orr.w	r2, r3, #4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	2210      	movs	r2, #16
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d043      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d03c      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	2210      	movs	r2, #16
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d018      	beq.n	800330e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d024      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
 80032fa:	e01f      	b.n	800333c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01b      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
 800330c:	e016      	b.n	800333c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d107      	bne.n	800332c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0208 	bic.w	r2, r2, #8
 800332a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003340:	2220      	movs	r2, #32
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 808f 	beq.w	800346c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8087 	beq.w	800346c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003362:	2220      	movs	r2, #32
 8003364:	409a      	lsls	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b05      	cmp	r3, #5
 8003374:	d136      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0216 	bic.w	r2, r2, #22
 8003384:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003394:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <HAL_DMA_IRQHandler+0x1da>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0208 	bic.w	r2, r2, #8
 80033b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	223f      	movs	r2, #63	@ 0x3f
 80033bc:	409a      	lsls	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d07e      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
        }
        return;
 80033e2:	e079      	b.n	80034d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01d      	beq.n	800342e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003404:	2b00      	cmp	r3, #0
 8003406:	d031      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
 8003410:	e02c      	b.n	800346c <HAL_DMA_IRQHandler+0x2a0>
 8003412:	bf00      	nop
 8003414:	20000014 	.word	0x20000014
 8003418:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d023      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
 800342c:	e01e      	b.n	800346c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10f      	bne.n	800345c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0210 	bic.w	r2, r2, #16
 800344a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003470:	2b00      	cmp	r3, #0
 8003472:	d032      	beq.n	80034da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d022      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2205      	movs	r2, #5
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	3301      	adds	r3, #1
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d307      	bcc.n	80034b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f2      	bne.n	8003498 <HAL_DMA_IRQHandler+0x2cc>
 80034b2:	e000      	b.n	80034b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	4798      	blx	r3
 80034d6:	e000      	b.n	80034da <HAL_DMA_IRQHandler+0x30e>
        return;
 80034d8:	bf00      	nop
    }
  }
}
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b40      	cmp	r3, #64	@ 0x40
 800350c:	d108      	bne.n	8003520 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800351e:	e007      	b.n	8003530 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	3b10      	subs	r3, #16
 800354c:	4a14      	ldr	r2, [pc, #80]	@ (80035a0 <DMA_CalcBaseAndBitshift+0x64>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003556:	4a13      	ldr	r2, [pc, #76]	@ (80035a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d909      	bls.n	800357e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	1d1a      	adds	r2, r3, #4
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	659a      	str	r2, [r3, #88]	@ 0x58
 800357c:	e007      	b.n	800358e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	aaaaaaab 	.word	0xaaaaaaab
 80035a4:	080098d4 	.word	0x080098d4

080035a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d11f      	bne.n	8003602 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d856      	bhi.n	8003676 <DMA_CheckFifoParam+0xce>
 80035c8:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <DMA_CheckFifoParam+0x28>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	080035e1 	.word	0x080035e1
 80035d4:	080035f3 	.word	0x080035f3
 80035d8:	080035e1 	.word	0x080035e1
 80035dc:	08003677 	.word	0x08003677
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d046      	beq.n	800367a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f0:	e043      	b.n	800367a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035fa:	d140      	bne.n	800367e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003600:	e03d      	b.n	800367e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800360a:	d121      	bne.n	8003650 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d837      	bhi.n	8003682 <DMA_CheckFifoParam+0xda>
 8003612:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <DMA_CheckFifoParam+0x70>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	08003629 	.word	0x08003629
 800361c:	0800362f 	.word	0x0800362f
 8003620:	08003629 	.word	0x08003629
 8003624:	08003641 	.word	0x08003641
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      break;
 800362c:	e030      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d025      	beq.n	8003686 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363e:	e022      	b.n	8003686 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003648:	d11f      	bne.n	800368a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800364e:	e01c      	b.n	800368a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d903      	bls.n	800365e <DMA_CheckFifoParam+0xb6>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d003      	beq.n	8003664 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800365c:	e018      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
      break;
 8003662:	e015      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e00b      	b.n	800368e <DMA_CheckFifoParam+0xe6>
      break;
 8003676:	bf00      	nop
 8003678:	e00a      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 800367a:	bf00      	nop
 800367c:	e008      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 800367e:	bf00      	nop
 8003680:	e006      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 8003682:	bf00      	nop
 8003684:	e004      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 8003686:	bf00      	nop
 8003688:	e002      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;   
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <DMA_CheckFifoParam+0xe8>
      break;
 800368e:	bf00      	nop
    }
  } 
  
  return status; 
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop

080036a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	@ 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e159      	b.n	8003970 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036bc:	2201      	movs	r2, #1
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	f040 8148 	bne.w	800396a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d005      	beq.n	80036f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d130      	bne.n	8003754 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2203      	movs	r2, #3
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003728:	2201      	movs	r2, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 0201 	and.w	r2, r3, #1
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b03      	cmp	r3, #3
 800375e:	d017      	beq.n	8003790 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	2203      	movs	r2, #3
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d123      	bne.n	80037e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	08da      	lsrs	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3208      	adds	r2, #8
 80037a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	220f      	movs	r2, #15
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	08da      	lsrs	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3208      	adds	r2, #8
 80037de:	69b9      	ldr	r1, [r7, #24]
 80037e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	2203      	movs	r2, #3
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0203 	and.w	r2, r3, #3
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a2 	beq.w	800396a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	4b57      	ldr	r3, [pc, #348]	@ (8003988 <HAL_GPIO_Init+0x2e8>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	4a56      	ldr	r2, [pc, #344]	@ (8003988 <HAL_GPIO_Init+0x2e8>)
 8003830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003834:	6453      	str	r3, [r2, #68]	@ 0x44
 8003836:	4b54      	ldr	r3, [pc, #336]	@ (8003988 <HAL_GPIO_Init+0x2e8>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003842:	4a52      	ldr	r2, [pc, #328]	@ (800398c <HAL_GPIO_Init+0x2ec>)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	3302      	adds	r3, #2
 800384a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	220f      	movs	r2, #15
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a49      	ldr	r2, [pc, #292]	@ (8003990 <HAL_GPIO_Init+0x2f0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d019      	beq.n	80038a2 <HAL_GPIO_Init+0x202>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a48      	ldr	r2, [pc, #288]	@ (8003994 <HAL_GPIO_Init+0x2f4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_GPIO_Init+0x1fe>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a47      	ldr	r2, [pc, #284]	@ (8003998 <HAL_GPIO_Init+0x2f8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00d      	beq.n	800389a <HAL_GPIO_Init+0x1fa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a46      	ldr	r2, [pc, #280]	@ (800399c <HAL_GPIO_Init+0x2fc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d007      	beq.n	8003896 <HAL_GPIO_Init+0x1f6>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a45      	ldr	r2, [pc, #276]	@ (80039a0 <HAL_GPIO_Init+0x300>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_GPIO_Init+0x1f2>
 800388e:	2304      	movs	r3, #4
 8003890:	e008      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 8003892:	2307      	movs	r3, #7
 8003894:	e006      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 8003896:	2303      	movs	r3, #3
 8003898:	e004      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 800389a:	2302      	movs	r3, #2
 800389c:	e002      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_GPIO_Init+0x204>
 80038a2:	2300      	movs	r3, #0
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	f002 0203 	and.w	r2, r2, #3
 80038aa:	0092      	lsls	r2, r2, #2
 80038ac:	4093      	lsls	r3, r2
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038b4:	4935      	ldr	r1, [pc, #212]	@ (800398c <HAL_GPIO_Init+0x2ec>)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	3302      	adds	r3, #2
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c2:	4b38      	ldr	r3, [pc, #224]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038e6:	4a2f      	ldr	r2, [pc, #188]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ec:	4b2d      	ldr	r3, [pc, #180]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003910:	4a24      	ldr	r2, [pc, #144]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003916:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800393a:	4a1a      	ldr	r2, [pc, #104]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003940:	4b18      	ldr	r3, [pc, #96]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003964:	4a0f      	ldr	r2, [pc, #60]	@ (80039a4 <HAL_GPIO_Init+0x304>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3301      	adds	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b0f      	cmp	r3, #15
 8003974:	f67f aea2 	bls.w	80036bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3724      	adds	r7, #36	@ 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	40013800 	.word	0x40013800
 8003990:	40020000 	.word	0x40020000
 8003994:	40020400 	.word	0x40020400
 8003998:	40020800 	.word	0x40020800
 800399c:	40020c00 	.word	0x40020c00
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40013c00 	.word	0x40013c00

080039a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	887b      	ldrh	r3, [r7, #2]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	e001      	b.n	80039ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
 80039e4:	4613      	mov	r3, r2
 80039e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e8:	787b      	ldrb	r3, [r7, #1]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039f4:	e003      	b.n	80039fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039f6:	887b      	ldrh	r3, [r7, #2]
 80039f8:	041a      	lsls	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	619a      	str	r2, [r3, #24]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e267      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d075      	beq.n	8003b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a2a:	4b88      	ldr	r3, [pc, #544]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d00c      	beq.n	8003a50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a36:	4b85      	ldr	r3, [pc, #532]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d112      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a42:	4b82      	ldr	r3, [pc, #520]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a4e:	d10b      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	4b7e      	ldr	r3, [pc, #504]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d05b      	beq.n	8003b14 <HAL_RCC_OscConfig+0x108>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d157      	bne.n	8003b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e242      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a70:	d106      	bne.n	8003a80 <HAL_RCC_OscConfig+0x74>
 8003a72:	4b76      	ldr	r3, [pc, #472]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a75      	ldr	r2, [pc, #468]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e01d      	b.n	8003abc <HAL_RCC_OscConfig+0xb0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x98>
 8003a8a:	4b70      	ldr	r3, [pc, #448]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a6f      	ldr	r2, [pc, #444]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b6d      	ldr	r3, [pc, #436]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e00b      	b.n	8003abc <HAL_RCC_OscConfig+0xb0>
 8003aa4:	4b69      	ldr	r3, [pc, #420]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a68      	ldr	r2, [pc, #416]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b66      	ldr	r3, [pc, #408]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a65      	ldr	r2, [pc, #404]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7ff f93a 	bl	8002d3c <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003acc:	f7ff f936 	bl	8002d3c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	@ 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e207      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b5b      	ldr	r3, [pc, #364]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0xc0>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7ff f926 	bl	8002d3c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af4:	f7ff f922 	bl	8002d3c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	@ 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e1f3      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	4b51      	ldr	r3, [pc, #324]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0xe8>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d063      	beq.n	8003bea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b22:	4b4a      	ldr	r3, [pc, #296]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2e:	4b47      	ldr	r3, [pc, #284]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d11c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3a:	4b44      	ldr	r3, [pc, #272]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d116      	bne.n	8003b74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	4b41      	ldr	r3, [pc, #260]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_RCC_OscConfig+0x152>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e1c7      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4937      	ldr	r1, [pc, #220]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b72:	e03a      	b.n	8003bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b7c:	4b34      	ldr	r3, [pc, #208]	@ (8003c50 <HAL_RCC_OscConfig+0x244>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7ff f8db 	bl	8002d3c <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7ff f8d7 	bl	8002d3c <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e1a8      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4b28      	ldr	r3, [pc, #160]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4925      	ldr	r1, [pc, #148]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]
 8003bbc:	e015      	b.n	8003bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bbe:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <HAL_RCC_OscConfig+0x244>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7ff f8ba 	bl	8002d3c <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bcc:	f7ff f8b6 	bl	8002d3c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e187      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bde:	4b1b      	ldr	r3, [pc, #108]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d036      	beq.n	8003c64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfe:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <HAL_RCC_OscConfig+0x248>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7ff f89a 	bl	8002d3c <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7ff f896 	bl	8002d3c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e167      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x200>
 8003c2a:	e01b      	b.n	8003c64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2c:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <HAL_RCC_OscConfig+0x248>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c32:	f7ff f883 	bl	8002d3c <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	e00e      	b.n	8003c58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3a:	f7ff f87f 	bl	8002d3c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d907      	bls.n	8003c58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e150      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	42470000 	.word	0x42470000
 8003c54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	4b88      	ldr	r3, [pc, #544]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1ea      	bne.n	8003c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8097 	beq.w	8003da0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c76:	4b81      	ldr	r3, [pc, #516]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10f      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	4b7d      	ldr	r3, [pc, #500]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c92:	4b7a      	ldr	r3, [pc, #488]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	4b77      	ldr	r3, [pc, #476]	@ (8003e80 <HAL_RCC_OscConfig+0x474>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d118      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cae:	4b74      	ldr	r3, [pc, #464]	@ (8003e80 <HAL_RCC_OscConfig+0x474>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a73      	ldr	r2, [pc, #460]	@ (8003e80 <HAL_RCC_OscConfig+0x474>)
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cba:	f7ff f83f 	bl	8002d3c <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc2:	f7ff f83b 	bl	8002d3c <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e10c      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e80 <HAL_RCC_OscConfig+0x474>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d106      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x2ea>
 8003ce8:	4b64      	ldr	r3, [pc, #400]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cec:	4a63      	ldr	r2, [pc, #396]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf4:	e01c      	b.n	8003d30 <HAL_RCC_OscConfig+0x324>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b05      	cmp	r3, #5
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x30c>
 8003cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d02:	4a5e      	ldr	r2, [pc, #376]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d16:	e00b      	b.n	8003d30 <HAL_RCC_OscConfig+0x324>
 8003d18:	4b58      	ldr	r3, [pc, #352]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1c:	4a57      	ldr	r2, [pc, #348]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d24:	4b55      	ldr	r3, [pc, #340]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d28:	4a54      	ldr	r2, [pc, #336]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d2a:	f023 0304 	bic.w	r3, r3, #4
 8003d2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d015      	beq.n	8003d64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7ff f800 	bl	8002d3c <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d40:	f7fe fffc 	bl	8002d3c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e0cb      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d56:	4b49      	ldr	r3, [pc, #292]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0ee      	beq.n	8003d40 <HAL_RCC_OscConfig+0x334>
 8003d62:	e014      	b.n	8003d8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d64:	f7fe ffea 	bl	8002d3c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6c:	f7fe ffe6 	bl	8002d3c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e0b5      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d82:	4b3e      	ldr	r3, [pc, #248]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ee      	bne.n	8003d6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d94:	4b39      	ldr	r3, [pc, #228]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	4a38      	ldr	r2, [pc, #224]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 80a1 	beq.w	8003eec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003daa:	4b34      	ldr	r3, [pc, #208]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d05c      	beq.n	8003e70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d141      	bne.n	8003e42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbe:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <HAL_RCC_OscConfig+0x478>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe ffba 	bl	8002d3c <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fe ffb6 	bl	8002d3c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e087      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	4b27      	ldr	r3, [pc, #156]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	019b      	lsls	r3, r3, #6
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	3b01      	subs	r3, #1
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	491b      	ldr	r1, [pc, #108]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e14:	4b1b      	ldr	r3, [pc, #108]	@ (8003e84 <HAL_RCC_OscConfig+0x478>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fe ff8f 	bl	8002d3c <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e22:	f7fe ff8b 	bl	8002d3c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e05c      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e34:	4b11      	ldr	r3, [pc, #68]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x416>
 8003e40:	e054      	b.n	8003eec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <HAL_RCC_OscConfig+0x478>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fe ff78 	bl	8002d3c <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fe ff74 	bl	8002d3c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e045      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x444>
 8003e6e:	e03d      	b.n	8003eec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e038      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40007000 	.word	0x40007000
 8003e84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e88:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ec>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d028      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d121      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d11a      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003eb8:	4013      	ands	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ebe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d111      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800

08003efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0cc      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f10:	4b68      	ldr	r3, [pc, #416]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d90c      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b65      	ldr	r3, [pc, #404]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b63      	ldr	r3, [pc, #396]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0b8      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d020      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f50:	4b59      	ldr	r3, [pc, #356]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	4a58      	ldr	r2, [pc, #352]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f68:	4b53      	ldr	r3, [pc, #332]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4a52      	ldr	r2, [pc, #328]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b50      	ldr	r3, [pc, #320]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	494d      	ldr	r1, [pc, #308]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d044      	beq.n	800401c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b47      	ldr	r3, [pc, #284]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d119      	bne.n	8003fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e07f      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	4b3f      	ldr	r3, [pc, #252]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e06f      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fca:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e067      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fda:	4b37      	ldr	r3, [pc, #220]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4934      	ldr	r1, [pc, #208]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fec:	f7fe fea6 	bl	8002d3c <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff4:	f7fe fea2 	bl	8002d3c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e04f      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	4b2b      	ldr	r3, [pc, #172]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 020c 	and.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	429a      	cmp	r2, r3
 800401a:	d1eb      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b25      	ldr	r3, [pc, #148]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d20c      	bcs.n	8004044 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b22      	ldr	r3, [pc, #136]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b20      	ldr	r3, [pc, #128]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e032      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004050:	4b19      	ldr	r3, [pc, #100]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4916      	ldr	r1, [pc, #88]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406e:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	490e      	ldr	r1, [pc, #56]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004082:	f000 f821 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8004086:	4602      	mov	r2, r0
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	490a      	ldr	r1, [pc, #40]	@ (80040bc <HAL_RCC_ClockConfig+0x1c0>)
 8004094:	5ccb      	ldrb	r3, [r1, r3]
 8004096:	fa22 f303 	lsr.w	r3, r2, r3
 800409a:	4a09      	ldr	r2, [pc, #36]	@ (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800409e:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <HAL_RCC_ClockConfig+0x1c8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fe06 	bl	8002cb4 <HAL_InitTick>

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023c00 	.word	0x40023c00
 80040b8:	40023800 	.word	0x40023800
 80040bc:	080098bc 	.word	0x080098bc
 80040c0:	20000014 	.word	0x20000014
 80040c4:	20000018 	.word	0x20000018

080040c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040cc:	b090      	sub	sp, #64	@ 0x40
 80040ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e0:	4b59      	ldr	r3, [pc, #356]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x180>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 030c 	and.w	r3, r3, #12
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d00d      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x40>
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	f200 80a1 	bhi.w	8004234 <HAL_RCC_GetSysClockFreq+0x16c>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x34>
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d003      	beq.n	8004102 <HAL_RCC_GetSysClockFreq+0x3a>
 80040fa:	e09b      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040fc:	4b53      	ldr	r3, [pc, #332]	@ (800424c <HAL_RCC_GetSysClockFreq+0x184>)
 80040fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004100:	e09b      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004102:	4b53      	ldr	r3, [pc, #332]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x188>)
 8004104:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004106:	e098      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004108:	4b4f      	ldr	r3, [pc, #316]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x180>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004110:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004112:	4b4d      	ldr	r3, [pc, #308]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x180>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d028      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411e:	4b4a      	ldr	r3, [pc, #296]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x180>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	099b      	lsrs	r3, r3, #6
 8004124:	2200      	movs	r2, #0
 8004126:	623b      	str	r3, [r7, #32]
 8004128:	627a      	str	r2, [r7, #36]	@ 0x24
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004130:	2100      	movs	r1, #0
 8004132:	4b47      	ldr	r3, [pc, #284]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x188>)
 8004134:	fb03 f201 	mul.w	r2, r3, r1
 8004138:	2300      	movs	r3, #0
 800413a:	fb00 f303 	mul.w	r3, r0, r3
 800413e:	4413      	add	r3, r2
 8004140:	4a43      	ldr	r2, [pc, #268]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x188>)
 8004142:	fba0 1202 	umull	r1, r2, r0, r2
 8004146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004148:	460a      	mov	r2, r1
 800414a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800414c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800414e:	4413      	add	r3, r2
 8004150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004154:	2200      	movs	r2, #0
 8004156:	61bb      	str	r3, [r7, #24]
 8004158:	61fa      	str	r2, [r7, #28]
 800415a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800415e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004162:	f7fc fd29 	bl	8000bb8 <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4613      	mov	r3, r2
 800416c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800416e:	e053      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004170:	4b35      	ldr	r3, [pc, #212]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x180>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	099b      	lsrs	r3, r3, #6
 8004176:	2200      	movs	r2, #0
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	617a      	str	r2, [r7, #20]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004182:	f04f 0b00 	mov.w	fp, #0
 8004186:	4652      	mov	r2, sl
 8004188:	465b      	mov	r3, fp
 800418a:	f04f 0000 	mov.w	r0, #0
 800418e:	f04f 0100 	mov.w	r1, #0
 8004192:	0159      	lsls	r1, r3, #5
 8004194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004198:	0150      	lsls	r0, r2, #5
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	ebb2 080a 	subs.w	r8, r2, sl
 80041a2:	eb63 090b 	sbc.w	r9, r3, fp
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041ba:	ebb2 0408 	subs.w	r4, r2, r8
 80041be:	eb63 0509 	sbc.w	r5, r3, r9
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	00eb      	lsls	r3, r5, #3
 80041cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d0:	00e2      	lsls	r2, r4, #3
 80041d2:	4614      	mov	r4, r2
 80041d4:	461d      	mov	r5, r3
 80041d6:	eb14 030a 	adds.w	r3, r4, sl
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	eb45 030b 	adc.w	r3, r5, fp
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ee:	4629      	mov	r1, r5
 80041f0:	028b      	lsls	r3, r1, #10
 80041f2:	4621      	mov	r1, r4
 80041f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041f8:	4621      	mov	r1, r4
 80041fa:	028a      	lsls	r2, r1, #10
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004202:	2200      	movs	r2, #0
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	60fa      	str	r2, [r7, #12]
 8004208:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800420c:	f7fc fcd4 	bl	8000bb8 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4613      	mov	r3, r2
 8004216:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004218:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x180>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	3301      	adds	r3, #1
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004228:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004232:	e002      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004234:	4b05      	ldr	r3, [pc, #20]	@ (800424c <HAL_RCC_GetSysClockFreq+0x184>)
 8004236:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800423a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800423c:	4618      	mov	r0, r3
 800423e:	3740      	adds	r7, #64	@ 0x40
 8004240:	46bd      	mov	sp, r7
 8004242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800
 800424c:	00f42400 	.word	0x00f42400
 8004250:	017d7840 	.word	0x017d7840

08004254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004258:	4b03      	ldr	r3, [pc, #12]	@ (8004268 <HAL_RCC_GetHCLKFreq+0x14>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000014 	.word	0x20000014

0800426c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004270:	f7ff fff0 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b05      	ldr	r3, [pc, #20]	@ (800428c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0a9b      	lsrs	r3, r3, #10
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4903      	ldr	r1, [pc, #12]	@ (8004290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40023800 	.word	0x40023800
 8004290:	080098cc 	.word	0x080098cc

08004294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004298:	f7ff ffdc 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0b5b      	lsrs	r3, r3, #13
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4903      	ldr	r1, [pc, #12]	@ (80042b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	080098cc 	.word	0x080098cc

080042bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e07b      	b.n	80043c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d108      	bne.n	80042e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042de:	d009      	beq.n	80042f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	61da      	str	r2, [r3, #28]
 80042e6:	e005      	b.n	80042f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fd ff94 	bl	800223c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800432a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004378:	ea42 0103 	orr.w	r1, r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	f003 0104 	and.w	r1, r3, #4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	f003 0210 	and.w	r2, r3, #16
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b088      	sub	sp, #32
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043de:	f7fe fcad 	bl	8002d3c <HAL_GetTick>
 80043e2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d001      	beq.n	80043f8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
 80043f6:	e12a      	b.n	800464e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_SPI_Transmit+0x36>
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e122      	b.n	800464e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_SPI_Transmit+0x48>
 8004412:	2302      	movs	r3, #2
 8004414:	e11b      	b.n	800464e <HAL_SPI_Transmit+0x280>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2203      	movs	r2, #3
 8004422:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004464:	d10f      	bne.n	8004486 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004484:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004490:	2b40      	cmp	r3, #64	@ 0x40
 8004492:	d007      	beq.n	80044a4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ac:	d152      	bne.n	8004554 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_SPI_Transmit+0xee>
 80044b6:	8b7b      	ldrh	r3, [r7, #26]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d145      	bne.n	8004548 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044cc:	1c9a      	adds	r2, r3, #2
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044e0:	e032      	b.n	8004548 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d112      	bne.n	8004516 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f4:	881a      	ldrh	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004500:	1c9a      	adds	r2, r3, #2
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004514:	e018      	b.n	8004548 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004516:	f7fe fc11 	bl	8002d3c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d803      	bhi.n	800452e <HAL_SPI_Transmit+0x160>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d102      	bne.n	8004534 <HAL_SPI_Transmit+0x166>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e082      	b.n	800464e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1c7      	bne.n	80044e2 <HAL_SPI_Transmit+0x114>
 8004552:	e053      	b.n	80045fc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_SPI_Transmit+0x194>
 800455c:	8b7b      	ldrh	r3, [r7, #26]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d147      	bne.n	80045f2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	330c      	adds	r3, #12
 800456c:	7812      	ldrb	r2, [r2, #0]
 800456e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004588:	e033      	b.n	80045f2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b02      	cmp	r3, #2
 8004596:	d113      	bne.n	80045c0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	7812      	ldrb	r2, [r2, #0]
 80045a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045be:	e018      	b.n	80045f2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c0:	f7fe fbbc 	bl	8002d3c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d803      	bhi.n	80045d8 <HAL_SPI_Transmit+0x20a>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	d102      	bne.n	80045de <HAL_SPI_Transmit+0x210>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e02d      	b.n	800464e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1c6      	bne.n	800458a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	6839      	ldr	r1, [r7, #0]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fbab 	bl	8004d5c <SPI_EndRxTxTransaction>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800464c:	2300      	movs	r3, #0
  }
}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b08a      	sub	sp, #40	@ 0x28
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004664:	2301      	movs	r3, #1
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004668:	f7fe fb68 	bl	8002d3c <HAL_GetTick>
 800466c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004674:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800467c:	887b      	ldrh	r3, [r7, #2]
 800467e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004680:	7ffb      	ldrb	r3, [r7, #31]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d00c      	beq.n	80046a0 <HAL_SPI_TransmitReceive+0x4a>
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800468c:	d106      	bne.n	800469c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <HAL_SPI_TransmitReceive+0x46>
 8004696:	7ffb      	ldrb	r3, [r7, #31]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d001      	beq.n	80046a0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
 800469e:	e17f      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x5c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x5c>
 80046ac:	887b      	ldrh	r3, [r7, #2]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e174      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x6e>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e16d      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x34a>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d003      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2205      	movs	r2, #5
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	887a      	ldrh	r2, [r7, #2]
 80046f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	887a      	ldrh	r2, [r7, #2]
 80046f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	887a      	ldrh	r2, [r7, #2]
 8004702:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	887a      	ldrh	r2, [r7, #2]
 8004708:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004720:	2b40      	cmp	r3, #64	@ 0x40
 8004722:	d007      	beq.n	8004734 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004732:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800473c:	d17e      	bne.n	800483c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_SPI_TransmitReceive+0xf6>
 8004746:	8afb      	ldrh	r3, [r7, #22]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d16c      	bne.n	8004826 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	881a      	ldrh	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	1c9a      	adds	r2, r3, #2
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004770:	e059      	b.n	8004826 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b02      	cmp	r3, #2
 800477e:	d11b      	bne.n	80047b8 <HAL_SPI_TransmitReceive+0x162>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <HAL_SPI_TransmitReceive+0x162>
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	2b01      	cmp	r3, #1
 800478e:	d113      	bne.n	80047b8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004794:	881a      	ldrh	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a0:	1c9a      	adds	r2, r3, #2
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d119      	bne.n	80047fa <HAL_SPI_TransmitReceive+0x1a4>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d014      	beq.n	80047fa <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047da:	b292      	uxth	r2, r2
 80047dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e2:	1c9a      	adds	r2, r3, #2
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047f6:	2301      	movs	r3, #1
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047fa:	f7fe fa9f 	bl	8002d3c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004806:	429a      	cmp	r2, r3
 8004808:	d80d      	bhi.n	8004826 <HAL_SPI_TransmitReceive+0x1d0>
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d009      	beq.n	8004826 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e0bc      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1a0      	bne.n	8004772 <HAL_SPI_TransmitReceive+0x11c>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d19b      	bne.n	8004772 <HAL_SPI_TransmitReceive+0x11c>
 800483a:	e082      	b.n	8004942 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <HAL_SPI_TransmitReceive+0x1f4>
 8004844:	8afb      	ldrh	r3, [r7, #22]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d171      	bne.n	800492e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004870:	e05d      	b.n	800492e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b02      	cmp	r3, #2
 800487e:	d11c      	bne.n	80048ba <HAL_SPI_TransmitReceive+0x264>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d017      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x264>
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	2b01      	cmp	r3, #1
 800488e:	d114      	bne.n	80048ba <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	7812      	ldrb	r2, [r2, #0]
 800489c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d119      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x2a6>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d014      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048f8:	2301      	movs	r3, #1
 80048fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048fc:	f7fe fa1e 	bl	8002d3c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004908:	429a      	cmp	r2, r3
 800490a:	d803      	bhi.n	8004914 <HAL_SPI_TransmitReceive+0x2be>
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004912:	d102      	bne.n	800491a <HAL_SPI_TransmitReceive+0x2c4>
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e038      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d19c      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x21c>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d197      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004942:	6a3a      	ldr	r2, [r7, #32]
 8004944:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fa08 	bl	8004d5c <SPI_EndRxTxTransaction>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e01d      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800496c:	2300      	movs	r3, #0
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800499e:	2300      	movs	r3, #0
  }
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3728      	adds	r7, #40	@ 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d001      	beq.n	80049c6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80049c2:	2302      	movs	r3, #2
 80049c4:	e097      	b.n	8004af6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_SPI_Transmit_DMA+0x2a>
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e08f      	b.n	8004af6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_SPI_Transmit_DMA+0x3c>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e088      	b.n	8004af6 <HAL_SPI_Transmit_DMA+0x14e>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2203      	movs	r2, #3
 80049f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	88fa      	ldrh	r2, [r7, #6]
 8004a04:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	88fa      	ldrh	r2, [r7, #6]
 8004a0a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a32:	d10f      	bne.n	8004a54 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a58:	4a29      	ldr	r2, [pc, #164]	@ (8004b00 <HAL_SPI_Transmit_DMA+0x158>)
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a60:	4a28      	ldr	r2, [pc, #160]	@ (8004b04 <HAL_SPI_Transmit_DMA+0x15c>)
 8004a62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a68:	4a27      	ldr	r2, [pc, #156]	@ (8004b08 <HAL_SPI_Transmit_DMA+0x160>)
 8004a6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a70:	2200      	movs	r2, #0
 8004a72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a8c:	f7fe fb46 	bl	800311c <HAL_DMA_Start_IT>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9a:	f043 0210 	orr.w	r2, r3, #16
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e023      	b.n	8004af6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab8:	2b40      	cmp	r3, #64	@ 0x40
 8004aba:	d007      	beq.n	8004acc <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004aca:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0220 	orr.w	r2, r2, #32
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0202 	orr.w	r2, r2, #2
 8004af2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	08004bf1 	.word	0x08004bf1
 8004b04:	08004b49 	.word	0x08004b49
 8004b08:	08004c0d 	.word	0x08004c0d

08004b0c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b56:	f7fe f8f1 	bl	8002d3c <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b6a:	d03b      	beq.n	8004be4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0220 	bic.w	r2, r2, #32
 8004b7a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0202 	bic.w	r2, r2, #2
 8004b8a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	2164      	movs	r1, #100	@ 0x64
 8004b90:	6978      	ldr	r0, [r7, #20]
 8004b92:	f000 f8e3 	bl	8004d5c <SPI_EndRxTxTransaction>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004bdc:	6978      	ldr	r0, [r7, #20]
 8004bde:	f7ff ffa9 	bl	8004b34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004be2:	e002      	b.n	8004bea <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004be4:	6978      	ldr	r0, [r7, #20]
 8004be6:	f7ff ff91 	bl	8004b0c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff ff8e 	bl	8004b20 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0203 	bic.w	r2, r2, #3
 8004c28:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2e:	f043 0210 	orr.w	r2, r3, #16
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f7ff ff78 	bl	8004b34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c5c:	f7fe f86e 	bl	8002d3c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	4413      	add	r3, r2
 8004c6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c6c:	f7fe f866 	bl	8002d3c <HAL_GetTick>
 8004c70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c72:	4b39      	ldr	r3, [pc, #228]	@ (8004d58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	015b      	lsls	r3, r3, #5
 8004c78:	0d1b      	lsrs	r3, r3, #20
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	fb02 f303 	mul.w	r3, r2, r3
 8004c80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c82:	e054      	b.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d050      	beq.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c8c:	f7fe f856 	bl	8002d3c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d902      	bls.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d13d      	bne.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cba:	d111      	bne.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cc4:	d004      	beq.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cce:	d107      	bne.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce8:	d10f      	bne.n	8004d0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e017      	b.n	8004d4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4013      	ands	r3, r2
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d19b      	bne.n	8004c84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000014 	.word	0x20000014

08004d5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	2102      	movs	r1, #2
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff ff6a 	bl	8004c4c <SPI_WaitFlagStateUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d82:	f043 0220 	orr.w	r2, r3, #32
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e032      	b.n	8004df4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <SPI_EndRxTxTransaction+0xa0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1b      	ldr	r2, [pc, #108]	@ (8004e00 <SPI_EndRxTxTransaction+0xa4>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	0d5b      	lsrs	r3, r3, #21
 8004d9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dac:	d112      	bne.n	8004dd4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2180      	movs	r1, #128	@ 0x80
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7ff ff47 	bl	8004c4c <SPI_WaitFlagStateUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d016      	beq.n	8004df2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc8:	f043 0220 	orr.w	r2, r3, #32
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e00f      	b.n	8004df4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dea:	2b80      	cmp	r3, #128	@ 0x80
 8004dec:	d0f2      	beq.n	8004dd4 <SPI_EndRxTxTransaction+0x78>
 8004dee:	e000      	b.n	8004df2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004df0:	bf00      	nop
  }

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20000014 	.word	0x20000014
 8004e00:	165e9f81 	.word	0x165e9f81

08004e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e042      	b.n	8004e9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fd fab6 	bl	800239c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2224      	movs	r2, #36	@ 0x24
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f973 	bl	8005134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	@ 0x28
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d175      	bne.n	8004fb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <HAL_UART_Transmit+0x2c>
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e06e      	b.n	8004fb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2221      	movs	r2, #33	@ 0x21
 8004ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ee2:	f7fd ff2b 	bl	8002d3c <HAL_GetTick>
 8004ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	88fa      	ldrh	r2, [r7, #6]
 8004eec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004efc:	d108      	bne.n	8004f10 <HAL_UART_Transmit+0x6c>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d104      	bne.n	8004f10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	e003      	b.n	8004f18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f18:	e02e      	b.n	8004f78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2200      	movs	r2, #0
 8004f22:	2180      	movs	r1, #128	@ 0x80
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f848 	bl	8004fba <UART_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e03a      	b.n	8004fb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	3302      	adds	r3, #2
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	e007      	b.n	8004f6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3301      	adds	r3, #1
 8004f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1cb      	bne.n	8004f1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2140      	movs	r1, #64	@ 0x40
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f814 	bl	8004fba <UART_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e006      	b.n	8004fb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e000      	b.n	8004fb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
  }
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b086      	sub	sp, #24
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fca:	e03b      	b.n	8005044 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d037      	beq.n	8005044 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd4:	f7fd feb2 	bl	8002d3c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	6a3a      	ldr	r2, [r7, #32]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d302      	bcc.n	8004fea <UART_WaitOnFlagUntilTimeout+0x30>
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e03a      	b.n	8005064 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d023      	beq.n	8005044 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b80      	cmp	r3, #128	@ 0x80
 8005000:	d020      	beq.n	8005044 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b40      	cmp	r3, #64	@ 0x40
 8005006:	d01d      	beq.n	8005044 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b08      	cmp	r3, #8
 8005014:	d116      	bne.n	8005044 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f81d 	bl	800506c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2208      	movs	r2, #8
 8005036:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e00f      	b.n	8005064 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	4013      	ands	r3, r2
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	429a      	cmp	r2, r3
 8005060:	d0b4      	beq.n	8004fcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b095      	sub	sp, #84	@ 0x54
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005086:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800508a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005094:	643a      	str	r2, [r7, #64]	@ 0x40
 8005096:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800509a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e5      	bne.n	8005074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3314      	adds	r3, #20
 80050ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f023 0301 	bic.w	r3, r3, #1
 80050be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e5      	bne.n	80050a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d119      	bne.n	8005118 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f023 0310 	bic.w	r3, r3, #16
 80050fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005104:	61ba      	str	r2, [r7, #24]
 8005106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6979      	ldr	r1, [r7, #20]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	613b      	str	r3, [r7, #16]
   return(result);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005126:	bf00      	nop
 8005128:	3754      	adds	r7, #84	@ 0x54
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005138:	b0c0      	sub	sp, #256	@ 0x100
 800513a:	af00      	add	r7, sp, #0
 800513c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005150:	68d9      	ldr	r1, [r3, #12]
 8005152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	ea40 0301 	orr.w	r3, r0, r1
 800515c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800515e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	431a      	orrs	r2, r3
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	431a      	orrs	r2, r3
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800518c:	f021 010c 	bic.w	r1, r1, #12
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800519a:	430b      	orrs	r3, r1
 800519c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ae:	6999      	ldr	r1, [r3, #24]
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	ea40 0301 	orr.w	r3, r0, r1
 80051ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b8f      	ldr	r3, [pc, #572]	@ (8005400 <UART_SetConfig+0x2cc>)
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d005      	beq.n	80051d4 <UART_SetConfig+0xa0>
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005404 <UART_SetConfig+0x2d0>)
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d104      	bne.n	80051de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051d4:	f7ff f85e 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
 80051d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80051dc:	e003      	b.n	80051e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051de:	f7ff f845 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 80051e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051f0:	f040 810c 	bne.w	800540c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005206:	4622      	mov	r2, r4
 8005208:	462b      	mov	r3, r5
 800520a:	1891      	adds	r1, r2, r2
 800520c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800520e:	415b      	adcs	r3, r3
 8005210:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005216:	4621      	mov	r1, r4
 8005218:	eb12 0801 	adds.w	r8, r2, r1
 800521c:	4629      	mov	r1, r5
 800521e:	eb43 0901 	adc.w	r9, r3, r1
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800522e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005236:	4690      	mov	r8, r2
 8005238:	4699      	mov	r9, r3
 800523a:	4623      	mov	r3, r4
 800523c:	eb18 0303 	adds.w	r3, r8, r3
 8005240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005244:	462b      	mov	r3, r5
 8005246:	eb49 0303 	adc.w	r3, r9, r3
 800524a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800525a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800525e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005262:	460b      	mov	r3, r1
 8005264:	18db      	adds	r3, r3, r3
 8005266:	653b      	str	r3, [r7, #80]	@ 0x50
 8005268:	4613      	mov	r3, r2
 800526a:	eb42 0303 	adc.w	r3, r2, r3
 800526e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005278:	f7fb fc9e 	bl	8000bb8 <__aeabi_uldivmod>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4b61      	ldr	r3, [pc, #388]	@ (8005408 <UART_SetConfig+0x2d4>)
 8005282:	fba3 2302 	umull	r2, r3, r3, r2
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	011c      	lsls	r4, r3, #4
 800528a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800528e:	2200      	movs	r2, #0
 8005290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005294:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800529c:	4642      	mov	r2, r8
 800529e:	464b      	mov	r3, r9
 80052a0:	1891      	adds	r1, r2, r2
 80052a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052a4:	415b      	adcs	r3, r3
 80052a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052ac:	4641      	mov	r1, r8
 80052ae:	eb12 0a01 	adds.w	sl, r2, r1
 80052b2:	4649      	mov	r1, r9
 80052b4:	eb43 0b01 	adc.w	fp, r3, r1
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052cc:	4692      	mov	sl, r2
 80052ce:	469b      	mov	fp, r3
 80052d0:	4643      	mov	r3, r8
 80052d2:	eb1a 0303 	adds.w	r3, sl, r3
 80052d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052da:	464b      	mov	r3, r9
 80052dc:	eb4b 0303 	adc.w	r3, fp, r3
 80052e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052f8:	460b      	mov	r3, r1
 80052fa:	18db      	adds	r3, r3, r3
 80052fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80052fe:	4613      	mov	r3, r2
 8005300:	eb42 0303 	adc.w	r3, r2, r3
 8005304:	647b      	str	r3, [r7, #68]	@ 0x44
 8005306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800530a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800530e:	f7fb fc53 	bl	8000bb8 <__aeabi_uldivmod>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4611      	mov	r1, r2
 8005318:	4b3b      	ldr	r3, [pc, #236]	@ (8005408 <UART_SetConfig+0x2d4>)
 800531a:	fba3 2301 	umull	r2, r3, r3, r1
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	2264      	movs	r2, #100	@ 0x64
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	1acb      	subs	r3, r1, r3
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800532e:	4b36      	ldr	r3, [pc, #216]	@ (8005408 <UART_SetConfig+0x2d4>)
 8005330:	fba3 2302 	umull	r2, r3, r3, r2
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800533c:	441c      	add	r4, r3
 800533e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005342:	2200      	movs	r2, #0
 8005344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005348:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800534c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005350:	4642      	mov	r2, r8
 8005352:	464b      	mov	r3, r9
 8005354:	1891      	adds	r1, r2, r2
 8005356:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005358:	415b      	adcs	r3, r3
 800535a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800535c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005360:	4641      	mov	r1, r8
 8005362:	1851      	adds	r1, r2, r1
 8005364:	6339      	str	r1, [r7, #48]	@ 0x30
 8005366:	4649      	mov	r1, r9
 8005368:	414b      	adcs	r3, r1
 800536a:	637b      	str	r3, [r7, #52]	@ 0x34
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005378:	4659      	mov	r1, fp
 800537a:	00cb      	lsls	r3, r1, #3
 800537c:	4651      	mov	r1, sl
 800537e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005382:	4651      	mov	r1, sl
 8005384:	00ca      	lsls	r2, r1, #3
 8005386:	4610      	mov	r0, r2
 8005388:	4619      	mov	r1, r3
 800538a:	4603      	mov	r3, r0
 800538c:	4642      	mov	r2, r8
 800538e:	189b      	adds	r3, r3, r2
 8005390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005394:	464b      	mov	r3, r9
 8005396:	460a      	mov	r2, r1
 8005398:	eb42 0303 	adc.w	r3, r2, r3
 800539c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053b4:	460b      	mov	r3, r1
 80053b6:	18db      	adds	r3, r3, r3
 80053b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ba:	4613      	mov	r3, r2
 80053bc:	eb42 0303 	adc.w	r3, r2, r3
 80053c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053ca:	f7fb fbf5 	bl	8000bb8 <__aeabi_uldivmod>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005408 <UART_SetConfig+0x2d4>)
 80053d4:	fba3 1302 	umull	r1, r3, r3, r2
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	2164      	movs	r1, #100	@ 0x64
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	3332      	adds	r3, #50	@ 0x32
 80053e6:	4a08      	ldr	r2, [pc, #32]	@ (8005408 <UART_SetConfig+0x2d4>)
 80053e8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	f003 0207 	and.w	r2, r3, #7
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4422      	add	r2, r4
 80053fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053fc:	e106      	b.n	800560c <UART_SetConfig+0x4d8>
 80053fe:	bf00      	nop
 8005400:	40011000 	.word	0x40011000
 8005404:	40011400 	.word	0x40011400
 8005408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800540c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005410:	2200      	movs	r2, #0
 8005412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005416:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800541a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800541e:	4642      	mov	r2, r8
 8005420:	464b      	mov	r3, r9
 8005422:	1891      	adds	r1, r2, r2
 8005424:	6239      	str	r1, [r7, #32]
 8005426:	415b      	adcs	r3, r3
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
 800542a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800542e:	4641      	mov	r1, r8
 8005430:	1854      	adds	r4, r2, r1
 8005432:	4649      	mov	r1, r9
 8005434:	eb43 0501 	adc.w	r5, r3, r1
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	00eb      	lsls	r3, r5, #3
 8005442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005446:	00e2      	lsls	r2, r4, #3
 8005448:	4614      	mov	r4, r2
 800544a:	461d      	mov	r5, r3
 800544c:	4643      	mov	r3, r8
 800544e:	18e3      	adds	r3, r4, r3
 8005450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005454:	464b      	mov	r3, r9
 8005456:	eb45 0303 	adc.w	r3, r5, r3
 800545a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800545e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800546a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800547a:	4629      	mov	r1, r5
 800547c:	008b      	lsls	r3, r1, #2
 800547e:	4621      	mov	r1, r4
 8005480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005484:	4621      	mov	r1, r4
 8005486:	008a      	lsls	r2, r1, #2
 8005488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800548c:	f7fb fb94 	bl	8000bb8 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4b60      	ldr	r3, [pc, #384]	@ (8005618 <UART_SetConfig+0x4e4>)
 8005496:	fba3 2302 	umull	r2, r3, r3, r2
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	011c      	lsls	r4, r3, #4
 800549e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054b0:	4642      	mov	r2, r8
 80054b2:	464b      	mov	r3, r9
 80054b4:	1891      	adds	r1, r2, r2
 80054b6:	61b9      	str	r1, [r7, #24]
 80054b8:	415b      	adcs	r3, r3
 80054ba:	61fb      	str	r3, [r7, #28]
 80054bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c0:	4641      	mov	r1, r8
 80054c2:	1851      	adds	r1, r2, r1
 80054c4:	6139      	str	r1, [r7, #16]
 80054c6:	4649      	mov	r1, r9
 80054c8:	414b      	adcs	r3, r1
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054d8:	4659      	mov	r1, fp
 80054da:	00cb      	lsls	r3, r1, #3
 80054dc:	4651      	mov	r1, sl
 80054de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054e2:	4651      	mov	r1, sl
 80054e4:	00ca      	lsls	r2, r1, #3
 80054e6:	4610      	mov	r0, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	4642      	mov	r2, r8
 80054ee:	189b      	adds	r3, r3, r2
 80054f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054f4:	464b      	mov	r3, r9
 80054f6:	460a      	mov	r2, r1
 80054f8:	eb42 0303 	adc.w	r3, r2, r3
 80054fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	67bb      	str	r3, [r7, #120]	@ 0x78
 800550a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005518:	4649      	mov	r1, r9
 800551a:	008b      	lsls	r3, r1, #2
 800551c:	4641      	mov	r1, r8
 800551e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005522:	4641      	mov	r1, r8
 8005524:	008a      	lsls	r2, r1, #2
 8005526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800552a:	f7fb fb45 	bl	8000bb8 <__aeabi_uldivmod>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4611      	mov	r1, r2
 8005534:	4b38      	ldr	r3, [pc, #224]	@ (8005618 <UART_SetConfig+0x4e4>)
 8005536:	fba3 2301 	umull	r2, r3, r3, r1
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	2264      	movs	r2, #100	@ 0x64
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	1acb      	subs	r3, r1, r3
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	3332      	adds	r3, #50	@ 0x32
 8005548:	4a33      	ldr	r2, [pc, #204]	@ (8005618 <UART_SetConfig+0x4e4>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005554:	441c      	add	r4, r3
 8005556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800555a:	2200      	movs	r2, #0
 800555c:	673b      	str	r3, [r7, #112]	@ 0x70
 800555e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005560:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005564:	4642      	mov	r2, r8
 8005566:	464b      	mov	r3, r9
 8005568:	1891      	adds	r1, r2, r2
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	415b      	adcs	r3, r3
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005574:	4641      	mov	r1, r8
 8005576:	1851      	adds	r1, r2, r1
 8005578:	6039      	str	r1, [r7, #0]
 800557a:	4649      	mov	r1, r9
 800557c:	414b      	adcs	r3, r1
 800557e:	607b      	str	r3, [r7, #4]
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800558c:	4659      	mov	r1, fp
 800558e:	00cb      	lsls	r3, r1, #3
 8005590:	4651      	mov	r1, sl
 8005592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005596:	4651      	mov	r1, sl
 8005598:	00ca      	lsls	r2, r1, #3
 800559a:	4610      	mov	r0, r2
 800559c:	4619      	mov	r1, r3
 800559e:	4603      	mov	r3, r0
 80055a0:	4642      	mov	r2, r8
 80055a2:	189b      	adds	r3, r3, r2
 80055a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055a6:	464b      	mov	r3, r9
 80055a8:	460a      	mov	r2, r1
 80055aa:	eb42 0303 	adc.w	r3, r2, r3
 80055ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80055ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055c8:	4649      	mov	r1, r9
 80055ca:	008b      	lsls	r3, r1, #2
 80055cc:	4641      	mov	r1, r8
 80055ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d2:	4641      	mov	r1, r8
 80055d4:	008a      	lsls	r2, r1, #2
 80055d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055da:	f7fb faed 	bl	8000bb8 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005618 <UART_SetConfig+0x4e4>)
 80055e4:	fba3 1302 	umull	r1, r3, r3, r2
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	2164      	movs	r1, #100	@ 0x64
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	3332      	adds	r3, #50	@ 0x32
 80055f6:	4a08      	ldr	r2, [pc, #32]	@ (8005618 <UART_SetConfig+0x4e4>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4422      	add	r2, r4
 800560a:	609a      	str	r2, [r3, #8]
}
 800560c:	bf00      	nop
 800560e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005612:	46bd      	mov	sp, r7
 8005614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005618:	51eb851f 	.word	0x51eb851f

0800561c <__cvt>:
 800561c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	ec57 6b10 	vmov	r6, r7, d0
 8005624:	2f00      	cmp	r7, #0
 8005626:	460c      	mov	r4, r1
 8005628:	4619      	mov	r1, r3
 800562a:	463b      	mov	r3, r7
 800562c:	bfbb      	ittet	lt
 800562e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005632:	461f      	movlt	r7, r3
 8005634:	2300      	movge	r3, #0
 8005636:	232d      	movlt	r3, #45	@ 0x2d
 8005638:	700b      	strb	r3, [r1, #0]
 800563a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800563c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005640:	4691      	mov	r9, r2
 8005642:	f023 0820 	bic.w	r8, r3, #32
 8005646:	bfbc      	itt	lt
 8005648:	4632      	movlt	r2, r6
 800564a:	4616      	movlt	r6, r2
 800564c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005650:	d005      	beq.n	800565e <__cvt+0x42>
 8005652:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005656:	d100      	bne.n	800565a <__cvt+0x3e>
 8005658:	3401      	adds	r4, #1
 800565a:	2102      	movs	r1, #2
 800565c:	e000      	b.n	8005660 <__cvt+0x44>
 800565e:	2103      	movs	r1, #3
 8005660:	ab03      	add	r3, sp, #12
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	ab02      	add	r3, sp, #8
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	ec47 6b10 	vmov	d0, r6, r7
 800566c:	4653      	mov	r3, sl
 800566e:	4622      	mov	r2, r4
 8005670:	f000 feee 	bl	8006450 <_dtoa_r>
 8005674:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005678:	4605      	mov	r5, r0
 800567a:	d119      	bne.n	80056b0 <__cvt+0x94>
 800567c:	f019 0f01 	tst.w	r9, #1
 8005680:	d00e      	beq.n	80056a0 <__cvt+0x84>
 8005682:	eb00 0904 	add.w	r9, r0, r4
 8005686:	2200      	movs	r2, #0
 8005688:	2300      	movs	r3, #0
 800568a:	4630      	mov	r0, r6
 800568c:	4639      	mov	r1, r7
 800568e:	f7fb fa23 	bl	8000ad8 <__aeabi_dcmpeq>
 8005692:	b108      	cbz	r0, 8005698 <__cvt+0x7c>
 8005694:	f8cd 900c 	str.w	r9, [sp, #12]
 8005698:	2230      	movs	r2, #48	@ 0x30
 800569a:	9b03      	ldr	r3, [sp, #12]
 800569c:	454b      	cmp	r3, r9
 800569e:	d31e      	bcc.n	80056de <__cvt+0xc2>
 80056a0:	9b03      	ldr	r3, [sp, #12]
 80056a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056a4:	1b5b      	subs	r3, r3, r5
 80056a6:	4628      	mov	r0, r5
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	b004      	add	sp, #16
 80056ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056b4:	eb00 0904 	add.w	r9, r0, r4
 80056b8:	d1e5      	bne.n	8005686 <__cvt+0x6a>
 80056ba:	7803      	ldrb	r3, [r0, #0]
 80056bc:	2b30      	cmp	r3, #48	@ 0x30
 80056be:	d10a      	bne.n	80056d6 <__cvt+0xba>
 80056c0:	2200      	movs	r2, #0
 80056c2:	2300      	movs	r3, #0
 80056c4:	4630      	mov	r0, r6
 80056c6:	4639      	mov	r1, r7
 80056c8:	f7fb fa06 	bl	8000ad8 <__aeabi_dcmpeq>
 80056cc:	b918      	cbnz	r0, 80056d6 <__cvt+0xba>
 80056ce:	f1c4 0401 	rsb	r4, r4, #1
 80056d2:	f8ca 4000 	str.w	r4, [sl]
 80056d6:	f8da 3000 	ldr.w	r3, [sl]
 80056da:	4499      	add	r9, r3
 80056dc:	e7d3      	b.n	8005686 <__cvt+0x6a>
 80056de:	1c59      	adds	r1, r3, #1
 80056e0:	9103      	str	r1, [sp, #12]
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e7d9      	b.n	800569a <__cvt+0x7e>

080056e6 <__exponent>:
 80056e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056e8:	2900      	cmp	r1, #0
 80056ea:	bfba      	itte	lt
 80056ec:	4249      	neglt	r1, r1
 80056ee:	232d      	movlt	r3, #45	@ 0x2d
 80056f0:	232b      	movge	r3, #43	@ 0x2b
 80056f2:	2909      	cmp	r1, #9
 80056f4:	7002      	strb	r2, [r0, #0]
 80056f6:	7043      	strb	r3, [r0, #1]
 80056f8:	dd29      	ble.n	800574e <__exponent+0x68>
 80056fa:	f10d 0307 	add.w	r3, sp, #7
 80056fe:	461d      	mov	r5, r3
 8005700:	270a      	movs	r7, #10
 8005702:	461a      	mov	r2, r3
 8005704:	fbb1 f6f7 	udiv	r6, r1, r7
 8005708:	fb07 1416 	mls	r4, r7, r6, r1
 800570c:	3430      	adds	r4, #48	@ 0x30
 800570e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005712:	460c      	mov	r4, r1
 8005714:	2c63      	cmp	r4, #99	@ 0x63
 8005716:	f103 33ff 	add.w	r3, r3, #4294967295
 800571a:	4631      	mov	r1, r6
 800571c:	dcf1      	bgt.n	8005702 <__exponent+0x1c>
 800571e:	3130      	adds	r1, #48	@ 0x30
 8005720:	1e94      	subs	r4, r2, #2
 8005722:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005726:	1c41      	adds	r1, r0, #1
 8005728:	4623      	mov	r3, r4
 800572a:	42ab      	cmp	r3, r5
 800572c:	d30a      	bcc.n	8005744 <__exponent+0x5e>
 800572e:	f10d 0309 	add.w	r3, sp, #9
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	42ac      	cmp	r4, r5
 8005736:	bf88      	it	hi
 8005738:	2300      	movhi	r3, #0
 800573a:	3302      	adds	r3, #2
 800573c:	4403      	add	r3, r0
 800573e:	1a18      	subs	r0, r3, r0
 8005740:	b003      	add	sp, #12
 8005742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005744:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005748:	f801 6f01 	strb.w	r6, [r1, #1]!
 800574c:	e7ed      	b.n	800572a <__exponent+0x44>
 800574e:	2330      	movs	r3, #48	@ 0x30
 8005750:	3130      	adds	r1, #48	@ 0x30
 8005752:	7083      	strb	r3, [r0, #2]
 8005754:	70c1      	strb	r1, [r0, #3]
 8005756:	1d03      	adds	r3, r0, #4
 8005758:	e7f1      	b.n	800573e <__exponent+0x58>
	...

0800575c <_printf_float>:
 800575c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005760:	b08d      	sub	sp, #52	@ 0x34
 8005762:	460c      	mov	r4, r1
 8005764:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005768:	4616      	mov	r6, r2
 800576a:	461f      	mov	r7, r3
 800576c:	4605      	mov	r5, r0
 800576e:	f000 fd6f 	bl	8006250 <_localeconv_r>
 8005772:	6803      	ldr	r3, [r0, #0]
 8005774:	9304      	str	r3, [sp, #16]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fa fd82 	bl	8000280 <strlen>
 800577c:	2300      	movs	r3, #0
 800577e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005780:	f8d8 3000 	ldr.w	r3, [r8]
 8005784:	9005      	str	r0, [sp, #20]
 8005786:	3307      	adds	r3, #7
 8005788:	f023 0307 	bic.w	r3, r3, #7
 800578c:	f103 0208 	add.w	r2, r3, #8
 8005790:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005794:	f8d4 b000 	ldr.w	fp, [r4]
 8005798:	f8c8 2000 	str.w	r2, [r8]
 800579c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80057a4:	9307      	str	r3, [sp, #28]
 80057a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80057aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80057ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057b2:	4b9c      	ldr	r3, [pc, #624]	@ (8005a24 <_printf_float+0x2c8>)
 80057b4:	f04f 32ff 	mov.w	r2, #4294967295
 80057b8:	f7fb f9c0 	bl	8000b3c <__aeabi_dcmpun>
 80057bc:	bb70      	cbnz	r0, 800581c <_printf_float+0xc0>
 80057be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057c2:	4b98      	ldr	r3, [pc, #608]	@ (8005a24 <_printf_float+0x2c8>)
 80057c4:	f04f 32ff 	mov.w	r2, #4294967295
 80057c8:	f7fb f99a 	bl	8000b00 <__aeabi_dcmple>
 80057cc:	bb30      	cbnz	r0, 800581c <_printf_float+0xc0>
 80057ce:	2200      	movs	r2, #0
 80057d0:	2300      	movs	r3, #0
 80057d2:	4640      	mov	r0, r8
 80057d4:	4649      	mov	r1, r9
 80057d6:	f7fb f989 	bl	8000aec <__aeabi_dcmplt>
 80057da:	b110      	cbz	r0, 80057e2 <_printf_float+0x86>
 80057dc:	232d      	movs	r3, #45	@ 0x2d
 80057de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057e2:	4a91      	ldr	r2, [pc, #580]	@ (8005a28 <_printf_float+0x2cc>)
 80057e4:	4b91      	ldr	r3, [pc, #580]	@ (8005a2c <_printf_float+0x2d0>)
 80057e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80057ea:	bf94      	ite	ls
 80057ec:	4690      	movls	r8, r2
 80057ee:	4698      	movhi	r8, r3
 80057f0:	2303      	movs	r3, #3
 80057f2:	6123      	str	r3, [r4, #16]
 80057f4:	f02b 0304 	bic.w	r3, fp, #4
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	f04f 0900 	mov.w	r9, #0
 80057fe:	9700      	str	r7, [sp, #0]
 8005800:	4633      	mov	r3, r6
 8005802:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005804:	4621      	mov	r1, r4
 8005806:	4628      	mov	r0, r5
 8005808:	f000 f9d2 	bl	8005bb0 <_printf_common>
 800580c:	3001      	adds	r0, #1
 800580e:	f040 808d 	bne.w	800592c <_printf_float+0x1d0>
 8005812:	f04f 30ff 	mov.w	r0, #4294967295
 8005816:	b00d      	add	sp, #52	@ 0x34
 8005818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	4640      	mov	r0, r8
 8005822:	4649      	mov	r1, r9
 8005824:	f7fb f98a 	bl	8000b3c <__aeabi_dcmpun>
 8005828:	b140      	cbz	r0, 800583c <_printf_float+0xe0>
 800582a:	464b      	mov	r3, r9
 800582c:	2b00      	cmp	r3, #0
 800582e:	bfbc      	itt	lt
 8005830:	232d      	movlt	r3, #45	@ 0x2d
 8005832:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005836:	4a7e      	ldr	r2, [pc, #504]	@ (8005a30 <_printf_float+0x2d4>)
 8005838:	4b7e      	ldr	r3, [pc, #504]	@ (8005a34 <_printf_float+0x2d8>)
 800583a:	e7d4      	b.n	80057e6 <_printf_float+0x8a>
 800583c:	6863      	ldr	r3, [r4, #4]
 800583e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005842:	9206      	str	r2, [sp, #24]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	d13b      	bne.n	80058c0 <_printf_float+0x164>
 8005848:	2306      	movs	r3, #6
 800584a:	6063      	str	r3, [r4, #4]
 800584c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005850:	2300      	movs	r3, #0
 8005852:	6022      	str	r2, [r4, #0]
 8005854:	9303      	str	r3, [sp, #12]
 8005856:	ab0a      	add	r3, sp, #40	@ 0x28
 8005858:	e9cd a301 	strd	sl, r3, [sp, #4]
 800585c:	ab09      	add	r3, sp, #36	@ 0x24
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	6861      	ldr	r1, [r4, #4]
 8005862:	ec49 8b10 	vmov	d0, r8, r9
 8005866:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800586a:	4628      	mov	r0, r5
 800586c:	f7ff fed6 	bl	800561c <__cvt>
 8005870:	9b06      	ldr	r3, [sp, #24]
 8005872:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005874:	2b47      	cmp	r3, #71	@ 0x47
 8005876:	4680      	mov	r8, r0
 8005878:	d129      	bne.n	80058ce <_printf_float+0x172>
 800587a:	1cc8      	adds	r0, r1, #3
 800587c:	db02      	blt.n	8005884 <_printf_float+0x128>
 800587e:	6863      	ldr	r3, [r4, #4]
 8005880:	4299      	cmp	r1, r3
 8005882:	dd41      	ble.n	8005908 <_printf_float+0x1ac>
 8005884:	f1aa 0a02 	sub.w	sl, sl, #2
 8005888:	fa5f fa8a 	uxtb.w	sl, sl
 800588c:	3901      	subs	r1, #1
 800588e:	4652      	mov	r2, sl
 8005890:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005894:	9109      	str	r1, [sp, #36]	@ 0x24
 8005896:	f7ff ff26 	bl	80056e6 <__exponent>
 800589a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800589c:	1813      	adds	r3, r2, r0
 800589e:	2a01      	cmp	r2, #1
 80058a0:	4681      	mov	r9, r0
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	dc02      	bgt.n	80058ac <_printf_float+0x150>
 80058a6:	6822      	ldr	r2, [r4, #0]
 80058a8:	07d2      	lsls	r2, r2, #31
 80058aa:	d501      	bpl.n	80058b0 <_printf_float+0x154>
 80058ac:	3301      	adds	r3, #1
 80058ae:	6123      	str	r3, [r4, #16]
 80058b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0a2      	beq.n	80057fe <_printf_float+0xa2>
 80058b8:	232d      	movs	r3, #45	@ 0x2d
 80058ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058be:	e79e      	b.n	80057fe <_printf_float+0xa2>
 80058c0:	9a06      	ldr	r2, [sp, #24]
 80058c2:	2a47      	cmp	r2, #71	@ 0x47
 80058c4:	d1c2      	bne.n	800584c <_printf_float+0xf0>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1c0      	bne.n	800584c <_printf_float+0xf0>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e7bd      	b.n	800584a <_printf_float+0xee>
 80058ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058d2:	d9db      	bls.n	800588c <_printf_float+0x130>
 80058d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80058d8:	d118      	bne.n	800590c <_printf_float+0x1b0>
 80058da:	2900      	cmp	r1, #0
 80058dc:	6863      	ldr	r3, [r4, #4]
 80058de:	dd0b      	ble.n	80058f8 <_printf_float+0x19c>
 80058e0:	6121      	str	r1, [r4, #16]
 80058e2:	b913      	cbnz	r3, 80058ea <_printf_float+0x18e>
 80058e4:	6822      	ldr	r2, [r4, #0]
 80058e6:	07d0      	lsls	r0, r2, #31
 80058e8:	d502      	bpl.n	80058f0 <_printf_float+0x194>
 80058ea:	3301      	adds	r3, #1
 80058ec:	440b      	add	r3, r1
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80058f2:	f04f 0900 	mov.w	r9, #0
 80058f6:	e7db      	b.n	80058b0 <_printf_float+0x154>
 80058f8:	b913      	cbnz	r3, 8005900 <_printf_float+0x1a4>
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	07d2      	lsls	r2, r2, #31
 80058fe:	d501      	bpl.n	8005904 <_printf_float+0x1a8>
 8005900:	3302      	adds	r3, #2
 8005902:	e7f4      	b.n	80058ee <_printf_float+0x192>
 8005904:	2301      	movs	r3, #1
 8005906:	e7f2      	b.n	80058ee <_printf_float+0x192>
 8005908:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800590c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800590e:	4299      	cmp	r1, r3
 8005910:	db05      	blt.n	800591e <_printf_float+0x1c2>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	6121      	str	r1, [r4, #16]
 8005916:	07d8      	lsls	r0, r3, #31
 8005918:	d5ea      	bpl.n	80058f0 <_printf_float+0x194>
 800591a:	1c4b      	adds	r3, r1, #1
 800591c:	e7e7      	b.n	80058ee <_printf_float+0x192>
 800591e:	2900      	cmp	r1, #0
 8005920:	bfd4      	ite	le
 8005922:	f1c1 0202 	rsble	r2, r1, #2
 8005926:	2201      	movgt	r2, #1
 8005928:	4413      	add	r3, r2
 800592a:	e7e0      	b.n	80058ee <_printf_float+0x192>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	055a      	lsls	r2, r3, #21
 8005930:	d407      	bmi.n	8005942 <_printf_float+0x1e6>
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	4642      	mov	r2, r8
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	d12b      	bne.n	8005998 <_printf_float+0x23c>
 8005940:	e767      	b.n	8005812 <_printf_float+0xb6>
 8005942:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005946:	f240 80dd 	bls.w	8005b04 <_printf_float+0x3a8>
 800594a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800594e:	2200      	movs	r2, #0
 8005950:	2300      	movs	r3, #0
 8005952:	f7fb f8c1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005956:	2800      	cmp	r0, #0
 8005958:	d033      	beq.n	80059c2 <_printf_float+0x266>
 800595a:	4a37      	ldr	r2, [pc, #220]	@ (8005a38 <_printf_float+0x2dc>)
 800595c:	2301      	movs	r3, #1
 800595e:	4631      	mov	r1, r6
 8005960:	4628      	mov	r0, r5
 8005962:	47b8      	blx	r7
 8005964:	3001      	adds	r0, #1
 8005966:	f43f af54 	beq.w	8005812 <_printf_float+0xb6>
 800596a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800596e:	4543      	cmp	r3, r8
 8005970:	db02      	blt.n	8005978 <_printf_float+0x21c>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	07d8      	lsls	r0, r3, #31
 8005976:	d50f      	bpl.n	8005998 <_printf_float+0x23c>
 8005978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800597c:	4631      	mov	r1, r6
 800597e:	4628      	mov	r0, r5
 8005980:	47b8      	blx	r7
 8005982:	3001      	adds	r0, #1
 8005984:	f43f af45 	beq.w	8005812 <_printf_float+0xb6>
 8005988:	f04f 0900 	mov.w	r9, #0
 800598c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005990:	f104 0a1a 	add.w	sl, r4, #26
 8005994:	45c8      	cmp	r8, r9
 8005996:	dc09      	bgt.n	80059ac <_printf_float+0x250>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	079b      	lsls	r3, r3, #30
 800599c:	f100 8103 	bmi.w	8005ba6 <_printf_float+0x44a>
 80059a0:	68e0      	ldr	r0, [r4, #12]
 80059a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059a4:	4298      	cmp	r0, r3
 80059a6:	bfb8      	it	lt
 80059a8:	4618      	movlt	r0, r3
 80059aa:	e734      	b.n	8005816 <_printf_float+0xba>
 80059ac:	2301      	movs	r3, #1
 80059ae:	4652      	mov	r2, sl
 80059b0:	4631      	mov	r1, r6
 80059b2:	4628      	mov	r0, r5
 80059b4:	47b8      	blx	r7
 80059b6:	3001      	adds	r0, #1
 80059b8:	f43f af2b 	beq.w	8005812 <_printf_float+0xb6>
 80059bc:	f109 0901 	add.w	r9, r9, #1
 80059c0:	e7e8      	b.n	8005994 <_printf_float+0x238>
 80059c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	dc39      	bgt.n	8005a3c <_printf_float+0x2e0>
 80059c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a38 <_printf_float+0x2dc>)
 80059ca:	2301      	movs	r3, #1
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f af1d 	beq.w	8005812 <_printf_float+0xb6>
 80059d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80059dc:	ea59 0303 	orrs.w	r3, r9, r3
 80059e0:	d102      	bne.n	80059e8 <_printf_float+0x28c>
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	07d9      	lsls	r1, r3, #31
 80059e6:	d5d7      	bpl.n	8005998 <_printf_float+0x23c>
 80059e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ec:	4631      	mov	r1, r6
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	f43f af0d 	beq.w	8005812 <_printf_float+0xb6>
 80059f8:	f04f 0a00 	mov.w	sl, #0
 80059fc:	f104 0b1a 	add.w	fp, r4, #26
 8005a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a02:	425b      	negs	r3, r3
 8005a04:	4553      	cmp	r3, sl
 8005a06:	dc01      	bgt.n	8005a0c <_printf_float+0x2b0>
 8005a08:	464b      	mov	r3, r9
 8005a0a:	e793      	b.n	8005934 <_printf_float+0x1d8>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	465a      	mov	r2, fp
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f aefb 	beq.w	8005812 <_printf_float+0xb6>
 8005a1c:	f10a 0a01 	add.w	sl, sl, #1
 8005a20:	e7ee      	b.n	8005a00 <_printf_float+0x2a4>
 8005a22:	bf00      	nop
 8005a24:	7fefffff 	.word	0x7fefffff
 8005a28:	080098dc 	.word	0x080098dc
 8005a2c:	080098e0 	.word	0x080098e0
 8005a30:	080098e4 	.word	0x080098e4
 8005a34:	080098e8 	.word	0x080098e8
 8005a38:	080098ec 	.word	0x080098ec
 8005a3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a42:	4553      	cmp	r3, sl
 8005a44:	bfa8      	it	ge
 8005a46:	4653      	movge	r3, sl
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	4699      	mov	r9, r3
 8005a4c:	dc36      	bgt.n	8005abc <_printf_float+0x360>
 8005a4e:	f04f 0b00 	mov.w	fp, #0
 8005a52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a56:	f104 021a 	add.w	r2, r4, #26
 8005a5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a5c:	9306      	str	r3, [sp, #24]
 8005a5e:	eba3 0309 	sub.w	r3, r3, r9
 8005a62:	455b      	cmp	r3, fp
 8005a64:	dc31      	bgt.n	8005aca <_printf_float+0x36e>
 8005a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a68:	459a      	cmp	sl, r3
 8005a6a:	dc3a      	bgt.n	8005ae2 <_printf_float+0x386>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	07da      	lsls	r2, r3, #31
 8005a70:	d437      	bmi.n	8005ae2 <_printf_float+0x386>
 8005a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a74:	ebaa 0903 	sub.w	r9, sl, r3
 8005a78:	9b06      	ldr	r3, [sp, #24]
 8005a7a:	ebaa 0303 	sub.w	r3, sl, r3
 8005a7e:	4599      	cmp	r9, r3
 8005a80:	bfa8      	it	ge
 8005a82:	4699      	movge	r9, r3
 8005a84:	f1b9 0f00 	cmp.w	r9, #0
 8005a88:	dc33      	bgt.n	8005af2 <_printf_float+0x396>
 8005a8a:	f04f 0800 	mov.w	r8, #0
 8005a8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a92:	f104 0b1a 	add.w	fp, r4, #26
 8005a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a98:	ebaa 0303 	sub.w	r3, sl, r3
 8005a9c:	eba3 0309 	sub.w	r3, r3, r9
 8005aa0:	4543      	cmp	r3, r8
 8005aa2:	f77f af79 	ble.w	8005998 <_printf_float+0x23c>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	465a      	mov	r2, fp
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b8      	blx	r7
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f43f aeae 	beq.w	8005812 <_printf_float+0xb6>
 8005ab6:	f108 0801 	add.w	r8, r8, #1
 8005aba:	e7ec      	b.n	8005a96 <_printf_float+0x33a>
 8005abc:	4642      	mov	r2, r8
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b8      	blx	r7
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d1c2      	bne.n	8005a4e <_printf_float+0x2f2>
 8005ac8:	e6a3      	b.n	8005812 <_printf_float+0xb6>
 8005aca:	2301      	movs	r3, #1
 8005acc:	4631      	mov	r1, r6
 8005ace:	4628      	mov	r0, r5
 8005ad0:	9206      	str	r2, [sp, #24]
 8005ad2:	47b8      	blx	r7
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f43f ae9c 	beq.w	8005812 <_printf_float+0xb6>
 8005ada:	9a06      	ldr	r2, [sp, #24]
 8005adc:	f10b 0b01 	add.w	fp, fp, #1
 8005ae0:	e7bb      	b.n	8005a5a <_printf_float+0x2fe>
 8005ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4628      	mov	r0, r5
 8005aea:	47b8      	blx	r7
 8005aec:	3001      	adds	r0, #1
 8005aee:	d1c0      	bne.n	8005a72 <_printf_float+0x316>
 8005af0:	e68f      	b.n	8005812 <_printf_float+0xb6>
 8005af2:	9a06      	ldr	r2, [sp, #24]
 8005af4:	464b      	mov	r3, r9
 8005af6:	4442      	add	r2, r8
 8005af8:	4631      	mov	r1, r6
 8005afa:	4628      	mov	r0, r5
 8005afc:	47b8      	blx	r7
 8005afe:	3001      	adds	r0, #1
 8005b00:	d1c3      	bne.n	8005a8a <_printf_float+0x32e>
 8005b02:	e686      	b.n	8005812 <_printf_float+0xb6>
 8005b04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b08:	f1ba 0f01 	cmp.w	sl, #1
 8005b0c:	dc01      	bgt.n	8005b12 <_printf_float+0x3b6>
 8005b0e:	07db      	lsls	r3, r3, #31
 8005b10:	d536      	bpl.n	8005b80 <_printf_float+0x424>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4642      	mov	r2, r8
 8005b16:	4631      	mov	r1, r6
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b8      	blx	r7
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	f43f ae78 	beq.w	8005812 <_printf_float+0xb6>
 8005b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b26:	4631      	mov	r1, r6
 8005b28:	4628      	mov	r0, r5
 8005b2a:	47b8      	blx	r7
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	f43f ae70 	beq.w	8005812 <_printf_float+0xb6>
 8005b32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b36:	2200      	movs	r2, #0
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b3e:	f7fa ffcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b42:	b9c0      	cbnz	r0, 8005b76 <_printf_float+0x41a>
 8005b44:	4653      	mov	r3, sl
 8005b46:	f108 0201 	add.w	r2, r8, #1
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	47b8      	blx	r7
 8005b50:	3001      	adds	r0, #1
 8005b52:	d10c      	bne.n	8005b6e <_printf_float+0x412>
 8005b54:	e65d      	b.n	8005812 <_printf_float+0xb6>
 8005b56:	2301      	movs	r3, #1
 8005b58:	465a      	mov	r2, fp
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	f43f ae56 	beq.w	8005812 <_printf_float+0xb6>
 8005b66:	f108 0801 	add.w	r8, r8, #1
 8005b6a:	45d0      	cmp	r8, sl
 8005b6c:	dbf3      	blt.n	8005b56 <_printf_float+0x3fa>
 8005b6e:	464b      	mov	r3, r9
 8005b70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005b74:	e6df      	b.n	8005936 <_printf_float+0x1da>
 8005b76:	f04f 0800 	mov.w	r8, #0
 8005b7a:	f104 0b1a 	add.w	fp, r4, #26
 8005b7e:	e7f4      	b.n	8005b6a <_printf_float+0x40e>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4642      	mov	r2, r8
 8005b84:	e7e1      	b.n	8005b4a <_printf_float+0x3ee>
 8005b86:	2301      	movs	r3, #1
 8005b88:	464a      	mov	r2, r9
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	f43f ae3e 	beq.w	8005812 <_printf_float+0xb6>
 8005b96:	f108 0801 	add.w	r8, r8, #1
 8005b9a:	68e3      	ldr	r3, [r4, #12]
 8005b9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b9e:	1a5b      	subs	r3, r3, r1
 8005ba0:	4543      	cmp	r3, r8
 8005ba2:	dcf0      	bgt.n	8005b86 <_printf_float+0x42a>
 8005ba4:	e6fc      	b.n	80059a0 <_printf_float+0x244>
 8005ba6:	f04f 0800 	mov.w	r8, #0
 8005baa:	f104 0919 	add.w	r9, r4, #25
 8005bae:	e7f4      	b.n	8005b9a <_printf_float+0x43e>

08005bb0 <_printf_common>:
 8005bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb4:	4616      	mov	r6, r2
 8005bb6:	4698      	mov	r8, r3
 8005bb8:	688a      	ldr	r2, [r1, #8]
 8005bba:	690b      	ldr	r3, [r1, #16]
 8005bbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	bfb8      	it	lt
 8005bc4:	4613      	movlt	r3, r2
 8005bc6:	6033      	str	r3, [r6, #0]
 8005bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005bcc:	4607      	mov	r7, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	b10a      	cbz	r2, 8005bd6 <_printf_common+0x26>
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	6033      	str	r3, [r6, #0]
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	0699      	lsls	r1, r3, #26
 8005bda:	bf42      	ittt	mi
 8005bdc:	6833      	ldrmi	r3, [r6, #0]
 8005bde:	3302      	addmi	r3, #2
 8005be0:	6033      	strmi	r3, [r6, #0]
 8005be2:	6825      	ldr	r5, [r4, #0]
 8005be4:	f015 0506 	ands.w	r5, r5, #6
 8005be8:	d106      	bne.n	8005bf8 <_printf_common+0x48>
 8005bea:	f104 0a19 	add.w	sl, r4, #25
 8005bee:	68e3      	ldr	r3, [r4, #12]
 8005bf0:	6832      	ldr	r2, [r6, #0]
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	42ab      	cmp	r3, r5
 8005bf6:	dc26      	bgt.n	8005c46 <_printf_common+0x96>
 8005bf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	3b00      	subs	r3, #0
 8005c00:	bf18      	it	ne
 8005c02:	2301      	movne	r3, #1
 8005c04:	0692      	lsls	r2, r2, #26
 8005c06:	d42b      	bmi.n	8005c60 <_printf_common+0xb0>
 8005c08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	4638      	mov	r0, r7
 8005c10:	47c8      	blx	r9
 8005c12:	3001      	adds	r0, #1
 8005c14:	d01e      	beq.n	8005c54 <_printf_common+0xa4>
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	6922      	ldr	r2, [r4, #16]
 8005c1a:	f003 0306 	and.w	r3, r3, #6
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	bf02      	ittt	eq
 8005c22:	68e5      	ldreq	r5, [r4, #12]
 8005c24:	6833      	ldreq	r3, [r6, #0]
 8005c26:	1aed      	subeq	r5, r5, r3
 8005c28:	68a3      	ldr	r3, [r4, #8]
 8005c2a:	bf0c      	ite	eq
 8005c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c30:	2500      	movne	r5, #0
 8005c32:	4293      	cmp	r3, r2
 8005c34:	bfc4      	itt	gt
 8005c36:	1a9b      	subgt	r3, r3, r2
 8005c38:	18ed      	addgt	r5, r5, r3
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	341a      	adds	r4, #26
 8005c3e:	42b5      	cmp	r5, r6
 8005c40:	d11a      	bne.n	8005c78 <_printf_common+0xc8>
 8005c42:	2000      	movs	r0, #0
 8005c44:	e008      	b.n	8005c58 <_printf_common+0xa8>
 8005c46:	2301      	movs	r3, #1
 8005c48:	4652      	mov	r2, sl
 8005c4a:	4641      	mov	r1, r8
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	47c8      	blx	r9
 8005c50:	3001      	adds	r0, #1
 8005c52:	d103      	bne.n	8005c5c <_printf_common+0xac>
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295
 8005c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5c:	3501      	adds	r5, #1
 8005c5e:	e7c6      	b.n	8005bee <_printf_common+0x3e>
 8005c60:	18e1      	adds	r1, r4, r3
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	2030      	movs	r0, #48	@ 0x30
 8005c66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c6a:	4422      	add	r2, r4
 8005c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c74:	3302      	adds	r3, #2
 8005c76:	e7c7      	b.n	8005c08 <_printf_common+0x58>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4622      	mov	r2, r4
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	4638      	mov	r0, r7
 8005c80:	47c8      	blx	r9
 8005c82:	3001      	adds	r0, #1
 8005c84:	d0e6      	beq.n	8005c54 <_printf_common+0xa4>
 8005c86:	3601      	adds	r6, #1
 8005c88:	e7d9      	b.n	8005c3e <_printf_common+0x8e>
	...

08005c8c <_printf_i>:
 8005c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	7e0f      	ldrb	r7, [r1, #24]
 8005c92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c94:	2f78      	cmp	r7, #120	@ 0x78
 8005c96:	4691      	mov	r9, r2
 8005c98:	4680      	mov	r8, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	469a      	mov	sl, r3
 8005c9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ca2:	d807      	bhi.n	8005cb4 <_printf_i+0x28>
 8005ca4:	2f62      	cmp	r7, #98	@ 0x62
 8005ca6:	d80a      	bhi.n	8005cbe <_printf_i+0x32>
 8005ca8:	2f00      	cmp	r7, #0
 8005caa:	f000 80d2 	beq.w	8005e52 <_printf_i+0x1c6>
 8005cae:	2f58      	cmp	r7, #88	@ 0x58
 8005cb0:	f000 80b9 	beq.w	8005e26 <_printf_i+0x19a>
 8005cb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cbc:	e03a      	b.n	8005d34 <_printf_i+0xa8>
 8005cbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cc2:	2b15      	cmp	r3, #21
 8005cc4:	d8f6      	bhi.n	8005cb4 <_printf_i+0x28>
 8005cc6:	a101      	add	r1, pc, #4	@ (adr r1, 8005ccc <_printf_i+0x40>)
 8005cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ccc:	08005d25 	.word	0x08005d25
 8005cd0:	08005d39 	.word	0x08005d39
 8005cd4:	08005cb5 	.word	0x08005cb5
 8005cd8:	08005cb5 	.word	0x08005cb5
 8005cdc:	08005cb5 	.word	0x08005cb5
 8005ce0:	08005cb5 	.word	0x08005cb5
 8005ce4:	08005d39 	.word	0x08005d39
 8005ce8:	08005cb5 	.word	0x08005cb5
 8005cec:	08005cb5 	.word	0x08005cb5
 8005cf0:	08005cb5 	.word	0x08005cb5
 8005cf4:	08005cb5 	.word	0x08005cb5
 8005cf8:	08005e39 	.word	0x08005e39
 8005cfc:	08005d63 	.word	0x08005d63
 8005d00:	08005df3 	.word	0x08005df3
 8005d04:	08005cb5 	.word	0x08005cb5
 8005d08:	08005cb5 	.word	0x08005cb5
 8005d0c:	08005e5b 	.word	0x08005e5b
 8005d10:	08005cb5 	.word	0x08005cb5
 8005d14:	08005d63 	.word	0x08005d63
 8005d18:	08005cb5 	.word	0x08005cb5
 8005d1c:	08005cb5 	.word	0x08005cb5
 8005d20:	08005dfb 	.word	0x08005dfb
 8005d24:	6833      	ldr	r3, [r6, #0]
 8005d26:	1d1a      	adds	r2, r3, #4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6032      	str	r2, [r6, #0]
 8005d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d34:	2301      	movs	r3, #1
 8005d36:	e09d      	b.n	8005e74 <_printf_i+0x1e8>
 8005d38:	6833      	ldr	r3, [r6, #0]
 8005d3a:	6820      	ldr	r0, [r4, #0]
 8005d3c:	1d19      	adds	r1, r3, #4
 8005d3e:	6031      	str	r1, [r6, #0]
 8005d40:	0606      	lsls	r6, r0, #24
 8005d42:	d501      	bpl.n	8005d48 <_printf_i+0xbc>
 8005d44:	681d      	ldr	r5, [r3, #0]
 8005d46:	e003      	b.n	8005d50 <_printf_i+0xc4>
 8005d48:	0645      	lsls	r5, r0, #25
 8005d4a:	d5fb      	bpl.n	8005d44 <_printf_i+0xb8>
 8005d4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	da03      	bge.n	8005d5c <_printf_i+0xd0>
 8005d54:	232d      	movs	r3, #45	@ 0x2d
 8005d56:	426d      	negs	r5, r5
 8005d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d5c:	4859      	ldr	r0, [pc, #356]	@ (8005ec4 <_printf_i+0x238>)
 8005d5e:	230a      	movs	r3, #10
 8005d60:	e011      	b.n	8005d86 <_printf_i+0xfa>
 8005d62:	6821      	ldr	r1, [r4, #0]
 8005d64:	6833      	ldr	r3, [r6, #0]
 8005d66:	0608      	lsls	r0, r1, #24
 8005d68:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d6c:	d402      	bmi.n	8005d74 <_printf_i+0xe8>
 8005d6e:	0649      	lsls	r1, r1, #25
 8005d70:	bf48      	it	mi
 8005d72:	b2ad      	uxthmi	r5, r5
 8005d74:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d76:	4853      	ldr	r0, [pc, #332]	@ (8005ec4 <_printf_i+0x238>)
 8005d78:	6033      	str	r3, [r6, #0]
 8005d7a:	bf14      	ite	ne
 8005d7c:	230a      	movne	r3, #10
 8005d7e:	2308      	moveq	r3, #8
 8005d80:	2100      	movs	r1, #0
 8005d82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d86:	6866      	ldr	r6, [r4, #4]
 8005d88:	60a6      	str	r6, [r4, #8]
 8005d8a:	2e00      	cmp	r6, #0
 8005d8c:	bfa2      	ittt	ge
 8005d8e:	6821      	ldrge	r1, [r4, #0]
 8005d90:	f021 0104 	bicge.w	r1, r1, #4
 8005d94:	6021      	strge	r1, [r4, #0]
 8005d96:	b90d      	cbnz	r5, 8005d9c <_printf_i+0x110>
 8005d98:	2e00      	cmp	r6, #0
 8005d9a:	d04b      	beq.n	8005e34 <_printf_i+0x1a8>
 8005d9c:	4616      	mov	r6, r2
 8005d9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005da2:	fb03 5711 	mls	r7, r3, r1, r5
 8005da6:	5dc7      	ldrb	r7, [r0, r7]
 8005da8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dac:	462f      	mov	r7, r5
 8005dae:	42bb      	cmp	r3, r7
 8005db0:	460d      	mov	r5, r1
 8005db2:	d9f4      	bls.n	8005d9e <_printf_i+0x112>
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d10b      	bne.n	8005dd0 <_printf_i+0x144>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	07df      	lsls	r7, r3, #31
 8005dbc:	d508      	bpl.n	8005dd0 <_printf_i+0x144>
 8005dbe:	6923      	ldr	r3, [r4, #16]
 8005dc0:	6861      	ldr	r1, [r4, #4]
 8005dc2:	4299      	cmp	r1, r3
 8005dc4:	bfde      	ittt	le
 8005dc6:	2330      	movle	r3, #48	@ 0x30
 8005dc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dd0:	1b92      	subs	r2, r2, r6
 8005dd2:	6122      	str	r2, [r4, #16]
 8005dd4:	f8cd a000 	str.w	sl, [sp]
 8005dd8:	464b      	mov	r3, r9
 8005dda:	aa03      	add	r2, sp, #12
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4640      	mov	r0, r8
 8005de0:	f7ff fee6 	bl	8005bb0 <_printf_common>
 8005de4:	3001      	adds	r0, #1
 8005de6:	d14a      	bne.n	8005e7e <_printf_i+0x1f2>
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dec:	b004      	add	sp, #16
 8005dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	f043 0320 	orr.w	r3, r3, #32
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	4833      	ldr	r0, [pc, #204]	@ (8005ec8 <_printf_i+0x23c>)
 8005dfc:	2778      	movs	r7, #120	@ 0x78
 8005dfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	6831      	ldr	r1, [r6, #0]
 8005e06:	061f      	lsls	r7, r3, #24
 8005e08:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e0c:	d402      	bmi.n	8005e14 <_printf_i+0x188>
 8005e0e:	065f      	lsls	r7, r3, #25
 8005e10:	bf48      	it	mi
 8005e12:	b2ad      	uxthmi	r5, r5
 8005e14:	6031      	str	r1, [r6, #0]
 8005e16:	07d9      	lsls	r1, r3, #31
 8005e18:	bf44      	itt	mi
 8005e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e1e:	6023      	strmi	r3, [r4, #0]
 8005e20:	b11d      	cbz	r5, 8005e2a <_printf_i+0x19e>
 8005e22:	2310      	movs	r3, #16
 8005e24:	e7ac      	b.n	8005d80 <_printf_i+0xf4>
 8005e26:	4827      	ldr	r0, [pc, #156]	@ (8005ec4 <_printf_i+0x238>)
 8005e28:	e7e9      	b.n	8005dfe <_printf_i+0x172>
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	f023 0320 	bic.w	r3, r3, #32
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	e7f6      	b.n	8005e22 <_printf_i+0x196>
 8005e34:	4616      	mov	r6, r2
 8005e36:	e7bd      	b.n	8005db4 <_printf_i+0x128>
 8005e38:	6833      	ldr	r3, [r6, #0]
 8005e3a:	6825      	ldr	r5, [r4, #0]
 8005e3c:	6961      	ldr	r1, [r4, #20]
 8005e3e:	1d18      	adds	r0, r3, #4
 8005e40:	6030      	str	r0, [r6, #0]
 8005e42:	062e      	lsls	r6, r5, #24
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	d501      	bpl.n	8005e4c <_printf_i+0x1c0>
 8005e48:	6019      	str	r1, [r3, #0]
 8005e4a:	e002      	b.n	8005e52 <_printf_i+0x1c6>
 8005e4c:	0668      	lsls	r0, r5, #25
 8005e4e:	d5fb      	bpl.n	8005e48 <_printf_i+0x1bc>
 8005e50:	8019      	strh	r1, [r3, #0]
 8005e52:	2300      	movs	r3, #0
 8005e54:	6123      	str	r3, [r4, #16]
 8005e56:	4616      	mov	r6, r2
 8005e58:	e7bc      	b.n	8005dd4 <_printf_i+0x148>
 8005e5a:	6833      	ldr	r3, [r6, #0]
 8005e5c:	1d1a      	adds	r2, r3, #4
 8005e5e:	6032      	str	r2, [r6, #0]
 8005e60:	681e      	ldr	r6, [r3, #0]
 8005e62:	6862      	ldr	r2, [r4, #4]
 8005e64:	2100      	movs	r1, #0
 8005e66:	4630      	mov	r0, r6
 8005e68:	f7fa f9ba 	bl	80001e0 <memchr>
 8005e6c:	b108      	cbz	r0, 8005e72 <_printf_i+0x1e6>
 8005e6e:	1b80      	subs	r0, r0, r6
 8005e70:	6060      	str	r0, [r4, #4]
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	6123      	str	r3, [r4, #16]
 8005e76:	2300      	movs	r3, #0
 8005e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e7c:	e7aa      	b.n	8005dd4 <_printf_i+0x148>
 8005e7e:	6923      	ldr	r3, [r4, #16]
 8005e80:	4632      	mov	r2, r6
 8005e82:	4649      	mov	r1, r9
 8005e84:	4640      	mov	r0, r8
 8005e86:	47d0      	blx	sl
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d0ad      	beq.n	8005de8 <_printf_i+0x15c>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	079b      	lsls	r3, r3, #30
 8005e90:	d413      	bmi.n	8005eba <_printf_i+0x22e>
 8005e92:	68e0      	ldr	r0, [r4, #12]
 8005e94:	9b03      	ldr	r3, [sp, #12]
 8005e96:	4298      	cmp	r0, r3
 8005e98:	bfb8      	it	lt
 8005e9a:	4618      	movlt	r0, r3
 8005e9c:	e7a6      	b.n	8005dec <_printf_i+0x160>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4632      	mov	r2, r6
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	47d0      	blx	sl
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d09d      	beq.n	8005de8 <_printf_i+0x15c>
 8005eac:	3501      	adds	r5, #1
 8005eae:	68e3      	ldr	r3, [r4, #12]
 8005eb0:	9903      	ldr	r1, [sp, #12]
 8005eb2:	1a5b      	subs	r3, r3, r1
 8005eb4:	42ab      	cmp	r3, r5
 8005eb6:	dcf2      	bgt.n	8005e9e <_printf_i+0x212>
 8005eb8:	e7eb      	b.n	8005e92 <_printf_i+0x206>
 8005eba:	2500      	movs	r5, #0
 8005ebc:	f104 0619 	add.w	r6, r4, #25
 8005ec0:	e7f5      	b.n	8005eae <_printf_i+0x222>
 8005ec2:	bf00      	nop
 8005ec4:	080098ee 	.word	0x080098ee
 8005ec8:	080098ff 	.word	0x080098ff

08005ecc <std>:
 8005ecc:	2300      	movs	r3, #0
 8005ece:	b510      	push	{r4, lr}
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eda:	6083      	str	r3, [r0, #8]
 8005edc:	8181      	strh	r1, [r0, #12]
 8005ede:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ee0:	81c2      	strh	r2, [r0, #14]
 8005ee2:	6183      	str	r3, [r0, #24]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	2208      	movs	r2, #8
 8005ee8:	305c      	adds	r0, #92	@ 0x5c
 8005eea:	f000 f9a9 	bl	8006240 <memset>
 8005eee:	4b0d      	ldr	r3, [pc, #52]	@ (8005f24 <std+0x58>)
 8005ef0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <std+0x5c>)
 8005ef4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f2c <std+0x60>)
 8005ef8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005efa:	4b0d      	ldr	r3, [pc, #52]	@ (8005f30 <std+0x64>)
 8005efc:	6323      	str	r3, [r4, #48]	@ 0x30
 8005efe:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <std+0x68>)
 8005f00:	6224      	str	r4, [r4, #32]
 8005f02:	429c      	cmp	r4, r3
 8005f04:	d006      	beq.n	8005f14 <std+0x48>
 8005f06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f0a:	4294      	cmp	r4, r2
 8005f0c:	d002      	beq.n	8005f14 <std+0x48>
 8005f0e:	33d0      	adds	r3, #208	@ 0xd0
 8005f10:	429c      	cmp	r4, r3
 8005f12:	d105      	bne.n	8005f20 <std+0x54>
 8005f14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f1c:	f000 ba0c 	b.w	8006338 <__retarget_lock_init_recursive>
 8005f20:	bd10      	pop	{r4, pc}
 8005f22:	bf00      	nop
 8005f24:	08006091 	.word	0x08006091
 8005f28:	080060b3 	.word	0x080060b3
 8005f2c:	080060eb 	.word	0x080060eb
 8005f30:	0800610f 	.word	0x0800610f
 8005f34:	20001938 	.word	0x20001938

08005f38 <stdio_exit_handler>:
 8005f38:	4a02      	ldr	r2, [pc, #8]	@ (8005f44 <stdio_exit_handler+0xc>)
 8005f3a:	4903      	ldr	r1, [pc, #12]	@ (8005f48 <stdio_exit_handler+0x10>)
 8005f3c:	4803      	ldr	r0, [pc, #12]	@ (8005f4c <stdio_exit_handler+0x14>)
 8005f3e:	f000 b869 	b.w	8006014 <_fwalk_sglue>
 8005f42:	bf00      	nop
 8005f44:	20000020 	.word	0x20000020
 8005f48:	08007f19 	.word	0x08007f19
 8005f4c:	20000030 	.word	0x20000030

08005f50 <cleanup_stdio>:
 8005f50:	6841      	ldr	r1, [r0, #4]
 8005f52:	4b0c      	ldr	r3, [pc, #48]	@ (8005f84 <cleanup_stdio+0x34>)
 8005f54:	4299      	cmp	r1, r3
 8005f56:	b510      	push	{r4, lr}
 8005f58:	4604      	mov	r4, r0
 8005f5a:	d001      	beq.n	8005f60 <cleanup_stdio+0x10>
 8005f5c:	f001 ffdc 	bl	8007f18 <_fflush_r>
 8005f60:	68a1      	ldr	r1, [r4, #8]
 8005f62:	4b09      	ldr	r3, [pc, #36]	@ (8005f88 <cleanup_stdio+0x38>)
 8005f64:	4299      	cmp	r1, r3
 8005f66:	d002      	beq.n	8005f6e <cleanup_stdio+0x1e>
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f001 ffd5 	bl	8007f18 <_fflush_r>
 8005f6e:	68e1      	ldr	r1, [r4, #12]
 8005f70:	4b06      	ldr	r3, [pc, #24]	@ (8005f8c <cleanup_stdio+0x3c>)
 8005f72:	4299      	cmp	r1, r3
 8005f74:	d004      	beq.n	8005f80 <cleanup_stdio+0x30>
 8005f76:	4620      	mov	r0, r4
 8005f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f7c:	f001 bfcc 	b.w	8007f18 <_fflush_r>
 8005f80:	bd10      	pop	{r4, pc}
 8005f82:	bf00      	nop
 8005f84:	20001938 	.word	0x20001938
 8005f88:	200019a0 	.word	0x200019a0
 8005f8c:	20001a08 	.word	0x20001a08

08005f90 <global_stdio_init.part.0>:
 8005f90:	b510      	push	{r4, lr}
 8005f92:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc0 <global_stdio_init.part.0+0x30>)
 8005f94:	4c0b      	ldr	r4, [pc, #44]	@ (8005fc4 <global_stdio_init.part.0+0x34>)
 8005f96:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc8 <global_stdio_init.part.0+0x38>)
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2104      	movs	r1, #4
 8005fa0:	f7ff ff94 	bl	8005ecc <std>
 8005fa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fa8:	2201      	movs	r2, #1
 8005faa:	2109      	movs	r1, #9
 8005fac:	f7ff ff8e 	bl	8005ecc <std>
 8005fb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fba:	2112      	movs	r1, #18
 8005fbc:	f7ff bf86 	b.w	8005ecc <std>
 8005fc0:	20001a70 	.word	0x20001a70
 8005fc4:	20001938 	.word	0x20001938
 8005fc8:	08005f39 	.word	0x08005f39

08005fcc <__sfp_lock_acquire>:
 8005fcc:	4801      	ldr	r0, [pc, #4]	@ (8005fd4 <__sfp_lock_acquire+0x8>)
 8005fce:	f000 b9b4 	b.w	800633a <__retarget_lock_acquire_recursive>
 8005fd2:	bf00      	nop
 8005fd4:	20001a79 	.word	0x20001a79

08005fd8 <__sfp_lock_release>:
 8005fd8:	4801      	ldr	r0, [pc, #4]	@ (8005fe0 <__sfp_lock_release+0x8>)
 8005fda:	f000 b9af 	b.w	800633c <__retarget_lock_release_recursive>
 8005fde:	bf00      	nop
 8005fe0:	20001a79 	.word	0x20001a79

08005fe4 <__sinit>:
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	f7ff fff0 	bl	8005fcc <__sfp_lock_acquire>
 8005fec:	6a23      	ldr	r3, [r4, #32]
 8005fee:	b11b      	cbz	r3, 8005ff8 <__sinit+0x14>
 8005ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff4:	f7ff bff0 	b.w	8005fd8 <__sfp_lock_release>
 8005ff8:	4b04      	ldr	r3, [pc, #16]	@ (800600c <__sinit+0x28>)
 8005ffa:	6223      	str	r3, [r4, #32]
 8005ffc:	4b04      	ldr	r3, [pc, #16]	@ (8006010 <__sinit+0x2c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f5      	bne.n	8005ff0 <__sinit+0xc>
 8006004:	f7ff ffc4 	bl	8005f90 <global_stdio_init.part.0>
 8006008:	e7f2      	b.n	8005ff0 <__sinit+0xc>
 800600a:	bf00      	nop
 800600c:	08005f51 	.word	0x08005f51
 8006010:	20001a70 	.word	0x20001a70

08006014 <_fwalk_sglue>:
 8006014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006018:	4607      	mov	r7, r0
 800601a:	4688      	mov	r8, r1
 800601c:	4614      	mov	r4, r2
 800601e:	2600      	movs	r6, #0
 8006020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006024:	f1b9 0901 	subs.w	r9, r9, #1
 8006028:	d505      	bpl.n	8006036 <_fwalk_sglue+0x22>
 800602a:	6824      	ldr	r4, [r4, #0]
 800602c:	2c00      	cmp	r4, #0
 800602e:	d1f7      	bne.n	8006020 <_fwalk_sglue+0xc>
 8006030:	4630      	mov	r0, r6
 8006032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006036:	89ab      	ldrh	r3, [r5, #12]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d907      	bls.n	800604c <_fwalk_sglue+0x38>
 800603c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006040:	3301      	adds	r3, #1
 8006042:	d003      	beq.n	800604c <_fwalk_sglue+0x38>
 8006044:	4629      	mov	r1, r5
 8006046:	4638      	mov	r0, r7
 8006048:	47c0      	blx	r8
 800604a:	4306      	orrs	r6, r0
 800604c:	3568      	adds	r5, #104	@ 0x68
 800604e:	e7e9      	b.n	8006024 <_fwalk_sglue+0x10>

08006050 <siprintf>:
 8006050:	b40e      	push	{r1, r2, r3}
 8006052:	b500      	push	{lr}
 8006054:	b09c      	sub	sp, #112	@ 0x70
 8006056:	ab1d      	add	r3, sp, #116	@ 0x74
 8006058:	9002      	str	r0, [sp, #8]
 800605a:	9006      	str	r0, [sp, #24]
 800605c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006060:	4809      	ldr	r0, [pc, #36]	@ (8006088 <siprintf+0x38>)
 8006062:	9107      	str	r1, [sp, #28]
 8006064:	9104      	str	r1, [sp, #16]
 8006066:	4909      	ldr	r1, [pc, #36]	@ (800608c <siprintf+0x3c>)
 8006068:	f853 2b04 	ldr.w	r2, [r3], #4
 800606c:	9105      	str	r1, [sp, #20]
 800606e:	6800      	ldr	r0, [r0, #0]
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	a902      	add	r1, sp, #8
 8006074:	f001 fc8e 	bl	8007994 <_svfiprintf_r>
 8006078:	9b02      	ldr	r3, [sp, #8]
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	b01c      	add	sp, #112	@ 0x70
 8006080:	f85d eb04 	ldr.w	lr, [sp], #4
 8006084:	b003      	add	sp, #12
 8006086:	4770      	bx	lr
 8006088:	2000002c 	.word	0x2000002c
 800608c:	ffff0208 	.word	0xffff0208

08006090 <__sread>:
 8006090:	b510      	push	{r4, lr}
 8006092:	460c      	mov	r4, r1
 8006094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006098:	f000 f900 	bl	800629c <_read_r>
 800609c:	2800      	cmp	r0, #0
 800609e:	bfab      	itete	ge
 80060a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060a2:	89a3      	ldrhlt	r3, [r4, #12]
 80060a4:	181b      	addge	r3, r3, r0
 80060a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060aa:	bfac      	ite	ge
 80060ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060ae:	81a3      	strhlt	r3, [r4, #12]
 80060b0:	bd10      	pop	{r4, pc}

080060b2 <__swrite>:
 80060b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b6:	461f      	mov	r7, r3
 80060b8:	898b      	ldrh	r3, [r1, #12]
 80060ba:	05db      	lsls	r3, r3, #23
 80060bc:	4605      	mov	r5, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	4616      	mov	r6, r2
 80060c2:	d505      	bpl.n	80060d0 <__swrite+0x1e>
 80060c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c8:	2302      	movs	r3, #2
 80060ca:	2200      	movs	r2, #0
 80060cc:	f000 f8d4 	bl	8006278 <_lseek_r>
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060da:	81a3      	strh	r3, [r4, #12]
 80060dc:	4632      	mov	r2, r6
 80060de:	463b      	mov	r3, r7
 80060e0:	4628      	mov	r0, r5
 80060e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060e6:	f000 b8eb 	b.w	80062c0 <_write_r>

080060ea <__sseek>:
 80060ea:	b510      	push	{r4, lr}
 80060ec:	460c      	mov	r4, r1
 80060ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f2:	f000 f8c1 	bl	8006278 <_lseek_r>
 80060f6:	1c43      	adds	r3, r0, #1
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	bf15      	itete	ne
 80060fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006106:	81a3      	strheq	r3, [r4, #12]
 8006108:	bf18      	it	ne
 800610a:	81a3      	strhne	r3, [r4, #12]
 800610c:	bd10      	pop	{r4, pc}

0800610e <__sclose>:
 800610e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006112:	f000 b8a1 	b.w	8006258 <_close_r>

08006116 <__swbuf_r>:
 8006116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006118:	460e      	mov	r6, r1
 800611a:	4614      	mov	r4, r2
 800611c:	4605      	mov	r5, r0
 800611e:	b118      	cbz	r0, 8006128 <__swbuf_r+0x12>
 8006120:	6a03      	ldr	r3, [r0, #32]
 8006122:	b90b      	cbnz	r3, 8006128 <__swbuf_r+0x12>
 8006124:	f7ff ff5e 	bl	8005fe4 <__sinit>
 8006128:	69a3      	ldr	r3, [r4, #24]
 800612a:	60a3      	str	r3, [r4, #8]
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	071a      	lsls	r2, r3, #28
 8006130:	d501      	bpl.n	8006136 <__swbuf_r+0x20>
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	b943      	cbnz	r3, 8006148 <__swbuf_r+0x32>
 8006136:	4621      	mov	r1, r4
 8006138:	4628      	mov	r0, r5
 800613a:	f000 f82b 	bl	8006194 <__swsetup_r>
 800613e:	b118      	cbz	r0, 8006148 <__swbuf_r+0x32>
 8006140:	f04f 37ff 	mov.w	r7, #4294967295
 8006144:	4638      	mov	r0, r7
 8006146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	6922      	ldr	r2, [r4, #16]
 800614c:	1a98      	subs	r0, r3, r2
 800614e:	6963      	ldr	r3, [r4, #20]
 8006150:	b2f6      	uxtb	r6, r6
 8006152:	4283      	cmp	r3, r0
 8006154:	4637      	mov	r7, r6
 8006156:	dc05      	bgt.n	8006164 <__swbuf_r+0x4e>
 8006158:	4621      	mov	r1, r4
 800615a:	4628      	mov	r0, r5
 800615c:	f001 fedc 	bl	8007f18 <_fflush_r>
 8006160:	2800      	cmp	r0, #0
 8006162:	d1ed      	bne.n	8006140 <__swbuf_r+0x2a>
 8006164:	68a3      	ldr	r3, [r4, #8]
 8006166:	3b01      	subs	r3, #1
 8006168:	60a3      	str	r3, [r4, #8]
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	6022      	str	r2, [r4, #0]
 8006170:	701e      	strb	r6, [r3, #0]
 8006172:	6962      	ldr	r2, [r4, #20]
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	429a      	cmp	r2, r3
 8006178:	d004      	beq.n	8006184 <__swbuf_r+0x6e>
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	07db      	lsls	r3, r3, #31
 800617e:	d5e1      	bpl.n	8006144 <__swbuf_r+0x2e>
 8006180:	2e0a      	cmp	r6, #10
 8006182:	d1df      	bne.n	8006144 <__swbuf_r+0x2e>
 8006184:	4621      	mov	r1, r4
 8006186:	4628      	mov	r0, r5
 8006188:	f001 fec6 	bl	8007f18 <_fflush_r>
 800618c:	2800      	cmp	r0, #0
 800618e:	d0d9      	beq.n	8006144 <__swbuf_r+0x2e>
 8006190:	e7d6      	b.n	8006140 <__swbuf_r+0x2a>
	...

08006194 <__swsetup_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4b29      	ldr	r3, [pc, #164]	@ (800623c <__swsetup_r+0xa8>)
 8006198:	4605      	mov	r5, r0
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	460c      	mov	r4, r1
 800619e:	b118      	cbz	r0, 80061a8 <__swsetup_r+0x14>
 80061a0:	6a03      	ldr	r3, [r0, #32]
 80061a2:	b90b      	cbnz	r3, 80061a8 <__swsetup_r+0x14>
 80061a4:	f7ff ff1e 	bl	8005fe4 <__sinit>
 80061a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ac:	0719      	lsls	r1, r3, #28
 80061ae:	d422      	bmi.n	80061f6 <__swsetup_r+0x62>
 80061b0:	06da      	lsls	r2, r3, #27
 80061b2:	d407      	bmi.n	80061c4 <__swsetup_r+0x30>
 80061b4:	2209      	movs	r2, #9
 80061b6:	602a      	str	r2, [r5, #0]
 80061b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	f04f 30ff 	mov.w	r0, #4294967295
 80061c2:	e033      	b.n	800622c <__swsetup_r+0x98>
 80061c4:	0758      	lsls	r0, r3, #29
 80061c6:	d512      	bpl.n	80061ee <__swsetup_r+0x5a>
 80061c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061ca:	b141      	cbz	r1, 80061de <__swsetup_r+0x4a>
 80061cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061d0:	4299      	cmp	r1, r3
 80061d2:	d002      	beq.n	80061da <__swsetup_r+0x46>
 80061d4:	4628      	mov	r0, r5
 80061d6:	f000 feff 	bl	8006fd8 <_free_r>
 80061da:	2300      	movs	r3, #0
 80061dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061e4:	81a3      	strh	r3, [r4, #12]
 80061e6:	2300      	movs	r3, #0
 80061e8:	6063      	str	r3, [r4, #4]
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	f043 0308 	orr.w	r3, r3, #8
 80061f4:	81a3      	strh	r3, [r4, #12]
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	b94b      	cbnz	r3, 800620e <__swsetup_r+0x7a>
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006204:	d003      	beq.n	800620e <__swsetup_r+0x7a>
 8006206:	4621      	mov	r1, r4
 8006208:	4628      	mov	r0, r5
 800620a:	f001 fed3 	bl	8007fb4 <__smakebuf_r>
 800620e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006212:	f013 0201 	ands.w	r2, r3, #1
 8006216:	d00a      	beq.n	800622e <__swsetup_r+0x9a>
 8006218:	2200      	movs	r2, #0
 800621a:	60a2      	str	r2, [r4, #8]
 800621c:	6962      	ldr	r2, [r4, #20]
 800621e:	4252      	negs	r2, r2
 8006220:	61a2      	str	r2, [r4, #24]
 8006222:	6922      	ldr	r2, [r4, #16]
 8006224:	b942      	cbnz	r2, 8006238 <__swsetup_r+0xa4>
 8006226:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800622a:	d1c5      	bne.n	80061b8 <__swsetup_r+0x24>
 800622c:	bd38      	pop	{r3, r4, r5, pc}
 800622e:	0799      	lsls	r1, r3, #30
 8006230:	bf58      	it	pl
 8006232:	6962      	ldrpl	r2, [r4, #20]
 8006234:	60a2      	str	r2, [r4, #8]
 8006236:	e7f4      	b.n	8006222 <__swsetup_r+0x8e>
 8006238:	2000      	movs	r0, #0
 800623a:	e7f7      	b.n	800622c <__swsetup_r+0x98>
 800623c:	2000002c 	.word	0x2000002c

08006240 <memset>:
 8006240:	4402      	add	r2, r0
 8006242:	4603      	mov	r3, r0
 8006244:	4293      	cmp	r3, r2
 8006246:	d100      	bne.n	800624a <memset+0xa>
 8006248:	4770      	bx	lr
 800624a:	f803 1b01 	strb.w	r1, [r3], #1
 800624e:	e7f9      	b.n	8006244 <memset+0x4>

08006250 <_localeconv_r>:
 8006250:	4800      	ldr	r0, [pc, #0]	@ (8006254 <_localeconv_r+0x4>)
 8006252:	4770      	bx	lr
 8006254:	2000016c 	.word	0x2000016c

08006258 <_close_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4d06      	ldr	r5, [pc, #24]	@ (8006274 <_close_r+0x1c>)
 800625c:	2300      	movs	r3, #0
 800625e:	4604      	mov	r4, r0
 8006260:	4608      	mov	r0, r1
 8006262:	602b      	str	r3, [r5, #0]
 8006264:	f7fc f978 	bl	8002558 <_close>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d102      	bne.n	8006272 <_close_r+0x1a>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b103      	cbz	r3, 8006272 <_close_r+0x1a>
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	20001a74 	.word	0x20001a74

08006278 <_lseek_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4d07      	ldr	r5, [pc, #28]	@ (8006298 <_lseek_r+0x20>)
 800627c:	4604      	mov	r4, r0
 800627e:	4608      	mov	r0, r1
 8006280:	4611      	mov	r1, r2
 8006282:	2200      	movs	r2, #0
 8006284:	602a      	str	r2, [r5, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	f7fc f98d 	bl	80025a6 <_lseek>
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	d102      	bne.n	8006296 <_lseek_r+0x1e>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	b103      	cbz	r3, 8006296 <_lseek_r+0x1e>
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	bd38      	pop	{r3, r4, r5, pc}
 8006298:	20001a74 	.word	0x20001a74

0800629c <_read_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d07      	ldr	r5, [pc, #28]	@ (80062bc <_read_r+0x20>)
 80062a0:	4604      	mov	r4, r0
 80062a2:	4608      	mov	r0, r1
 80062a4:	4611      	mov	r1, r2
 80062a6:	2200      	movs	r2, #0
 80062a8:	602a      	str	r2, [r5, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f7fc f91b 	bl	80024e6 <_read>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_read_r+0x1e>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_read_r+0x1e>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20001a74 	.word	0x20001a74

080062c0 <_write_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4d07      	ldr	r5, [pc, #28]	@ (80062e0 <_write_r+0x20>)
 80062c4:	4604      	mov	r4, r0
 80062c6:	4608      	mov	r0, r1
 80062c8:	4611      	mov	r1, r2
 80062ca:	2200      	movs	r2, #0
 80062cc:	602a      	str	r2, [r5, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	f7fc f926 	bl	8002520 <_write>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_write_r+0x1e>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_write_r+0x1e>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	20001a74 	.word	0x20001a74

080062e4 <__errno>:
 80062e4:	4b01      	ldr	r3, [pc, #4]	@ (80062ec <__errno+0x8>)
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	2000002c 	.word	0x2000002c

080062f0 <__libc_init_array>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	4d0d      	ldr	r5, [pc, #52]	@ (8006328 <__libc_init_array+0x38>)
 80062f4:	4c0d      	ldr	r4, [pc, #52]	@ (800632c <__libc_init_array+0x3c>)
 80062f6:	1b64      	subs	r4, r4, r5
 80062f8:	10a4      	asrs	r4, r4, #2
 80062fa:	2600      	movs	r6, #0
 80062fc:	42a6      	cmp	r6, r4
 80062fe:	d109      	bne.n	8006314 <__libc_init_array+0x24>
 8006300:	4d0b      	ldr	r5, [pc, #44]	@ (8006330 <__libc_init_array+0x40>)
 8006302:	4c0c      	ldr	r4, [pc, #48]	@ (8006334 <__libc_init_array+0x44>)
 8006304:	f001 ffd2 	bl	80082ac <_init>
 8006308:	1b64      	subs	r4, r4, r5
 800630a:	10a4      	asrs	r4, r4, #2
 800630c:	2600      	movs	r6, #0
 800630e:	42a6      	cmp	r6, r4
 8006310:	d105      	bne.n	800631e <__libc_init_array+0x2e>
 8006312:	bd70      	pop	{r4, r5, r6, pc}
 8006314:	f855 3b04 	ldr.w	r3, [r5], #4
 8006318:	4798      	blx	r3
 800631a:	3601      	adds	r6, #1
 800631c:	e7ee      	b.n	80062fc <__libc_init_array+0xc>
 800631e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006322:	4798      	blx	r3
 8006324:	3601      	adds	r6, #1
 8006326:	e7f2      	b.n	800630e <__libc_init_array+0x1e>
 8006328:	08009c58 	.word	0x08009c58
 800632c:	08009c58 	.word	0x08009c58
 8006330:	08009c58 	.word	0x08009c58
 8006334:	08009c5c 	.word	0x08009c5c

08006338 <__retarget_lock_init_recursive>:
 8006338:	4770      	bx	lr

0800633a <__retarget_lock_acquire_recursive>:
 800633a:	4770      	bx	lr

0800633c <__retarget_lock_release_recursive>:
 800633c:	4770      	bx	lr

0800633e <quorem>:
 800633e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006342:	6903      	ldr	r3, [r0, #16]
 8006344:	690c      	ldr	r4, [r1, #16]
 8006346:	42a3      	cmp	r3, r4
 8006348:	4607      	mov	r7, r0
 800634a:	db7e      	blt.n	800644a <quorem+0x10c>
 800634c:	3c01      	subs	r4, #1
 800634e:	f101 0814 	add.w	r8, r1, #20
 8006352:	00a3      	lsls	r3, r4, #2
 8006354:	f100 0514 	add.w	r5, r0, #20
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006364:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006368:	3301      	adds	r3, #1
 800636a:	429a      	cmp	r2, r3
 800636c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006370:	fbb2 f6f3 	udiv	r6, r2, r3
 8006374:	d32e      	bcc.n	80063d4 <quorem+0x96>
 8006376:	f04f 0a00 	mov.w	sl, #0
 800637a:	46c4      	mov	ip, r8
 800637c:	46ae      	mov	lr, r5
 800637e:	46d3      	mov	fp, sl
 8006380:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006384:	b298      	uxth	r0, r3
 8006386:	fb06 a000 	mla	r0, r6, r0, sl
 800638a:	0c02      	lsrs	r2, r0, #16
 800638c:	0c1b      	lsrs	r3, r3, #16
 800638e:	fb06 2303 	mla	r3, r6, r3, r2
 8006392:	f8de 2000 	ldr.w	r2, [lr]
 8006396:	b280      	uxth	r0, r0
 8006398:	b292      	uxth	r2, r2
 800639a:	1a12      	subs	r2, r2, r0
 800639c:	445a      	add	r2, fp
 800639e:	f8de 0000 	ldr.w	r0, [lr]
 80063a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80063ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063b0:	b292      	uxth	r2, r2
 80063b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063b6:	45e1      	cmp	r9, ip
 80063b8:	f84e 2b04 	str.w	r2, [lr], #4
 80063bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063c0:	d2de      	bcs.n	8006380 <quorem+0x42>
 80063c2:	9b00      	ldr	r3, [sp, #0]
 80063c4:	58eb      	ldr	r3, [r5, r3]
 80063c6:	b92b      	cbnz	r3, 80063d4 <quorem+0x96>
 80063c8:	9b01      	ldr	r3, [sp, #4]
 80063ca:	3b04      	subs	r3, #4
 80063cc:	429d      	cmp	r5, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	d32f      	bcc.n	8006432 <quorem+0xf4>
 80063d2:	613c      	str	r4, [r7, #16]
 80063d4:	4638      	mov	r0, r7
 80063d6:	f001 f979 	bl	80076cc <__mcmp>
 80063da:	2800      	cmp	r0, #0
 80063dc:	db25      	blt.n	800642a <quorem+0xec>
 80063de:	4629      	mov	r1, r5
 80063e0:	2000      	movs	r0, #0
 80063e2:	f858 2b04 	ldr.w	r2, [r8], #4
 80063e6:	f8d1 c000 	ldr.w	ip, [r1]
 80063ea:	fa1f fe82 	uxth.w	lr, r2
 80063ee:	fa1f f38c 	uxth.w	r3, ip
 80063f2:	eba3 030e 	sub.w	r3, r3, lr
 80063f6:	4403      	add	r3, r0
 80063f8:	0c12      	lsrs	r2, r2, #16
 80063fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80063fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006402:	b29b      	uxth	r3, r3
 8006404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006408:	45c1      	cmp	r9, r8
 800640a:	f841 3b04 	str.w	r3, [r1], #4
 800640e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006412:	d2e6      	bcs.n	80063e2 <quorem+0xa4>
 8006414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006418:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800641c:	b922      	cbnz	r2, 8006428 <quorem+0xea>
 800641e:	3b04      	subs	r3, #4
 8006420:	429d      	cmp	r5, r3
 8006422:	461a      	mov	r2, r3
 8006424:	d30b      	bcc.n	800643e <quorem+0x100>
 8006426:	613c      	str	r4, [r7, #16]
 8006428:	3601      	adds	r6, #1
 800642a:	4630      	mov	r0, r6
 800642c:	b003      	add	sp, #12
 800642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	3b04      	subs	r3, #4
 8006436:	2a00      	cmp	r2, #0
 8006438:	d1cb      	bne.n	80063d2 <quorem+0x94>
 800643a:	3c01      	subs	r4, #1
 800643c:	e7c6      	b.n	80063cc <quorem+0x8e>
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	3b04      	subs	r3, #4
 8006442:	2a00      	cmp	r2, #0
 8006444:	d1ef      	bne.n	8006426 <quorem+0xe8>
 8006446:	3c01      	subs	r4, #1
 8006448:	e7ea      	b.n	8006420 <quorem+0xe2>
 800644a:	2000      	movs	r0, #0
 800644c:	e7ee      	b.n	800642c <quorem+0xee>
	...

08006450 <_dtoa_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	69c7      	ldr	r7, [r0, #28]
 8006456:	b099      	sub	sp, #100	@ 0x64
 8006458:	ed8d 0b02 	vstr	d0, [sp, #8]
 800645c:	ec55 4b10 	vmov	r4, r5, d0
 8006460:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006462:	9109      	str	r1, [sp, #36]	@ 0x24
 8006464:	4683      	mov	fp, r0
 8006466:	920e      	str	r2, [sp, #56]	@ 0x38
 8006468:	9313      	str	r3, [sp, #76]	@ 0x4c
 800646a:	b97f      	cbnz	r7, 800648c <_dtoa_r+0x3c>
 800646c:	2010      	movs	r0, #16
 800646e:	f000 fdfd 	bl	800706c <malloc>
 8006472:	4602      	mov	r2, r0
 8006474:	f8cb 001c 	str.w	r0, [fp, #28]
 8006478:	b920      	cbnz	r0, 8006484 <_dtoa_r+0x34>
 800647a:	4ba7      	ldr	r3, [pc, #668]	@ (8006718 <_dtoa_r+0x2c8>)
 800647c:	21ef      	movs	r1, #239	@ 0xef
 800647e:	48a7      	ldr	r0, [pc, #668]	@ (800671c <_dtoa_r+0x2cc>)
 8006480:	f001 fe2e 	bl	80080e0 <__assert_func>
 8006484:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006488:	6007      	str	r7, [r0, #0]
 800648a:	60c7      	str	r7, [r0, #12]
 800648c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006490:	6819      	ldr	r1, [r3, #0]
 8006492:	b159      	cbz	r1, 80064ac <_dtoa_r+0x5c>
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	604a      	str	r2, [r1, #4]
 8006498:	2301      	movs	r3, #1
 800649a:	4093      	lsls	r3, r2
 800649c:	608b      	str	r3, [r1, #8]
 800649e:	4658      	mov	r0, fp
 80064a0:	f000 feda 	bl	8007258 <_Bfree>
 80064a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	1e2b      	subs	r3, r5, #0
 80064ae:	bfb9      	ittee	lt
 80064b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064b4:	9303      	strlt	r3, [sp, #12]
 80064b6:	2300      	movge	r3, #0
 80064b8:	6033      	strge	r3, [r6, #0]
 80064ba:	9f03      	ldr	r7, [sp, #12]
 80064bc:	4b98      	ldr	r3, [pc, #608]	@ (8006720 <_dtoa_r+0x2d0>)
 80064be:	bfbc      	itt	lt
 80064c0:	2201      	movlt	r2, #1
 80064c2:	6032      	strlt	r2, [r6, #0]
 80064c4:	43bb      	bics	r3, r7
 80064c6:	d112      	bne.n	80064ee <_dtoa_r+0x9e>
 80064c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80064ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064d4:	4323      	orrs	r3, r4
 80064d6:	f000 854d 	beq.w	8006f74 <_dtoa_r+0xb24>
 80064da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80064dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006734 <_dtoa_r+0x2e4>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 854f 	beq.w	8006f84 <_dtoa_r+0xb34>
 80064e6:	f10a 0303 	add.w	r3, sl, #3
 80064ea:	f000 bd49 	b.w	8006f80 <_dtoa_r+0xb30>
 80064ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064f2:	2200      	movs	r2, #0
 80064f4:	ec51 0b17 	vmov	r0, r1, d7
 80064f8:	2300      	movs	r3, #0
 80064fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80064fe:	f7fa faeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006502:	4680      	mov	r8, r0
 8006504:	b158      	cbz	r0, 800651e <_dtoa_r+0xce>
 8006506:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006508:	2301      	movs	r3, #1
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800650e:	b113      	cbz	r3, 8006516 <_dtoa_r+0xc6>
 8006510:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006512:	4b84      	ldr	r3, [pc, #528]	@ (8006724 <_dtoa_r+0x2d4>)
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006738 <_dtoa_r+0x2e8>
 800651a:	f000 bd33 	b.w	8006f84 <_dtoa_r+0xb34>
 800651e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006522:	aa16      	add	r2, sp, #88	@ 0x58
 8006524:	a917      	add	r1, sp, #92	@ 0x5c
 8006526:	4658      	mov	r0, fp
 8006528:	f001 f980 	bl	800782c <__d2b>
 800652c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006530:	4681      	mov	r9, r0
 8006532:	2e00      	cmp	r6, #0
 8006534:	d077      	beq.n	8006626 <_dtoa_r+0x1d6>
 8006536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006538:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800653c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006544:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006548:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800654c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006550:	4619      	mov	r1, r3
 8006552:	2200      	movs	r2, #0
 8006554:	4b74      	ldr	r3, [pc, #464]	@ (8006728 <_dtoa_r+0x2d8>)
 8006556:	f7f9 fe9f 	bl	8000298 <__aeabi_dsub>
 800655a:	a369      	add	r3, pc, #420	@ (adr r3, 8006700 <_dtoa_r+0x2b0>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7fa f852 	bl	8000608 <__aeabi_dmul>
 8006564:	a368      	add	r3, pc, #416	@ (adr r3, 8006708 <_dtoa_r+0x2b8>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f7f9 fe97 	bl	800029c <__adddf3>
 800656e:	4604      	mov	r4, r0
 8006570:	4630      	mov	r0, r6
 8006572:	460d      	mov	r5, r1
 8006574:	f7f9 ffde 	bl	8000534 <__aeabi_i2d>
 8006578:	a365      	add	r3, pc, #404	@ (adr r3, 8006710 <_dtoa_r+0x2c0>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7fa f843 	bl	8000608 <__aeabi_dmul>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	f7f9 fe87 	bl	800029c <__adddf3>
 800658e:	4604      	mov	r4, r0
 8006590:	460d      	mov	r5, r1
 8006592:	f7fa fae9 	bl	8000b68 <__aeabi_d2iz>
 8006596:	2200      	movs	r2, #0
 8006598:	4607      	mov	r7, r0
 800659a:	2300      	movs	r3, #0
 800659c:	4620      	mov	r0, r4
 800659e:	4629      	mov	r1, r5
 80065a0:	f7fa faa4 	bl	8000aec <__aeabi_dcmplt>
 80065a4:	b140      	cbz	r0, 80065b8 <_dtoa_r+0x168>
 80065a6:	4638      	mov	r0, r7
 80065a8:	f7f9 ffc4 	bl	8000534 <__aeabi_i2d>
 80065ac:	4622      	mov	r2, r4
 80065ae:	462b      	mov	r3, r5
 80065b0:	f7fa fa92 	bl	8000ad8 <__aeabi_dcmpeq>
 80065b4:	b900      	cbnz	r0, 80065b8 <_dtoa_r+0x168>
 80065b6:	3f01      	subs	r7, #1
 80065b8:	2f16      	cmp	r7, #22
 80065ba:	d851      	bhi.n	8006660 <_dtoa_r+0x210>
 80065bc:	4b5b      	ldr	r3, [pc, #364]	@ (800672c <_dtoa_r+0x2dc>)
 80065be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065ca:	f7fa fa8f 	bl	8000aec <__aeabi_dcmplt>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d048      	beq.n	8006664 <_dtoa_r+0x214>
 80065d2:	3f01      	subs	r7, #1
 80065d4:	2300      	movs	r3, #0
 80065d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80065d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80065da:	1b9b      	subs	r3, r3, r6
 80065dc:	1e5a      	subs	r2, r3, #1
 80065de:	bf44      	itt	mi
 80065e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80065e4:	2300      	movmi	r3, #0
 80065e6:	9208      	str	r2, [sp, #32]
 80065e8:	bf54      	ite	pl
 80065ea:	f04f 0800 	movpl.w	r8, #0
 80065ee:	9308      	strmi	r3, [sp, #32]
 80065f0:	2f00      	cmp	r7, #0
 80065f2:	db39      	blt.n	8006668 <_dtoa_r+0x218>
 80065f4:	9b08      	ldr	r3, [sp, #32]
 80065f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80065f8:	443b      	add	r3, r7
 80065fa:	9308      	str	r3, [sp, #32]
 80065fc:	2300      	movs	r3, #0
 80065fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006602:	2b09      	cmp	r3, #9
 8006604:	d864      	bhi.n	80066d0 <_dtoa_r+0x280>
 8006606:	2b05      	cmp	r3, #5
 8006608:	bfc4      	itt	gt
 800660a:	3b04      	subgt	r3, #4
 800660c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800660e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006610:	f1a3 0302 	sub.w	r3, r3, #2
 8006614:	bfcc      	ite	gt
 8006616:	2400      	movgt	r4, #0
 8006618:	2401      	movle	r4, #1
 800661a:	2b03      	cmp	r3, #3
 800661c:	d863      	bhi.n	80066e6 <_dtoa_r+0x296>
 800661e:	e8df f003 	tbb	[pc, r3]
 8006622:	372a      	.short	0x372a
 8006624:	5535      	.short	0x5535
 8006626:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800662a:	441e      	add	r6, r3
 800662c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006630:	2b20      	cmp	r3, #32
 8006632:	bfc1      	itttt	gt
 8006634:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006638:	409f      	lslgt	r7, r3
 800663a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800663e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006642:	bfd6      	itet	le
 8006644:	f1c3 0320 	rsble	r3, r3, #32
 8006648:	ea47 0003 	orrgt.w	r0, r7, r3
 800664c:	fa04 f003 	lslle.w	r0, r4, r3
 8006650:	f7f9 ff60 	bl	8000514 <__aeabi_ui2d>
 8006654:	2201      	movs	r2, #1
 8006656:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800665a:	3e01      	subs	r6, #1
 800665c:	9214      	str	r2, [sp, #80]	@ 0x50
 800665e:	e777      	b.n	8006550 <_dtoa_r+0x100>
 8006660:	2301      	movs	r3, #1
 8006662:	e7b8      	b.n	80065d6 <_dtoa_r+0x186>
 8006664:	9012      	str	r0, [sp, #72]	@ 0x48
 8006666:	e7b7      	b.n	80065d8 <_dtoa_r+0x188>
 8006668:	427b      	negs	r3, r7
 800666a:	930a      	str	r3, [sp, #40]	@ 0x28
 800666c:	2300      	movs	r3, #0
 800666e:	eba8 0807 	sub.w	r8, r8, r7
 8006672:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006674:	e7c4      	b.n	8006600 <_dtoa_r+0x1b0>
 8006676:	2300      	movs	r3, #0
 8006678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800667a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800667c:	2b00      	cmp	r3, #0
 800667e:	dc35      	bgt.n	80066ec <_dtoa_r+0x29c>
 8006680:	2301      	movs	r3, #1
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	9307      	str	r3, [sp, #28]
 8006686:	461a      	mov	r2, r3
 8006688:	920e      	str	r2, [sp, #56]	@ 0x38
 800668a:	e00b      	b.n	80066a4 <_dtoa_r+0x254>
 800668c:	2301      	movs	r3, #1
 800668e:	e7f3      	b.n	8006678 <_dtoa_r+0x228>
 8006690:	2300      	movs	r3, #0
 8006692:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006694:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006696:	18fb      	adds	r3, r7, r3
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	3301      	adds	r3, #1
 800669c:	2b01      	cmp	r3, #1
 800669e:	9307      	str	r3, [sp, #28]
 80066a0:	bfb8      	it	lt
 80066a2:	2301      	movlt	r3, #1
 80066a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80066a8:	2100      	movs	r1, #0
 80066aa:	2204      	movs	r2, #4
 80066ac:	f102 0514 	add.w	r5, r2, #20
 80066b0:	429d      	cmp	r5, r3
 80066b2:	d91f      	bls.n	80066f4 <_dtoa_r+0x2a4>
 80066b4:	6041      	str	r1, [r0, #4]
 80066b6:	4658      	mov	r0, fp
 80066b8:	f000 fd8e 	bl	80071d8 <_Balloc>
 80066bc:	4682      	mov	sl, r0
 80066be:	2800      	cmp	r0, #0
 80066c0:	d13c      	bne.n	800673c <_dtoa_r+0x2ec>
 80066c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006730 <_dtoa_r+0x2e0>)
 80066c4:	4602      	mov	r2, r0
 80066c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80066ca:	e6d8      	b.n	800647e <_dtoa_r+0x2e>
 80066cc:	2301      	movs	r3, #1
 80066ce:	e7e0      	b.n	8006692 <_dtoa_r+0x242>
 80066d0:	2401      	movs	r4, #1
 80066d2:	2300      	movs	r3, #0
 80066d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80066d8:	f04f 33ff 	mov.w	r3, #4294967295
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	9307      	str	r3, [sp, #28]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2312      	movs	r3, #18
 80066e4:	e7d0      	b.n	8006688 <_dtoa_r+0x238>
 80066e6:	2301      	movs	r3, #1
 80066e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066ea:	e7f5      	b.n	80066d8 <_dtoa_r+0x288>
 80066ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	9307      	str	r3, [sp, #28]
 80066f2:	e7d7      	b.n	80066a4 <_dtoa_r+0x254>
 80066f4:	3101      	adds	r1, #1
 80066f6:	0052      	lsls	r2, r2, #1
 80066f8:	e7d8      	b.n	80066ac <_dtoa_r+0x25c>
 80066fa:	bf00      	nop
 80066fc:	f3af 8000 	nop.w
 8006700:	636f4361 	.word	0x636f4361
 8006704:	3fd287a7 	.word	0x3fd287a7
 8006708:	8b60c8b3 	.word	0x8b60c8b3
 800670c:	3fc68a28 	.word	0x3fc68a28
 8006710:	509f79fb 	.word	0x509f79fb
 8006714:	3fd34413 	.word	0x3fd34413
 8006718:	0800991d 	.word	0x0800991d
 800671c:	08009934 	.word	0x08009934
 8006720:	7ff00000 	.word	0x7ff00000
 8006724:	080098ed 	.word	0x080098ed
 8006728:	3ff80000 	.word	0x3ff80000
 800672c:	08009a30 	.word	0x08009a30
 8006730:	0800998c 	.word	0x0800998c
 8006734:	08009919 	.word	0x08009919
 8006738:	080098ec 	.word	0x080098ec
 800673c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006740:	6018      	str	r0, [r3, #0]
 8006742:	9b07      	ldr	r3, [sp, #28]
 8006744:	2b0e      	cmp	r3, #14
 8006746:	f200 80a4 	bhi.w	8006892 <_dtoa_r+0x442>
 800674a:	2c00      	cmp	r4, #0
 800674c:	f000 80a1 	beq.w	8006892 <_dtoa_r+0x442>
 8006750:	2f00      	cmp	r7, #0
 8006752:	dd33      	ble.n	80067bc <_dtoa_r+0x36c>
 8006754:	4bad      	ldr	r3, [pc, #692]	@ (8006a0c <_dtoa_r+0x5bc>)
 8006756:	f007 020f 	and.w	r2, r7, #15
 800675a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800675e:	ed93 7b00 	vldr	d7, [r3]
 8006762:	05f8      	lsls	r0, r7, #23
 8006764:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006768:	ea4f 1427 	mov.w	r4, r7, asr #4
 800676c:	d516      	bpl.n	800679c <_dtoa_r+0x34c>
 800676e:	4ba8      	ldr	r3, [pc, #672]	@ (8006a10 <_dtoa_r+0x5c0>)
 8006770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006774:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006778:	f7fa f870 	bl	800085c <__aeabi_ddiv>
 800677c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006780:	f004 040f 	and.w	r4, r4, #15
 8006784:	2603      	movs	r6, #3
 8006786:	4da2      	ldr	r5, [pc, #648]	@ (8006a10 <_dtoa_r+0x5c0>)
 8006788:	b954      	cbnz	r4, 80067a0 <_dtoa_r+0x350>
 800678a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800678e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006792:	f7fa f863 	bl	800085c <__aeabi_ddiv>
 8006796:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800679a:	e028      	b.n	80067ee <_dtoa_r+0x39e>
 800679c:	2602      	movs	r6, #2
 800679e:	e7f2      	b.n	8006786 <_dtoa_r+0x336>
 80067a0:	07e1      	lsls	r1, r4, #31
 80067a2:	d508      	bpl.n	80067b6 <_dtoa_r+0x366>
 80067a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067ac:	f7f9 ff2c 	bl	8000608 <__aeabi_dmul>
 80067b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067b4:	3601      	adds	r6, #1
 80067b6:	1064      	asrs	r4, r4, #1
 80067b8:	3508      	adds	r5, #8
 80067ba:	e7e5      	b.n	8006788 <_dtoa_r+0x338>
 80067bc:	f000 80d2 	beq.w	8006964 <_dtoa_r+0x514>
 80067c0:	427c      	negs	r4, r7
 80067c2:	4b92      	ldr	r3, [pc, #584]	@ (8006a0c <_dtoa_r+0x5bc>)
 80067c4:	4d92      	ldr	r5, [pc, #584]	@ (8006a10 <_dtoa_r+0x5c0>)
 80067c6:	f004 020f 	and.w	r2, r4, #15
 80067ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067d6:	f7f9 ff17 	bl	8000608 <__aeabi_dmul>
 80067da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067de:	1124      	asrs	r4, r4, #4
 80067e0:	2300      	movs	r3, #0
 80067e2:	2602      	movs	r6, #2
 80067e4:	2c00      	cmp	r4, #0
 80067e6:	f040 80b2 	bne.w	800694e <_dtoa_r+0x4fe>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1d3      	bne.n	8006796 <_dtoa_r+0x346>
 80067ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80067f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80b7 	beq.w	8006968 <_dtoa_r+0x518>
 80067fa:	4b86      	ldr	r3, [pc, #536]	@ (8006a14 <_dtoa_r+0x5c4>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	4620      	mov	r0, r4
 8006800:	4629      	mov	r1, r5
 8006802:	f7fa f973 	bl	8000aec <__aeabi_dcmplt>
 8006806:	2800      	cmp	r0, #0
 8006808:	f000 80ae 	beq.w	8006968 <_dtoa_r+0x518>
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80aa 	beq.w	8006968 <_dtoa_r+0x518>
 8006814:	9b00      	ldr	r3, [sp, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	dd37      	ble.n	800688a <_dtoa_r+0x43a>
 800681a:	1e7b      	subs	r3, r7, #1
 800681c:	9304      	str	r3, [sp, #16]
 800681e:	4620      	mov	r0, r4
 8006820:	4b7d      	ldr	r3, [pc, #500]	@ (8006a18 <_dtoa_r+0x5c8>)
 8006822:	2200      	movs	r2, #0
 8006824:	4629      	mov	r1, r5
 8006826:	f7f9 feef 	bl	8000608 <__aeabi_dmul>
 800682a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800682e:	9c00      	ldr	r4, [sp, #0]
 8006830:	3601      	adds	r6, #1
 8006832:	4630      	mov	r0, r6
 8006834:	f7f9 fe7e 	bl	8000534 <__aeabi_i2d>
 8006838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800683c:	f7f9 fee4 	bl	8000608 <__aeabi_dmul>
 8006840:	4b76      	ldr	r3, [pc, #472]	@ (8006a1c <_dtoa_r+0x5cc>)
 8006842:	2200      	movs	r2, #0
 8006844:	f7f9 fd2a 	bl	800029c <__adddf3>
 8006848:	4605      	mov	r5, r0
 800684a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800684e:	2c00      	cmp	r4, #0
 8006850:	f040 808d 	bne.w	800696e <_dtoa_r+0x51e>
 8006854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006858:	4b71      	ldr	r3, [pc, #452]	@ (8006a20 <_dtoa_r+0x5d0>)
 800685a:	2200      	movs	r2, #0
 800685c:	f7f9 fd1c 	bl	8000298 <__aeabi_dsub>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006868:	462a      	mov	r2, r5
 800686a:	4633      	mov	r3, r6
 800686c:	f7fa f95c 	bl	8000b28 <__aeabi_dcmpgt>
 8006870:	2800      	cmp	r0, #0
 8006872:	f040 828b 	bne.w	8006d8c <_dtoa_r+0x93c>
 8006876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800687a:	462a      	mov	r2, r5
 800687c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006880:	f7fa f934 	bl	8000aec <__aeabi_dcmplt>
 8006884:	2800      	cmp	r0, #0
 8006886:	f040 8128 	bne.w	8006ada <_dtoa_r+0x68a>
 800688a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800688e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006892:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006894:	2b00      	cmp	r3, #0
 8006896:	f2c0 815a 	blt.w	8006b4e <_dtoa_r+0x6fe>
 800689a:	2f0e      	cmp	r7, #14
 800689c:	f300 8157 	bgt.w	8006b4e <_dtoa_r+0x6fe>
 80068a0:	4b5a      	ldr	r3, [pc, #360]	@ (8006a0c <_dtoa_r+0x5bc>)
 80068a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068a6:	ed93 7b00 	vldr	d7, [r3]
 80068aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	ed8d 7b00 	vstr	d7, [sp]
 80068b2:	da03      	bge.n	80068bc <_dtoa_r+0x46c>
 80068b4:	9b07      	ldr	r3, [sp, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f340 8101 	ble.w	8006abe <_dtoa_r+0x66e>
 80068bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068c0:	4656      	mov	r6, sl
 80068c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068c6:	4620      	mov	r0, r4
 80068c8:	4629      	mov	r1, r5
 80068ca:	f7f9 ffc7 	bl	800085c <__aeabi_ddiv>
 80068ce:	f7fa f94b 	bl	8000b68 <__aeabi_d2iz>
 80068d2:	4680      	mov	r8, r0
 80068d4:	f7f9 fe2e 	bl	8000534 <__aeabi_i2d>
 80068d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068dc:	f7f9 fe94 	bl	8000608 <__aeabi_dmul>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80068ec:	f7f9 fcd4 	bl	8000298 <__aeabi_dsub>
 80068f0:	f806 4b01 	strb.w	r4, [r6], #1
 80068f4:	9d07      	ldr	r5, [sp, #28]
 80068f6:	eba6 040a 	sub.w	r4, r6, sl
 80068fa:	42a5      	cmp	r5, r4
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	f040 8117 	bne.w	8006b32 <_dtoa_r+0x6e2>
 8006904:	f7f9 fcca 	bl	800029c <__adddf3>
 8006908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800690c:	4604      	mov	r4, r0
 800690e:	460d      	mov	r5, r1
 8006910:	f7fa f90a 	bl	8000b28 <__aeabi_dcmpgt>
 8006914:	2800      	cmp	r0, #0
 8006916:	f040 80f9 	bne.w	8006b0c <_dtoa_r+0x6bc>
 800691a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f7fa f8d9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006926:	b118      	cbz	r0, 8006930 <_dtoa_r+0x4e0>
 8006928:	f018 0f01 	tst.w	r8, #1
 800692c:	f040 80ee 	bne.w	8006b0c <_dtoa_r+0x6bc>
 8006930:	4649      	mov	r1, r9
 8006932:	4658      	mov	r0, fp
 8006934:	f000 fc90 	bl	8007258 <_Bfree>
 8006938:	2300      	movs	r3, #0
 800693a:	7033      	strb	r3, [r6, #0]
 800693c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800693e:	3701      	adds	r7, #1
 8006940:	601f      	str	r7, [r3, #0]
 8006942:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 831d 	beq.w	8006f84 <_dtoa_r+0xb34>
 800694a:	601e      	str	r6, [r3, #0]
 800694c:	e31a      	b.n	8006f84 <_dtoa_r+0xb34>
 800694e:	07e2      	lsls	r2, r4, #31
 8006950:	d505      	bpl.n	800695e <_dtoa_r+0x50e>
 8006952:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006956:	f7f9 fe57 	bl	8000608 <__aeabi_dmul>
 800695a:	3601      	adds	r6, #1
 800695c:	2301      	movs	r3, #1
 800695e:	1064      	asrs	r4, r4, #1
 8006960:	3508      	adds	r5, #8
 8006962:	e73f      	b.n	80067e4 <_dtoa_r+0x394>
 8006964:	2602      	movs	r6, #2
 8006966:	e742      	b.n	80067ee <_dtoa_r+0x39e>
 8006968:	9c07      	ldr	r4, [sp, #28]
 800696a:	9704      	str	r7, [sp, #16]
 800696c:	e761      	b.n	8006832 <_dtoa_r+0x3e2>
 800696e:	4b27      	ldr	r3, [pc, #156]	@ (8006a0c <_dtoa_r+0x5bc>)
 8006970:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006972:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006976:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800697a:	4454      	add	r4, sl
 800697c:	2900      	cmp	r1, #0
 800697e:	d053      	beq.n	8006a28 <_dtoa_r+0x5d8>
 8006980:	4928      	ldr	r1, [pc, #160]	@ (8006a24 <_dtoa_r+0x5d4>)
 8006982:	2000      	movs	r0, #0
 8006984:	f7f9 ff6a 	bl	800085c <__aeabi_ddiv>
 8006988:	4633      	mov	r3, r6
 800698a:	462a      	mov	r2, r5
 800698c:	f7f9 fc84 	bl	8000298 <__aeabi_dsub>
 8006990:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006994:	4656      	mov	r6, sl
 8006996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800699a:	f7fa f8e5 	bl	8000b68 <__aeabi_d2iz>
 800699e:	4605      	mov	r5, r0
 80069a0:	f7f9 fdc8 	bl	8000534 <__aeabi_i2d>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ac:	f7f9 fc74 	bl	8000298 <__aeabi_dsub>
 80069b0:	3530      	adds	r5, #48	@ 0x30
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069ba:	f806 5b01 	strb.w	r5, [r6], #1
 80069be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069c2:	f7fa f893 	bl	8000aec <__aeabi_dcmplt>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d171      	bne.n	8006aae <_dtoa_r+0x65e>
 80069ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069ce:	4911      	ldr	r1, [pc, #68]	@ (8006a14 <_dtoa_r+0x5c4>)
 80069d0:	2000      	movs	r0, #0
 80069d2:	f7f9 fc61 	bl	8000298 <__aeabi_dsub>
 80069d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069da:	f7fa f887 	bl	8000aec <__aeabi_dcmplt>
 80069de:	2800      	cmp	r0, #0
 80069e0:	f040 8095 	bne.w	8006b0e <_dtoa_r+0x6be>
 80069e4:	42a6      	cmp	r6, r4
 80069e6:	f43f af50 	beq.w	800688a <_dtoa_r+0x43a>
 80069ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006a18 <_dtoa_r+0x5c8>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	f7f9 fe09 	bl	8000608 <__aeabi_dmul>
 80069f6:	4b08      	ldr	r3, [pc, #32]	@ (8006a18 <_dtoa_r+0x5c8>)
 80069f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069fc:	2200      	movs	r2, #0
 80069fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a02:	f7f9 fe01 	bl	8000608 <__aeabi_dmul>
 8006a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a0a:	e7c4      	b.n	8006996 <_dtoa_r+0x546>
 8006a0c:	08009a30 	.word	0x08009a30
 8006a10:	08009a08 	.word	0x08009a08
 8006a14:	3ff00000 	.word	0x3ff00000
 8006a18:	40240000 	.word	0x40240000
 8006a1c:	401c0000 	.word	0x401c0000
 8006a20:	40140000 	.word	0x40140000
 8006a24:	3fe00000 	.word	0x3fe00000
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7f9 fdec 	bl	8000608 <__aeabi_dmul>
 8006a30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a34:	9415      	str	r4, [sp, #84]	@ 0x54
 8006a36:	4656      	mov	r6, sl
 8006a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a3c:	f7fa f894 	bl	8000b68 <__aeabi_d2iz>
 8006a40:	4605      	mov	r5, r0
 8006a42:	f7f9 fd77 	bl	8000534 <__aeabi_i2d>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a4e:	f7f9 fc23 	bl	8000298 <__aeabi_dsub>
 8006a52:	3530      	adds	r5, #48	@ 0x30
 8006a54:	f806 5b01 	strb.w	r5, [r6], #1
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	42a6      	cmp	r6, r4
 8006a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	d124      	bne.n	8006ab2 <_dtoa_r+0x662>
 8006a68:	4bac      	ldr	r3, [pc, #688]	@ (8006d1c <_dtoa_r+0x8cc>)
 8006a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a6e:	f7f9 fc15 	bl	800029c <__adddf3>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7a:	f7fa f855 	bl	8000b28 <__aeabi_dcmpgt>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d145      	bne.n	8006b0e <_dtoa_r+0x6be>
 8006a82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a86:	49a5      	ldr	r1, [pc, #660]	@ (8006d1c <_dtoa_r+0x8cc>)
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f7f9 fc05 	bl	8000298 <__aeabi_dsub>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a96:	f7fa f829 	bl	8000aec <__aeabi_dcmplt>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	f43f aef5 	beq.w	800688a <_dtoa_r+0x43a>
 8006aa0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006aa2:	1e73      	subs	r3, r6, #1
 8006aa4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006aa6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006aaa:	2b30      	cmp	r3, #48	@ 0x30
 8006aac:	d0f8      	beq.n	8006aa0 <_dtoa_r+0x650>
 8006aae:	9f04      	ldr	r7, [sp, #16]
 8006ab0:	e73e      	b.n	8006930 <_dtoa_r+0x4e0>
 8006ab2:	4b9b      	ldr	r3, [pc, #620]	@ (8006d20 <_dtoa_r+0x8d0>)
 8006ab4:	f7f9 fda8 	bl	8000608 <__aeabi_dmul>
 8006ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006abc:	e7bc      	b.n	8006a38 <_dtoa_r+0x5e8>
 8006abe:	d10c      	bne.n	8006ada <_dtoa_r+0x68a>
 8006ac0:	4b98      	ldr	r3, [pc, #608]	@ (8006d24 <_dtoa_r+0x8d4>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ac8:	f7f9 fd9e 	bl	8000608 <__aeabi_dmul>
 8006acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ad0:	f7fa f820 	bl	8000b14 <__aeabi_dcmpge>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	f000 8157 	beq.w	8006d88 <_dtoa_r+0x938>
 8006ada:	2400      	movs	r4, #0
 8006adc:	4625      	mov	r5, r4
 8006ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	9304      	str	r3, [sp, #16]
 8006ae4:	4656      	mov	r6, sl
 8006ae6:	2700      	movs	r7, #0
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4658      	mov	r0, fp
 8006aec:	f000 fbb4 	bl	8007258 <_Bfree>
 8006af0:	2d00      	cmp	r5, #0
 8006af2:	d0dc      	beq.n	8006aae <_dtoa_r+0x65e>
 8006af4:	b12f      	cbz	r7, 8006b02 <_dtoa_r+0x6b2>
 8006af6:	42af      	cmp	r7, r5
 8006af8:	d003      	beq.n	8006b02 <_dtoa_r+0x6b2>
 8006afa:	4639      	mov	r1, r7
 8006afc:	4658      	mov	r0, fp
 8006afe:	f000 fbab 	bl	8007258 <_Bfree>
 8006b02:	4629      	mov	r1, r5
 8006b04:	4658      	mov	r0, fp
 8006b06:	f000 fba7 	bl	8007258 <_Bfree>
 8006b0a:	e7d0      	b.n	8006aae <_dtoa_r+0x65e>
 8006b0c:	9704      	str	r7, [sp, #16]
 8006b0e:	4633      	mov	r3, r6
 8006b10:	461e      	mov	r6, r3
 8006b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b16:	2a39      	cmp	r2, #57	@ 0x39
 8006b18:	d107      	bne.n	8006b2a <_dtoa_r+0x6da>
 8006b1a:	459a      	cmp	sl, r3
 8006b1c:	d1f8      	bne.n	8006b10 <_dtoa_r+0x6c0>
 8006b1e:	9a04      	ldr	r2, [sp, #16]
 8006b20:	3201      	adds	r2, #1
 8006b22:	9204      	str	r2, [sp, #16]
 8006b24:	2230      	movs	r2, #48	@ 0x30
 8006b26:	f88a 2000 	strb.w	r2, [sl]
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	3201      	adds	r2, #1
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	e7bd      	b.n	8006aae <_dtoa_r+0x65e>
 8006b32:	4b7b      	ldr	r3, [pc, #492]	@ (8006d20 <_dtoa_r+0x8d0>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	f7f9 fd67 	bl	8000608 <__aeabi_dmul>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4604      	mov	r4, r0
 8006b40:	460d      	mov	r5, r1
 8006b42:	f7f9 ffc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	f43f aebb 	beq.w	80068c2 <_dtoa_r+0x472>
 8006b4c:	e6f0      	b.n	8006930 <_dtoa_r+0x4e0>
 8006b4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b50:	2a00      	cmp	r2, #0
 8006b52:	f000 80db 	beq.w	8006d0c <_dtoa_r+0x8bc>
 8006b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b58:	2a01      	cmp	r2, #1
 8006b5a:	f300 80bf 	bgt.w	8006cdc <_dtoa_r+0x88c>
 8006b5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006b60:	2a00      	cmp	r2, #0
 8006b62:	f000 80b7 	beq.w	8006cd4 <_dtoa_r+0x884>
 8006b66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b6c:	4646      	mov	r6, r8
 8006b6e:	9a08      	ldr	r2, [sp, #32]
 8006b70:	2101      	movs	r1, #1
 8006b72:	441a      	add	r2, r3
 8006b74:	4658      	mov	r0, fp
 8006b76:	4498      	add	r8, r3
 8006b78:	9208      	str	r2, [sp, #32]
 8006b7a:	f000 fc21 	bl	80073c0 <__i2b>
 8006b7e:	4605      	mov	r5, r0
 8006b80:	b15e      	cbz	r6, 8006b9a <_dtoa_r+0x74a>
 8006b82:	9b08      	ldr	r3, [sp, #32]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dd08      	ble.n	8006b9a <_dtoa_r+0x74a>
 8006b88:	42b3      	cmp	r3, r6
 8006b8a:	9a08      	ldr	r2, [sp, #32]
 8006b8c:	bfa8      	it	ge
 8006b8e:	4633      	movge	r3, r6
 8006b90:	eba8 0803 	sub.w	r8, r8, r3
 8006b94:	1af6      	subs	r6, r6, r3
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	9308      	str	r3, [sp, #32]
 8006b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b9c:	b1f3      	cbz	r3, 8006bdc <_dtoa_r+0x78c>
 8006b9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80b7 	beq.w	8006d14 <_dtoa_r+0x8c4>
 8006ba6:	b18c      	cbz	r4, 8006bcc <_dtoa_r+0x77c>
 8006ba8:	4629      	mov	r1, r5
 8006baa:	4622      	mov	r2, r4
 8006bac:	4658      	mov	r0, fp
 8006bae:	f000 fcc7 	bl	8007540 <__pow5mult>
 8006bb2:	464a      	mov	r2, r9
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	4658      	mov	r0, fp
 8006bba:	f000 fc17 	bl	80073ec <__multiply>
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	9004      	str	r0, [sp, #16]
 8006bc2:	4658      	mov	r0, fp
 8006bc4:	f000 fb48 	bl	8007258 <_Bfree>
 8006bc8:	9b04      	ldr	r3, [sp, #16]
 8006bca:	4699      	mov	r9, r3
 8006bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bce:	1b1a      	subs	r2, r3, r4
 8006bd0:	d004      	beq.n	8006bdc <_dtoa_r+0x78c>
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4658      	mov	r0, fp
 8006bd6:	f000 fcb3 	bl	8007540 <__pow5mult>
 8006bda:	4681      	mov	r9, r0
 8006bdc:	2101      	movs	r1, #1
 8006bde:	4658      	mov	r0, fp
 8006be0:	f000 fbee 	bl	80073c0 <__i2b>
 8006be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006be6:	4604      	mov	r4, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 81cf 	beq.w	8006f8c <_dtoa_r+0xb3c>
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4601      	mov	r1, r0
 8006bf2:	4658      	mov	r0, fp
 8006bf4:	f000 fca4 	bl	8007540 <__pow5mult>
 8006bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	f300 8095 	bgt.w	8006d2c <_dtoa_r+0x8dc>
 8006c02:	9b02      	ldr	r3, [sp, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f040 8087 	bne.w	8006d18 <_dtoa_r+0x8c8>
 8006c0a:	9b03      	ldr	r3, [sp, #12]
 8006c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 8089 	bne.w	8006d28 <_dtoa_r+0x8d8>
 8006c16:	9b03      	ldr	r3, [sp, #12]
 8006c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c1c:	0d1b      	lsrs	r3, r3, #20
 8006c1e:	051b      	lsls	r3, r3, #20
 8006c20:	b12b      	cbz	r3, 8006c2e <_dtoa_r+0x7de>
 8006c22:	9b08      	ldr	r3, [sp, #32]
 8006c24:	3301      	adds	r3, #1
 8006c26:	9308      	str	r3, [sp, #32]
 8006c28:	f108 0801 	add.w	r8, r8, #1
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 81b0 	beq.w	8006f98 <_dtoa_r+0xb48>
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c3e:	6918      	ldr	r0, [r3, #16]
 8006c40:	f000 fb72 	bl	8007328 <__hi0bits>
 8006c44:	f1c0 0020 	rsb	r0, r0, #32
 8006c48:	9b08      	ldr	r3, [sp, #32]
 8006c4a:	4418      	add	r0, r3
 8006c4c:	f010 001f 	ands.w	r0, r0, #31
 8006c50:	d077      	beq.n	8006d42 <_dtoa_r+0x8f2>
 8006c52:	f1c0 0320 	rsb	r3, r0, #32
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	dd6b      	ble.n	8006d32 <_dtoa_r+0x8e2>
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	f1c0 001c 	rsb	r0, r0, #28
 8006c60:	4403      	add	r3, r0
 8006c62:	4480      	add	r8, r0
 8006c64:	4406      	add	r6, r0
 8006c66:	9308      	str	r3, [sp, #32]
 8006c68:	f1b8 0f00 	cmp.w	r8, #0
 8006c6c:	dd05      	ble.n	8006c7a <_dtoa_r+0x82a>
 8006c6e:	4649      	mov	r1, r9
 8006c70:	4642      	mov	r2, r8
 8006c72:	4658      	mov	r0, fp
 8006c74:	f000 fcbe 	bl	80075f4 <__lshift>
 8006c78:	4681      	mov	r9, r0
 8006c7a:	9b08      	ldr	r3, [sp, #32]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dd05      	ble.n	8006c8c <_dtoa_r+0x83c>
 8006c80:	4621      	mov	r1, r4
 8006c82:	461a      	mov	r2, r3
 8006c84:	4658      	mov	r0, fp
 8006c86:	f000 fcb5 	bl	80075f4 <__lshift>
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d059      	beq.n	8006d46 <_dtoa_r+0x8f6>
 8006c92:	4621      	mov	r1, r4
 8006c94:	4648      	mov	r0, r9
 8006c96:	f000 fd19 	bl	80076cc <__mcmp>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	da53      	bge.n	8006d46 <_dtoa_r+0x8f6>
 8006c9e:	1e7b      	subs	r3, r7, #1
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	4658      	mov	r0, fp
 8006caa:	f000 faf7 	bl	800729c <__multadd>
 8006cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cb0:	4681      	mov	r9, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 8172 	beq.w	8006f9c <_dtoa_r+0xb4c>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4629      	mov	r1, r5
 8006cbc:	220a      	movs	r2, #10
 8006cbe:	4658      	mov	r0, fp
 8006cc0:	f000 faec 	bl	800729c <__multadd>
 8006cc4:	9b00      	ldr	r3, [sp, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	4605      	mov	r5, r0
 8006cca:	dc67      	bgt.n	8006d9c <_dtoa_r+0x94c>
 8006ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	dc41      	bgt.n	8006d56 <_dtoa_r+0x906>
 8006cd2:	e063      	b.n	8006d9c <_dtoa_r+0x94c>
 8006cd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006cd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006cda:	e746      	b.n	8006b6a <_dtoa_r+0x71a>
 8006cdc:	9b07      	ldr	r3, [sp, #28]
 8006cde:	1e5c      	subs	r4, r3, #1
 8006ce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ce2:	42a3      	cmp	r3, r4
 8006ce4:	bfbf      	itttt	lt
 8006ce6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006ce8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006cea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006cec:	1ae3      	sublt	r3, r4, r3
 8006cee:	bfb4      	ite	lt
 8006cf0:	18d2      	addlt	r2, r2, r3
 8006cf2:	1b1c      	subge	r4, r3, r4
 8006cf4:	9b07      	ldr	r3, [sp, #28]
 8006cf6:	bfbc      	itt	lt
 8006cf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006cfa:	2400      	movlt	r4, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bfb5      	itete	lt
 8006d00:	eba8 0603 	sublt.w	r6, r8, r3
 8006d04:	9b07      	ldrge	r3, [sp, #28]
 8006d06:	2300      	movlt	r3, #0
 8006d08:	4646      	movge	r6, r8
 8006d0a:	e730      	b.n	8006b6e <_dtoa_r+0x71e>
 8006d0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d10:	4646      	mov	r6, r8
 8006d12:	e735      	b.n	8006b80 <_dtoa_r+0x730>
 8006d14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d16:	e75c      	b.n	8006bd2 <_dtoa_r+0x782>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e788      	b.n	8006c2e <_dtoa_r+0x7de>
 8006d1c:	3fe00000 	.word	0x3fe00000
 8006d20:	40240000 	.word	0x40240000
 8006d24:	40140000 	.word	0x40140000
 8006d28:	9b02      	ldr	r3, [sp, #8]
 8006d2a:	e780      	b.n	8006c2e <_dtoa_r+0x7de>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d30:	e782      	b.n	8006c38 <_dtoa_r+0x7e8>
 8006d32:	d099      	beq.n	8006c68 <_dtoa_r+0x818>
 8006d34:	9a08      	ldr	r2, [sp, #32]
 8006d36:	331c      	adds	r3, #28
 8006d38:	441a      	add	r2, r3
 8006d3a:	4498      	add	r8, r3
 8006d3c:	441e      	add	r6, r3
 8006d3e:	9208      	str	r2, [sp, #32]
 8006d40:	e792      	b.n	8006c68 <_dtoa_r+0x818>
 8006d42:	4603      	mov	r3, r0
 8006d44:	e7f6      	b.n	8006d34 <_dtoa_r+0x8e4>
 8006d46:	9b07      	ldr	r3, [sp, #28]
 8006d48:	9704      	str	r7, [sp, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	dc20      	bgt.n	8006d90 <_dtoa_r+0x940>
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	dd1e      	ble.n	8006d94 <_dtoa_r+0x944>
 8006d56:	9b00      	ldr	r3, [sp, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f47f aec0 	bne.w	8006ade <_dtoa_r+0x68e>
 8006d5e:	4621      	mov	r1, r4
 8006d60:	2205      	movs	r2, #5
 8006d62:	4658      	mov	r0, fp
 8006d64:	f000 fa9a 	bl	800729c <__multadd>
 8006d68:	4601      	mov	r1, r0
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4648      	mov	r0, r9
 8006d6e:	f000 fcad 	bl	80076cc <__mcmp>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	f77f aeb3 	ble.w	8006ade <_dtoa_r+0x68e>
 8006d78:	4656      	mov	r6, sl
 8006d7a:	2331      	movs	r3, #49	@ 0x31
 8006d7c:	f806 3b01 	strb.w	r3, [r6], #1
 8006d80:	9b04      	ldr	r3, [sp, #16]
 8006d82:	3301      	adds	r3, #1
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	e6ae      	b.n	8006ae6 <_dtoa_r+0x696>
 8006d88:	9c07      	ldr	r4, [sp, #28]
 8006d8a:	9704      	str	r7, [sp, #16]
 8006d8c:	4625      	mov	r5, r4
 8006d8e:	e7f3      	b.n	8006d78 <_dtoa_r+0x928>
 8006d90:	9b07      	ldr	r3, [sp, #28]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 8104 	beq.w	8006fa4 <_dtoa_r+0xb54>
 8006d9c:	2e00      	cmp	r6, #0
 8006d9e:	dd05      	ble.n	8006dac <_dtoa_r+0x95c>
 8006da0:	4629      	mov	r1, r5
 8006da2:	4632      	mov	r2, r6
 8006da4:	4658      	mov	r0, fp
 8006da6:	f000 fc25 	bl	80075f4 <__lshift>
 8006daa:	4605      	mov	r5, r0
 8006dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d05a      	beq.n	8006e68 <_dtoa_r+0xa18>
 8006db2:	6869      	ldr	r1, [r5, #4]
 8006db4:	4658      	mov	r0, fp
 8006db6:	f000 fa0f 	bl	80071d8 <_Balloc>
 8006dba:	4606      	mov	r6, r0
 8006dbc:	b928      	cbnz	r0, 8006dca <_dtoa_r+0x97a>
 8006dbe:	4b84      	ldr	r3, [pc, #528]	@ (8006fd0 <_dtoa_r+0xb80>)
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006dc6:	f7ff bb5a 	b.w	800647e <_dtoa_r+0x2e>
 8006dca:	692a      	ldr	r2, [r5, #16]
 8006dcc:	3202      	adds	r2, #2
 8006dce:	0092      	lsls	r2, r2, #2
 8006dd0:	f105 010c 	add.w	r1, r5, #12
 8006dd4:	300c      	adds	r0, #12
 8006dd6:	f001 f975 	bl	80080c4 <memcpy>
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4658      	mov	r0, fp
 8006de0:	f000 fc08 	bl	80075f4 <__lshift>
 8006de4:	f10a 0301 	add.w	r3, sl, #1
 8006de8:	9307      	str	r3, [sp, #28]
 8006dea:	9b00      	ldr	r3, [sp, #0]
 8006dec:	4453      	add	r3, sl
 8006dee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006df0:	9b02      	ldr	r3, [sp, #8]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	462f      	mov	r7, r5
 8006df8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	9b07      	ldr	r3, [sp, #28]
 8006dfe:	4621      	mov	r1, r4
 8006e00:	3b01      	subs	r3, #1
 8006e02:	4648      	mov	r0, r9
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	f7ff fa9a 	bl	800633e <quorem>
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	9002      	str	r0, [sp, #8]
 8006e0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e12:	4648      	mov	r0, r9
 8006e14:	f000 fc5a 	bl	80076cc <__mcmp>
 8006e18:	462a      	mov	r2, r5
 8006e1a:	9008      	str	r0, [sp, #32]
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4658      	mov	r0, fp
 8006e20:	f000 fc70 	bl	8007704 <__mdiff>
 8006e24:	68c2      	ldr	r2, [r0, #12]
 8006e26:	4606      	mov	r6, r0
 8006e28:	bb02      	cbnz	r2, 8006e6c <_dtoa_r+0xa1c>
 8006e2a:	4601      	mov	r1, r0
 8006e2c:	4648      	mov	r0, r9
 8006e2e:	f000 fc4d 	bl	80076cc <__mcmp>
 8006e32:	4602      	mov	r2, r0
 8006e34:	4631      	mov	r1, r6
 8006e36:	4658      	mov	r0, fp
 8006e38:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e3a:	f000 fa0d 	bl	8007258 <_Bfree>
 8006e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e42:	9e07      	ldr	r6, [sp, #28]
 8006e44:	ea43 0102 	orr.w	r1, r3, r2
 8006e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e4a:	4319      	orrs	r1, r3
 8006e4c:	d110      	bne.n	8006e70 <_dtoa_r+0xa20>
 8006e4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e52:	d029      	beq.n	8006ea8 <_dtoa_r+0xa58>
 8006e54:	9b08      	ldr	r3, [sp, #32]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	dd02      	ble.n	8006e60 <_dtoa_r+0xa10>
 8006e5a:	9b02      	ldr	r3, [sp, #8]
 8006e5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006e60:	9b00      	ldr	r3, [sp, #0]
 8006e62:	f883 8000 	strb.w	r8, [r3]
 8006e66:	e63f      	b.n	8006ae8 <_dtoa_r+0x698>
 8006e68:	4628      	mov	r0, r5
 8006e6a:	e7bb      	b.n	8006de4 <_dtoa_r+0x994>
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	e7e1      	b.n	8006e34 <_dtoa_r+0x9e4>
 8006e70:	9b08      	ldr	r3, [sp, #32]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	db04      	blt.n	8006e80 <_dtoa_r+0xa30>
 8006e76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	d120      	bne.n	8006ec2 <_dtoa_r+0xa72>
 8006e80:	2a00      	cmp	r2, #0
 8006e82:	dded      	ble.n	8006e60 <_dtoa_r+0xa10>
 8006e84:	4649      	mov	r1, r9
 8006e86:	2201      	movs	r2, #1
 8006e88:	4658      	mov	r0, fp
 8006e8a:	f000 fbb3 	bl	80075f4 <__lshift>
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4681      	mov	r9, r0
 8006e92:	f000 fc1b 	bl	80076cc <__mcmp>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	dc03      	bgt.n	8006ea2 <_dtoa_r+0xa52>
 8006e9a:	d1e1      	bne.n	8006e60 <_dtoa_r+0xa10>
 8006e9c:	f018 0f01 	tst.w	r8, #1
 8006ea0:	d0de      	beq.n	8006e60 <_dtoa_r+0xa10>
 8006ea2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ea6:	d1d8      	bne.n	8006e5a <_dtoa_r+0xa0a>
 8006ea8:	9a00      	ldr	r2, [sp, #0]
 8006eaa:	2339      	movs	r3, #57	@ 0x39
 8006eac:	7013      	strb	r3, [r2, #0]
 8006eae:	4633      	mov	r3, r6
 8006eb0:	461e      	mov	r6, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006eb8:	2a39      	cmp	r2, #57	@ 0x39
 8006eba:	d052      	beq.n	8006f62 <_dtoa_r+0xb12>
 8006ebc:	3201      	adds	r2, #1
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	e612      	b.n	8006ae8 <_dtoa_r+0x698>
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	dd07      	ble.n	8006ed6 <_dtoa_r+0xa86>
 8006ec6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006eca:	d0ed      	beq.n	8006ea8 <_dtoa_r+0xa58>
 8006ecc:	9a00      	ldr	r2, [sp, #0]
 8006ece:	f108 0301 	add.w	r3, r8, #1
 8006ed2:	7013      	strb	r3, [r2, #0]
 8006ed4:	e608      	b.n	8006ae8 <_dtoa_r+0x698>
 8006ed6:	9b07      	ldr	r3, [sp, #28]
 8006ed8:	9a07      	ldr	r2, [sp, #28]
 8006eda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d028      	beq.n	8006f36 <_dtoa_r+0xae6>
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	220a      	movs	r2, #10
 8006eea:	4658      	mov	r0, fp
 8006eec:	f000 f9d6 	bl	800729c <__multadd>
 8006ef0:	42af      	cmp	r7, r5
 8006ef2:	4681      	mov	r9, r0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	f04f 020a 	mov.w	r2, #10
 8006efc:	4639      	mov	r1, r7
 8006efe:	4658      	mov	r0, fp
 8006f00:	d107      	bne.n	8006f12 <_dtoa_r+0xac2>
 8006f02:	f000 f9cb 	bl	800729c <__multadd>
 8006f06:	4607      	mov	r7, r0
 8006f08:	4605      	mov	r5, r0
 8006f0a:	9b07      	ldr	r3, [sp, #28]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	9307      	str	r3, [sp, #28]
 8006f10:	e774      	b.n	8006dfc <_dtoa_r+0x9ac>
 8006f12:	f000 f9c3 	bl	800729c <__multadd>
 8006f16:	4629      	mov	r1, r5
 8006f18:	4607      	mov	r7, r0
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	220a      	movs	r2, #10
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f000 f9bc 	bl	800729c <__multadd>
 8006f24:	4605      	mov	r5, r0
 8006f26:	e7f0      	b.n	8006f0a <_dtoa_r+0xaba>
 8006f28:	9b00      	ldr	r3, [sp, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bfcc      	ite	gt
 8006f2e:	461e      	movgt	r6, r3
 8006f30:	2601      	movle	r6, #1
 8006f32:	4456      	add	r6, sl
 8006f34:	2700      	movs	r7, #0
 8006f36:	4649      	mov	r1, r9
 8006f38:	2201      	movs	r2, #1
 8006f3a:	4658      	mov	r0, fp
 8006f3c:	f000 fb5a 	bl	80075f4 <__lshift>
 8006f40:	4621      	mov	r1, r4
 8006f42:	4681      	mov	r9, r0
 8006f44:	f000 fbc2 	bl	80076cc <__mcmp>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	dcb0      	bgt.n	8006eae <_dtoa_r+0xa5e>
 8006f4c:	d102      	bne.n	8006f54 <_dtoa_r+0xb04>
 8006f4e:	f018 0f01 	tst.w	r8, #1
 8006f52:	d1ac      	bne.n	8006eae <_dtoa_r+0xa5e>
 8006f54:	4633      	mov	r3, r6
 8006f56:	461e      	mov	r6, r3
 8006f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f5c:	2a30      	cmp	r2, #48	@ 0x30
 8006f5e:	d0fa      	beq.n	8006f56 <_dtoa_r+0xb06>
 8006f60:	e5c2      	b.n	8006ae8 <_dtoa_r+0x698>
 8006f62:	459a      	cmp	sl, r3
 8006f64:	d1a4      	bne.n	8006eb0 <_dtoa_r+0xa60>
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	9304      	str	r3, [sp, #16]
 8006f6c:	2331      	movs	r3, #49	@ 0x31
 8006f6e:	f88a 3000 	strb.w	r3, [sl]
 8006f72:	e5b9      	b.n	8006ae8 <_dtoa_r+0x698>
 8006f74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006fd4 <_dtoa_r+0xb84>
 8006f7a:	b11b      	cbz	r3, 8006f84 <_dtoa_r+0xb34>
 8006f7c:	f10a 0308 	add.w	r3, sl, #8
 8006f80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	4650      	mov	r0, sl
 8006f86:	b019      	add	sp, #100	@ 0x64
 8006f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	f77f ae37 	ble.w	8006c02 <_dtoa_r+0x7b2>
 8006f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f98:	2001      	movs	r0, #1
 8006f9a:	e655      	b.n	8006c48 <_dtoa_r+0x7f8>
 8006f9c:	9b00      	ldr	r3, [sp, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f77f aed6 	ble.w	8006d50 <_dtoa_r+0x900>
 8006fa4:	4656      	mov	r6, sl
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4648      	mov	r0, r9
 8006faa:	f7ff f9c8 	bl	800633e <quorem>
 8006fae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006fb2:	f806 8b01 	strb.w	r8, [r6], #1
 8006fb6:	9b00      	ldr	r3, [sp, #0]
 8006fb8:	eba6 020a 	sub.w	r2, r6, sl
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	ddb3      	ble.n	8006f28 <_dtoa_r+0xad8>
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	220a      	movs	r2, #10
 8006fc6:	4658      	mov	r0, fp
 8006fc8:	f000 f968 	bl	800729c <__multadd>
 8006fcc:	4681      	mov	r9, r0
 8006fce:	e7ea      	b.n	8006fa6 <_dtoa_r+0xb56>
 8006fd0:	0800998c 	.word	0x0800998c
 8006fd4:	08009910 	.word	0x08009910

08006fd8 <_free_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4605      	mov	r5, r0
 8006fdc:	2900      	cmp	r1, #0
 8006fde:	d041      	beq.n	8007064 <_free_r+0x8c>
 8006fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fe4:	1f0c      	subs	r4, r1, #4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	bfb8      	it	lt
 8006fea:	18e4      	addlt	r4, r4, r3
 8006fec:	f000 f8e8 	bl	80071c0 <__malloc_lock>
 8006ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8007068 <_free_r+0x90>)
 8006ff2:	6813      	ldr	r3, [r2, #0]
 8006ff4:	b933      	cbnz	r3, 8007004 <_free_r+0x2c>
 8006ff6:	6063      	str	r3, [r4, #4]
 8006ff8:	6014      	str	r4, [r2, #0]
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007000:	f000 b8e4 	b.w	80071cc <__malloc_unlock>
 8007004:	42a3      	cmp	r3, r4
 8007006:	d908      	bls.n	800701a <_free_r+0x42>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	1821      	adds	r1, r4, r0
 800700c:	428b      	cmp	r3, r1
 800700e:	bf01      	itttt	eq
 8007010:	6819      	ldreq	r1, [r3, #0]
 8007012:	685b      	ldreq	r3, [r3, #4]
 8007014:	1809      	addeq	r1, r1, r0
 8007016:	6021      	streq	r1, [r4, #0]
 8007018:	e7ed      	b.n	8006ff6 <_free_r+0x1e>
 800701a:	461a      	mov	r2, r3
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	b10b      	cbz	r3, 8007024 <_free_r+0x4c>
 8007020:	42a3      	cmp	r3, r4
 8007022:	d9fa      	bls.n	800701a <_free_r+0x42>
 8007024:	6811      	ldr	r1, [r2, #0]
 8007026:	1850      	adds	r0, r2, r1
 8007028:	42a0      	cmp	r0, r4
 800702a:	d10b      	bne.n	8007044 <_free_r+0x6c>
 800702c:	6820      	ldr	r0, [r4, #0]
 800702e:	4401      	add	r1, r0
 8007030:	1850      	adds	r0, r2, r1
 8007032:	4283      	cmp	r3, r0
 8007034:	6011      	str	r1, [r2, #0]
 8007036:	d1e0      	bne.n	8006ffa <_free_r+0x22>
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	6053      	str	r3, [r2, #4]
 800703e:	4408      	add	r0, r1
 8007040:	6010      	str	r0, [r2, #0]
 8007042:	e7da      	b.n	8006ffa <_free_r+0x22>
 8007044:	d902      	bls.n	800704c <_free_r+0x74>
 8007046:	230c      	movs	r3, #12
 8007048:	602b      	str	r3, [r5, #0]
 800704a:	e7d6      	b.n	8006ffa <_free_r+0x22>
 800704c:	6820      	ldr	r0, [r4, #0]
 800704e:	1821      	adds	r1, r4, r0
 8007050:	428b      	cmp	r3, r1
 8007052:	bf04      	itt	eq
 8007054:	6819      	ldreq	r1, [r3, #0]
 8007056:	685b      	ldreq	r3, [r3, #4]
 8007058:	6063      	str	r3, [r4, #4]
 800705a:	bf04      	itt	eq
 800705c:	1809      	addeq	r1, r1, r0
 800705e:	6021      	streq	r1, [r4, #0]
 8007060:	6054      	str	r4, [r2, #4]
 8007062:	e7ca      	b.n	8006ffa <_free_r+0x22>
 8007064:	bd38      	pop	{r3, r4, r5, pc}
 8007066:	bf00      	nop
 8007068:	20001a80 	.word	0x20001a80

0800706c <malloc>:
 800706c:	4b02      	ldr	r3, [pc, #8]	@ (8007078 <malloc+0xc>)
 800706e:	4601      	mov	r1, r0
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	f000 b825 	b.w	80070c0 <_malloc_r>
 8007076:	bf00      	nop
 8007078:	2000002c 	.word	0x2000002c

0800707c <sbrk_aligned>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4e0f      	ldr	r6, [pc, #60]	@ (80070bc <sbrk_aligned+0x40>)
 8007080:	460c      	mov	r4, r1
 8007082:	6831      	ldr	r1, [r6, #0]
 8007084:	4605      	mov	r5, r0
 8007086:	b911      	cbnz	r1, 800708e <sbrk_aligned+0x12>
 8007088:	f001 f80c 	bl	80080a4 <_sbrk_r>
 800708c:	6030      	str	r0, [r6, #0]
 800708e:	4621      	mov	r1, r4
 8007090:	4628      	mov	r0, r5
 8007092:	f001 f807 	bl	80080a4 <_sbrk_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	d103      	bne.n	80070a2 <sbrk_aligned+0x26>
 800709a:	f04f 34ff 	mov.w	r4, #4294967295
 800709e:	4620      	mov	r0, r4
 80070a0:	bd70      	pop	{r4, r5, r6, pc}
 80070a2:	1cc4      	adds	r4, r0, #3
 80070a4:	f024 0403 	bic.w	r4, r4, #3
 80070a8:	42a0      	cmp	r0, r4
 80070aa:	d0f8      	beq.n	800709e <sbrk_aligned+0x22>
 80070ac:	1a21      	subs	r1, r4, r0
 80070ae:	4628      	mov	r0, r5
 80070b0:	f000 fff8 	bl	80080a4 <_sbrk_r>
 80070b4:	3001      	adds	r0, #1
 80070b6:	d1f2      	bne.n	800709e <sbrk_aligned+0x22>
 80070b8:	e7ef      	b.n	800709a <sbrk_aligned+0x1e>
 80070ba:	bf00      	nop
 80070bc:	20001a7c 	.word	0x20001a7c

080070c0 <_malloc_r>:
 80070c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	1ccd      	adds	r5, r1, #3
 80070c6:	f025 0503 	bic.w	r5, r5, #3
 80070ca:	3508      	adds	r5, #8
 80070cc:	2d0c      	cmp	r5, #12
 80070ce:	bf38      	it	cc
 80070d0:	250c      	movcc	r5, #12
 80070d2:	2d00      	cmp	r5, #0
 80070d4:	4606      	mov	r6, r0
 80070d6:	db01      	blt.n	80070dc <_malloc_r+0x1c>
 80070d8:	42a9      	cmp	r1, r5
 80070da:	d904      	bls.n	80070e6 <_malloc_r+0x26>
 80070dc:	230c      	movs	r3, #12
 80070de:	6033      	str	r3, [r6, #0]
 80070e0:	2000      	movs	r0, #0
 80070e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071bc <_malloc_r+0xfc>
 80070ea:	f000 f869 	bl	80071c0 <__malloc_lock>
 80070ee:	f8d8 3000 	ldr.w	r3, [r8]
 80070f2:	461c      	mov	r4, r3
 80070f4:	bb44      	cbnz	r4, 8007148 <_malloc_r+0x88>
 80070f6:	4629      	mov	r1, r5
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7ff ffbf 	bl	800707c <sbrk_aligned>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	4604      	mov	r4, r0
 8007102:	d158      	bne.n	80071b6 <_malloc_r+0xf6>
 8007104:	f8d8 4000 	ldr.w	r4, [r8]
 8007108:	4627      	mov	r7, r4
 800710a:	2f00      	cmp	r7, #0
 800710c:	d143      	bne.n	8007196 <_malloc_r+0xd6>
 800710e:	2c00      	cmp	r4, #0
 8007110:	d04b      	beq.n	80071aa <_malloc_r+0xea>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	4639      	mov	r1, r7
 8007116:	4630      	mov	r0, r6
 8007118:	eb04 0903 	add.w	r9, r4, r3
 800711c:	f000 ffc2 	bl	80080a4 <_sbrk_r>
 8007120:	4581      	cmp	r9, r0
 8007122:	d142      	bne.n	80071aa <_malloc_r+0xea>
 8007124:	6821      	ldr	r1, [r4, #0]
 8007126:	1a6d      	subs	r5, r5, r1
 8007128:	4629      	mov	r1, r5
 800712a:	4630      	mov	r0, r6
 800712c:	f7ff ffa6 	bl	800707c <sbrk_aligned>
 8007130:	3001      	adds	r0, #1
 8007132:	d03a      	beq.n	80071aa <_malloc_r+0xea>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	442b      	add	r3, r5
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	f8d8 3000 	ldr.w	r3, [r8]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	bb62      	cbnz	r2, 800719c <_malloc_r+0xdc>
 8007142:	f8c8 7000 	str.w	r7, [r8]
 8007146:	e00f      	b.n	8007168 <_malloc_r+0xa8>
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	1b52      	subs	r2, r2, r5
 800714c:	d420      	bmi.n	8007190 <_malloc_r+0xd0>
 800714e:	2a0b      	cmp	r2, #11
 8007150:	d917      	bls.n	8007182 <_malloc_r+0xc2>
 8007152:	1961      	adds	r1, r4, r5
 8007154:	42a3      	cmp	r3, r4
 8007156:	6025      	str	r5, [r4, #0]
 8007158:	bf18      	it	ne
 800715a:	6059      	strne	r1, [r3, #4]
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	bf08      	it	eq
 8007160:	f8c8 1000 	streq.w	r1, [r8]
 8007164:	5162      	str	r2, [r4, r5]
 8007166:	604b      	str	r3, [r1, #4]
 8007168:	4630      	mov	r0, r6
 800716a:	f000 f82f 	bl	80071cc <__malloc_unlock>
 800716e:	f104 000b 	add.w	r0, r4, #11
 8007172:	1d23      	adds	r3, r4, #4
 8007174:	f020 0007 	bic.w	r0, r0, #7
 8007178:	1ac2      	subs	r2, r0, r3
 800717a:	bf1c      	itt	ne
 800717c:	1a1b      	subne	r3, r3, r0
 800717e:	50a3      	strne	r3, [r4, r2]
 8007180:	e7af      	b.n	80070e2 <_malloc_r+0x22>
 8007182:	6862      	ldr	r2, [r4, #4]
 8007184:	42a3      	cmp	r3, r4
 8007186:	bf0c      	ite	eq
 8007188:	f8c8 2000 	streq.w	r2, [r8]
 800718c:	605a      	strne	r2, [r3, #4]
 800718e:	e7eb      	b.n	8007168 <_malloc_r+0xa8>
 8007190:	4623      	mov	r3, r4
 8007192:	6864      	ldr	r4, [r4, #4]
 8007194:	e7ae      	b.n	80070f4 <_malloc_r+0x34>
 8007196:	463c      	mov	r4, r7
 8007198:	687f      	ldr	r7, [r7, #4]
 800719a:	e7b6      	b.n	800710a <_malloc_r+0x4a>
 800719c:	461a      	mov	r2, r3
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	d1fb      	bne.n	800719c <_malloc_r+0xdc>
 80071a4:	2300      	movs	r3, #0
 80071a6:	6053      	str	r3, [r2, #4]
 80071a8:	e7de      	b.n	8007168 <_malloc_r+0xa8>
 80071aa:	230c      	movs	r3, #12
 80071ac:	6033      	str	r3, [r6, #0]
 80071ae:	4630      	mov	r0, r6
 80071b0:	f000 f80c 	bl	80071cc <__malloc_unlock>
 80071b4:	e794      	b.n	80070e0 <_malloc_r+0x20>
 80071b6:	6005      	str	r5, [r0, #0]
 80071b8:	e7d6      	b.n	8007168 <_malloc_r+0xa8>
 80071ba:	bf00      	nop
 80071bc:	20001a80 	.word	0x20001a80

080071c0 <__malloc_lock>:
 80071c0:	4801      	ldr	r0, [pc, #4]	@ (80071c8 <__malloc_lock+0x8>)
 80071c2:	f7ff b8ba 	b.w	800633a <__retarget_lock_acquire_recursive>
 80071c6:	bf00      	nop
 80071c8:	20001a78 	.word	0x20001a78

080071cc <__malloc_unlock>:
 80071cc:	4801      	ldr	r0, [pc, #4]	@ (80071d4 <__malloc_unlock+0x8>)
 80071ce:	f7ff b8b5 	b.w	800633c <__retarget_lock_release_recursive>
 80071d2:	bf00      	nop
 80071d4:	20001a78 	.word	0x20001a78

080071d8 <_Balloc>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	69c6      	ldr	r6, [r0, #28]
 80071dc:	4604      	mov	r4, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	b976      	cbnz	r6, 8007200 <_Balloc+0x28>
 80071e2:	2010      	movs	r0, #16
 80071e4:	f7ff ff42 	bl	800706c <malloc>
 80071e8:	4602      	mov	r2, r0
 80071ea:	61e0      	str	r0, [r4, #28]
 80071ec:	b920      	cbnz	r0, 80071f8 <_Balloc+0x20>
 80071ee:	4b18      	ldr	r3, [pc, #96]	@ (8007250 <_Balloc+0x78>)
 80071f0:	4818      	ldr	r0, [pc, #96]	@ (8007254 <_Balloc+0x7c>)
 80071f2:	216b      	movs	r1, #107	@ 0x6b
 80071f4:	f000 ff74 	bl	80080e0 <__assert_func>
 80071f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071fc:	6006      	str	r6, [r0, #0]
 80071fe:	60c6      	str	r6, [r0, #12]
 8007200:	69e6      	ldr	r6, [r4, #28]
 8007202:	68f3      	ldr	r3, [r6, #12]
 8007204:	b183      	cbz	r3, 8007228 <_Balloc+0x50>
 8007206:	69e3      	ldr	r3, [r4, #28]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800720e:	b9b8      	cbnz	r0, 8007240 <_Balloc+0x68>
 8007210:	2101      	movs	r1, #1
 8007212:	fa01 f605 	lsl.w	r6, r1, r5
 8007216:	1d72      	adds	r2, r6, #5
 8007218:	0092      	lsls	r2, r2, #2
 800721a:	4620      	mov	r0, r4
 800721c:	f000 ff7e 	bl	800811c <_calloc_r>
 8007220:	b160      	cbz	r0, 800723c <_Balloc+0x64>
 8007222:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007226:	e00e      	b.n	8007246 <_Balloc+0x6e>
 8007228:	2221      	movs	r2, #33	@ 0x21
 800722a:	2104      	movs	r1, #4
 800722c:	4620      	mov	r0, r4
 800722e:	f000 ff75 	bl	800811c <_calloc_r>
 8007232:	69e3      	ldr	r3, [r4, #28]
 8007234:	60f0      	str	r0, [r6, #12]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1e4      	bne.n	8007206 <_Balloc+0x2e>
 800723c:	2000      	movs	r0, #0
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	6802      	ldr	r2, [r0, #0]
 8007242:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007246:	2300      	movs	r3, #0
 8007248:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800724c:	e7f7      	b.n	800723e <_Balloc+0x66>
 800724e:	bf00      	nop
 8007250:	0800991d 	.word	0x0800991d
 8007254:	0800999d 	.word	0x0800999d

08007258 <_Bfree>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	69c6      	ldr	r6, [r0, #28]
 800725c:	4605      	mov	r5, r0
 800725e:	460c      	mov	r4, r1
 8007260:	b976      	cbnz	r6, 8007280 <_Bfree+0x28>
 8007262:	2010      	movs	r0, #16
 8007264:	f7ff ff02 	bl	800706c <malloc>
 8007268:	4602      	mov	r2, r0
 800726a:	61e8      	str	r0, [r5, #28]
 800726c:	b920      	cbnz	r0, 8007278 <_Bfree+0x20>
 800726e:	4b09      	ldr	r3, [pc, #36]	@ (8007294 <_Bfree+0x3c>)
 8007270:	4809      	ldr	r0, [pc, #36]	@ (8007298 <_Bfree+0x40>)
 8007272:	218f      	movs	r1, #143	@ 0x8f
 8007274:	f000 ff34 	bl	80080e0 <__assert_func>
 8007278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800727c:	6006      	str	r6, [r0, #0]
 800727e:	60c6      	str	r6, [r0, #12]
 8007280:	b13c      	cbz	r4, 8007292 <_Bfree+0x3a>
 8007282:	69eb      	ldr	r3, [r5, #28]
 8007284:	6862      	ldr	r2, [r4, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800728c:	6021      	str	r1, [r4, #0]
 800728e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	0800991d 	.word	0x0800991d
 8007298:	0800999d 	.word	0x0800999d

0800729c <__multadd>:
 800729c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a0:	690d      	ldr	r5, [r1, #16]
 80072a2:	4607      	mov	r7, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	461e      	mov	r6, r3
 80072a8:	f101 0c14 	add.w	ip, r1, #20
 80072ac:	2000      	movs	r0, #0
 80072ae:	f8dc 3000 	ldr.w	r3, [ip]
 80072b2:	b299      	uxth	r1, r3
 80072b4:	fb02 6101 	mla	r1, r2, r1, r6
 80072b8:	0c1e      	lsrs	r6, r3, #16
 80072ba:	0c0b      	lsrs	r3, r1, #16
 80072bc:	fb02 3306 	mla	r3, r2, r6, r3
 80072c0:	b289      	uxth	r1, r1
 80072c2:	3001      	adds	r0, #1
 80072c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072c8:	4285      	cmp	r5, r0
 80072ca:	f84c 1b04 	str.w	r1, [ip], #4
 80072ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072d2:	dcec      	bgt.n	80072ae <__multadd+0x12>
 80072d4:	b30e      	cbz	r6, 800731a <__multadd+0x7e>
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	42ab      	cmp	r3, r5
 80072da:	dc19      	bgt.n	8007310 <__multadd+0x74>
 80072dc:	6861      	ldr	r1, [r4, #4]
 80072de:	4638      	mov	r0, r7
 80072e0:	3101      	adds	r1, #1
 80072e2:	f7ff ff79 	bl	80071d8 <_Balloc>
 80072e6:	4680      	mov	r8, r0
 80072e8:	b928      	cbnz	r0, 80072f6 <__multadd+0x5a>
 80072ea:	4602      	mov	r2, r0
 80072ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007320 <__multadd+0x84>)
 80072ee:	480d      	ldr	r0, [pc, #52]	@ (8007324 <__multadd+0x88>)
 80072f0:	21ba      	movs	r1, #186	@ 0xba
 80072f2:	f000 fef5 	bl	80080e0 <__assert_func>
 80072f6:	6922      	ldr	r2, [r4, #16]
 80072f8:	3202      	adds	r2, #2
 80072fa:	f104 010c 	add.w	r1, r4, #12
 80072fe:	0092      	lsls	r2, r2, #2
 8007300:	300c      	adds	r0, #12
 8007302:	f000 fedf 	bl	80080c4 <memcpy>
 8007306:	4621      	mov	r1, r4
 8007308:	4638      	mov	r0, r7
 800730a:	f7ff ffa5 	bl	8007258 <_Bfree>
 800730e:	4644      	mov	r4, r8
 8007310:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007314:	3501      	adds	r5, #1
 8007316:	615e      	str	r6, [r3, #20]
 8007318:	6125      	str	r5, [r4, #16]
 800731a:	4620      	mov	r0, r4
 800731c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007320:	0800998c 	.word	0x0800998c
 8007324:	0800999d 	.word	0x0800999d

08007328 <__hi0bits>:
 8007328:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800732c:	4603      	mov	r3, r0
 800732e:	bf36      	itet	cc
 8007330:	0403      	lslcc	r3, r0, #16
 8007332:	2000      	movcs	r0, #0
 8007334:	2010      	movcc	r0, #16
 8007336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800733a:	bf3c      	itt	cc
 800733c:	021b      	lslcc	r3, r3, #8
 800733e:	3008      	addcc	r0, #8
 8007340:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007344:	bf3c      	itt	cc
 8007346:	011b      	lslcc	r3, r3, #4
 8007348:	3004      	addcc	r0, #4
 800734a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734e:	bf3c      	itt	cc
 8007350:	009b      	lslcc	r3, r3, #2
 8007352:	3002      	addcc	r0, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	db05      	blt.n	8007364 <__hi0bits+0x3c>
 8007358:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800735c:	f100 0001 	add.w	r0, r0, #1
 8007360:	bf08      	it	eq
 8007362:	2020      	moveq	r0, #32
 8007364:	4770      	bx	lr

08007366 <__lo0bits>:
 8007366:	6803      	ldr	r3, [r0, #0]
 8007368:	4602      	mov	r2, r0
 800736a:	f013 0007 	ands.w	r0, r3, #7
 800736e:	d00b      	beq.n	8007388 <__lo0bits+0x22>
 8007370:	07d9      	lsls	r1, r3, #31
 8007372:	d421      	bmi.n	80073b8 <__lo0bits+0x52>
 8007374:	0798      	lsls	r0, r3, #30
 8007376:	bf49      	itett	mi
 8007378:	085b      	lsrmi	r3, r3, #1
 800737a:	089b      	lsrpl	r3, r3, #2
 800737c:	2001      	movmi	r0, #1
 800737e:	6013      	strmi	r3, [r2, #0]
 8007380:	bf5c      	itt	pl
 8007382:	6013      	strpl	r3, [r2, #0]
 8007384:	2002      	movpl	r0, #2
 8007386:	4770      	bx	lr
 8007388:	b299      	uxth	r1, r3
 800738a:	b909      	cbnz	r1, 8007390 <__lo0bits+0x2a>
 800738c:	0c1b      	lsrs	r3, r3, #16
 800738e:	2010      	movs	r0, #16
 8007390:	b2d9      	uxtb	r1, r3
 8007392:	b909      	cbnz	r1, 8007398 <__lo0bits+0x32>
 8007394:	3008      	adds	r0, #8
 8007396:	0a1b      	lsrs	r3, r3, #8
 8007398:	0719      	lsls	r1, r3, #28
 800739a:	bf04      	itt	eq
 800739c:	091b      	lsreq	r3, r3, #4
 800739e:	3004      	addeq	r0, #4
 80073a0:	0799      	lsls	r1, r3, #30
 80073a2:	bf04      	itt	eq
 80073a4:	089b      	lsreq	r3, r3, #2
 80073a6:	3002      	addeq	r0, #2
 80073a8:	07d9      	lsls	r1, r3, #31
 80073aa:	d403      	bmi.n	80073b4 <__lo0bits+0x4e>
 80073ac:	085b      	lsrs	r3, r3, #1
 80073ae:	f100 0001 	add.w	r0, r0, #1
 80073b2:	d003      	beq.n	80073bc <__lo0bits+0x56>
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	4770      	bx	lr
 80073b8:	2000      	movs	r0, #0
 80073ba:	4770      	bx	lr
 80073bc:	2020      	movs	r0, #32
 80073be:	4770      	bx	lr

080073c0 <__i2b>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	460c      	mov	r4, r1
 80073c4:	2101      	movs	r1, #1
 80073c6:	f7ff ff07 	bl	80071d8 <_Balloc>
 80073ca:	4602      	mov	r2, r0
 80073cc:	b928      	cbnz	r0, 80073da <__i2b+0x1a>
 80073ce:	4b05      	ldr	r3, [pc, #20]	@ (80073e4 <__i2b+0x24>)
 80073d0:	4805      	ldr	r0, [pc, #20]	@ (80073e8 <__i2b+0x28>)
 80073d2:	f240 1145 	movw	r1, #325	@ 0x145
 80073d6:	f000 fe83 	bl	80080e0 <__assert_func>
 80073da:	2301      	movs	r3, #1
 80073dc:	6144      	str	r4, [r0, #20]
 80073de:	6103      	str	r3, [r0, #16]
 80073e0:	bd10      	pop	{r4, pc}
 80073e2:	bf00      	nop
 80073e4:	0800998c 	.word	0x0800998c
 80073e8:	0800999d 	.word	0x0800999d

080073ec <__multiply>:
 80073ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	4614      	mov	r4, r2
 80073f2:	690a      	ldr	r2, [r1, #16]
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	bfa8      	it	ge
 80073fa:	4623      	movge	r3, r4
 80073fc:	460f      	mov	r7, r1
 80073fe:	bfa4      	itt	ge
 8007400:	460c      	movge	r4, r1
 8007402:	461f      	movge	r7, r3
 8007404:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007408:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800740c:	68a3      	ldr	r3, [r4, #8]
 800740e:	6861      	ldr	r1, [r4, #4]
 8007410:	eb0a 0609 	add.w	r6, sl, r9
 8007414:	42b3      	cmp	r3, r6
 8007416:	b085      	sub	sp, #20
 8007418:	bfb8      	it	lt
 800741a:	3101      	addlt	r1, #1
 800741c:	f7ff fedc 	bl	80071d8 <_Balloc>
 8007420:	b930      	cbnz	r0, 8007430 <__multiply+0x44>
 8007422:	4602      	mov	r2, r0
 8007424:	4b44      	ldr	r3, [pc, #272]	@ (8007538 <__multiply+0x14c>)
 8007426:	4845      	ldr	r0, [pc, #276]	@ (800753c <__multiply+0x150>)
 8007428:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800742c:	f000 fe58 	bl	80080e0 <__assert_func>
 8007430:	f100 0514 	add.w	r5, r0, #20
 8007434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007438:	462b      	mov	r3, r5
 800743a:	2200      	movs	r2, #0
 800743c:	4543      	cmp	r3, r8
 800743e:	d321      	bcc.n	8007484 <__multiply+0x98>
 8007440:	f107 0114 	add.w	r1, r7, #20
 8007444:	f104 0214 	add.w	r2, r4, #20
 8007448:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800744c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007450:	9302      	str	r3, [sp, #8]
 8007452:	1b13      	subs	r3, r2, r4
 8007454:	3b15      	subs	r3, #21
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	3304      	adds	r3, #4
 800745c:	f104 0715 	add.w	r7, r4, #21
 8007460:	42ba      	cmp	r2, r7
 8007462:	bf38      	it	cc
 8007464:	2304      	movcc	r3, #4
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	9103      	str	r1, [sp, #12]
 800746c:	428b      	cmp	r3, r1
 800746e:	d80c      	bhi.n	800748a <__multiply+0x9e>
 8007470:	2e00      	cmp	r6, #0
 8007472:	dd03      	ble.n	800747c <__multiply+0x90>
 8007474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007478:	2b00      	cmp	r3, #0
 800747a:	d05b      	beq.n	8007534 <__multiply+0x148>
 800747c:	6106      	str	r6, [r0, #16]
 800747e:	b005      	add	sp, #20
 8007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007484:	f843 2b04 	str.w	r2, [r3], #4
 8007488:	e7d8      	b.n	800743c <__multiply+0x50>
 800748a:	f8b1 a000 	ldrh.w	sl, [r1]
 800748e:	f1ba 0f00 	cmp.w	sl, #0
 8007492:	d024      	beq.n	80074de <__multiply+0xf2>
 8007494:	f104 0e14 	add.w	lr, r4, #20
 8007498:	46a9      	mov	r9, r5
 800749a:	f04f 0c00 	mov.w	ip, #0
 800749e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074a2:	f8d9 3000 	ldr.w	r3, [r9]
 80074a6:	fa1f fb87 	uxth.w	fp, r7
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80074b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80074b4:	f8d9 7000 	ldr.w	r7, [r9]
 80074b8:	4463      	add	r3, ip
 80074ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074be:	fb0a c70b 	mla	r7, sl, fp, ip
 80074c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074cc:	4572      	cmp	r2, lr
 80074ce:	f849 3b04 	str.w	r3, [r9], #4
 80074d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074d6:	d8e2      	bhi.n	800749e <__multiply+0xb2>
 80074d8:	9b01      	ldr	r3, [sp, #4]
 80074da:	f845 c003 	str.w	ip, [r5, r3]
 80074de:	9b03      	ldr	r3, [sp, #12]
 80074e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80074e4:	3104      	adds	r1, #4
 80074e6:	f1b9 0f00 	cmp.w	r9, #0
 80074ea:	d021      	beq.n	8007530 <__multiply+0x144>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	f104 0c14 	add.w	ip, r4, #20
 80074f2:	46ae      	mov	lr, r5
 80074f4:	f04f 0a00 	mov.w	sl, #0
 80074f8:	f8bc b000 	ldrh.w	fp, [ip]
 80074fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007500:	fb09 770b 	mla	r7, r9, fp, r7
 8007504:	4457      	add	r7, sl
 8007506:	b29b      	uxth	r3, r3
 8007508:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800750c:	f84e 3b04 	str.w	r3, [lr], #4
 8007510:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007514:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007518:	f8be 3000 	ldrh.w	r3, [lr]
 800751c:	fb09 330a 	mla	r3, r9, sl, r3
 8007520:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007524:	4562      	cmp	r2, ip
 8007526:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800752a:	d8e5      	bhi.n	80074f8 <__multiply+0x10c>
 800752c:	9f01      	ldr	r7, [sp, #4]
 800752e:	51eb      	str	r3, [r5, r7]
 8007530:	3504      	adds	r5, #4
 8007532:	e799      	b.n	8007468 <__multiply+0x7c>
 8007534:	3e01      	subs	r6, #1
 8007536:	e79b      	b.n	8007470 <__multiply+0x84>
 8007538:	0800998c 	.word	0x0800998c
 800753c:	0800999d 	.word	0x0800999d

08007540 <__pow5mult>:
 8007540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007544:	4615      	mov	r5, r2
 8007546:	f012 0203 	ands.w	r2, r2, #3
 800754a:	4607      	mov	r7, r0
 800754c:	460e      	mov	r6, r1
 800754e:	d007      	beq.n	8007560 <__pow5mult+0x20>
 8007550:	4c25      	ldr	r4, [pc, #148]	@ (80075e8 <__pow5mult+0xa8>)
 8007552:	3a01      	subs	r2, #1
 8007554:	2300      	movs	r3, #0
 8007556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800755a:	f7ff fe9f 	bl	800729c <__multadd>
 800755e:	4606      	mov	r6, r0
 8007560:	10ad      	asrs	r5, r5, #2
 8007562:	d03d      	beq.n	80075e0 <__pow5mult+0xa0>
 8007564:	69fc      	ldr	r4, [r7, #28]
 8007566:	b97c      	cbnz	r4, 8007588 <__pow5mult+0x48>
 8007568:	2010      	movs	r0, #16
 800756a:	f7ff fd7f 	bl	800706c <malloc>
 800756e:	4602      	mov	r2, r0
 8007570:	61f8      	str	r0, [r7, #28]
 8007572:	b928      	cbnz	r0, 8007580 <__pow5mult+0x40>
 8007574:	4b1d      	ldr	r3, [pc, #116]	@ (80075ec <__pow5mult+0xac>)
 8007576:	481e      	ldr	r0, [pc, #120]	@ (80075f0 <__pow5mult+0xb0>)
 8007578:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800757c:	f000 fdb0 	bl	80080e0 <__assert_func>
 8007580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007584:	6004      	str	r4, [r0, #0]
 8007586:	60c4      	str	r4, [r0, #12]
 8007588:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800758c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007590:	b94c      	cbnz	r4, 80075a6 <__pow5mult+0x66>
 8007592:	f240 2171 	movw	r1, #625	@ 0x271
 8007596:	4638      	mov	r0, r7
 8007598:	f7ff ff12 	bl	80073c0 <__i2b>
 800759c:	2300      	movs	r3, #0
 800759e:	f8c8 0008 	str.w	r0, [r8, #8]
 80075a2:	4604      	mov	r4, r0
 80075a4:	6003      	str	r3, [r0, #0]
 80075a6:	f04f 0900 	mov.w	r9, #0
 80075aa:	07eb      	lsls	r3, r5, #31
 80075ac:	d50a      	bpl.n	80075c4 <__pow5mult+0x84>
 80075ae:	4631      	mov	r1, r6
 80075b0:	4622      	mov	r2, r4
 80075b2:	4638      	mov	r0, r7
 80075b4:	f7ff ff1a 	bl	80073ec <__multiply>
 80075b8:	4631      	mov	r1, r6
 80075ba:	4680      	mov	r8, r0
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff fe4b 	bl	8007258 <_Bfree>
 80075c2:	4646      	mov	r6, r8
 80075c4:	106d      	asrs	r5, r5, #1
 80075c6:	d00b      	beq.n	80075e0 <__pow5mult+0xa0>
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	b938      	cbnz	r0, 80075dc <__pow5mult+0x9c>
 80075cc:	4622      	mov	r2, r4
 80075ce:	4621      	mov	r1, r4
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff ff0b 	bl	80073ec <__multiply>
 80075d6:	6020      	str	r0, [r4, #0]
 80075d8:	f8c0 9000 	str.w	r9, [r0]
 80075dc:	4604      	mov	r4, r0
 80075de:	e7e4      	b.n	80075aa <__pow5mult+0x6a>
 80075e0:	4630      	mov	r0, r6
 80075e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e6:	bf00      	nop
 80075e8:	080099f8 	.word	0x080099f8
 80075ec:	0800991d 	.word	0x0800991d
 80075f0:	0800999d 	.word	0x0800999d

080075f4 <__lshift>:
 80075f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f8:	460c      	mov	r4, r1
 80075fa:	6849      	ldr	r1, [r1, #4]
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007602:	68a3      	ldr	r3, [r4, #8]
 8007604:	4607      	mov	r7, r0
 8007606:	4691      	mov	r9, r2
 8007608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800760c:	f108 0601 	add.w	r6, r8, #1
 8007610:	42b3      	cmp	r3, r6
 8007612:	db0b      	blt.n	800762c <__lshift+0x38>
 8007614:	4638      	mov	r0, r7
 8007616:	f7ff fddf 	bl	80071d8 <_Balloc>
 800761a:	4605      	mov	r5, r0
 800761c:	b948      	cbnz	r0, 8007632 <__lshift+0x3e>
 800761e:	4602      	mov	r2, r0
 8007620:	4b28      	ldr	r3, [pc, #160]	@ (80076c4 <__lshift+0xd0>)
 8007622:	4829      	ldr	r0, [pc, #164]	@ (80076c8 <__lshift+0xd4>)
 8007624:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007628:	f000 fd5a 	bl	80080e0 <__assert_func>
 800762c:	3101      	adds	r1, #1
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	e7ee      	b.n	8007610 <__lshift+0x1c>
 8007632:	2300      	movs	r3, #0
 8007634:	f100 0114 	add.w	r1, r0, #20
 8007638:	f100 0210 	add.w	r2, r0, #16
 800763c:	4618      	mov	r0, r3
 800763e:	4553      	cmp	r3, sl
 8007640:	db33      	blt.n	80076aa <__lshift+0xb6>
 8007642:	6920      	ldr	r0, [r4, #16]
 8007644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007648:	f104 0314 	add.w	r3, r4, #20
 800764c:	f019 091f 	ands.w	r9, r9, #31
 8007650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007654:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007658:	d02b      	beq.n	80076b2 <__lshift+0xbe>
 800765a:	f1c9 0e20 	rsb	lr, r9, #32
 800765e:	468a      	mov	sl, r1
 8007660:	2200      	movs	r2, #0
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	fa00 f009 	lsl.w	r0, r0, r9
 8007668:	4310      	orrs	r0, r2
 800766a:	f84a 0b04 	str.w	r0, [sl], #4
 800766e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007672:	459c      	cmp	ip, r3
 8007674:	fa22 f20e 	lsr.w	r2, r2, lr
 8007678:	d8f3      	bhi.n	8007662 <__lshift+0x6e>
 800767a:	ebac 0304 	sub.w	r3, ip, r4
 800767e:	3b15      	subs	r3, #21
 8007680:	f023 0303 	bic.w	r3, r3, #3
 8007684:	3304      	adds	r3, #4
 8007686:	f104 0015 	add.w	r0, r4, #21
 800768a:	4584      	cmp	ip, r0
 800768c:	bf38      	it	cc
 800768e:	2304      	movcc	r3, #4
 8007690:	50ca      	str	r2, [r1, r3]
 8007692:	b10a      	cbz	r2, 8007698 <__lshift+0xa4>
 8007694:	f108 0602 	add.w	r6, r8, #2
 8007698:	3e01      	subs	r6, #1
 800769a:	4638      	mov	r0, r7
 800769c:	612e      	str	r6, [r5, #16]
 800769e:	4621      	mov	r1, r4
 80076a0:	f7ff fdda 	bl	8007258 <_Bfree>
 80076a4:	4628      	mov	r0, r5
 80076a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80076ae:	3301      	adds	r3, #1
 80076b0:	e7c5      	b.n	800763e <__lshift+0x4a>
 80076b2:	3904      	subs	r1, #4
 80076b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80076bc:	459c      	cmp	ip, r3
 80076be:	d8f9      	bhi.n	80076b4 <__lshift+0xc0>
 80076c0:	e7ea      	b.n	8007698 <__lshift+0xa4>
 80076c2:	bf00      	nop
 80076c4:	0800998c 	.word	0x0800998c
 80076c8:	0800999d 	.word	0x0800999d

080076cc <__mcmp>:
 80076cc:	690a      	ldr	r2, [r1, #16]
 80076ce:	4603      	mov	r3, r0
 80076d0:	6900      	ldr	r0, [r0, #16]
 80076d2:	1a80      	subs	r0, r0, r2
 80076d4:	b530      	push	{r4, r5, lr}
 80076d6:	d10e      	bne.n	80076f6 <__mcmp+0x2a>
 80076d8:	3314      	adds	r3, #20
 80076da:	3114      	adds	r1, #20
 80076dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076ec:	4295      	cmp	r5, r2
 80076ee:	d003      	beq.n	80076f8 <__mcmp+0x2c>
 80076f0:	d205      	bcs.n	80076fe <__mcmp+0x32>
 80076f2:	f04f 30ff 	mov.w	r0, #4294967295
 80076f6:	bd30      	pop	{r4, r5, pc}
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d3f3      	bcc.n	80076e4 <__mcmp+0x18>
 80076fc:	e7fb      	b.n	80076f6 <__mcmp+0x2a>
 80076fe:	2001      	movs	r0, #1
 8007700:	e7f9      	b.n	80076f6 <__mcmp+0x2a>
	...

08007704 <__mdiff>:
 8007704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	4689      	mov	r9, r1
 800770a:	4606      	mov	r6, r0
 800770c:	4611      	mov	r1, r2
 800770e:	4648      	mov	r0, r9
 8007710:	4614      	mov	r4, r2
 8007712:	f7ff ffdb 	bl	80076cc <__mcmp>
 8007716:	1e05      	subs	r5, r0, #0
 8007718:	d112      	bne.n	8007740 <__mdiff+0x3c>
 800771a:	4629      	mov	r1, r5
 800771c:	4630      	mov	r0, r6
 800771e:	f7ff fd5b 	bl	80071d8 <_Balloc>
 8007722:	4602      	mov	r2, r0
 8007724:	b928      	cbnz	r0, 8007732 <__mdiff+0x2e>
 8007726:	4b3f      	ldr	r3, [pc, #252]	@ (8007824 <__mdiff+0x120>)
 8007728:	f240 2137 	movw	r1, #567	@ 0x237
 800772c:	483e      	ldr	r0, [pc, #248]	@ (8007828 <__mdiff+0x124>)
 800772e:	f000 fcd7 	bl	80080e0 <__assert_func>
 8007732:	2301      	movs	r3, #1
 8007734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007738:	4610      	mov	r0, r2
 800773a:	b003      	add	sp, #12
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007740:	bfbc      	itt	lt
 8007742:	464b      	movlt	r3, r9
 8007744:	46a1      	movlt	r9, r4
 8007746:	4630      	mov	r0, r6
 8007748:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800774c:	bfba      	itte	lt
 800774e:	461c      	movlt	r4, r3
 8007750:	2501      	movlt	r5, #1
 8007752:	2500      	movge	r5, #0
 8007754:	f7ff fd40 	bl	80071d8 <_Balloc>
 8007758:	4602      	mov	r2, r0
 800775a:	b918      	cbnz	r0, 8007764 <__mdiff+0x60>
 800775c:	4b31      	ldr	r3, [pc, #196]	@ (8007824 <__mdiff+0x120>)
 800775e:	f240 2145 	movw	r1, #581	@ 0x245
 8007762:	e7e3      	b.n	800772c <__mdiff+0x28>
 8007764:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007768:	6926      	ldr	r6, [r4, #16]
 800776a:	60c5      	str	r5, [r0, #12]
 800776c:	f109 0310 	add.w	r3, r9, #16
 8007770:	f109 0514 	add.w	r5, r9, #20
 8007774:	f104 0e14 	add.w	lr, r4, #20
 8007778:	f100 0b14 	add.w	fp, r0, #20
 800777c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007780:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	46d9      	mov	r9, fp
 8007788:	f04f 0c00 	mov.w	ip, #0
 800778c:	9b01      	ldr	r3, [sp, #4]
 800778e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007792:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007796:	9301      	str	r3, [sp, #4]
 8007798:	fa1f f38a 	uxth.w	r3, sl
 800779c:	4619      	mov	r1, r3
 800779e:	b283      	uxth	r3, r0
 80077a0:	1acb      	subs	r3, r1, r3
 80077a2:	0c00      	lsrs	r0, r0, #16
 80077a4:	4463      	add	r3, ip
 80077a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80077aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80077b4:	4576      	cmp	r6, lr
 80077b6:	f849 3b04 	str.w	r3, [r9], #4
 80077ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077be:	d8e5      	bhi.n	800778c <__mdiff+0x88>
 80077c0:	1b33      	subs	r3, r6, r4
 80077c2:	3b15      	subs	r3, #21
 80077c4:	f023 0303 	bic.w	r3, r3, #3
 80077c8:	3415      	adds	r4, #21
 80077ca:	3304      	adds	r3, #4
 80077cc:	42a6      	cmp	r6, r4
 80077ce:	bf38      	it	cc
 80077d0:	2304      	movcc	r3, #4
 80077d2:	441d      	add	r5, r3
 80077d4:	445b      	add	r3, fp
 80077d6:	461e      	mov	r6, r3
 80077d8:	462c      	mov	r4, r5
 80077da:	4544      	cmp	r4, r8
 80077dc:	d30e      	bcc.n	80077fc <__mdiff+0xf8>
 80077de:	f108 0103 	add.w	r1, r8, #3
 80077e2:	1b49      	subs	r1, r1, r5
 80077e4:	f021 0103 	bic.w	r1, r1, #3
 80077e8:	3d03      	subs	r5, #3
 80077ea:	45a8      	cmp	r8, r5
 80077ec:	bf38      	it	cc
 80077ee:	2100      	movcc	r1, #0
 80077f0:	440b      	add	r3, r1
 80077f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077f6:	b191      	cbz	r1, 800781e <__mdiff+0x11a>
 80077f8:	6117      	str	r7, [r2, #16]
 80077fa:	e79d      	b.n	8007738 <__mdiff+0x34>
 80077fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007800:	46e6      	mov	lr, ip
 8007802:	0c08      	lsrs	r0, r1, #16
 8007804:	fa1c fc81 	uxtah	ip, ip, r1
 8007808:	4471      	add	r1, lr
 800780a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800780e:	b289      	uxth	r1, r1
 8007810:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007814:	f846 1b04 	str.w	r1, [r6], #4
 8007818:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800781c:	e7dd      	b.n	80077da <__mdiff+0xd6>
 800781e:	3f01      	subs	r7, #1
 8007820:	e7e7      	b.n	80077f2 <__mdiff+0xee>
 8007822:	bf00      	nop
 8007824:	0800998c 	.word	0x0800998c
 8007828:	0800999d 	.word	0x0800999d

0800782c <__d2b>:
 800782c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007830:	460f      	mov	r7, r1
 8007832:	2101      	movs	r1, #1
 8007834:	ec59 8b10 	vmov	r8, r9, d0
 8007838:	4616      	mov	r6, r2
 800783a:	f7ff fccd 	bl	80071d8 <_Balloc>
 800783e:	4604      	mov	r4, r0
 8007840:	b930      	cbnz	r0, 8007850 <__d2b+0x24>
 8007842:	4602      	mov	r2, r0
 8007844:	4b23      	ldr	r3, [pc, #140]	@ (80078d4 <__d2b+0xa8>)
 8007846:	4824      	ldr	r0, [pc, #144]	@ (80078d8 <__d2b+0xac>)
 8007848:	f240 310f 	movw	r1, #783	@ 0x30f
 800784c:	f000 fc48 	bl	80080e0 <__assert_func>
 8007850:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007854:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007858:	b10d      	cbz	r5, 800785e <__d2b+0x32>
 800785a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	f1b8 0300 	subs.w	r3, r8, #0
 8007864:	d023      	beq.n	80078ae <__d2b+0x82>
 8007866:	4668      	mov	r0, sp
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	f7ff fd7c 	bl	8007366 <__lo0bits>
 800786e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007872:	b1d0      	cbz	r0, 80078aa <__d2b+0x7e>
 8007874:	f1c0 0320 	rsb	r3, r0, #32
 8007878:	fa02 f303 	lsl.w	r3, r2, r3
 800787c:	430b      	orrs	r3, r1
 800787e:	40c2      	lsrs	r2, r0
 8007880:	6163      	str	r3, [r4, #20]
 8007882:	9201      	str	r2, [sp, #4]
 8007884:	9b01      	ldr	r3, [sp, #4]
 8007886:	61a3      	str	r3, [r4, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	bf0c      	ite	eq
 800788c:	2201      	moveq	r2, #1
 800788e:	2202      	movne	r2, #2
 8007890:	6122      	str	r2, [r4, #16]
 8007892:	b1a5      	cbz	r5, 80078be <__d2b+0x92>
 8007894:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007898:	4405      	add	r5, r0
 800789a:	603d      	str	r5, [r7, #0]
 800789c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80078a0:	6030      	str	r0, [r6, #0]
 80078a2:	4620      	mov	r0, r4
 80078a4:	b003      	add	sp, #12
 80078a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078aa:	6161      	str	r1, [r4, #20]
 80078ac:	e7ea      	b.n	8007884 <__d2b+0x58>
 80078ae:	a801      	add	r0, sp, #4
 80078b0:	f7ff fd59 	bl	8007366 <__lo0bits>
 80078b4:	9b01      	ldr	r3, [sp, #4]
 80078b6:	6163      	str	r3, [r4, #20]
 80078b8:	3020      	adds	r0, #32
 80078ba:	2201      	movs	r2, #1
 80078bc:	e7e8      	b.n	8007890 <__d2b+0x64>
 80078be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80078c6:	6038      	str	r0, [r7, #0]
 80078c8:	6918      	ldr	r0, [r3, #16]
 80078ca:	f7ff fd2d 	bl	8007328 <__hi0bits>
 80078ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078d2:	e7e5      	b.n	80078a0 <__d2b+0x74>
 80078d4:	0800998c 	.word	0x0800998c
 80078d8:	0800999d 	.word	0x0800999d

080078dc <__ssputs_r>:
 80078dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	688e      	ldr	r6, [r1, #8]
 80078e2:	461f      	mov	r7, r3
 80078e4:	42be      	cmp	r6, r7
 80078e6:	680b      	ldr	r3, [r1, #0]
 80078e8:	4682      	mov	sl, r0
 80078ea:	460c      	mov	r4, r1
 80078ec:	4690      	mov	r8, r2
 80078ee:	d82d      	bhi.n	800794c <__ssputs_r+0x70>
 80078f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078f8:	d026      	beq.n	8007948 <__ssputs_r+0x6c>
 80078fa:	6965      	ldr	r5, [r4, #20]
 80078fc:	6909      	ldr	r1, [r1, #16]
 80078fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007902:	eba3 0901 	sub.w	r9, r3, r1
 8007906:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800790a:	1c7b      	adds	r3, r7, #1
 800790c:	444b      	add	r3, r9
 800790e:	106d      	asrs	r5, r5, #1
 8007910:	429d      	cmp	r5, r3
 8007912:	bf38      	it	cc
 8007914:	461d      	movcc	r5, r3
 8007916:	0553      	lsls	r3, r2, #21
 8007918:	d527      	bpl.n	800796a <__ssputs_r+0x8e>
 800791a:	4629      	mov	r1, r5
 800791c:	f7ff fbd0 	bl	80070c0 <_malloc_r>
 8007920:	4606      	mov	r6, r0
 8007922:	b360      	cbz	r0, 800797e <__ssputs_r+0xa2>
 8007924:	6921      	ldr	r1, [r4, #16]
 8007926:	464a      	mov	r2, r9
 8007928:	f000 fbcc 	bl	80080c4 <memcpy>
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	6126      	str	r6, [r4, #16]
 800793a:	6165      	str	r5, [r4, #20]
 800793c:	444e      	add	r6, r9
 800793e:	eba5 0509 	sub.w	r5, r5, r9
 8007942:	6026      	str	r6, [r4, #0]
 8007944:	60a5      	str	r5, [r4, #8]
 8007946:	463e      	mov	r6, r7
 8007948:	42be      	cmp	r6, r7
 800794a:	d900      	bls.n	800794e <__ssputs_r+0x72>
 800794c:	463e      	mov	r6, r7
 800794e:	6820      	ldr	r0, [r4, #0]
 8007950:	4632      	mov	r2, r6
 8007952:	4641      	mov	r1, r8
 8007954:	f000 fb6a 	bl	800802c <memmove>
 8007958:	68a3      	ldr	r3, [r4, #8]
 800795a:	1b9b      	subs	r3, r3, r6
 800795c:	60a3      	str	r3, [r4, #8]
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	4433      	add	r3, r6
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	2000      	movs	r0, #0
 8007966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796a:	462a      	mov	r2, r5
 800796c:	f000 fbfc 	bl	8008168 <_realloc_r>
 8007970:	4606      	mov	r6, r0
 8007972:	2800      	cmp	r0, #0
 8007974:	d1e0      	bne.n	8007938 <__ssputs_r+0x5c>
 8007976:	6921      	ldr	r1, [r4, #16]
 8007978:	4650      	mov	r0, sl
 800797a:	f7ff fb2d 	bl	8006fd8 <_free_r>
 800797e:	230c      	movs	r3, #12
 8007980:	f8ca 3000 	str.w	r3, [sl]
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800798a:	81a3      	strh	r3, [r4, #12]
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	e7e9      	b.n	8007966 <__ssputs_r+0x8a>
	...

08007994 <_svfiprintf_r>:
 8007994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	4698      	mov	r8, r3
 800799a:	898b      	ldrh	r3, [r1, #12]
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	b09d      	sub	sp, #116	@ 0x74
 80079a0:	4607      	mov	r7, r0
 80079a2:	460d      	mov	r5, r1
 80079a4:	4614      	mov	r4, r2
 80079a6:	d510      	bpl.n	80079ca <_svfiprintf_r+0x36>
 80079a8:	690b      	ldr	r3, [r1, #16]
 80079aa:	b973      	cbnz	r3, 80079ca <_svfiprintf_r+0x36>
 80079ac:	2140      	movs	r1, #64	@ 0x40
 80079ae:	f7ff fb87 	bl	80070c0 <_malloc_r>
 80079b2:	6028      	str	r0, [r5, #0]
 80079b4:	6128      	str	r0, [r5, #16]
 80079b6:	b930      	cbnz	r0, 80079c6 <_svfiprintf_r+0x32>
 80079b8:	230c      	movs	r3, #12
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295
 80079c0:	b01d      	add	sp, #116	@ 0x74
 80079c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c6:	2340      	movs	r3, #64	@ 0x40
 80079c8:	616b      	str	r3, [r5, #20]
 80079ca:	2300      	movs	r3, #0
 80079cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ce:	2320      	movs	r3, #32
 80079d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80079d8:	2330      	movs	r3, #48	@ 0x30
 80079da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b78 <_svfiprintf_r+0x1e4>
 80079de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079e2:	f04f 0901 	mov.w	r9, #1
 80079e6:	4623      	mov	r3, r4
 80079e8:	469a      	mov	sl, r3
 80079ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ee:	b10a      	cbz	r2, 80079f4 <_svfiprintf_r+0x60>
 80079f0:	2a25      	cmp	r2, #37	@ 0x25
 80079f2:	d1f9      	bne.n	80079e8 <_svfiprintf_r+0x54>
 80079f4:	ebba 0b04 	subs.w	fp, sl, r4
 80079f8:	d00b      	beq.n	8007a12 <_svfiprintf_r+0x7e>
 80079fa:	465b      	mov	r3, fp
 80079fc:	4622      	mov	r2, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	4638      	mov	r0, r7
 8007a02:	f7ff ff6b 	bl	80078dc <__ssputs_r>
 8007a06:	3001      	adds	r0, #1
 8007a08:	f000 80a7 	beq.w	8007b5a <_svfiprintf_r+0x1c6>
 8007a0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a0e:	445a      	add	r2, fp
 8007a10:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a12:	f89a 3000 	ldrb.w	r3, [sl]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 809f 	beq.w	8007b5a <_svfiprintf_r+0x1c6>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a26:	f10a 0a01 	add.w	sl, sl, #1
 8007a2a:	9304      	str	r3, [sp, #16]
 8007a2c:	9307      	str	r3, [sp, #28]
 8007a2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a32:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a34:	4654      	mov	r4, sl
 8007a36:	2205      	movs	r2, #5
 8007a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a3c:	484e      	ldr	r0, [pc, #312]	@ (8007b78 <_svfiprintf_r+0x1e4>)
 8007a3e:	f7f8 fbcf 	bl	80001e0 <memchr>
 8007a42:	9a04      	ldr	r2, [sp, #16]
 8007a44:	b9d8      	cbnz	r0, 8007a7e <_svfiprintf_r+0xea>
 8007a46:	06d0      	lsls	r0, r2, #27
 8007a48:	bf44      	itt	mi
 8007a4a:	2320      	movmi	r3, #32
 8007a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a50:	0711      	lsls	r1, r2, #28
 8007a52:	bf44      	itt	mi
 8007a54:	232b      	movmi	r3, #43	@ 0x2b
 8007a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a60:	d015      	beq.n	8007a8e <_svfiprintf_r+0xfa>
 8007a62:	9a07      	ldr	r2, [sp, #28]
 8007a64:	4654      	mov	r4, sl
 8007a66:	2000      	movs	r0, #0
 8007a68:	f04f 0c0a 	mov.w	ip, #10
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a72:	3b30      	subs	r3, #48	@ 0x30
 8007a74:	2b09      	cmp	r3, #9
 8007a76:	d94b      	bls.n	8007b10 <_svfiprintf_r+0x17c>
 8007a78:	b1b0      	cbz	r0, 8007aa8 <_svfiprintf_r+0x114>
 8007a7a:	9207      	str	r2, [sp, #28]
 8007a7c:	e014      	b.n	8007aa8 <_svfiprintf_r+0x114>
 8007a7e:	eba0 0308 	sub.w	r3, r0, r8
 8007a82:	fa09 f303 	lsl.w	r3, r9, r3
 8007a86:	4313      	orrs	r3, r2
 8007a88:	9304      	str	r3, [sp, #16]
 8007a8a:	46a2      	mov	sl, r4
 8007a8c:	e7d2      	b.n	8007a34 <_svfiprintf_r+0xa0>
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	1d19      	adds	r1, r3, #4
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	9103      	str	r1, [sp, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bfbb      	ittet	lt
 8007a9a:	425b      	neglt	r3, r3
 8007a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007aa0:	9307      	strge	r3, [sp, #28]
 8007aa2:	9307      	strlt	r3, [sp, #28]
 8007aa4:	bfb8      	it	lt
 8007aa6:	9204      	strlt	r2, [sp, #16]
 8007aa8:	7823      	ldrb	r3, [r4, #0]
 8007aaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007aac:	d10a      	bne.n	8007ac4 <_svfiprintf_r+0x130>
 8007aae:	7863      	ldrb	r3, [r4, #1]
 8007ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ab2:	d132      	bne.n	8007b1a <_svfiprintf_r+0x186>
 8007ab4:	9b03      	ldr	r3, [sp, #12]
 8007ab6:	1d1a      	adds	r2, r3, #4
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	9203      	str	r2, [sp, #12]
 8007abc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ac0:	3402      	adds	r4, #2
 8007ac2:	9305      	str	r3, [sp, #20]
 8007ac4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b88 <_svfiprintf_r+0x1f4>
 8007ac8:	7821      	ldrb	r1, [r4, #0]
 8007aca:	2203      	movs	r2, #3
 8007acc:	4650      	mov	r0, sl
 8007ace:	f7f8 fb87 	bl	80001e0 <memchr>
 8007ad2:	b138      	cbz	r0, 8007ae4 <_svfiprintf_r+0x150>
 8007ad4:	9b04      	ldr	r3, [sp, #16]
 8007ad6:	eba0 000a 	sub.w	r0, r0, sl
 8007ada:	2240      	movs	r2, #64	@ 0x40
 8007adc:	4082      	lsls	r2, r0
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	3401      	adds	r4, #1
 8007ae2:	9304      	str	r3, [sp, #16]
 8007ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae8:	4824      	ldr	r0, [pc, #144]	@ (8007b7c <_svfiprintf_r+0x1e8>)
 8007aea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007aee:	2206      	movs	r2, #6
 8007af0:	f7f8 fb76 	bl	80001e0 <memchr>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d036      	beq.n	8007b66 <_svfiprintf_r+0x1d2>
 8007af8:	4b21      	ldr	r3, [pc, #132]	@ (8007b80 <_svfiprintf_r+0x1ec>)
 8007afa:	bb1b      	cbnz	r3, 8007b44 <_svfiprintf_r+0x1b0>
 8007afc:	9b03      	ldr	r3, [sp, #12]
 8007afe:	3307      	adds	r3, #7
 8007b00:	f023 0307 	bic.w	r3, r3, #7
 8007b04:	3308      	adds	r3, #8
 8007b06:	9303      	str	r3, [sp, #12]
 8007b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b0a:	4433      	add	r3, r6
 8007b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b0e:	e76a      	b.n	80079e6 <_svfiprintf_r+0x52>
 8007b10:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b14:	460c      	mov	r4, r1
 8007b16:	2001      	movs	r0, #1
 8007b18:	e7a8      	b.n	8007a6c <_svfiprintf_r+0xd8>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	3401      	adds	r4, #1
 8007b1e:	9305      	str	r3, [sp, #20]
 8007b20:	4619      	mov	r1, r3
 8007b22:	f04f 0c0a 	mov.w	ip, #10
 8007b26:	4620      	mov	r0, r4
 8007b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b2c:	3a30      	subs	r2, #48	@ 0x30
 8007b2e:	2a09      	cmp	r2, #9
 8007b30:	d903      	bls.n	8007b3a <_svfiprintf_r+0x1a6>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0c6      	beq.n	8007ac4 <_svfiprintf_r+0x130>
 8007b36:	9105      	str	r1, [sp, #20]
 8007b38:	e7c4      	b.n	8007ac4 <_svfiprintf_r+0x130>
 8007b3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b3e:	4604      	mov	r4, r0
 8007b40:	2301      	movs	r3, #1
 8007b42:	e7f0      	b.n	8007b26 <_svfiprintf_r+0x192>
 8007b44:	ab03      	add	r3, sp, #12
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	462a      	mov	r2, r5
 8007b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b84 <_svfiprintf_r+0x1f0>)
 8007b4c:	a904      	add	r1, sp, #16
 8007b4e:	4638      	mov	r0, r7
 8007b50:	f7fd fe04 	bl	800575c <_printf_float>
 8007b54:	1c42      	adds	r2, r0, #1
 8007b56:	4606      	mov	r6, r0
 8007b58:	d1d6      	bne.n	8007b08 <_svfiprintf_r+0x174>
 8007b5a:	89ab      	ldrh	r3, [r5, #12]
 8007b5c:	065b      	lsls	r3, r3, #25
 8007b5e:	f53f af2d 	bmi.w	80079bc <_svfiprintf_r+0x28>
 8007b62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b64:	e72c      	b.n	80079c0 <_svfiprintf_r+0x2c>
 8007b66:	ab03      	add	r3, sp, #12
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	462a      	mov	r2, r5
 8007b6c:	4b05      	ldr	r3, [pc, #20]	@ (8007b84 <_svfiprintf_r+0x1f0>)
 8007b6e:	a904      	add	r1, sp, #16
 8007b70:	4638      	mov	r0, r7
 8007b72:	f7fe f88b 	bl	8005c8c <_printf_i>
 8007b76:	e7ed      	b.n	8007b54 <_svfiprintf_r+0x1c0>
 8007b78:	08009af8 	.word	0x08009af8
 8007b7c:	08009b02 	.word	0x08009b02
 8007b80:	0800575d 	.word	0x0800575d
 8007b84:	080078dd 	.word	0x080078dd
 8007b88:	08009afe 	.word	0x08009afe

08007b8c <__sfputc_r>:
 8007b8c:	6893      	ldr	r3, [r2, #8]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	b410      	push	{r4}
 8007b94:	6093      	str	r3, [r2, #8]
 8007b96:	da08      	bge.n	8007baa <__sfputc_r+0x1e>
 8007b98:	6994      	ldr	r4, [r2, #24]
 8007b9a:	42a3      	cmp	r3, r4
 8007b9c:	db01      	blt.n	8007ba2 <__sfputc_r+0x16>
 8007b9e:	290a      	cmp	r1, #10
 8007ba0:	d103      	bne.n	8007baa <__sfputc_r+0x1e>
 8007ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ba6:	f7fe bab6 	b.w	8006116 <__swbuf_r>
 8007baa:	6813      	ldr	r3, [r2, #0]
 8007bac:	1c58      	adds	r0, r3, #1
 8007bae:	6010      	str	r0, [r2, #0]
 8007bb0:	7019      	strb	r1, [r3, #0]
 8007bb2:	4608      	mov	r0, r1
 8007bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <__sfputs_r>:
 8007bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	460f      	mov	r7, r1
 8007bc0:	4614      	mov	r4, r2
 8007bc2:	18d5      	adds	r5, r2, r3
 8007bc4:	42ac      	cmp	r4, r5
 8007bc6:	d101      	bne.n	8007bcc <__sfputs_r+0x12>
 8007bc8:	2000      	movs	r0, #0
 8007bca:	e007      	b.n	8007bdc <__sfputs_r+0x22>
 8007bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd0:	463a      	mov	r2, r7
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f7ff ffda 	bl	8007b8c <__sfputc_r>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d1f3      	bne.n	8007bc4 <__sfputs_r+0xa>
 8007bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007be0 <_vfiprintf_r>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	460d      	mov	r5, r1
 8007be6:	b09d      	sub	sp, #116	@ 0x74
 8007be8:	4614      	mov	r4, r2
 8007bea:	4698      	mov	r8, r3
 8007bec:	4606      	mov	r6, r0
 8007bee:	b118      	cbz	r0, 8007bf8 <_vfiprintf_r+0x18>
 8007bf0:	6a03      	ldr	r3, [r0, #32]
 8007bf2:	b90b      	cbnz	r3, 8007bf8 <_vfiprintf_r+0x18>
 8007bf4:	f7fe f9f6 	bl	8005fe4 <__sinit>
 8007bf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bfa:	07d9      	lsls	r1, r3, #31
 8007bfc:	d405      	bmi.n	8007c0a <_vfiprintf_r+0x2a>
 8007bfe:	89ab      	ldrh	r3, [r5, #12]
 8007c00:	059a      	lsls	r2, r3, #22
 8007c02:	d402      	bmi.n	8007c0a <_vfiprintf_r+0x2a>
 8007c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c06:	f7fe fb98 	bl	800633a <__retarget_lock_acquire_recursive>
 8007c0a:	89ab      	ldrh	r3, [r5, #12]
 8007c0c:	071b      	lsls	r3, r3, #28
 8007c0e:	d501      	bpl.n	8007c14 <_vfiprintf_r+0x34>
 8007c10:	692b      	ldr	r3, [r5, #16]
 8007c12:	b99b      	cbnz	r3, 8007c3c <_vfiprintf_r+0x5c>
 8007c14:	4629      	mov	r1, r5
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7fe fabc 	bl	8006194 <__swsetup_r>
 8007c1c:	b170      	cbz	r0, 8007c3c <_vfiprintf_r+0x5c>
 8007c1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c20:	07dc      	lsls	r4, r3, #31
 8007c22:	d504      	bpl.n	8007c2e <_vfiprintf_r+0x4e>
 8007c24:	f04f 30ff 	mov.w	r0, #4294967295
 8007c28:	b01d      	add	sp, #116	@ 0x74
 8007c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	0598      	lsls	r0, r3, #22
 8007c32:	d4f7      	bmi.n	8007c24 <_vfiprintf_r+0x44>
 8007c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c36:	f7fe fb81 	bl	800633c <__retarget_lock_release_recursive>
 8007c3a:	e7f3      	b.n	8007c24 <_vfiprintf_r+0x44>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c40:	2320      	movs	r3, #32
 8007c42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c46:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c4a:	2330      	movs	r3, #48	@ 0x30
 8007c4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007dfc <_vfiprintf_r+0x21c>
 8007c50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c54:	f04f 0901 	mov.w	r9, #1
 8007c58:	4623      	mov	r3, r4
 8007c5a:	469a      	mov	sl, r3
 8007c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c60:	b10a      	cbz	r2, 8007c66 <_vfiprintf_r+0x86>
 8007c62:	2a25      	cmp	r2, #37	@ 0x25
 8007c64:	d1f9      	bne.n	8007c5a <_vfiprintf_r+0x7a>
 8007c66:	ebba 0b04 	subs.w	fp, sl, r4
 8007c6a:	d00b      	beq.n	8007c84 <_vfiprintf_r+0xa4>
 8007c6c:	465b      	mov	r3, fp
 8007c6e:	4622      	mov	r2, r4
 8007c70:	4629      	mov	r1, r5
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7ff ffa1 	bl	8007bba <__sfputs_r>
 8007c78:	3001      	adds	r0, #1
 8007c7a:	f000 80a7 	beq.w	8007dcc <_vfiprintf_r+0x1ec>
 8007c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c80:	445a      	add	r2, fp
 8007c82:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c84:	f89a 3000 	ldrb.w	r3, [sl]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 809f 	beq.w	8007dcc <_vfiprintf_r+0x1ec>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f04f 32ff 	mov.w	r2, #4294967295
 8007c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c98:	f10a 0a01 	add.w	sl, sl, #1
 8007c9c:	9304      	str	r3, [sp, #16]
 8007c9e:	9307      	str	r3, [sp, #28]
 8007ca0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ca4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ca6:	4654      	mov	r4, sl
 8007ca8:	2205      	movs	r2, #5
 8007caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cae:	4853      	ldr	r0, [pc, #332]	@ (8007dfc <_vfiprintf_r+0x21c>)
 8007cb0:	f7f8 fa96 	bl	80001e0 <memchr>
 8007cb4:	9a04      	ldr	r2, [sp, #16]
 8007cb6:	b9d8      	cbnz	r0, 8007cf0 <_vfiprintf_r+0x110>
 8007cb8:	06d1      	lsls	r1, r2, #27
 8007cba:	bf44      	itt	mi
 8007cbc:	2320      	movmi	r3, #32
 8007cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cc2:	0713      	lsls	r3, r2, #28
 8007cc4:	bf44      	itt	mi
 8007cc6:	232b      	movmi	r3, #43	@ 0x2b
 8007cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cd2:	d015      	beq.n	8007d00 <_vfiprintf_r+0x120>
 8007cd4:	9a07      	ldr	r2, [sp, #28]
 8007cd6:	4654      	mov	r4, sl
 8007cd8:	2000      	movs	r0, #0
 8007cda:	f04f 0c0a 	mov.w	ip, #10
 8007cde:	4621      	mov	r1, r4
 8007ce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ce4:	3b30      	subs	r3, #48	@ 0x30
 8007ce6:	2b09      	cmp	r3, #9
 8007ce8:	d94b      	bls.n	8007d82 <_vfiprintf_r+0x1a2>
 8007cea:	b1b0      	cbz	r0, 8007d1a <_vfiprintf_r+0x13a>
 8007cec:	9207      	str	r2, [sp, #28]
 8007cee:	e014      	b.n	8007d1a <_vfiprintf_r+0x13a>
 8007cf0:	eba0 0308 	sub.w	r3, r0, r8
 8007cf4:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	9304      	str	r3, [sp, #16]
 8007cfc:	46a2      	mov	sl, r4
 8007cfe:	e7d2      	b.n	8007ca6 <_vfiprintf_r+0xc6>
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	1d19      	adds	r1, r3, #4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	9103      	str	r1, [sp, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	bfbb      	ittet	lt
 8007d0c:	425b      	neglt	r3, r3
 8007d0e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d12:	9307      	strge	r3, [sp, #28]
 8007d14:	9307      	strlt	r3, [sp, #28]
 8007d16:	bfb8      	it	lt
 8007d18:	9204      	strlt	r2, [sp, #16]
 8007d1a:	7823      	ldrb	r3, [r4, #0]
 8007d1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d1e:	d10a      	bne.n	8007d36 <_vfiprintf_r+0x156>
 8007d20:	7863      	ldrb	r3, [r4, #1]
 8007d22:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d24:	d132      	bne.n	8007d8c <_vfiprintf_r+0x1ac>
 8007d26:	9b03      	ldr	r3, [sp, #12]
 8007d28:	1d1a      	adds	r2, r3, #4
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	9203      	str	r2, [sp, #12]
 8007d2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d32:	3402      	adds	r4, #2
 8007d34:	9305      	str	r3, [sp, #20]
 8007d36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e0c <_vfiprintf_r+0x22c>
 8007d3a:	7821      	ldrb	r1, [r4, #0]
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	4650      	mov	r0, sl
 8007d40:	f7f8 fa4e 	bl	80001e0 <memchr>
 8007d44:	b138      	cbz	r0, 8007d56 <_vfiprintf_r+0x176>
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	eba0 000a 	sub.w	r0, r0, sl
 8007d4c:	2240      	movs	r2, #64	@ 0x40
 8007d4e:	4082      	lsls	r2, r0
 8007d50:	4313      	orrs	r3, r2
 8007d52:	3401      	adds	r4, #1
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d5a:	4829      	ldr	r0, [pc, #164]	@ (8007e00 <_vfiprintf_r+0x220>)
 8007d5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d60:	2206      	movs	r2, #6
 8007d62:	f7f8 fa3d 	bl	80001e0 <memchr>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d03f      	beq.n	8007dea <_vfiprintf_r+0x20a>
 8007d6a:	4b26      	ldr	r3, [pc, #152]	@ (8007e04 <_vfiprintf_r+0x224>)
 8007d6c:	bb1b      	cbnz	r3, 8007db6 <_vfiprintf_r+0x1d6>
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	3307      	adds	r3, #7
 8007d72:	f023 0307 	bic.w	r3, r3, #7
 8007d76:	3308      	adds	r3, #8
 8007d78:	9303      	str	r3, [sp, #12]
 8007d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d7c:	443b      	add	r3, r7
 8007d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d80:	e76a      	b.n	8007c58 <_vfiprintf_r+0x78>
 8007d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d86:	460c      	mov	r4, r1
 8007d88:	2001      	movs	r0, #1
 8007d8a:	e7a8      	b.n	8007cde <_vfiprintf_r+0xfe>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	3401      	adds	r4, #1
 8007d90:	9305      	str	r3, [sp, #20]
 8007d92:	4619      	mov	r1, r3
 8007d94:	f04f 0c0a 	mov.w	ip, #10
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d9e:	3a30      	subs	r2, #48	@ 0x30
 8007da0:	2a09      	cmp	r2, #9
 8007da2:	d903      	bls.n	8007dac <_vfiprintf_r+0x1cc>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0c6      	beq.n	8007d36 <_vfiprintf_r+0x156>
 8007da8:	9105      	str	r1, [sp, #20]
 8007daa:	e7c4      	b.n	8007d36 <_vfiprintf_r+0x156>
 8007dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db0:	4604      	mov	r4, r0
 8007db2:	2301      	movs	r3, #1
 8007db4:	e7f0      	b.n	8007d98 <_vfiprintf_r+0x1b8>
 8007db6:	ab03      	add	r3, sp, #12
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	462a      	mov	r2, r5
 8007dbc:	4b12      	ldr	r3, [pc, #72]	@ (8007e08 <_vfiprintf_r+0x228>)
 8007dbe:	a904      	add	r1, sp, #16
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f7fd fccb 	bl	800575c <_printf_float>
 8007dc6:	4607      	mov	r7, r0
 8007dc8:	1c78      	adds	r0, r7, #1
 8007dca:	d1d6      	bne.n	8007d7a <_vfiprintf_r+0x19a>
 8007dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dce:	07d9      	lsls	r1, r3, #31
 8007dd0:	d405      	bmi.n	8007dde <_vfiprintf_r+0x1fe>
 8007dd2:	89ab      	ldrh	r3, [r5, #12]
 8007dd4:	059a      	lsls	r2, r3, #22
 8007dd6:	d402      	bmi.n	8007dde <_vfiprintf_r+0x1fe>
 8007dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dda:	f7fe faaf 	bl	800633c <__retarget_lock_release_recursive>
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	065b      	lsls	r3, r3, #25
 8007de2:	f53f af1f 	bmi.w	8007c24 <_vfiprintf_r+0x44>
 8007de6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007de8:	e71e      	b.n	8007c28 <_vfiprintf_r+0x48>
 8007dea:	ab03      	add	r3, sp, #12
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	462a      	mov	r2, r5
 8007df0:	4b05      	ldr	r3, [pc, #20]	@ (8007e08 <_vfiprintf_r+0x228>)
 8007df2:	a904      	add	r1, sp, #16
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7fd ff49 	bl	8005c8c <_printf_i>
 8007dfa:	e7e4      	b.n	8007dc6 <_vfiprintf_r+0x1e6>
 8007dfc:	08009af8 	.word	0x08009af8
 8007e00:	08009b02 	.word	0x08009b02
 8007e04:	0800575d 	.word	0x0800575d
 8007e08:	08007bbb 	.word	0x08007bbb
 8007e0c:	08009afe 	.word	0x08009afe

08007e10 <__sflush_r>:
 8007e10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e18:	0716      	lsls	r6, r2, #28
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	d454      	bmi.n	8007eca <__sflush_r+0xba>
 8007e20:	684b      	ldr	r3, [r1, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	dc02      	bgt.n	8007e2c <__sflush_r+0x1c>
 8007e26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	dd48      	ble.n	8007ebe <__sflush_r+0xae>
 8007e2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e2e:	2e00      	cmp	r6, #0
 8007e30:	d045      	beq.n	8007ebe <__sflush_r+0xae>
 8007e32:	2300      	movs	r3, #0
 8007e34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e38:	682f      	ldr	r7, [r5, #0]
 8007e3a:	6a21      	ldr	r1, [r4, #32]
 8007e3c:	602b      	str	r3, [r5, #0]
 8007e3e:	d030      	beq.n	8007ea2 <__sflush_r+0x92>
 8007e40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	0759      	lsls	r1, r3, #29
 8007e46:	d505      	bpl.n	8007e54 <__sflush_r+0x44>
 8007e48:	6863      	ldr	r3, [r4, #4]
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e4e:	b10b      	cbz	r3, 8007e54 <__sflush_r+0x44>
 8007e50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e52:	1ad2      	subs	r2, r2, r3
 8007e54:	2300      	movs	r3, #0
 8007e56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e58:	6a21      	ldr	r1, [r4, #32]
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	47b0      	blx	r6
 8007e5e:	1c43      	adds	r3, r0, #1
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	d106      	bne.n	8007e72 <__sflush_r+0x62>
 8007e64:	6829      	ldr	r1, [r5, #0]
 8007e66:	291d      	cmp	r1, #29
 8007e68:	d82b      	bhi.n	8007ec2 <__sflush_r+0xb2>
 8007e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8007f14 <__sflush_r+0x104>)
 8007e6c:	410a      	asrs	r2, r1
 8007e6e:	07d6      	lsls	r6, r2, #31
 8007e70:	d427      	bmi.n	8007ec2 <__sflush_r+0xb2>
 8007e72:	2200      	movs	r2, #0
 8007e74:	6062      	str	r2, [r4, #4]
 8007e76:	04d9      	lsls	r1, r3, #19
 8007e78:	6922      	ldr	r2, [r4, #16]
 8007e7a:	6022      	str	r2, [r4, #0]
 8007e7c:	d504      	bpl.n	8007e88 <__sflush_r+0x78>
 8007e7e:	1c42      	adds	r2, r0, #1
 8007e80:	d101      	bne.n	8007e86 <__sflush_r+0x76>
 8007e82:	682b      	ldr	r3, [r5, #0]
 8007e84:	b903      	cbnz	r3, 8007e88 <__sflush_r+0x78>
 8007e86:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e8a:	602f      	str	r7, [r5, #0]
 8007e8c:	b1b9      	cbz	r1, 8007ebe <__sflush_r+0xae>
 8007e8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e92:	4299      	cmp	r1, r3
 8007e94:	d002      	beq.n	8007e9c <__sflush_r+0x8c>
 8007e96:	4628      	mov	r0, r5
 8007e98:	f7ff f89e 	bl	8006fd8 <_free_r>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ea0:	e00d      	b.n	8007ebe <__sflush_r+0xae>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	47b0      	blx	r6
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	1c50      	adds	r0, r2, #1
 8007eac:	d1c9      	bne.n	8007e42 <__sflush_r+0x32>
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d0c6      	beq.n	8007e42 <__sflush_r+0x32>
 8007eb4:	2b1d      	cmp	r3, #29
 8007eb6:	d001      	beq.n	8007ebc <__sflush_r+0xac>
 8007eb8:	2b16      	cmp	r3, #22
 8007eba:	d11e      	bne.n	8007efa <__sflush_r+0xea>
 8007ebc:	602f      	str	r7, [r5, #0]
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	e022      	b.n	8007f08 <__sflush_r+0xf8>
 8007ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ec6:	b21b      	sxth	r3, r3
 8007ec8:	e01b      	b.n	8007f02 <__sflush_r+0xf2>
 8007eca:	690f      	ldr	r7, [r1, #16]
 8007ecc:	2f00      	cmp	r7, #0
 8007ece:	d0f6      	beq.n	8007ebe <__sflush_r+0xae>
 8007ed0:	0793      	lsls	r3, r2, #30
 8007ed2:	680e      	ldr	r6, [r1, #0]
 8007ed4:	bf08      	it	eq
 8007ed6:	694b      	ldreq	r3, [r1, #20]
 8007ed8:	600f      	str	r7, [r1, #0]
 8007eda:	bf18      	it	ne
 8007edc:	2300      	movne	r3, #0
 8007ede:	eba6 0807 	sub.w	r8, r6, r7
 8007ee2:	608b      	str	r3, [r1, #8]
 8007ee4:	f1b8 0f00 	cmp.w	r8, #0
 8007ee8:	dde9      	ble.n	8007ebe <__sflush_r+0xae>
 8007eea:	6a21      	ldr	r1, [r4, #32]
 8007eec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007eee:	4643      	mov	r3, r8
 8007ef0:	463a      	mov	r2, r7
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	47b0      	blx	r6
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	dc08      	bgt.n	8007f0c <__sflush_r+0xfc>
 8007efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f02:	81a3      	strh	r3, [r4, #12]
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295
 8007f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f0c:	4407      	add	r7, r0
 8007f0e:	eba8 0800 	sub.w	r8, r8, r0
 8007f12:	e7e7      	b.n	8007ee4 <__sflush_r+0xd4>
 8007f14:	dfbffffe 	.word	0xdfbffffe

08007f18 <_fflush_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	690b      	ldr	r3, [r1, #16]
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	b913      	cbnz	r3, 8007f28 <_fflush_r+0x10>
 8007f22:	2500      	movs	r5, #0
 8007f24:	4628      	mov	r0, r5
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	b118      	cbz	r0, 8007f32 <_fflush_r+0x1a>
 8007f2a:	6a03      	ldr	r3, [r0, #32]
 8007f2c:	b90b      	cbnz	r3, 8007f32 <_fflush_r+0x1a>
 8007f2e:	f7fe f859 	bl	8005fe4 <__sinit>
 8007f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0f3      	beq.n	8007f22 <_fflush_r+0xa>
 8007f3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f3c:	07d0      	lsls	r0, r2, #31
 8007f3e:	d404      	bmi.n	8007f4a <_fflush_r+0x32>
 8007f40:	0599      	lsls	r1, r3, #22
 8007f42:	d402      	bmi.n	8007f4a <_fflush_r+0x32>
 8007f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f46:	f7fe f9f8 	bl	800633a <__retarget_lock_acquire_recursive>
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	f7ff ff5f 	bl	8007e10 <__sflush_r>
 8007f52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f54:	07da      	lsls	r2, r3, #31
 8007f56:	4605      	mov	r5, r0
 8007f58:	d4e4      	bmi.n	8007f24 <_fflush_r+0xc>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	059b      	lsls	r3, r3, #22
 8007f5e:	d4e1      	bmi.n	8007f24 <_fflush_r+0xc>
 8007f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f62:	f7fe f9eb 	bl	800633c <__retarget_lock_release_recursive>
 8007f66:	e7dd      	b.n	8007f24 <_fflush_r+0xc>

08007f68 <__swhatbuf_r>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f70:	2900      	cmp	r1, #0
 8007f72:	b096      	sub	sp, #88	@ 0x58
 8007f74:	4615      	mov	r5, r2
 8007f76:	461e      	mov	r6, r3
 8007f78:	da0d      	bge.n	8007f96 <__swhatbuf_r+0x2e>
 8007f7a:	89a3      	ldrh	r3, [r4, #12]
 8007f7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f80:	f04f 0100 	mov.w	r1, #0
 8007f84:	bf14      	ite	ne
 8007f86:	2340      	movne	r3, #64	@ 0x40
 8007f88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	6031      	str	r1, [r6, #0]
 8007f90:	602b      	str	r3, [r5, #0]
 8007f92:	b016      	add	sp, #88	@ 0x58
 8007f94:	bd70      	pop	{r4, r5, r6, pc}
 8007f96:	466a      	mov	r2, sp
 8007f98:	f000 f862 	bl	8008060 <_fstat_r>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	dbec      	blt.n	8007f7a <__swhatbuf_r+0x12>
 8007fa0:	9901      	ldr	r1, [sp, #4]
 8007fa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007faa:	4259      	negs	r1, r3
 8007fac:	4159      	adcs	r1, r3
 8007fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fb2:	e7eb      	b.n	8007f8c <__swhatbuf_r+0x24>

08007fb4 <__smakebuf_r>:
 8007fb4:	898b      	ldrh	r3, [r1, #12]
 8007fb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fb8:	079d      	lsls	r5, r3, #30
 8007fba:	4606      	mov	r6, r0
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	d507      	bpl.n	8007fd0 <__smakebuf_r+0x1c>
 8007fc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	6123      	str	r3, [r4, #16]
 8007fc8:	2301      	movs	r3, #1
 8007fca:	6163      	str	r3, [r4, #20]
 8007fcc:	b003      	add	sp, #12
 8007fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd0:	ab01      	add	r3, sp, #4
 8007fd2:	466a      	mov	r2, sp
 8007fd4:	f7ff ffc8 	bl	8007f68 <__swhatbuf_r>
 8007fd8:	9f00      	ldr	r7, [sp, #0]
 8007fda:	4605      	mov	r5, r0
 8007fdc:	4639      	mov	r1, r7
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f7ff f86e 	bl	80070c0 <_malloc_r>
 8007fe4:	b948      	cbnz	r0, 8007ffa <__smakebuf_r+0x46>
 8007fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fea:	059a      	lsls	r2, r3, #22
 8007fec:	d4ee      	bmi.n	8007fcc <__smakebuf_r+0x18>
 8007fee:	f023 0303 	bic.w	r3, r3, #3
 8007ff2:	f043 0302 	orr.w	r3, r3, #2
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	e7e2      	b.n	8007fc0 <__smakebuf_r+0xc>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	6020      	str	r0, [r4, #0]
 8007ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	9b01      	ldr	r3, [sp, #4]
 8008006:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800800a:	b15b      	cbz	r3, 8008024 <__smakebuf_r+0x70>
 800800c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008010:	4630      	mov	r0, r6
 8008012:	f000 f837 	bl	8008084 <_isatty_r>
 8008016:	b128      	cbz	r0, 8008024 <__smakebuf_r+0x70>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f023 0303 	bic.w	r3, r3, #3
 800801e:	f043 0301 	orr.w	r3, r3, #1
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	431d      	orrs	r5, r3
 8008028:	81a5      	strh	r5, [r4, #12]
 800802a:	e7cf      	b.n	8007fcc <__smakebuf_r+0x18>

0800802c <memmove>:
 800802c:	4288      	cmp	r0, r1
 800802e:	b510      	push	{r4, lr}
 8008030:	eb01 0402 	add.w	r4, r1, r2
 8008034:	d902      	bls.n	800803c <memmove+0x10>
 8008036:	4284      	cmp	r4, r0
 8008038:	4623      	mov	r3, r4
 800803a:	d807      	bhi.n	800804c <memmove+0x20>
 800803c:	1e43      	subs	r3, r0, #1
 800803e:	42a1      	cmp	r1, r4
 8008040:	d008      	beq.n	8008054 <memmove+0x28>
 8008042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800804a:	e7f8      	b.n	800803e <memmove+0x12>
 800804c:	4402      	add	r2, r0
 800804e:	4601      	mov	r1, r0
 8008050:	428a      	cmp	r2, r1
 8008052:	d100      	bne.n	8008056 <memmove+0x2a>
 8008054:	bd10      	pop	{r4, pc}
 8008056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800805a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800805e:	e7f7      	b.n	8008050 <memmove+0x24>

08008060 <_fstat_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4d07      	ldr	r5, [pc, #28]	@ (8008080 <_fstat_r+0x20>)
 8008064:	2300      	movs	r3, #0
 8008066:	4604      	mov	r4, r0
 8008068:	4608      	mov	r0, r1
 800806a:	4611      	mov	r1, r2
 800806c:	602b      	str	r3, [r5, #0]
 800806e:	f7fa fa7f 	bl	8002570 <_fstat>
 8008072:	1c43      	adds	r3, r0, #1
 8008074:	d102      	bne.n	800807c <_fstat_r+0x1c>
 8008076:	682b      	ldr	r3, [r5, #0]
 8008078:	b103      	cbz	r3, 800807c <_fstat_r+0x1c>
 800807a:	6023      	str	r3, [r4, #0]
 800807c:	bd38      	pop	{r3, r4, r5, pc}
 800807e:	bf00      	nop
 8008080:	20001a74 	.word	0x20001a74

08008084 <_isatty_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d06      	ldr	r5, [pc, #24]	@ (80080a0 <_isatty_r+0x1c>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	f7fa fa7e 	bl	8002590 <_isatty>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_isatty_r+0x1a>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_isatty_r+0x1a>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	20001a74 	.word	0x20001a74

080080a4 <_sbrk_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4d06      	ldr	r5, [pc, #24]	@ (80080c0 <_sbrk_r+0x1c>)
 80080a8:	2300      	movs	r3, #0
 80080aa:	4604      	mov	r4, r0
 80080ac:	4608      	mov	r0, r1
 80080ae:	602b      	str	r3, [r5, #0]
 80080b0:	f7fa fa86 	bl	80025c0 <_sbrk>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_sbrk_r+0x1a>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_sbrk_r+0x1a>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	20001a74 	.word	0x20001a74

080080c4 <memcpy>:
 80080c4:	440a      	add	r2, r1
 80080c6:	4291      	cmp	r1, r2
 80080c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80080cc:	d100      	bne.n	80080d0 <memcpy+0xc>
 80080ce:	4770      	bx	lr
 80080d0:	b510      	push	{r4, lr}
 80080d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080da:	4291      	cmp	r1, r2
 80080dc:	d1f9      	bne.n	80080d2 <memcpy+0xe>
 80080de:	bd10      	pop	{r4, pc}

080080e0 <__assert_func>:
 80080e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080e2:	4614      	mov	r4, r2
 80080e4:	461a      	mov	r2, r3
 80080e6:	4b09      	ldr	r3, [pc, #36]	@ (800810c <__assert_func+0x2c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4605      	mov	r5, r0
 80080ec:	68d8      	ldr	r0, [r3, #12]
 80080ee:	b954      	cbnz	r4, 8008106 <__assert_func+0x26>
 80080f0:	4b07      	ldr	r3, [pc, #28]	@ (8008110 <__assert_func+0x30>)
 80080f2:	461c      	mov	r4, r3
 80080f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080f8:	9100      	str	r1, [sp, #0]
 80080fa:	462b      	mov	r3, r5
 80080fc:	4905      	ldr	r1, [pc, #20]	@ (8008114 <__assert_func+0x34>)
 80080fe:	f000 f86f 	bl	80081e0 <fiprintf>
 8008102:	f000 f87f 	bl	8008204 <abort>
 8008106:	4b04      	ldr	r3, [pc, #16]	@ (8008118 <__assert_func+0x38>)
 8008108:	e7f4      	b.n	80080f4 <__assert_func+0x14>
 800810a:	bf00      	nop
 800810c:	2000002c 	.word	0x2000002c
 8008110:	08009b4e 	.word	0x08009b4e
 8008114:	08009b20 	.word	0x08009b20
 8008118:	08009b13 	.word	0x08009b13

0800811c <_calloc_r>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	fba1 5402 	umull	r5, r4, r1, r2
 8008122:	b93c      	cbnz	r4, 8008134 <_calloc_r+0x18>
 8008124:	4629      	mov	r1, r5
 8008126:	f7fe ffcb 	bl	80070c0 <_malloc_r>
 800812a:	4606      	mov	r6, r0
 800812c:	b928      	cbnz	r0, 800813a <_calloc_r+0x1e>
 800812e:	2600      	movs	r6, #0
 8008130:	4630      	mov	r0, r6
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	220c      	movs	r2, #12
 8008136:	6002      	str	r2, [r0, #0]
 8008138:	e7f9      	b.n	800812e <_calloc_r+0x12>
 800813a:	462a      	mov	r2, r5
 800813c:	4621      	mov	r1, r4
 800813e:	f7fe f87f 	bl	8006240 <memset>
 8008142:	e7f5      	b.n	8008130 <_calloc_r+0x14>

08008144 <__ascii_mbtowc>:
 8008144:	b082      	sub	sp, #8
 8008146:	b901      	cbnz	r1, 800814a <__ascii_mbtowc+0x6>
 8008148:	a901      	add	r1, sp, #4
 800814a:	b142      	cbz	r2, 800815e <__ascii_mbtowc+0x1a>
 800814c:	b14b      	cbz	r3, 8008162 <__ascii_mbtowc+0x1e>
 800814e:	7813      	ldrb	r3, [r2, #0]
 8008150:	600b      	str	r3, [r1, #0]
 8008152:	7812      	ldrb	r2, [r2, #0]
 8008154:	1e10      	subs	r0, r2, #0
 8008156:	bf18      	it	ne
 8008158:	2001      	movne	r0, #1
 800815a:	b002      	add	sp, #8
 800815c:	4770      	bx	lr
 800815e:	4610      	mov	r0, r2
 8008160:	e7fb      	b.n	800815a <__ascii_mbtowc+0x16>
 8008162:	f06f 0001 	mvn.w	r0, #1
 8008166:	e7f8      	b.n	800815a <__ascii_mbtowc+0x16>

08008168 <_realloc_r>:
 8008168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	4680      	mov	r8, r0
 800816e:	4615      	mov	r5, r2
 8008170:	460c      	mov	r4, r1
 8008172:	b921      	cbnz	r1, 800817e <_realloc_r+0x16>
 8008174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008178:	4611      	mov	r1, r2
 800817a:	f7fe bfa1 	b.w	80070c0 <_malloc_r>
 800817e:	b92a      	cbnz	r2, 800818c <_realloc_r+0x24>
 8008180:	f7fe ff2a 	bl	8006fd8 <_free_r>
 8008184:	2400      	movs	r4, #0
 8008186:	4620      	mov	r0, r4
 8008188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800818c:	f000 f841 	bl	8008212 <_malloc_usable_size_r>
 8008190:	4285      	cmp	r5, r0
 8008192:	4606      	mov	r6, r0
 8008194:	d802      	bhi.n	800819c <_realloc_r+0x34>
 8008196:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800819a:	d8f4      	bhi.n	8008186 <_realloc_r+0x1e>
 800819c:	4629      	mov	r1, r5
 800819e:	4640      	mov	r0, r8
 80081a0:	f7fe ff8e 	bl	80070c0 <_malloc_r>
 80081a4:	4607      	mov	r7, r0
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d0ec      	beq.n	8008184 <_realloc_r+0x1c>
 80081aa:	42b5      	cmp	r5, r6
 80081ac:	462a      	mov	r2, r5
 80081ae:	4621      	mov	r1, r4
 80081b0:	bf28      	it	cs
 80081b2:	4632      	movcs	r2, r6
 80081b4:	f7ff ff86 	bl	80080c4 <memcpy>
 80081b8:	4621      	mov	r1, r4
 80081ba:	4640      	mov	r0, r8
 80081bc:	f7fe ff0c 	bl	8006fd8 <_free_r>
 80081c0:	463c      	mov	r4, r7
 80081c2:	e7e0      	b.n	8008186 <_realloc_r+0x1e>

080081c4 <__ascii_wctomb>:
 80081c4:	4603      	mov	r3, r0
 80081c6:	4608      	mov	r0, r1
 80081c8:	b141      	cbz	r1, 80081dc <__ascii_wctomb+0x18>
 80081ca:	2aff      	cmp	r2, #255	@ 0xff
 80081cc:	d904      	bls.n	80081d8 <__ascii_wctomb+0x14>
 80081ce:	228a      	movs	r2, #138	@ 0x8a
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	f04f 30ff 	mov.w	r0, #4294967295
 80081d6:	4770      	bx	lr
 80081d8:	700a      	strb	r2, [r1, #0]
 80081da:	2001      	movs	r0, #1
 80081dc:	4770      	bx	lr
	...

080081e0 <fiprintf>:
 80081e0:	b40e      	push	{r1, r2, r3}
 80081e2:	b503      	push	{r0, r1, lr}
 80081e4:	4601      	mov	r1, r0
 80081e6:	ab03      	add	r3, sp, #12
 80081e8:	4805      	ldr	r0, [pc, #20]	@ (8008200 <fiprintf+0x20>)
 80081ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ee:	6800      	ldr	r0, [r0, #0]
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	f7ff fcf5 	bl	8007be0 <_vfiprintf_r>
 80081f6:	b002      	add	sp, #8
 80081f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081fc:	b003      	add	sp, #12
 80081fe:	4770      	bx	lr
 8008200:	2000002c 	.word	0x2000002c

08008204 <abort>:
 8008204:	b508      	push	{r3, lr}
 8008206:	2006      	movs	r0, #6
 8008208:	f000 f834 	bl	8008274 <raise>
 800820c:	2001      	movs	r0, #1
 800820e:	f7fa f95f 	bl	80024d0 <_exit>

08008212 <_malloc_usable_size_r>:
 8008212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008216:	1f18      	subs	r0, r3, #4
 8008218:	2b00      	cmp	r3, #0
 800821a:	bfbc      	itt	lt
 800821c:	580b      	ldrlt	r3, [r1, r0]
 800821e:	18c0      	addlt	r0, r0, r3
 8008220:	4770      	bx	lr

08008222 <_raise_r>:
 8008222:	291f      	cmp	r1, #31
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4605      	mov	r5, r0
 8008228:	460c      	mov	r4, r1
 800822a:	d904      	bls.n	8008236 <_raise_r+0x14>
 800822c:	2316      	movs	r3, #22
 800822e:	6003      	str	r3, [r0, #0]
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	bd38      	pop	{r3, r4, r5, pc}
 8008236:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008238:	b112      	cbz	r2, 8008240 <_raise_r+0x1e>
 800823a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800823e:	b94b      	cbnz	r3, 8008254 <_raise_r+0x32>
 8008240:	4628      	mov	r0, r5
 8008242:	f000 f831 	bl	80082a8 <_getpid_r>
 8008246:	4622      	mov	r2, r4
 8008248:	4601      	mov	r1, r0
 800824a:	4628      	mov	r0, r5
 800824c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008250:	f000 b818 	b.w	8008284 <_kill_r>
 8008254:	2b01      	cmp	r3, #1
 8008256:	d00a      	beq.n	800826e <_raise_r+0x4c>
 8008258:	1c59      	adds	r1, r3, #1
 800825a:	d103      	bne.n	8008264 <_raise_r+0x42>
 800825c:	2316      	movs	r3, #22
 800825e:	6003      	str	r3, [r0, #0]
 8008260:	2001      	movs	r0, #1
 8008262:	e7e7      	b.n	8008234 <_raise_r+0x12>
 8008264:	2100      	movs	r1, #0
 8008266:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800826a:	4620      	mov	r0, r4
 800826c:	4798      	blx	r3
 800826e:	2000      	movs	r0, #0
 8008270:	e7e0      	b.n	8008234 <_raise_r+0x12>
	...

08008274 <raise>:
 8008274:	4b02      	ldr	r3, [pc, #8]	@ (8008280 <raise+0xc>)
 8008276:	4601      	mov	r1, r0
 8008278:	6818      	ldr	r0, [r3, #0]
 800827a:	f7ff bfd2 	b.w	8008222 <_raise_r>
 800827e:	bf00      	nop
 8008280:	2000002c 	.word	0x2000002c

08008284 <_kill_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d07      	ldr	r5, [pc, #28]	@ (80082a4 <_kill_r+0x20>)
 8008288:	2300      	movs	r3, #0
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	4611      	mov	r1, r2
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f7fa f90d 	bl	80024b0 <_kill>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d102      	bne.n	80082a0 <_kill_r+0x1c>
 800829a:	682b      	ldr	r3, [r5, #0]
 800829c:	b103      	cbz	r3, 80082a0 <_kill_r+0x1c>
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	bd38      	pop	{r3, r4, r5, pc}
 80082a2:	bf00      	nop
 80082a4:	20001a74 	.word	0x20001a74

080082a8 <_getpid_r>:
 80082a8:	f7fa b8fa 	b.w	80024a0 <_getpid>

080082ac <_init>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	bf00      	nop
 80082b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b2:	bc08      	pop	{r3}
 80082b4:	469e      	mov	lr, r3
 80082b6:	4770      	bx	lr

080082b8 <_fini>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	bf00      	nop
 80082bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082be:	bc08      	pop	{r3}
 80082c0:	469e      	mov	lr, r3
 80082c2:	4770      	bx	lr

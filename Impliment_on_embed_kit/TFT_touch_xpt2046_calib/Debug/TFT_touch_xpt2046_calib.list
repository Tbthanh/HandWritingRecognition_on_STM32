
TFT_touch_xpt2046_calib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000463c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e8c  080047dc  080047dc  000057dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005668  08005668  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005670  08005670  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005670  08005670  00006670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005674  08005674  00006674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005678  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c10  20000068  080056e0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c78  080056e0  00007c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008975  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d38  00000000  00000000  0000fa0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00011748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00015e39  00000000  00000000  00011fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000a6a1  00000000  00000000  00027de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00085a2e  00000000  00000000  00032482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b7eb0  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000062f  00000000  00000000  000b7ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025c4  00000000  00000000  000b8524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  000baae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080047c4 	.word	0x080047c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080047c4 	.word	0x080047c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800057a:	2200      	movs	r2, #0
 800057c:	2110      	movs	r1, #16
 800057e:	480c      	ldr	r0, [pc, #48]	@ (80005b0 <ST7789_WriteCommand+0x40>)
 8000580:	f002 fa9e 	bl	8002ac0 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000584:	2200      	movs	r2, #0
 8000586:	2102      	movs	r1, #2
 8000588:	4809      	ldr	r0, [pc, #36]	@ (80005b0 <ST7789_WriteCommand+0x40>)
 800058a:	f002 fa99 	bl	8002ac0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800058e:	1df9      	adds	r1, r7, #7
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	2201      	movs	r2, #1
 8000596:	4807      	ldr	r0, [pc, #28]	@ (80005b4 <ST7789_WriteCommand+0x44>)
 8000598:	f002 ff59 	bl	800344e <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800059c:	2201      	movs	r2, #1
 800059e:	2110      	movs	r1, #16
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <ST7789_WriteCommand+0x40>)
 80005a2:	f002 fa8d 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000
 80005b4:	200009e4 	.word	0x200009e4

080005b8 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80005c2:	2200      	movs	r2, #0
 80005c4:	2110      	movs	r1, #16
 80005c6:	4820      	ldr	r0, [pc, #128]	@ (8000648 <ST7789_WriteData+0x90>)
 80005c8:	f002 fa7a 	bl	8002ac0 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80005cc:	2201      	movs	r2, #1
 80005ce:	2102      	movs	r1, #2
 80005d0:	481d      	ldr	r0, [pc, #116]	@ (8000648 <ST7789_WriteData+0x90>)
 80005d2:	f002 fa75 	bl	8002ac0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80005d6:	e02a      	b.n	800062e <ST7789_WriteData+0x76>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005de:	4293      	cmp	r3, r2
 80005e0:	bf28      	it	cs
 80005e2:	4613      	movcs	r3, r2
 80005e4:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 80005e6:	4b19      	ldr	r3, [pc, #100]	@ (800064c <ST7789_WriteData+0x94>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d30e      	bcc.n	8000610 <ST7789_WriteData+0x58>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 80005f2:	89fb      	ldrh	r3, [r7, #14]
 80005f4:	461a      	mov	r2, r3
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	4815      	ldr	r0, [pc, #84]	@ (8000650 <ST7789_WriteData+0x98>)
 80005fa:	f003 fa15 	bl	8003a28 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 80005fe:	bf00      	nop
 8000600:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <ST7789_WriteData+0x98>)
 8000602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000604:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b01      	cmp	r3, #1
 800060c:	d1f8      	bne.n	8000600 <ST7789_WriteData+0x48>
 800060e:	e006      	b.n	800061e <ST7789_WriteData+0x66>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000610:	89fa      	ldrh	r2, [r7, #14]
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	480d      	ldr	r0, [pc, #52]	@ (8000650 <ST7789_WriteData+0x98>)
 800061a:	f002 ff18 	bl	800344e <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 800061e:	89fb      	ldrh	r3, [r7, #14]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000626:	89fb      	ldrh	r3, [r7, #14]
 8000628:	683a      	ldr	r2, [r7, #0]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1d1      	bne.n	80005d8 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 8000634:	2201      	movs	r2, #1
 8000636:	2110      	movs	r1, #16
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <ST7789_WriteData+0x90>)
 800063a:	f002 fa41 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020000 	.word	0x40020000
 800064c:	20000008 	.word	0x20000008
 8000650:	200009e4 	.word	0x200009e4

08000654 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800065e:	2200      	movs	r2, #0
 8000660:	2110      	movs	r1, #16
 8000662:	480c      	ldr	r0, [pc, #48]	@ (8000694 <ST7789_WriteSmallData+0x40>)
 8000664:	f002 fa2c 	bl	8002ac0 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000668:	2201      	movs	r2, #1
 800066a:	2102      	movs	r1, #2
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <ST7789_WriteSmallData+0x40>)
 800066e:	f002 fa27 	bl	8002ac0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000672:	1df9      	adds	r1, r7, #7
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	2201      	movs	r2, #1
 800067a:	4807      	ldr	r0, [pc, #28]	@ (8000698 <ST7789_WriteSmallData+0x44>)
 800067c:	f002 fee7 	bl	800344e <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000680:	2201      	movs	r2, #1
 8000682:	2110      	movs	r1, #16
 8000684:	4803      	ldr	r0, [pc, #12]	@ (8000694 <ST7789_WriteSmallData+0x40>)
 8000686:	f002 fa1b 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020000 	.word	0x40020000
 8000698:	200009e4 	.word	0x200009e4

0800069c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80006a6:	2036      	movs	r0, #54	@ 0x36
 80006a8:	f7ff ff62 	bl	8000570 <ST7789_WriteCommand>
	switch (m) {
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d81a      	bhi.n	80006e8 <ST7789_SetRotation+0x4c>
 80006b2:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <ST7789_SetRotation+0x1c>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006c9 	.word	0x080006c9
 80006bc:	080006d1 	.word	0x080006d1
 80006c0:	080006d9 	.word	0x080006d9
 80006c4:	080006e1 	.word	0x080006e1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80006c8:	20c0      	movs	r0, #192	@ 0xc0
 80006ca:	f7ff ffc3 	bl	8000654 <ST7789_WriteSmallData>
		break;
 80006ce:	e00c      	b.n	80006ea <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80006d0:	20a0      	movs	r0, #160	@ 0xa0
 80006d2:	f7ff ffbf 	bl	8000654 <ST7789_WriteSmallData>
		break;
 80006d6:	e008      	b.n	80006ea <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff ffbb 	bl	8000654 <ST7789_WriteSmallData>
		break;
 80006de:	e004      	b.n	80006ea <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80006e0:	2060      	movs	r0, #96	@ 0x60
 80006e2:	f7ff ffb7 	bl	8000654 <ST7789_WriteSmallData>
		break;
 80006e6:	e000      	b.n	80006ea <ST7789_SetRotation+0x4e>
	default:
		break;
 80006e8:	bf00      	nop
	}
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop

080006f4 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4604      	mov	r4, r0
 80006fc:	4608      	mov	r0, r1
 80006fe:	4611      	mov	r1, r2
 8000700:	461a      	mov	r2, r3
 8000702:	4623      	mov	r3, r4
 8000704:	80fb      	strh	r3, [r7, #6]
 8000706:	4603      	mov	r3, r0
 8000708:	80bb      	strh	r3, [r7, #4]
 800070a:	460b      	mov	r3, r1
 800070c:	807b      	strh	r3, [r7, #2]
 800070e:	4613      	mov	r3, r2
 8000710:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000712:	2200      	movs	r2, #0
 8000714:	2110      	movs	r1, #16
 8000716:	4824      	ldr	r0, [pc, #144]	@ (80007a8 <ST7789_SetAddressWindow+0xb4>)
 8000718:	f002 f9d2 	bl	8002ac0 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	82fb      	strh	r3, [r7, #22]
 8000720:	887b      	ldrh	r3, [r7, #2]
 8000722:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	827b      	strh	r3, [r7, #18]
 8000728:	883b      	ldrh	r3, [r7, #0]
 800072a:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800072c:	202a      	movs	r0, #42	@ 0x2a
 800072e:	f7ff ff1f 	bl	8000570 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000732:	8afb      	ldrh	r3, [r7, #22]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	b29b      	uxth	r3, r3
 8000738:	b2db      	uxtb	r3, r3
 800073a:	733b      	strb	r3, [r7, #12]
 800073c:	8afb      	ldrh	r3, [r7, #22]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	737b      	strb	r3, [r7, #13]
 8000742:	8abb      	ldrh	r3, [r7, #20]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	b29b      	uxth	r3, r3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	73bb      	strb	r3, [r7, #14]
 800074c:	8abb      	ldrh	r3, [r7, #20]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2104      	movs	r1, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff2d 	bl	80005b8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800075e:	202b      	movs	r0, #43	@ 0x2b
 8000760:	f7ff ff06 	bl	8000570 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8000764:	8a7b      	ldrh	r3, [r7, #18]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	b29b      	uxth	r3, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	723b      	strb	r3, [r7, #8]
 800076e:	8a7b      	ldrh	r3, [r7, #18]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	727b      	strb	r3, [r7, #9]
 8000774:	8a3b      	ldrh	r3, [r7, #16]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	b29b      	uxth	r3, r3
 800077a:	b2db      	uxtb	r3, r3
 800077c:	72bb      	strb	r3, [r7, #10]
 800077e:	8a3b      	ldrh	r3, [r7, #16]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2104      	movs	r1, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff14 	bl	80005b8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000790:	202c      	movs	r0, #44	@ 0x2c
 8000792:	f7ff feed 	bl	8000570 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8000796:	2201      	movs	r2, #1
 8000798:	2110      	movs	r1, #16
 800079a:	4803      	ldr	r0, [pc, #12]	@ (80007a8 <ST7789_SetAddressWindow+0xb4>)
 800079c:	f002 f990 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 80007a0:	bf00      	nop
 80007a2:	371c      	adds	r7, #28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd90      	pop	{r4, r7, pc}
 80007a8:	40020000 	.word	0x40020000

080007ac <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b08b      	sub	sp, #44	@ 0x2c
 80007b0:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 80007b2:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80007b6:	2100      	movs	r1, #0
 80007b8:	484a      	ldr	r0, [pc, #296]	@ (80008e4 <ST7789_Init+0x138>)
 80007ba:	f003 fb83 	bl	8003ec4 <memset>
	#endif
	HAL_Delay(10);
 80007be:	200a      	movs	r0, #10
 80007c0:	f001 fb3c 	bl	8001e3c <HAL_Delay>
    ST7789_RST_Clr();
 80007c4:	2200      	movs	r2, #0
 80007c6:	2108      	movs	r1, #8
 80007c8:	4847      	ldr	r0, [pc, #284]	@ (80008e8 <ST7789_Init+0x13c>)
 80007ca:	f002 f979 	bl	8002ac0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80007ce:	200a      	movs	r0, #10
 80007d0:	f001 fb34 	bl	8001e3c <HAL_Delay>
    ST7789_RST_Set();
 80007d4:	2201      	movs	r2, #1
 80007d6:	2108      	movs	r1, #8
 80007d8:	4843      	ldr	r0, [pc, #268]	@ (80008e8 <ST7789_Init+0x13c>)
 80007da:	f002 f971 	bl	8002ac0 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80007de:	2014      	movs	r0, #20
 80007e0:	f001 fb2c 	bl	8001e3c <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80007e4:	203a      	movs	r0, #58	@ 0x3a
 80007e6:	f7ff fec3 	bl	8000570 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80007ea:	2055      	movs	r0, #85	@ 0x55
 80007ec:	f7ff ff32 	bl	8000654 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80007f0:	20b2      	movs	r0, #178	@ 0xb2
 80007f2:	f7ff febd 	bl	8000570 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80007f6:	4a3d      	ldr	r2, [pc, #244]	@ (80008ec <ST7789_Init+0x140>)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000800:	6018      	str	r0, [r3, #0]
 8000802:	3304      	adds	r3, #4
 8000804:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2105      	movs	r1, #5
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fed3 	bl	80005b8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff ff42 	bl	800069c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8000818:	20b7      	movs	r0, #183	@ 0xb7
 800081a:	f7ff fea9 	bl	8000570 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800081e:	2035      	movs	r0, #53	@ 0x35
 8000820:	f7ff ff18 	bl	8000654 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000824:	20bb      	movs	r0, #187	@ 0xbb
 8000826:	f7ff fea3 	bl	8000570 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800082a:	2019      	movs	r0, #25
 800082c:	f7ff ff12 	bl	8000654 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000830:	20c0      	movs	r0, #192	@ 0xc0
 8000832:	f7ff fe9d 	bl	8000570 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000836:	202c      	movs	r0, #44	@ 0x2c
 8000838:	f7ff ff0c 	bl	8000654 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 800083c:	20c2      	movs	r0, #194	@ 0xc2
 800083e:	f7ff fe97 	bl	8000570 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff06 	bl	8000654 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000848:	20c3      	movs	r0, #195	@ 0xc3
 800084a:	f7ff fe91 	bl	8000570 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800084e:	2012      	movs	r0, #18
 8000850:	f7ff ff00 	bl	8000654 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000854:	20c4      	movs	r0, #196	@ 0xc4
 8000856:	f7ff fe8b 	bl	8000570 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800085a:	2020      	movs	r0, #32
 800085c:	f7ff fefa 	bl	8000654 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000860:	20c6      	movs	r0, #198	@ 0xc6
 8000862:	f7ff fe85 	bl	8000570 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000866:	200f      	movs	r0, #15
 8000868:	f7ff fef4 	bl	8000654 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 800086c:	20d0      	movs	r0, #208	@ 0xd0
 800086e:	f7ff fe7f 	bl	8000570 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000872:	20a4      	movs	r0, #164	@ 0xa4
 8000874:	f7ff feee 	bl	8000654 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000878:	20a1      	movs	r0, #161	@ 0xa1
 800087a:	f7ff feeb 	bl	8000654 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800087e:	20e0      	movs	r0, #224	@ 0xe0
 8000880:	f7ff fe76 	bl	8000570 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <ST7789_Init+0x144>)
 8000886:	f107 0410 	add.w	r4, r7, #16
 800088a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800088c:	c407      	stmia	r4!, {r0, r1, r2}
 800088e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	210e      	movs	r1, #14
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe8e 	bl	80005b8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800089c:	20e1      	movs	r0, #225	@ 0xe1
 800089e:	f7ff fe67 	bl	8000570 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <ST7789_Init+0x148>)
 80008a4:	463c      	mov	r4, r7
 80008a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a8:	c407      	stmia	r4!, {r0, r1, r2}
 80008aa:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80008ac:	463b      	mov	r3, r7
 80008ae:	210e      	movs	r1, #14
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe81 	bl	80005b8 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 80008b6:	2021      	movs	r0, #33	@ 0x21
 80008b8:	f7ff fe5a 	bl	8000570 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80008bc:	2011      	movs	r0, #17
 80008be:	f7ff fe57 	bl	8000570 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80008c2:	2013      	movs	r0, #19
 80008c4:	f7ff fe54 	bl	8000570 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 80008c8:	2029      	movs	r0, #41	@ 0x29
 80008ca:	f7ff fe51 	bl	8000570 <ST7789_WriteCommand>

	HAL_Delay(50);
 80008ce:	2032      	movs	r0, #50	@ 0x32
 80008d0:	f001 fab4 	bl	8001e3c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 f80f 	bl	80008f8 <ST7789_Fill_Color>
}
 80008da:	bf00      	nop
 80008dc:	372c      	adds	r7, #44	@ 0x2c
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000084 	.word	0x20000084
 80008e8:	40020000 	.word	0x40020000
 80008ec:	080047dc 	.word	0x080047dc
 80008f0:	080047e4 	.word	0x080047e4
 80008f4:	080047f4 	.word	0x080047f4

080008f8 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8000902:	f240 133f 	movw	r3, #319	@ 0x13f
 8000906:	22ef      	movs	r2, #239	@ 0xef
 8000908:	2100      	movs	r1, #0
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fef2 	bl	80006f4 <ST7789_SetAddressWindow>
	ST7789_Select();
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	4810      	ldr	r0, [pc, #64]	@ (8000958 <ST7789_Fill_Color+0x60>)
 8000916:	f002 f8d3 	bl	8002ac0 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800091a:	2300      	movs	r3, #0
 800091c:	81fb      	strh	r3, [r7, #14]
 800091e:	e00e      	b.n	800093e <ST7789_Fill_Color+0x46>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	@ (800095c <ST7789_Fill_Color+0x64>)
 800092a:	f003 facb 	bl	8003ec4 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 800092e:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8000932:	480a      	ldr	r0, [pc, #40]	@ (800095c <ST7789_Fill_Color+0x64>)
 8000934:	f7ff fe40 	bl	80005b8 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8000938:	89fb      	ldrh	r3, [r7, #14]
 800093a:	3301      	adds	r3, #1
 800093c:	81fb      	strh	r3, [r7, #14]
 800093e:	89fb      	ldrh	r3, [r7, #14]
 8000940:	2b3f      	cmp	r3, #63	@ 0x3f
 8000942:	d9ed      	bls.n	8000920 <ST7789_Fill_Color+0x28>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8000944:	2201      	movs	r2, #1
 8000946:	2110      	movs	r1, #16
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <ST7789_Fill_Color+0x60>)
 800094a:	f002 f8b9 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40020000 	.word	0x40020000
 800095c:	20000084 	.word	0x20000084

08000960 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
 800096a:	460b      	mov	r3, r1
 800096c:	80bb      	strh	r3, [r7, #4]
 800096e:	4613      	mov	r3, r2
 8000970:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	2bef      	cmp	r3, #239	@ 0xef
 8000976:	d822      	bhi.n	80009be <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800097e:	d21e      	bcs.n	80009be <ST7789_DrawPixel+0x5e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8000980:	88bb      	ldrh	r3, [r7, #4]
 8000982:	88fa      	ldrh	r2, [r7, #6]
 8000984:	88b9      	ldrh	r1, [r7, #4]
 8000986:	88f8      	ldrh	r0, [r7, #6]
 8000988:	f7ff feb4 	bl	80006f4 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800098c:	887b      	ldrh	r3, [r7, #2]
 800098e:	0a1b      	lsrs	r3, r3, #8
 8000990:	b29b      	uxth	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	733b      	strb	r3, [r7, #12]
 8000996:	887b      	ldrh	r3, [r7, #2]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 800099c:	2200      	movs	r2, #0
 800099e:	2110      	movs	r1, #16
 80009a0:	4809      	ldr	r0, [pc, #36]	@ (80009c8 <ST7789_DrawPixel+0x68>)
 80009a2:	f002 f88d 	bl	8002ac0 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2102      	movs	r1, #2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe03 	bl	80005b8 <ST7789_WriteData>
	ST7789_UnSelect();
 80009b2:	2201      	movs	r2, #1
 80009b4:	2110      	movs	r1, #16
 80009b6:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <ST7789_DrawPixel+0x68>)
 80009b8:	f002 f882 	bl	8002ac0 <HAL_GPIO_WritePin>
 80009bc:	e000      	b.n	80009c0 <ST7789_DrawPixel+0x60>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80009be:	bf00      	nop
}
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40020000 	.word	0x40020000

080009cc <ST7789_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4604      	mov	r4, r0
 80009d4:	4608      	mov	r0, r1
 80009d6:	4611      	mov	r1, r2
 80009d8:	461a      	mov	r2, r3
 80009da:	4623      	mov	r3, r4
 80009dc:	80fb      	strh	r3, [r7, #6]
 80009de:	4603      	mov	r3, r0
 80009e0:	80bb      	strh	r3, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	807b      	strh	r3, [r7, #2]
 80009e6:	4613      	mov	r3, r2
 80009e8:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 80009ea:	887b      	ldrh	r3, [r7, #2]
 80009ec:	2bef      	cmp	r3, #239	@ 0xef
 80009ee:	d836      	bhi.n	8000a5e <ST7789_Fill+0x92>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80009f0:	883b      	ldrh	r3, [r7, #0]
 80009f2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009f6:	d232      	bcs.n	8000a5e <ST7789_Fill+0x92>
	ST7789_Select();
 80009f8:	2200      	movs	r2, #0
 80009fa:	2110      	movs	r1, #16
 80009fc:	481a      	ldr	r0, [pc, #104]	@ (8000a68 <ST7789_Fill+0x9c>)
 80009fe:	f002 f85f 	bl	8002ac0 <HAL_GPIO_WritePin>
	uint16_t i, j;
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8000a02:	883b      	ldrh	r3, [r7, #0]
 8000a04:	887a      	ldrh	r2, [r7, #2]
 8000a06:	88b9      	ldrh	r1, [r7, #4]
 8000a08:	88f8      	ldrh	r0, [r7, #6]
 8000a0a:	f7ff fe73 	bl	80006f4 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++)
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	81fb      	strh	r3, [r7, #14]
 8000a12:	e01a      	b.n	8000a4a <ST7789_Fill+0x7e>
		for (j = xSta; j <= xEnd; j++) {
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	81bb      	strh	r3, [r7, #12]
 8000a18:	e010      	b.n	8000a3c <ST7789_Fill+0x70>
			uint8_t data[] = {color >> 8, color & 0xFF};
 8000a1a:	8c3b      	ldrh	r3, [r7, #32]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	723b      	strb	r3, [r7, #8]
 8000a24:	8c3b      	ldrh	r3, [r7, #32]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	727b      	strb	r3, [r7, #9]
			ST7789_WriteData(data, sizeof(data));
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fdc1 	bl	80005b8 <ST7789_WriteData>
		for (j = xSta; j <= xEnd; j++) {
 8000a36:	89bb      	ldrh	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	81bb      	strh	r3, [r7, #12]
 8000a3c:	89ba      	ldrh	r2, [r7, #12]
 8000a3e:	887b      	ldrh	r3, [r7, #2]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d9ea      	bls.n	8000a1a <ST7789_Fill+0x4e>
	for (i = ySta; i <= yEnd; i++)
 8000a44:	89fb      	ldrh	r3, [r7, #14]
 8000a46:	3301      	adds	r3, #1
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	89fa      	ldrh	r2, [r7, #14]
 8000a4c:	883b      	ldrh	r3, [r7, #0]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d9e0      	bls.n	8000a14 <ST7789_Fill+0x48>
		}
	ST7789_UnSelect();
 8000a52:	2201      	movs	r2, #1
 8000a54:	2110      	movs	r1, #16
 8000a56:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <ST7789_Fill+0x9c>)
 8000a58:	f002 f832 	bl	8002ac0 <HAL_GPIO_WritePin>
 8000a5c:	e000      	b.n	8000a60 <ST7789_Fill+0x94>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8000a5e:	bf00      	nop
}
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40020000 	.word	0x40020000

08000a6c <ST7789_DrawPixel_4px>:
 * @param x&y -> coordinate of the point
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel_4px(uint16_t x, uint16_t y, uint16_t color)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af02      	add	r7, sp, #8
 8000a72:	4603      	mov	r3, r0
 8000a74:	80fb      	strh	r3, [r7, #6]
 8000a76:	460b      	mov	r3, r1
 8000a78:	80bb      	strh	r3, [r7, #4]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	807b      	strh	r3, [r7, #2]
	if ((x <= 0) || (x > ST7789_WIDTH) ||
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d025      	beq.n	8000ad0 <ST7789_DrawPixel_4px+0x64>
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a88:	d822      	bhi.n	8000ad0 <ST7789_DrawPixel_4px+0x64>
 8000a8a:	88bb      	ldrh	r3, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d01f      	beq.n	8000ad0 <ST7789_DrawPixel_4px+0x64>
		 (y <= 0) || (y > ST7789_HEIGHT))	return;
 8000a90:	88bb      	ldrh	r3, [r7, #4]
 8000a92:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a96:	d81b      	bhi.n	8000ad0 <ST7789_DrawPixel_4px+0x64>
	ST7789_Select();
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <ST7789_DrawPixel_4px+0x6c>)
 8000a9e:	f002 f80f 	bl	8002ac0 <HAL_GPIO_WritePin>
	ST7789_Fill(x - 1, y - 1, x + 1, y + 1, color);
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	b298      	uxth	r0, r3
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	b299      	uxth	r1, r3
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	88bb      	ldrh	r3, [r7, #4]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b29c      	uxth	r4, r3
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	4623      	mov	r3, r4
 8000ac0:	f7ff ff84 	bl	80009cc <ST7789_Fill>
	ST7789_UnSelect();
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <ST7789_DrawPixel_4px+0x6c>)
 8000aca:	f001 fff9 	bl	8002ac0 <HAL_GPIO_WritePin>
 8000ace:	e000      	b.n	8000ad2 <ST7789_DrawPixel_4px+0x66>
		 (y <= 0) || (y > ST7789_HEIGHT))	return;
 8000ad0:	bf00      	nop
}
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	40020000 	.word	0x40020000

08000adc <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4623      	mov	r3, r4
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	4603      	mov	r3, r0
 8000af0:	80bb      	strh	r3, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	807b      	strh	r3, [r7, #2]
 8000af6:	4613      	mov	r3, r2
 8000af8:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000afa:	883a      	ldrh	r2, [r7, #0]
 8000afc:	88bb      	ldrh	r3, [r7, #4]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b04:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b08:	8879      	ldrh	r1, [r7, #2]
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	1acb      	subs	r3, r1, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	429a      	cmp	r2, r3
 8000b16:	bfcc      	ite	gt
 8000b18:	2301      	movgt	r3, #1
 8000b1a:	2300      	movle	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8000b20:	8a7b      	ldrh	r3, [r7, #18]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00b      	beq.n	8000b3e <ST7789_DrawLine+0x62>
		swap = x0;
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8000b2a:	88bb      	ldrh	r3, [r7, #4]
 8000b2c:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8000b2e:	8a3b      	ldrh	r3, [r7, #16]
 8000b30:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8000b36:	883b      	ldrh	r3, [r7, #0]
 8000b38:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8000b3a:	8a3b      	ldrh	r3, [r7, #16]
 8000b3c:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8000b3e:	88fa      	ldrh	r2, [r7, #6]
 8000b40:	887b      	ldrh	r3, [r7, #2]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d90b      	bls.n	8000b5e <ST7789_DrawLine+0x82>
		swap = x0;
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8000b4e:	8a3b      	ldrh	r3, [r7, #16]
 8000b50:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8000b56:	883b      	ldrh	r3, [r7, #0]
 8000b58:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8000b5a:	8a3b      	ldrh	r3, [r7, #16]
 8000b5c:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000b5e:	887a      	ldrh	r2, [r7, #2]
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8000b68:	883a      	ldrh	r2, [r7, #0]
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8000b76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b7a:	0fda      	lsrs	r2, r3, #31
 8000b7c:	4413      	add	r3, r2
 8000b7e:	105b      	asrs	r3, r3, #1
 8000b80:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8000b82:	88ba      	ldrh	r2, [r7, #4]
 8000b84:	883b      	ldrh	r3, [r7, #0]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d202      	bcs.n	8000b90 <ST7789_DrawLine+0xb4>
        ystep = 1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	82bb      	strh	r3, [r7, #20]
 8000b8e:	e028      	b.n	8000be2 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 8000b90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b94:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8000b96:	e024      	b.n	8000be2 <ST7789_DrawLine+0x106>
        if (steep) {
 8000b98:	8a7b      	ldrh	r3, [r7, #18]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d006      	beq.n	8000bac <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 8000b9e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000ba0:	88f9      	ldrh	r1, [r7, #6]
 8000ba2:	88bb      	ldrh	r3, [r7, #4]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fedb 	bl	8000960 <ST7789_DrawPixel>
 8000baa:	e005      	b.n	8000bb8 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8000bac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000bae:	88b9      	ldrh	r1, [r7, #4]
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fed4 	bl	8000960 <ST7789_DrawPixel>
        }
        err -= dy;
 8000bb8:	8afa      	ldrh	r2, [r7, #22]
 8000bba:	89bb      	ldrh	r3, [r7, #12]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8000bc2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	da08      	bge.n	8000bdc <ST7789_DrawLine+0x100>
            y0 += ystep;
 8000bca:	8aba      	ldrh	r2, [r7, #20]
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000bd2:	8afa      	ldrh	r2, [r7, #22]
 8000bd4:	89fb      	ldrh	r3, [r7, #14]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	3301      	adds	r3, #1
 8000be0:	80fb      	strh	r3, [r7, #6]
 8000be2:	88fa      	ldrh	r2, [r7, #6]
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d9d6      	bls.n	8000b98 <ST7789_DrawLine+0xbc>
        }
    }
}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	371c      	adds	r7, #28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	4623      	mov	r3, r4
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	4603      	mov	r3, r0
 8000c08:	80bb      	strh	r3, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000c12:	2200      	movs	r2, #0
 8000c14:	2110      	movs	r1, #16
 8000c16:	4818      	ldr	r0, [pc, #96]	@ (8000c78 <ST7789_DrawRectangle+0x84>)
 8000c18:	f001 ff52 	bl	8002ac0 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8000c1c:	88bc      	ldrh	r4, [r7, #4]
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	88b9      	ldrh	r1, [r7, #4]
 8000c22:	88f8      	ldrh	r0, [r7, #6]
 8000c24:	8b3b      	ldrh	r3, [r7, #24]
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	4623      	mov	r3, r4
 8000c2a:	f7ff ff57 	bl	8000adc <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 8000c2e:	883c      	ldrh	r4, [r7, #0]
 8000c30:	88fa      	ldrh	r2, [r7, #6]
 8000c32:	88b9      	ldrh	r1, [r7, #4]
 8000c34:	88f8      	ldrh	r0, [r7, #6]
 8000c36:	8b3b      	ldrh	r3, [r7, #24]
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	f7ff ff4e 	bl	8000adc <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 8000c40:	883c      	ldrh	r4, [r7, #0]
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	8839      	ldrh	r1, [r7, #0]
 8000c46:	88f8      	ldrh	r0, [r7, #6]
 8000c48:	8b3b      	ldrh	r3, [r7, #24]
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	f7ff ff45 	bl	8000adc <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 8000c52:	883c      	ldrh	r4, [r7, #0]
 8000c54:	887a      	ldrh	r2, [r7, #2]
 8000c56:	88b9      	ldrh	r1, [r7, #4]
 8000c58:	8878      	ldrh	r0, [r7, #2]
 8000c5a:	8b3b      	ldrh	r3, [r7, #24]
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	4623      	mov	r3, r4
 8000c60:	f7ff ff3c 	bl	8000adc <ST7789_DrawLine>
	ST7789_UnSelect();
 8000c64:	2201      	movs	r2, #1
 8000c66:	2110      	movs	r1, #16
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <ST7789_DrawRectangle+0x84>)
 8000c6a:	f001 ff29 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd90      	pop	{r4, r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40020000 	.word	0x40020000

08000c7c <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b088      	sub	sp, #32
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	80bb      	strh	r3, [r7, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000c92:	2200      	movs	r2, #0
 8000c94:	2110      	movs	r1, #16
 8000c96:	4837      	ldr	r0, [pc, #220]	@ (8000d74 <ST7789_WriteChar+0xf8>)
 8000c98:	f001 ff12 	bl	8002ac0 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000c9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
 8000cb4:	440b      	add	r3, r1
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	88b9      	ldrh	r1, [r7, #4]
 8000cbe:	88f8      	ldrh	r0, [r7, #6]
 8000cc0:	f7ff fd18 	bl	80006f4 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	e041      	b.n	8000d4e <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8000cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	3b20      	subs	r3, #32
 8000cd0:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000cd4:	fb01 f303 	mul.w	r3, r1, r3
 8000cd8:	4619      	mov	r1, r3
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	440b      	add	r3, r1
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
 8000cea:	e027      	b.n	8000d3c <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00e      	beq.n	8000d1a <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000cfc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000cfe:	0a1b      	lsrs	r3, r3, #8
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	743b      	strb	r3, [r7, #16]
 8000d06:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	2102      	movs	r1, #2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fc50 	bl	80005b8 <ST7789_WriteData>
 8000d18:	e00d      	b.n	8000d36 <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000d1a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	733b      	strb	r3, [r7, #12]
 8000d24:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	2102      	movs	r1, #2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fc41 	bl	80005b8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d40:	461a      	mov	r2, r3
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d3d1      	bcc.n	8000cec <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000d52:	461a      	mov	r2, r3
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d3b7      	bcc.n	8000cca <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <ST7789_WriteChar+0xf8>)
 8000d60:	f001 feae 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d6e:	b002      	add	sp, #8
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40020000 	.word	0x40020000

08000d78 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000d78:	b082      	sub	sp, #8
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af04      	add	r7, sp, #16
 8000d80:	603a      	str	r2, [r7, #0]
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	4603      	mov	r3, r0
 8000d86:	80fb      	strh	r3, [r7, #6]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4822      	ldr	r0, [pc, #136]	@ (8000e1c <ST7789_WriteString+0xa4>)
 8000d92:	f001 fe95 	bl	8002ac0 <HAL_GPIO_WritePin>
	while (*str) {
 8000d96:	e02e      	b.n	8000df6 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	7d3a      	ldrb	r2, [r7, #20]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	2bef      	cmp	r3, #239	@ 0xef
 8000da0:	dd14      	ble.n	8000dcc <ST7789_WriteString+0x54>
			x = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8000da6:	7d7b      	ldrb	r3, [r7, #21]
 8000da8:	461a      	mov	r2, r3
 8000daa:	88bb      	ldrh	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	7d7a      	ldrb	r2, [r7, #21]
 8000db4:	4413      	add	r3, r2
 8000db6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000dba:	da21      	bge.n	8000e00 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b20      	cmp	r3, #32
 8000dc2:	d103      	bne.n	8000dcc <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	603b      	str	r3, [r7, #0]
				continue;
 8000dca:	e014      	b.n	8000df6 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	88b9      	ldrh	r1, [r7, #4]
 8000dd2:	88f8      	ldrh	r0, [r7, #6]
 8000dd4:	8c3b      	ldrh	r3, [r7, #32]
 8000dd6:	9302      	str	r3, [sp, #8]
 8000dd8:	8bbb      	ldrh	r3, [r7, #28]
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f7ff ff4b 	bl	8000c7c <ST7789_WriteChar>
		x += font.width;
 8000de6:	7d3b      	ldrb	r3, [r7, #20]
 8000de8:	461a      	mov	r2, r3
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	4413      	add	r3, r2
 8000dee:	80fb      	strh	r3, [r7, #6]
		str++;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1cc      	bne.n	8000d98 <ST7789_WriteString+0x20>
 8000dfe:	e000      	b.n	8000e02 <ST7789_WriteString+0x8a>
				break;
 8000e00:	bf00      	nop
	}
	ST7789_UnSelect();
 8000e02:	2201      	movs	r2, #1
 8000e04:	2110      	movs	r1, #16
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <ST7789_WriteString+0xa4>)
 8000e08:	f001 fe5a 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e16:	b002      	add	sp, #8
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40020000 	.word	0x40020000

08000e20 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	4604      	mov	r4, r0
 8000e28:	4608      	mov	r0, r1
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4623      	mov	r3, r4
 8000e30:	80fb      	strh	r3, [r7, #6]
 8000e32:	4603      	mov	r3, r0
 8000e34:	80bb      	strh	r3, [r7, #4]
 8000e36:	460b      	mov	r3, r1
 8000e38:	807b      	strh	r3, [r7, #2]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2110      	movs	r1, #16
 8000e42:	4823      	ldr	r0, [pc, #140]	@ (8000ed0 <ST7789_DrawFilledRectangle+0xb0>)
 8000e44:	f001 fe3c 	bl	8002ac0 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	2bef      	cmp	r3, #239	@ 0xef
 8000e4c:	d83c      	bhi.n	8000ec8 <ST7789_DrawFilledRectangle+0xa8>
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e54:	d238      	bcs.n	8000ec8 <ST7789_DrawFilledRectangle+0xa8>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8000e56:	88fa      	ldrh	r2, [r7, #6]
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2bef      	cmp	r3, #239	@ 0xef
 8000e5e:	dd03      	ble.n	8000e68 <ST7789_DrawFilledRectangle+0x48>
		w = ST7789_WIDTH - x;
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000e66:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8000e68:	88ba      	ldrh	r2, [r7, #4]
 8000e6a:	883b      	ldrh	r3, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e72:	db03      	blt.n	8000e7c <ST7789_DrawFilledRectangle+0x5c>
		h = ST7789_HEIGHT - y;
 8000e74:	88bb      	ldrh	r3, [r7, #4]
 8000e76:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000e7a:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e017      	b.n	8000eb2 <ST7789_DrawFilledRectangle+0x92>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	b299      	uxth	r1, r3
 8000e8c:	88fa      	ldrh	r2, [r7, #6]
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	4413      	add	r3, r2
 8000e92:	b29c      	uxth	r4, r3
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	88f8      	ldrh	r0, [r7, #6]
 8000ea0:	8c3b      	ldrh	r3, [r7, #32]
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	4622      	mov	r2, r4
 8000ea8:	f7ff fe18 	bl	8000adc <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	883a      	ldrh	r2, [r7, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d2e2      	bcs.n	8000e82 <ST7789_DrawFilledRectangle+0x62>
	}
	ST7789_UnSelect();
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <ST7789_DrawFilledRectangle+0xb0>)
 8000ec2:	f001 fdfd 	bl	8002ac0 <HAL_GPIO_WritePin>
 8000ec6:	e000      	b.n	8000eca <ST7789_DrawFilledRectangle+0xaa>
		return;
 8000ec8:	bf00      	nop
}
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd90      	pop	{r4, r7, pc}
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 ff3d 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f95f 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 fa55 	bl	8001390 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee6:	f000 fa33 	bl	8001350 <MX_DMA_Init>
  MX_SPI1_Init();
 8000eea:	f000 f9c3 	bl	8001274 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000eee:	f000 f9f7 	bl	80012e0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8000ef2:	f7ff fc5b 	bl	80007ac <ST7789_Init>

  xpt2046_spi(&hspi2);
 8000ef6:	48a0      	ldr	r0, [pc, #640]	@ (8001178 <main+0x2a4>)
 8000ef8:	f000 fd46 	bl	8001988 <xpt2046_spi>
  xpt2046_init();
 8000efc:	f000 fc46 	bl	800178c <xpt2046_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  ST7789_Test();
  char coordinate_string[20];
  uint8_t change_flag = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	77fb      	strb	r3, [r7, #31]

  // Turn screen Blackj
//  ST7789_InvertColors(ST7789_INVOFF);
  ST7789_Fill_Color(WHITE);
 8000f04:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f08:	f7ff fcf6 	bl	80008f8 <ST7789_Fill_Color>
  HAL_Delay(500);
 8000f0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f10:	f000 ff94 	bl	8001e3c <HAL_Delay>
  ST7789_WriteString(10, 20, "Touch Test", Font_11x18, RED, WHITE);
 8000f14:	4b99      	ldr	r3, [pc, #612]	@ (800117c <main+0x2a8>)
 8000f16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f1a:	9202      	str	r2, [sp, #8]
 8000f1c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000f20:	9201      	str	r2, [sp, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	9200      	str	r2, [sp, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a95      	ldr	r2, [pc, #596]	@ (8001180 <main+0x2ac>)
 8000f2a:	2114      	movs	r1, #20
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f7ff ff23 	bl	8000d78 <ST7789_WriteString>
  HAL_Delay(500);
 8000f32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f36:	f000 ff81 	bl	8001e3c <HAL_Delay>
  ST7789_DrawPixel_4px( 10,  10, CYAN);
 8000f3a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f3e:	210a      	movs	r1, #10
 8000f40:	200a      	movs	r0, #10
 8000f42:	f7ff fd93 	bl	8000a6c <ST7789_DrawPixel_4px>
  ST7789_DrawPixel_4px(230,  10, CYAN);
 8000f46:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	20e6      	movs	r0, #230	@ 0xe6
 8000f4e:	f7ff fd8d 	bl	8000a6c <ST7789_DrawPixel_4px>
  ST7789_DrawPixel_4px( 10, 310, CYAN);
 8000f52:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f56:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8000f5a:	200a      	movs	r0, #10
 8000f5c:	f7ff fd86 	bl	8000a6c <ST7789_DrawPixel_4px>
  ST7789_DrawPixel_4px(230, 310, CYAN);
 8000f60:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f64:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8000f68:	20e6      	movs	r0, #230	@ 0xe6
 8000f6a:	f7ff fd7f 	bl	8000a6c <ST7789_DrawPixel_4px>

  // Draw resset button
  ST7789_DrawFilledRectangle(158, 18, 70, 22, BLACK);
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2316      	movs	r3, #22
 8000f74:	2246      	movs	r2, #70	@ 0x46
 8000f76:	2112      	movs	r1, #18
 8000f78:	209e      	movs	r0, #158	@ 0x9e
 8000f7a:	f7ff ff51 	bl	8000e20 <ST7789_DrawFilledRectangle>
  ST7789_WriteString(160, 20, "RESET", Font_11x18, CYAN, BLACK);// 160~226 - 20~38
 8000f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800117c <main+0x2a8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	9202      	str	r2, [sp, #8]
 8000f84:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f88:	9201      	str	r2, [sp, #4]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	9200      	str	r2, [sp, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a7c      	ldr	r2, [pc, #496]	@ (8001184 <main+0x2b0>)
 8000f92:	2114      	movs	r1, #20
 8000f94:	20a0      	movs	r0, #160	@ 0xa0
 8000f96:	f7ff feef 	bl	8000d78 <ST7789_WriteString>

  // Draw drawing border
  ST7789_DrawRectangle(8, 88, 232, 312, BLACK);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	f44f 739c 	mov.w	r3, #312	@ 0x138
 8000fa2:	22e8      	movs	r2, #232	@ 0xe8
 8000fa4:	2158      	movs	r1, #88	@ 0x58
 8000fa6:	2008      	movs	r0, #8
 8000fa8:	f7ff fe24 	bl	8000bf4 <ST7789_DrawRectangle>

  while (1)
  {
	uint16_t pre_coordinate_x = coordinate_x;
 8000fac:	4b76      	ldr	r3, [pc, #472]	@ (8001188 <main+0x2b4>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	83bb      	strh	r3, [r7, #28]
	uint16_t pre_coordinate_y = coordinate_y;
 8000fb2:	4b76      	ldr	r3, [pc, #472]	@ (800118c <main+0x2b8>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	837b      	strh	r3, [r7, #26]
	xpt2046_read_position(&coordinate_x, &coordinate_y);
 8000fb8:	4974      	ldr	r1, [pc, #464]	@ (800118c <main+0x2b8>)
 8000fba:	4873      	ldr	r0, [pc, #460]	@ (8001188 <main+0x2b4>)
 8000fbc:	f000 feaa 	bl	8001d14 <xpt2046_read_position>
	if (coordinate_x == 0 && coordinate_y == 0)
 8000fc0:	4b71      	ldr	r3, [pc, #452]	@ (8001188 <main+0x2b4>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d14b      	bne.n	8001060 <main+0x18c>
 8000fc8:	4b70      	ldr	r3, [pc, #448]	@ (800118c <main+0x2b8>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d147      	bne.n	8001060 <main+0x18c>
	{
		// do smt
		if (change_flag != 0)
 8000fd0:	7ffb      	ldrb	r3, [r7, #31]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d076      	beq.n	80010c4 <main+0x1f0>
		{
			ST7789_DrawFilledRectangle(54, 40, 66, 18, WHITE);
 8000fd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2312      	movs	r3, #18
 8000fde:	2242      	movs	r2, #66	@ 0x42
 8000fe0:	2128      	movs	r1, #40	@ 0x28
 8000fe2:	2036      	movs	r0, #54	@ 0x36
 8000fe4:	f7ff ff1c 	bl	8000e20 <ST7789_DrawFilledRectangle>
			sprintf(coordinate_string,"x = 0");
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4969      	ldr	r1, [pc, #420]	@ (8001190 <main+0x2bc>)
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 ff49 	bl	8003e84 <siprintf>
			ST7789_WriteString(10, 40, coordinate_string, Font_11x18, RED, WHITE);
 8000ff2:	4b62      	ldr	r3, [pc, #392]	@ (800117c <main+0x2a8>)
 8000ff4:	1d39      	adds	r1, r7, #4
 8000ff6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ffa:	9202      	str	r2, [sp, #8]
 8000ffc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001000:	9201      	str	r2, [sp, #4]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	9200      	str	r2, [sp, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	460a      	mov	r2, r1
 800100a:	2128      	movs	r1, #40	@ 0x28
 800100c:	200a      	movs	r0, #10
 800100e:	f7ff feb3 	bl	8000d78 <ST7789_WriteString>
			HAL_Delay(50);
 8001012:	2032      	movs	r0, #50	@ 0x32
 8001014:	f000 ff12 	bl	8001e3c <HAL_Delay>
			ST7789_DrawFilledRectangle(54, 60, 66, 18, WHITE);
 8001018:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2312      	movs	r3, #18
 8001020:	2242      	movs	r2, #66	@ 0x42
 8001022:	213c      	movs	r1, #60	@ 0x3c
 8001024:	2036      	movs	r0, #54	@ 0x36
 8001026:	f7ff fefb 	bl	8000e20 <ST7789_DrawFilledRectangle>
			sprintf(coordinate_string,"y = 0");
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4959      	ldr	r1, [pc, #356]	@ (8001194 <main+0x2c0>)
 800102e:	4618      	mov	r0, r3
 8001030:	f002 ff28 	bl	8003e84 <siprintf>
			ST7789_WriteString(10, 60, coordinate_string, Font_11x18, RED, WHITE);
 8001034:	4b51      	ldr	r3, [pc, #324]	@ (800117c <main+0x2a8>)
 8001036:	1d39      	adds	r1, r7, #4
 8001038:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800103c:	9202      	str	r2, [sp, #8]
 800103e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001042:	9201      	str	r2, [sp, #4]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	9200      	str	r2, [sp, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	460a      	mov	r2, r1
 800104c:	213c      	movs	r1, #60	@ 0x3c
 800104e:	200a      	movs	r0, #10
 8001050:	f7ff fe92 	bl	8000d78 <ST7789_WriteString>
			HAL_Delay(50);
 8001054:	2032      	movs	r0, #50	@ 0x32
 8001056:	f000 fef1 	bl	8001e3c <HAL_Delay>
			change_flag = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	77fb      	strb	r3, [r7, #31]
		if (change_flag != 0)
 800105e:	e031      	b.n	80010c4 <main+0x1f0>
		}
	}
	else
	{
		// update screen
		sprintf(coordinate_string,"x = %d", coordinate_x);
 8001060:	4b49      	ldr	r3, [pc, #292]	@ (8001188 <main+0x2b4>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	494b      	ldr	r1, [pc, #300]	@ (8001198 <main+0x2c4>)
 800106a:	4618      	mov	r0, r3
 800106c:	f002 ff0a 	bl	8003e84 <siprintf>
		ST7789_WriteString(10, 40, coordinate_string, Font_11x18, RED, WHITE);
 8001070:	4b42      	ldr	r3, [pc, #264]	@ (800117c <main+0x2a8>)
 8001072:	1d39      	adds	r1, r7, #4
 8001074:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001078:	9202      	str	r2, [sp, #8]
 800107a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800107e:	9201      	str	r2, [sp, #4]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	9200      	str	r2, [sp, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	460a      	mov	r2, r1
 8001088:	2128      	movs	r1, #40	@ 0x28
 800108a:	200a      	movs	r0, #10
 800108c:	f7ff fe74 	bl	8000d78 <ST7789_WriteString>
//		HAL_Delay(100);
		sprintf(coordinate_string,"y = %d", coordinate_y );
 8001090:	4b3e      	ldr	r3, [pc, #248]	@ (800118c <main+0x2b8>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4940      	ldr	r1, [pc, #256]	@ (800119c <main+0x2c8>)
 800109a:	4618      	mov	r0, r3
 800109c:	f002 fef2 	bl	8003e84 <siprintf>
		ST7789_WriteString(10, 60, coordinate_string, Font_11x18, RED, WHITE);
 80010a0:	4b36      	ldr	r3, [pc, #216]	@ (800117c <main+0x2a8>)
 80010a2:	1d39      	adds	r1, r7, #4
 80010a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010a8:	9202      	str	r2, [sp, #8]
 80010aa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80010ae:	9201      	str	r2, [sp, #4]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	9200      	str	r2, [sp, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	460a      	mov	r2, r1
 80010b8:	213c      	movs	r1, #60	@ 0x3c
 80010ba:	200a      	movs	r0, #10
 80010bc:	f7ff fe5c 	bl	8000d78 <ST7789_WriteString>
//		HAL_Delay(100);
		change_flag = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	77fb      	strb	r3, [r7, #31]
	}

//	// Draw function
	if (
			// bounding of draw box
			(coordinate_x >  25 && coordinate_x < 221) &&
 80010c4:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <main+0x2b4>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
	if (
 80010c8:	2b19      	cmp	r3, #25
 80010ca:	d933      	bls.n	8001134 <main+0x260>
			(coordinate_x >  25 && coordinate_x < 221) &&
 80010cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001188 <main+0x2b4>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	2bdc      	cmp	r3, #220	@ 0xdc
 80010d2:	d82f      	bhi.n	8001134 <main+0x260>
			(coordinate_y > 108 && coordinate_y < 307) &&
 80010d4:	4b2d      	ldr	r3, [pc, #180]	@ (800118c <main+0x2b8>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
			(coordinate_x >  25 && coordinate_x < 221) &&
 80010d8:	2b6c      	cmp	r3, #108	@ 0x6c
 80010da:	d92b      	bls.n	8001134 <main+0x260>
			(coordinate_y > 108 && coordinate_y < 307) &&
 80010dc:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <main+0x2b8>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 80010e4:	d826      	bhi.n	8001134 <main+0x260>
			// prevent jumping in value
			(coordinate_x < pre_coordinate_x + 10) && (coordinate_x > pre_coordinate_x - 10) &&
 80010e6:	8bbb      	ldrh	r3, [r7, #28]
 80010e8:	3309      	adds	r3, #9
 80010ea:	4a27      	ldr	r2, [pc, #156]	@ (8001188 <main+0x2b4>)
 80010ec:	8812      	ldrh	r2, [r2, #0]
			(coordinate_y > 108 && coordinate_y < 307) &&
 80010ee:	4293      	cmp	r3, r2
 80010f0:	db20      	blt.n	8001134 <main+0x260>
			(coordinate_x < pre_coordinate_x + 10) && (coordinate_x > pre_coordinate_x - 10) &&
 80010f2:	8bbb      	ldrh	r3, [r7, #28]
 80010f4:	3b09      	subs	r3, #9
 80010f6:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <main+0x2b4>)
 80010f8:	8812      	ldrh	r2, [r2, #0]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	dc1a      	bgt.n	8001134 <main+0x260>
			(coordinate_y < pre_coordinate_y + 10) && (coordinate_y > pre_coordinate_y - 10)
 80010fe:	8b7b      	ldrh	r3, [r7, #26]
 8001100:	3309      	adds	r3, #9
 8001102:	4a22      	ldr	r2, [pc, #136]	@ (800118c <main+0x2b8>)
 8001104:	8812      	ldrh	r2, [r2, #0]
			(coordinate_x < pre_coordinate_x + 10) && (coordinate_x > pre_coordinate_x - 10) &&
 8001106:	4293      	cmp	r3, r2
 8001108:	db14      	blt.n	8001134 <main+0x260>
			(coordinate_y < pre_coordinate_y + 10) && (coordinate_y > pre_coordinate_y - 10)
 800110a:	8b7b      	ldrh	r3, [r7, #26]
 800110c:	3b09      	subs	r3, #9
 800110e:	4a1f      	ldr	r2, [pc, #124]	@ (800118c <main+0x2b8>)
 8001110:	8812      	ldrh	r2, [r2, #0]
 8001112:	4293      	cmp	r3, r2
 8001114:	dc0e      	bgt.n	8001134 <main+0x260>
	{
//		ST7789_DrawPixel_4px(coordinate_x - 3, coordinate_y - 3, RED);
//		ST7789_DrawPixel_4px(coordinate_x - 3, coordinate_y, RED);
//		ST7789_DrawPixel_4px(coordinate_x, coordinate_y - 3, RED);
//		ST7789_DrawPixel_4px(coordinate_x, coordinate_y, RED);
		ST7789_DrawFilledRectangle(coordinate_x - 4, coordinate_y - 4, 8, 8, RED);
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <main+0x2b4>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	3b04      	subs	r3, #4
 800111c:	b298      	uxth	r0, r3
 800111e:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <main+0x2b8>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	3b04      	subs	r3, #4
 8001124:	b299      	uxth	r1, r3
 8001126:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2308      	movs	r3, #8
 800112e:	2208      	movs	r2, #8
 8001130:	f7ff fe76 	bl	8000e20 <ST7789_DrawFilledRectangle>
//		HAL_Delay(10);
	}

	// Reset button
	if (
			(coordinate_x > 164 && coordinate_x < 225) &&
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <main+0x2b4>)
 8001136:	881b      	ldrh	r3, [r3, #0]
	if (
 8001138:	2ba4      	cmp	r3, #164	@ 0xa4
 800113a:	f67f af37 	bls.w	8000fac <main+0xd8>
			(coordinate_x > 164 && coordinate_x < 225) &&
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <main+0x2b4>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	2be0      	cmp	r3, #224	@ 0xe0
 8001144:	f63f af32 	bhi.w	8000fac <main+0xd8>
			(coordinate_y >  42 && coordinate_y <  59)
 8001148:	4b10      	ldr	r3, [pc, #64]	@ (800118c <main+0x2b8>)
 800114a:	881b      	ldrh	r3, [r3, #0]
			(coordinate_x > 164 && coordinate_x < 225) &&
 800114c:	2b2a      	cmp	r3, #42	@ 0x2a
 800114e:	f67f af2d 	bls.w	8000fac <main+0xd8>
			(coordinate_y >  42 && coordinate_y <  59)
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <main+0x2b8>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	2b3a      	cmp	r3, #58	@ 0x3a
 8001158:	f63f af28 	bhi.w	8000fac <main+0xd8>
		)
	{
		ST7789_DrawFilledRectangle(10, 90, 220, 220, WHITE);
 800115c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	23dc      	movs	r3, #220	@ 0xdc
 8001164:	22dc      	movs	r2, #220	@ 0xdc
 8001166:	215a      	movs	r1, #90	@ 0x5a
 8001168:	200a      	movs	r0, #10
 800116a:	f7ff fe59 	bl	8000e20 <ST7789_DrawFilledRectangle>
		HAL_Delay(100);
 800116e:	2064      	movs	r0, #100	@ 0x64
 8001170:	f000 fe64 	bl	8001e3c <HAL_Delay>
  {
 8001174:	e71a      	b.n	8000fac <main+0xd8>
 8001176:	bf00      	nop
 8001178:	20000a3c 	.word	0x20000a3c
 800117c:	20000000 	.word	0x20000000
 8001180:	0800488c 	.word	0x0800488c
 8001184:	08004898 	.word	0x08004898
 8001188:	20000af4 	.word	0x20000af4
 800118c:	20000af6 	.word	0x20000af6
 8001190:	080048a0 	.word	0x080048a0
 8001194:	080048a8 	.word	0x080048a8
 8001198:	080048b0 	.word	0x080048b0
 800119c:	080048b8 	.word	0x080048b8

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b094      	sub	sp, #80	@ 0x50
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	2230      	movs	r2, #48	@ 0x30
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fe88 	bl	8003ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	4b28      	ldr	r3, [pc, #160]	@ (800126c <SystemClock_Config+0xcc>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	4a27      	ldr	r2, [pc, #156]	@ (800126c <SystemClock_Config+0xcc>)
 80011ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d4:	4b25      	ldr	r3, [pc, #148]	@ (800126c <SystemClock_Config+0xcc>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <SystemClock_Config+0xd0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011ec:	4a20      	ldr	r2, [pc, #128]	@ (8001270 <SystemClock_Config+0xd0>)
 80011ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <SystemClock_Config+0xd0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001200:	2301      	movs	r3, #1
 8001202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001204:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120a:	2302      	movs	r3, #2
 800120c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001214:	2319      	movs	r3, #25
 8001216:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001218:	23a8      	movs	r3, #168	@ 0xa8
 800121a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800121c:	2302      	movs	r3, #2
 800121e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001220:	2304      	movs	r3, #4
 8001222:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fc63 	bl	8002af4 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001234:	f000 f920 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123c:	2302      	movs	r3, #2
 800123e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001248:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	2102      	movs	r1, #2
 8001254:	4618      	mov	r0, r3
 8001256:	f001 fec5 	bl	8002fe4 <HAL_RCC_ClockConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001260:	f000 f90a 	bl	8001478 <Error_Handler>
  }
}
 8001264:	bf00      	nop
 8001266:	3750      	adds	r7, #80	@ 0x50
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001278:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <MX_SPI1_Init+0x64>)
 800127a:	4a18      	ldr	r2, [pc, #96]	@ (80012dc <MX_SPI1_Init+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_SPI1_Init+0x64>)
 8001280:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001284:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001286:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_SPI1_Init+0x64>)
 8001294:	2202      	movs	r2, #2
 8001296:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_SPI1_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012a8:	2208      	movs	r2, #8
 80012aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b8:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012c0:	220a      	movs	r2, #10
 80012c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <MX_SPI1_Init+0x64>)
 80012c6:	f002 f839 	bl	800333c <HAL_SPI_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012d0:	f000 f8d2 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200009e4 	.word	0x200009e4
 80012dc:	40013000 	.word	0x40013000

080012e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012e4:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_SPI2_Init+0x68>)
 80012e6:	4a19      	ldr	r2, [pc, #100]	@ (800134c <MX_SPI2_Init+0x6c>)
 80012e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <MX_SPI2_Init+0x68>)
 80012ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <MX_SPI2_Init+0x68>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <MX_SPI2_Init+0x68>)
 80012fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800130c:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_SPI2_Init+0x68>)
 800130e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001312:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001316:	2210      	movs	r2, #16
 8001318:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_SPI2_Init+0x68>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001328:	2200      	movs	r2, #0
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_SPI2_Init+0x68>)
 800132e:	220a      	movs	r2, #10
 8001330:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001334:	f002 f802 	bl	800333c <HAL_SPI_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800133e:	f000 f89b 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000a3c 	.word	0x20000a3c
 800134c:	40003800 	.word	0x40003800

08001350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_DMA_Init+0x3c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <MX_DMA_Init+0x3c>)
 8001360:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_DMA_Init+0x3c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	203b      	movs	r0, #59	@ 0x3b
 8001378:	f000 fe5f 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800137c:	203b      	movs	r0, #59	@ 0x3b
 800137e:	f000 fe78 	bl	8002072 <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b30      	ldr	r3, [pc, #192]	@ (800146c <MX_GPIO_Init+0xdc>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a2f      	ldr	r2, [pc, #188]	@ (800146c <MX_GPIO_Init+0xdc>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b2d      	ldr	r3, [pc, #180]	@ (800146c <MX_GPIO_Init+0xdc>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b29      	ldr	r3, [pc, #164]	@ (800146c <MX_GPIO_Init+0xdc>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a28      	ldr	r2, [pc, #160]	@ (800146c <MX_GPIO_Init+0xdc>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b26      	ldr	r3, [pc, #152]	@ (800146c <MX_GPIO_Init+0xdc>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b22      	ldr	r3, [pc, #136]	@ (800146c <MX_GPIO_Init+0xdc>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a21      	ldr	r2, [pc, #132]	@ (800146c <MX_GPIO_Init+0xdc>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <MX_GPIO_Init+0xdc>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	211a      	movs	r1, #26
 80013fe:	481c      	ldr	r0, [pc, #112]	@ (8001470 <MX_GPIO_Init+0xe0>)
 8001400:	f001 fb5e 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800140a:	481a      	ldr	r0, [pc, #104]	@ (8001474 <MX_GPIO_Init+0xe4>)
 800140c:	f001 fb58 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin;
 8001410:	231a      	movs	r3, #26
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001414:	2311      	movs	r3, #17
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141c:	2302      	movs	r3, #2
 800141e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4812      	ldr	r0, [pc, #72]	@ (8001470 <MX_GPIO_Init+0xe0>)
 8001428:	f001 f9ae 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800142c:	2302      	movs	r3, #2
 800142e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001430:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	4619      	mov	r1, r3
 8001440:	480c      	ldr	r0, [pc, #48]	@ (8001474 <MX_GPIO_Init+0xe4>)
 8001442:	f001 f9a1 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8001446:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800144c:	2311      	movs	r3, #17
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_GPIO_Init+0xe4>)
 8001460:	f001 f992 	bl	8002788 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <Error_Handler+0x8>

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	4a0f      	ldr	r2, [pc, #60]	@ (80014d0 <HAL_MspInit+0x4c>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001498:	6453      	str	r3, [r2, #68]	@ 0x44
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a08      	ldr	r2, [pc, #32]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	@ 0x30
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a49      	ldr	r2, [pc, #292]	@ (8001618 <HAL_SPI_MspInit+0x144>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d15a      	bne.n	80015ac <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	4b48      	ldr	r3, [pc, #288]	@ (800161c <HAL_SPI_MspInit+0x148>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	4a47      	ldr	r2, [pc, #284]	@ (800161c <HAL_SPI_MspInit+0x148>)
 8001500:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001504:	6453      	str	r3, [r2, #68]	@ 0x44
 8001506:	4b45      	ldr	r3, [pc, #276]	@ (800161c <HAL_SPI_MspInit+0x148>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800150e:	61bb      	str	r3, [r7, #24]
 8001510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	4b41      	ldr	r3, [pc, #260]	@ (800161c <HAL_SPI_MspInit+0x148>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a40      	ldr	r2, [pc, #256]	@ (800161c <HAL_SPI_MspInit+0x148>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b3e      	ldr	r3, [pc, #248]	@ (800161c <HAL_SPI_MspInit+0x148>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800152e:	23e0      	movs	r3, #224	@ 0xe0
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800153e:	2305      	movs	r3, #5
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	4835      	ldr	r0, [pc, #212]	@ (8001620 <HAL_SPI_MspInit+0x14c>)
 800154a:	f001 f91d 	bl	8002788 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800154e:	4b35      	ldr	r3, [pc, #212]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 8001550:	4a35      	ldr	r2, [pc, #212]	@ (8001628 <HAL_SPI_MspInit+0x154>)
 8001552:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001554:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 8001556:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800155a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155c:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 800155e:	2240      	movs	r2, #64	@ 0x40
 8001560:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001562:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001568:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 800156a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800156e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001570:	4b2c      	ldr	r3, [pc, #176]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001576:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800157c:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001582:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001588:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800158e:	4825      	ldr	r0, [pc, #148]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 8001590:	f000 fd8a 	bl	80020a8 <HAL_DMA_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800159a:	f7ff ff6d 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a20      	ldr	r2, [pc, #128]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 80015a2:	649a      	str	r2, [r3, #72]	@ 0x48
 80015a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001624 <HAL_SPI_MspInit+0x150>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015aa:	e031      	b.n	8001610 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1e      	ldr	r2, [pc, #120]	@ (800162c <HAL_SPI_MspInit+0x158>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12c      	bne.n	8001610 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <HAL_SPI_MspInit+0x148>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a17      	ldr	r2, [pc, #92]	@ (800161c <HAL_SPI_MspInit+0x148>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_SPI_MspInit+0x148>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <HAL_SPI_MspInit+0x148>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a10      	ldr	r2, [pc, #64]	@ (800161c <HAL_SPI_MspInit+0x148>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <HAL_SPI_MspInit+0x148>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80015ee:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001600:	2305      	movs	r3, #5
 8001602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4809      	ldr	r0, [pc, #36]	@ (8001630 <HAL_SPI_MspInit+0x15c>)
 800160c:	f001 f8bc 	bl	8002788 <HAL_GPIO_Init>
}
 8001610:	bf00      	nop
 8001612:	3730      	adds	r7, #48	@ 0x30
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40013000 	.word	0x40013000
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000
 8001624:	20000a94 	.word	0x20000a94
 8001628:	40026458 	.word	0x40026458
 800162c:	40003800 	.word	0x40003800
 8001630:	40020400 	.word	0x40020400

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <NMI_Handler+0x4>

0800163c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <MemManage_Handler+0x4>

0800164c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <UsageFault_Handler+0x4>

0800165c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168a:	f000 fbb7 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <DMA2_Stream3_IRQHandler+0x10>)
 800169a:	f000 fe0b 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000a94 	.word	0x20000a94

080016a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <_sbrk+0x5c>)
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <_sbrk+0x60>)
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <_sbrk+0x64>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <_sbrk+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d207      	bcs.n	80016e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d8:	f002 fbfc 	bl	8003ed4 <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	220c      	movs	r2, #12
 80016e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e009      	b.n	80016fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <_sbrk+0x64>)
 80016f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20018000 	.word	0x20018000
 8001708:	00000400 	.word	0x00000400
 800170c:	20000af8 	.word	0x20000af8
 8001710:	20000c78 	.word	0x20000c78

08001714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <SystemInit+0x20>)
 800171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800171e:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <SystemInit+0x20>)
 8001720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001738:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001770 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800173c:	f7ff ffea 	bl	8001714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	@ (8001774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	@ (8001778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	@ (8001784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001766:	f002 fbbb 	bl	8003ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176a:	f7ff fbb3 	bl	8000ed4 <main>
  bx  lr    
 800176e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001770:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800177c:	08005678 	.word	0x08005678
  ldr r2, =_sbss
 8001780:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001784:	20000c78 	.word	0x20000c78

08001788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC_IRQHandler>
	...

0800178c <xpt2046_init>:

/**
 * Init the moduel
 */
void xpt2046_init()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	ts_ControlByte.bitMode = XPT2046_12BIT_MODE;
 8001790:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <xpt2046_init+0x80>)
 8001792:	2200      	movs	r2, #0
 8001794:	709a      	strb	r2, [r3, #2]
	ts_ControlByte.powerMode = XPT2046_REFERENCE_OFF_ADC_ON;
 8001796:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <xpt2046_init+0x80>)
 8001798:	2201      	movs	r2, #1
 800179a:	711a      	strb	r2, [r3, #4]
	ts_ControlByte.reference = XPT2046_DFR_MODE;
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <xpt2046_init+0x80>)
 800179e:	2200      	movs	r2, #0
 80017a0:	70da      	strb	r2, [r3, #3]
	ts_ControlByte.channel = XPT2046_DFR_X; //by default
 80017a2:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <xpt2046_init+0x80>)
 80017a4:	2250      	movs	r2, #80	@ 0x50
 80017a6:	705a      	strb	r2, [r3, #1]
	ts_ControlByte.startBit = XPT2046_START;
 80017a8:	4b18      	ldr	r3, [pc, #96]	@ (800180c <xpt2046_init+0x80>)
 80017aa:	2280      	movs	r2, #128	@ 0x80
 80017ac:	701a      	strb	r2, [r3, #0]
	ts_Orientation = XPT2046_ORIENTATION_PORTRAIT_MIRROR;
 80017ae:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <xpt2046_init+0x84>)
 80017b0:	2202      	movs	r2, #2
 80017b2:	701a      	strb	r2, [r3, #0]
	ts_Size.width = XPT2046_WIDTH;
 80017b4:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <xpt2046_init+0x88>)
 80017b6:	22f0      	movs	r2, #240	@ 0xf0
 80017b8:	801a      	strh	r2, [r3, #0]
	ts_Size.height = XPT2046_HEIGHT;
 80017ba:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <xpt2046_init+0x88>)
 80017bc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017c0:	805a      	strh	r2, [r3, #2]
	ts_Cs_Pin = XPT2046_CS_Pin;
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <xpt2046_init+0x8c>)
 80017c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017c8:	801a      	strh	r2, [r3, #0]
	ts_Cs_Port = XPT2046_CS_Port;
 80017ca:	4b14      	ldr	r3, [pc, #80]	@ (800181c <xpt2046_init+0x90>)
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <xpt2046_init+0x94>)
 80017ce:	601a      	str	r2, [r3, #0]
	ts_Penirq_Pin = XPT2046_PENIRQ_Pin;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <xpt2046_init+0x98>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	801a      	strh	r2, [r3, #0]
	ts_Penirq_Port = XPT2046_PENIRQ_Port;
 80017d6:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <xpt2046_init+0x9c>)
 80017d8:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <xpt2046_init+0x94>)
 80017da:	601a      	str	r2, [r3, #0]
	command = ts_ControlByte.bitMode |  ts_ControlByte.powerMode |ts_ControlByte.reference |ts_ControlByte.channel |ts_ControlByte.startBit;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <xpt2046_init+0x80>)
 80017de:	789a      	ldrb	r2, [r3, #2]
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <xpt2046_init+0x80>)
 80017e2:	791b      	ldrb	r3, [r3, #4]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <xpt2046_init+0x80>)
 80017ea:	78db      	ldrb	r3, [r3, #3]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <xpt2046_init+0x80>)
 80017f2:	785b      	ldrb	r3, [r3, #1]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <xpt2046_init+0x80>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <xpt2046_init+0xa0>)
 8001802:	701a      	strb	r2, [r3, #0]
	xpt2046_unselect();
 8001804:	f000 f834 	bl	8001870 <xpt2046_unselect>
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000b14 	.word	0x20000b14
 8001810:	20000b0e 	.word	0x20000b0e
 8001814:	20000b10 	.word	0x20000b10
 8001818:	20000b24 	.word	0x20000b24
 800181c:	20000b1c 	.word	0x20000b1c
 8001820:	40020400 	.word	0x40020400
 8001824:	20000b26 	.word	0x20000b26
 8001828:	20000b20 	.word	0x20000b20
 800182c:	20000b28 	.word	0x20000b28

08001830 <xpt2046_zthreshold>:
	ts_Penirq_Port = penirq_port;
	ts_Penirq_Pin = penirq_pin;
}

uint16_t xpt2046_zthreshold()
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
	if(ts_ControlByte.bitMode == XPT2046_8BIT_MODE)
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <xpt2046_zthreshold+0x1c>)
 8001836:	789b      	ldrb	r3, [r3, #2]
 8001838:	2b08      	cmp	r3, #8
 800183a:	d101      	bne.n	8001840 <xpt2046_zthreshold+0x10>
	{
		return Z_THRESHOLD_08BIT;
 800183c:	2307      	movs	r3, #7
 800183e:	e000      	b.n	8001842 <xpt2046_zthreshold+0x12>
	}else
	{
		return Z_THRESHOLD_12BIT;
 8001840:	2328      	movs	r3, #40	@ 0x28
	}
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	20000b14 	.word	0x20000b14

08001850 <xpt2046_select>:
void xpt2046_select()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ts_Cs_Port,ts_Cs_Pin,GPIO_PIN_RESET);
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <xpt2046_select+0x18>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a04      	ldr	r2, [pc, #16]	@ (800186c <xpt2046_select+0x1c>)
 800185a:	8811      	ldrh	r1, [r2, #0]
 800185c:	2200      	movs	r2, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f001 f92e 	bl	8002ac0 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(XPT2046_CS_Port,XPT2046_CS_Pin,GPIO_PIN_RESET);
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000b1c 	.word	0x20000b1c
 800186c:	20000b24 	.word	0x20000b24

08001870 <xpt2046_unselect>:

void xpt2046_unselect()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ts_Cs_Port,ts_Cs_Pin,GPIO_PIN_SET);
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <xpt2046_unselect+0x18>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a04      	ldr	r2, [pc, #16]	@ (800188c <xpt2046_unselect+0x1c>)
 800187a:	8811      	ldrh	r1, [r2, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	4618      	mov	r0, r3
 8001880:	f001 f91e 	bl	8002ac0 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(XPT2046_CS_Port,XPT2046_CS_Pin,GPIO_PIN_SET);
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000b1c 	.word	0x20000b1c
 800188c:	20000b24 	.word	0x20000b24

08001890 <xpt2046_interrupt>:

uint8_t xpt2046_interrupt()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ts_Penirq_Port,ts_Penirq_Pin) == GPIO_PIN_RESET; //Means touchScreen was pressed
 8001894:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <xpt2046_interrupt+0x24>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	@ (80018b8 <xpt2046_interrupt+0x28>)
 800189a:	8812      	ldrh	r2, [r2, #0]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 f8f6 	bl	8002a90 <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000b20 	.word	0x20000b20
 80018b8:	20000b26 	.word	0x20000b26

080018bc <xpt2046_pressed>:

uint8_t xpt2046_pressed()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
	if(xpt2046_interruptions_activated())
 80018c2:	f000 f819 	bl	80018f8 <xpt2046_interruptions_activated>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <xpt2046_pressed+0x18>
	{
		return xpt2046_interrupt();
 80018cc:	f7ff ffe0 	bl	8001890 <xpt2046_interrupt>
 80018d0:	4603      	mov	r3, r0
 80018d2:	e00b      	b.n	80018ec <xpt2046_pressed+0x30>
	}else
	{
		uint16_t zt =  xpt2046_zthreshold();
 80018d4:	f7ff ffac 	bl	8001830 <xpt2046_zthreshold>
 80018d8:	4603      	mov	r3, r0
 80018da:	80fb      	strh	r3, [r7, #6]
		return (ts_CoordinatesRaw.z1 > zt );
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <xpt2046_pressed+0x38>)
 80018de:	889b      	ldrh	r3, [r3, #4]
 80018e0:	88fa      	ldrh	r2, [r7, #6]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	bf34      	ite	cc
 80018e6:	2301      	movcc	r3, #1
 80018e8:	2300      	movcs	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
	}
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000b00 	.word	0x20000b00

080018f8 <xpt2046_interruptions_activated>:

uint8_t xpt2046_interruptions_activated()
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
	return (ts_ControlByte.powerMode == XPT2046_POWER_DOWN || ts_ControlByte.powerMode == XPT2046_REFERENCE_ON_ADC_OFF);
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <xpt2046_interruptions_activated+0x28>)
 80018fe:	791b      	ldrb	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <xpt2046_interruptions_activated+0x14>
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <xpt2046_interruptions_activated+0x28>)
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d101      	bne.n	8001910 <xpt2046_interruptions_activated+0x18>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <xpt2046_interruptions_activated+0x1a>
 8001910:	2300      	movs	r3, #0
 8001912:	b2db      	uxtb	r3, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000b14 	.word	0x20000b14

08001924 <xpt2046_control_byte_update>:
/**
 * Generate control byte
 */
void xpt2046_control_byte_update()
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	command =  ts_ControlByte.startBit |  ts_ControlByte.channel | ts_ControlByte.bitMode | ts_ControlByte.reference | ts_ControlByte.powerMode  ;
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <xpt2046_control_byte_update+0x38>)
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <xpt2046_control_byte_update+0x38>)
 800192e:	785b      	ldrb	r3, [r3, #1]
 8001930:	4313      	orrs	r3, r2
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b09      	ldr	r3, [pc, #36]	@ (800195c <xpt2046_control_byte_update+0x38>)
 8001936:	789b      	ldrb	r3, [r3, #2]
 8001938:	4313      	orrs	r3, r2
 800193a:	b2da      	uxtb	r2, r3
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <xpt2046_control_byte_update+0x38>)
 800193e:	78db      	ldrb	r3, [r3, #3]
 8001940:	4313      	orrs	r3, r2
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <xpt2046_control_byte_update+0x38>)
 8001946:	791b      	ldrb	r3, [r3, #4]
 8001948:	4313      	orrs	r3, r2
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <xpt2046_control_byte_update+0x3c>)
 800194e:	701a      	strb	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000b14 	.word	0x20000b14
 8001960:	20000b28 	.word	0x20000b28

08001964 <xpt2046_max_measurement>:


/**
 * Return max value depending on bit mode.
 */
uint16_t xpt2046_max_measurement(){
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
	if(ts_ControlByte.bitMode == XPT2046_8BIT_MODE)
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <xpt2046_max_measurement+0x20>)
 800196a:	789b      	ldrb	r3, [r3, #2]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d101      	bne.n	8001974 <xpt2046_max_measurement+0x10>
	{
		return 120; //This must be calibrated
 8001970:	2378      	movs	r3, #120	@ 0x78
 8001972:	e001      	b.n	8001978 <xpt2046_max_measurement+0x14>
	}else
	{
		return 1900; // this value must be calibrated on your on touch screen
 8001974:	f240 736c 	movw	r3, #1900	@ 0x76c
	}
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000b14 	.word	0x20000b14

08001988 <xpt2046_spi>:
}
/**
 *  Set internal SPI to user defined SPI port
 */
void xpt2046_spi(SPI_HandleTypeDef* spi)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	spiPort =  spi;
 8001990:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <xpt2046_spi+0x1c>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6013      	str	r3, [r2, #0]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000afc 	.word	0x20000afc

080019a8 <xpt2046_update>:


/**
 * Update X,Y,Z values of touchScreen
 */
void xpt2046_update(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	@ 0x30
 80019ac:	af02      	add	r7, sp, #8
	xpt2046_select();
 80019ae:	f7ff ff4f 	bl	8001850 <xpt2046_select>

	if(xpt2046_interruptions_activated())
 80019b2:	f7ff ffa1 	bl	80018f8 <xpt2046_interruptions_activated>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <xpt2046_update+0x20>
	{
		/* this means Interrupt pin was enabled*/
		if(!xpt2046_interrupt())
 80019bc:	f7ff ff68 	bl	8001890 <xpt2046_interrupt>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 819c 	beq.w	8001d00 <xpt2046_update+0x358>
		}


	}

	uint8_t zeros[2] = { 0x00,0x00};
 80019c8:	2300      	movs	r3, #0
 80019ca:	823b      	strh	r3, [r7, #16]
	uint32_t x_avg = 0, y_avg = 0,z1_avg=0,z2_avg=0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < AVERAGE_POINTS; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e0ad      	b.n	8001b3e <xpt2046_update+0x196>
	{
		ts_ControlByte.channel = XPT2046_DFR_X;
 80019e2:	4b98      	ldr	r3, [pc, #608]	@ (8001c44 <xpt2046_update+0x29c>)
 80019e4:	2250      	movs	r2, #80	@ 0x50
 80019e6:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 80019e8:	f7ff ff9c 	bl	8001924 <xpt2046_control_byte_update>

		uint8_t receiveByteX[2] = {0x00,0x00};
 80019ec:	2300      	movs	r3, #0
 80019ee:	81bb      	strh	r3, [r7, #12]

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 80019f0:	4b95      	ldr	r3, [pc, #596]	@ (8001c48 <xpt2046_update+0x2a0>)
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	2201      	movs	r2, #1
 80019fa:	4994      	ldr	r1, [pc, #592]	@ (8001c4c <xpt2046_update+0x2a4>)
 80019fc:	f001 fd27 	bl	800344e <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteX,sizeof(receiveByteX),HAL_MAX_DELAY);
 8001a00:	4b91      	ldr	r3, [pc, #580]	@ (8001c48 <xpt2046_update+0x2a0>)
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	f107 020c 	add.w	r2, r7, #12
 8001a08:	f107 0110 	add.w	r1, r7, #16
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2302      	movs	r3, #2
 8001a14:	f001 fe5f 	bl	80036d6 <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Y;
 8001a18:	4b8a      	ldr	r3, [pc, #552]	@ (8001c44 <xpt2046_update+0x29c>)
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 8001a1e:	f7ff ff81 	bl	8001924 <xpt2046_control_byte_update>

		uint8_t receiveByteY[2] = {0x00,0x00};
 8001a22:	2300      	movs	r3, #0
 8001a24:	813b      	strh	r3, [r7, #8]
		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8001a26:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <xpt2046_update+0x2a0>)
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4986      	ldr	r1, [pc, #536]	@ (8001c4c <xpt2046_update+0x2a4>)
 8001a32:	f001 fd0c 	bl	800344e <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteY,sizeof(receiveByteY),HAL_MAX_DELAY);
 8001a36:	4b84      	ldr	r3, [pc, #528]	@ (8001c48 <xpt2046_update+0x2a0>)
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	f107 0208 	add.w	r2, r7, #8
 8001a3e:	f107 0110 	add.w	r1, r7, #16
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f001 fe44 	bl	80036d6 <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Z1;
 8001a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c44 <xpt2046_update+0x29c>)
 8001a50:	2230      	movs	r2, #48	@ 0x30
 8001a52:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 8001a54:	f7ff ff66 	bl	8001924 <xpt2046_control_byte_update>
		uint8_t receiveByteZ1[2] = {0x00,0x00};
 8001a58:	2300      	movs	r3, #0
 8001a5a:	80bb      	strh	r3, [r7, #4]

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8001a5c:	4b7a      	ldr	r3, [pc, #488]	@ (8001c48 <xpt2046_update+0x2a0>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	2201      	movs	r2, #1
 8001a66:	4979      	ldr	r1, [pc, #484]	@ (8001c4c <xpt2046_update+0x2a4>)
 8001a68:	f001 fcf1 	bl	800344e <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteZ1,sizeof(receiveByteZ1),HAL_MAX_DELAY);
 8001a6c:	4b76      	ldr	r3, [pc, #472]	@ (8001c48 <xpt2046_update+0x2a0>)
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	1d3a      	adds	r2, r7, #4
 8001a72:	f107 0110 	add.w	r1, r7, #16
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f001 fe2a 	bl	80036d6 <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Z2;
 8001a82:	4b70      	ldr	r3, [pc, #448]	@ (8001c44 <xpt2046_update+0x29c>)
 8001a84:	2240      	movs	r2, #64	@ 0x40
 8001a86:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 8001a88:	f7ff ff4c 	bl	8001924 <xpt2046_control_byte_update>
		uint8_t receiveByteZ2[2] = {0x00,0x00};
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	803b      	strh	r3, [r7, #0]

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8001a90:	4b6d      	ldr	r3, [pc, #436]	@ (8001c48 <xpt2046_update+0x2a0>)
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	2201      	movs	r2, #1
 8001a9a:	496c      	ldr	r1, [pc, #432]	@ (8001c4c <xpt2046_update+0x2a4>)
 8001a9c:	f001 fcd7 	bl	800344e <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteZ2,sizeof(receiveByteZ2),HAL_MAX_DELAY);
 8001aa0:	4b69      	ldr	r3, [pc, #420]	@ (8001c48 <xpt2046_update+0x2a0>)
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	463a      	mov	r2, r7
 8001aa6:	f107 0110 	add.w	r1, r7, #16
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f001 fe10 	bl	80036d6 <HAL_SPI_TransmitReceive>
		if(ts_ControlByte.bitMode == XPT2046_12BIT_MODE)
 8001ab6:	4b63      	ldr	r3, [pc, #396]	@ (8001c44 <xpt2046_update+0x29c>)
 8001ab8:	789b      	ldrb	r3, [r3, #2]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d128      	bne.n	8001b10 <xpt2046_update+0x168>
		{
			x_avg+= 	(receiveByteX[1] 	<< 4) | (receiveByteX[0] 	>> 4);
 8001abe:	7b7b      	ldrb	r3, [r7, #13]
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	7b3a      	ldrb	r2, [r7, #12]
 8001ac4:	0912      	lsrs	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	461a      	mov	r2, r3
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	4413      	add	r3, r2
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
			y_avg+= 	(receiveByteY[1] 	<< 4) | (receiveByteY[0] 	>> 4);
 8001ad2:	7a7b      	ldrb	r3, [r7, #9]
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	7a3a      	ldrb	r2, [r7, #8]
 8001ad8:	0912      	lsrs	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	4313      	orrs	r3, r2
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	623b      	str	r3, [r7, #32]
			z1_avg+= 	(receiveByteZ1[1] 	<< 4) | (receiveByteZ1[0] 	>> 4);
 8001ae6:	797b      	ldrb	r3, [r7, #5]
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	793a      	ldrb	r2, [r7, #4]
 8001aec:	0912      	lsrs	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	4313      	orrs	r3, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	4413      	add	r3, r2
 8001af8:	61fb      	str	r3, [r7, #28]
			z2_avg+= 	(receiveByteZ2[1] 	<< 4) | (receiveByteZ2[0] 	>> 4);
 8001afa:	787b      	ldrb	r3, [r7, #1]
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	783a      	ldrb	r2, [r7, #0]
 8001b00:	0912      	lsrs	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	4313      	orrs	r3, r2
 8001b06:	461a      	mov	r2, r3
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	e013      	b.n	8001b38 <xpt2046_update+0x190>
		}else
		{
			x_avg+= 	(receiveByteX[1]);
 8001b10:	7b7b      	ldrb	r3, [r7, #13]
 8001b12:	461a      	mov	r2, r3
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	4413      	add	r3, r2
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
			y_avg+= 	(receiveByteY[1]) ;
 8001b1a:	7a7b      	ldrb	r3, [r7, #9]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	4413      	add	r3, r2
 8001b22:	623b      	str	r3, [r7, #32]
			z1_avg+= 	(receiveByteZ1[1]);
 8001b24:	797b      	ldrb	r3, [r7, #5]
 8001b26:	461a      	mov	r2, r3
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	61fb      	str	r3, [r7, #28]
			z2_avg+= 	(receiveByteZ2[1]);
 8001b2e:	787b      	ldrb	r3, [r7, #1]
 8001b30:	461a      	mov	r2, r3
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4413      	add	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < AVERAGE_POINTS; i++)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b09      	cmp	r3, #9
 8001b42:	f77f af4e 	ble.w	80019e2 <xpt2046_update+0x3a>
		}

	}

	ts_CoordinatesRaw.x = x_avg/AVERAGE_POINTS;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	4a41      	ldr	r2, [pc, #260]	@ (8001c50 <xpt2046_update+0x2a8>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	08db      	lsrs	r3, r3, #3
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	4b40      	ldr	r3, [pc, #256]	@ (8001c54 <xpt2046_update+0x2ac>)
 8001b54:	801a      	strh	r2, [r3, #0]
	ts_CoordinatesRaw.y = y_avg/AVERAGE_POINTS;
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	4a3d      	ldr	r2, [pc, #244]	@ (8001c50 <xpt2046_update+0x2a8>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	08db      	lsrs	r3, r3, #3
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b3c      	ldr	r3, [pc, #240]	@ (8001c54 <xpt2046_update+0x2ac>)
 8001b64:	805a      	strh	r2, [r3, #2]
	ts_CoordinatesRaw.z1 = z1_avg/AVERAGE_POINTS;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	4a39      	ldr	r2, [pc, #228]	@ (8001c50 <xpt2046_update+0x2a8>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b38      	ldr	r3, [pc, #224]	@ (8001c54 <xpt2046_update+0x2ac>)
 8001b74:	809a      	strh	r2, [r3, #4]
	ts_CoordinatesRaw.z2 = z2_avg/AVERAGE_POINTS;
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4a35      	ldr	r2, [pc, #212]	@ (8001c50 <xpt2046_update+0x2a8>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	08db      	lsrs	r3, r3, #3
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b34      	ldr	r3, [pc, #208]	@ (8001c54 <xpt2046_update+0x2ac>)
 8001b84:	80da      	strh	r2, [r3, #6]
	uint16_t max = xpt2046_max_measurement();
 8001b86:	f7ff feed 	bl	8001964 <xpt2046_max_measurement>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	827b      	strh	r3, [r7, #18]
	/* Consider (0,0) as the top left point of the screen */
	switch(ts_Orientation)
 8001b8e:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <xpt2046_update+0x2b0>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	f200 80b0 	bhi.w	8001cf8 <xpt2046_update+0x350>
 8001b98:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba0 <xpt2046_update+0x1f8>)
 8001b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9e:	bf00      	nop
 8001ba0:	08001bb1 	.word	0x08001bb1
 8001ba4:	08001bfb 	.word	0x08001bfb
 8001ba8:	08001c65 	.word	0x08001c65
 8001bac:	08001caf 	.word	0x08001caf
	{
		case XPT2046_ORIENTATION_PORTRAIT:
		{
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <xpt2046_update+0x2b4>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	8a7b      	ldrh	r3, [r7, #18]
 8001bb8:	4a26      	ldr	r2, [pc, #152]	@ (8001c54 <xpt2046_update+0x2ac>)
 8001bba:	8812      	ldrh	r2, [r2, #0]
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	fb03 f201 	mul.w	r2, r3, r1
 8001bc2:	8a7b      	ldrh	r3, [r7, #18]
 8001bc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b0c      	subs	r3, #12
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b24      	ldr	r3, [pc, #144]	@ (8001c60 <xpt2046_update+0x2b8>)
 8001bd0:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <xpt2046_update+0x2b4>)
 8001bd4:	885b      	ldrh	r3, [r3, #2]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <xpt2046_update+0x2ac>)
 8001bda:	885b      	ldrh	r3, [r3, #2]
 8001bdc:	fb03 f202 	mul.w	r2, r3, r2
 8001be0:	8a7b      	ldrh	r3, [r7, #18]
 8001be2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3310      	adds	r3, #16
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <xpt2046_update+0x2b8>)
 8001bee:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <xpt2046_update+0x2ac>)
 8001bf2:	889a      	ldrh	r2, [r3, #4]
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <xpt2046_update+0x2b8>)
 8001bf6:	809a      	strh	r2, [r3, #4]
			break;
 8001bf8:	e07f      	b.n	8001cfa <xpt2046_update+0x352>
		}
		case XPT2046_ORIENTATION_LANDSCAPE:
		{
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8001bfa:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <xpt2046_update+0x2b4>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	8a7b      	ldrh	r3, [r7, #18]
 8001c02:	4a14      	ldr	r2, [pc, #80]	@ (8001c54 <xpt2046_update+0x2ac>)
 8001c04:	8852      	ldrh	r2, [r2, #2]
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	fb03 f201 	mul.w	r2, r3, r1
 8001c0c:	8a7b      	ldrh	r3, [r7, #18]
 8001c0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3310      	adds	r3, #16
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <xpt2046_update+0x2b8>)
 8001c1a:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <xpt2046_update+0x2b4>)
 8001c1e:	885b      	ldrh	r3, [r3, #2]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <xpt2046_update+0x2ac>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	fb03 f202 	mul.w	r2, r3, r2
 8001c2a:	8a7b      	ldrh	r3, [r7, #18]
 8001c2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b0c      	subs	r3, #12
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <xpt2046_update+0x2b8>)
 8001c38:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <xpt2046_update+0x2ac>)
 8001c3c:	889a      	ldrh	r2, [r3, #4]
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <xpt2046_update+0x2b8>)
 8001c40:	809a      	strh	r2, [r3, #4]
			break;
 8001c42:	e05a      	b.n	8001cfa <xpt2046_update+0x352>
 8001c44:	20000b14 	.word	0x20000b14
 8001c48:	20000afc 	.word	0x20000afc
 8001c4c:	20000b28 	.word	0x20000b28
 8001c50:	cccccccd 	.word	0xcccccccd
 8001c54:	20000b00 	.word	0x20000b00
 8001c58:	20000b0e 	.word	0x20000b0e
 8001c5c:	20000b10 	.word	0x20000b10
 8001c60:	20000b08 	.word	0x20000b08
		}
		case XPT2046_ORIENTATION_PORTRAIT_MIRROR:
		{
			ts_Coordinates.x = (ts_Size.width * (ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <xpt2046_update+0x360>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b28      	ldr	r3, [pc, #160]	@ (8001d0c <xpt2046_update+0x364>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	fb03 f202 	mul.w	r2, r3, r2
 8001c72:	8a7b      	ldrh	r3, [r7, #18]
 8001c74:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b0c      	subs	r3, #12
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <xpt2046_update+0x368>)
 8001c80:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8001c82:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <xpt2046_update+0x360>)
 8001c84:	885b      	ldrh	r3, [r3, #2]
 8001c86:	4619      	mov	r1, r3
 8001c88:	8a7b      	ldrh	r3, [r7, #18]
 8001c8a:	4a20      	ldr	r2, [pc, #128]	@ (8001d0c <xpt2046_update+0x364>)
 8001c8c:	8852      	ldrh	r2, [r2, #2]
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	fb03 f201 	mul.w	r2, r3, r1
 8001c94:	8a7b      	ldrh	r3, [r7, #18]
 8001c96:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <xpt2046_update+0x368>)
 8001ca2:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <xpt2046_update+0x364>)
 8001ca6:	889a      	ldrh	r2, [r3, #4]
 8001ca8:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <xpt2046_update+0x368>)
 8001caa:	809a      	strh	r2, [r3, #4]
			break;
 8001cac:	e025      	b.n	8001cfa <xpt2046_update+0x352>
		}
		case XPT2046_ORIENTATION_LANDSCAPE_MIRROR:
		{
			ts_Coordinates.x = (ts_Size.width *  (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <xpt2046_update+0x360>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <xpt2046_update+0x364>)
 8001cb6:	885b      	ldrh	r3, [r3, #2]
 8001cb8:	fb03 f202 	mul.w	r2, r3, r2
 8001cbc:	8a7b      	ldrh	r3, [r7, #18]
 8001cbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3310      	adds	r3, #16
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <xpt2046_update+0x368>)
 8001cca:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (max- ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <xpt2046_update+0x360>)
 8001cce:	885b      	ldrh	r3, [r3, #2]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	8a7b      	ldrh	r3, [r7, #18]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d0c <xpt2046_update+0x364>)
 8001cd6:	8812      	ldrh	r2, [r2, #0]
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	fb03 f201 	mul.w	r2, r3, r1
 8001cde:	8a7b      	ldrh	r3, [r7, #18]
 8001ce0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b0c      	subs	r3, #12
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <xpt2046_update+0x368>)
 8001cec:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <xpt2046_update+0x364>)
 8001cf0:	889a      	ldrh	r2, [r3, #4]
 8001cf2:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <xpt2046_update+0x368>)
 8001cf4:	809a      	strh	r2, [r3, #4]
			break;
 8001cf6:	e000      	b.n	8001cfa <xpt2046_update+0x352>
		}
		default:
		{
			break;
 8001cf8:	bf00      	nop
		}
	}


	xpt2046_unselect();
 8001cfa:	f7ff fdb9 	bl	8001870 <xpt2046_unselect>
 8001cfe:	e000      	b.n	8001d02 <xpt2046_update+0x35a>
			return;
 8001d00:	bf00      	nop
}
 8001d02:	3728      	adds	r7, #40	@ 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000b10 	.word	0x20000b10
 8001d0c:	20000b00 	.word	0x20000b00
 8001d10:	20000b08 	.word	0x20000b08

08001d14 <xpt2046_read_position>:

/* by default return 0,0 if the screen isn't pressed*/
void xpt2046_read_position(uint16_t* x, uint16_t* y)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
	xpt2046_update();
 8001d1e:	f7ff fe43 	bl	80019a8 <xpt2046_update>
	if(xpt2046_pressed())
 8001d22:	f7ff fdcb 	bl	80018bc <xpt2046_pressed>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <xpt2046_read_position+0x2a>
	{
		*x = ts_Coordinates.x;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <xpt2046_read_position+0x40>)
 8001d2e:	881a      	ldrh	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	801a      	strh	r2, [r3, #0]
		*y = ts_Coordinates.y;
 8001d34:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <xpt2046_read_position+0x40>)
 8001d36:	885a      	ldrh	r2, [r3, #2]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	801a      	strh	r2, [r3, #0]
	}else
	{
		*x = 0;
		*y = 0;
	}
}
 8001d3c:	e005      	b.n	8001d4a <xpt2046_read_position+0x36>
		*x = 0;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	801a      	strh	r2, [r3, #0]
		*y = 0;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2200      	movs	r2, #0
 8001d48:	801a      	strh	r2, [r3, #0]
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000b08 	.word	0x20000b08

08001d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	@ (8001d98 <HAL_Init+0x40>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_Init+0x40>)
 8001d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <HAL_Init+0x40>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 f94f 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d86:	200f      	movs	r0, #15
 8001d88:	f000 f808 	bl	8001d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8c:	f7ff fb7a 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <HAL_InitTick+0x54>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_InitTick+0x58>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f967 	bl	800208e <HAL_SYSTICK_Config>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00e      	b.n	8001de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d80a      	bhi.n	8001de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f000 f92f 	bl	800203a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ddc:	4a06      	ldr	r2, [pc, #24]	@ (8001df8 <HAL_InitTick+0x5c>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	20000014 	.word	0x20000014
 8001df8:	20000010 	.word	0x20000010

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000014 	.word	0x20000014
 8001e20:	20000b2c 	.word	0x20000b2c

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000b2c 	.word	0x20000b2c

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000014 	.word	0x20000014

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4907      	ldr	r1, [pc, #28]	@ (8001f20 <__NVIC_EnableIRQ+0x38>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	@ (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	@ (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	@ 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	@ 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff0:	d301      	bcc.n	8001ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00f      	b.n	8002016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <SysTick_Config+0x40>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f7ff ff8e 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <SysTick_Config+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200e:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <SysTick_Config+0x40>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff29 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff3e 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff8e 	bl	8001f78 <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5d 	bl	8001f24 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff31 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffa2 	bl	8001fe0 <SysTick_Config>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff feb6 	bl	8001e24 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e099      	b.n	80021f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e4:	e00f      	b.n	8002106 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020e6:	f7ff fe9d 	bl	8001e24 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d908      	bls.n	8002106 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2203      	movs	r2, #3
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e078      	b.n	80021f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e8      	bne.n	80020e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	4b38      	ldr	r3, [pc, #224]	@ (8002200 <HAL_DMA_Init+0x158>)
 8002120:	4013      	ands	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002132:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	2b04      	cmp	r3, #4
 800215e:	d107      	bne.n	8002170 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	4313      	orrs	r3, r2
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f023 0307 	bic.w	r3, r3, #7
 8002186:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002196:	2b04      	cmp	r3, #4
 8002198:	d117      	bne.n	80021ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00e      	beq.n	80021ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fa6f 	bl	8002690 <DMA_CheckFifoParam>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2240      	movs	r2, #64	@ 0x40
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021c6:	2301      	movs	r3, #1
 80021c8:	e016      	b.n	80021f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fa26 	bl	8002624 <DMA_CalcBaseAndBitshift>
 80021d8:	4603      	mov	r3, r0
 80021da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	223f      	movs	r2, #63	@ 0x3f
 80021e2:	409a      	lsls	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	f010803f 	.word	0xf010803f

08002204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_DMA_Start_IT+0x26>
 8002226:	2302      	movs	r3, #2
 8002228:	e040      	b.n	80022ac <HAL_DMA_Start_IT+0xa8>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d12f      	bne.n	800229e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2202      	movs	r2, #2
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f9b8 	bl	80025c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225c:	223f      	movs	r2, #63	@ 0x3f
 800225e:	409a      	lsls	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0216 	orr.w	r2, r2, #22
 8002272:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0208 	orr.w	r2, r2, #8
 800228a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e005      	b.n	80022aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
 80022a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022c0:	4b8e      	ldr	r3, [pc, #568]	@ (80024fc <HAL_DMA_IRQHandler+0x248>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a8e      	ldr	r2, [pc, #568]	@ (8002500 <HAL_DMA_IRQHandler+0x24c>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0a9b      	lsrs	r3, r3, #10
 80022cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022de:	2208      	movs	r2, #8
 80022e0:	409a      	lsls	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01a      	beq.n	8002320 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0204 	bic.w	r2, r2, #4
 8002306:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230c:	2208      	movs	r2, #8
 800230e:	409a      	lsls	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002324:	2201      	movs	r2, #1
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d012      	beq.n	8002356 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002342:	2201      	movs	r2, #1
 8002344:	409a      	lsls	r2, r3
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234e:	f043 0202 	orr.w	r2, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235a:	2204      	movs	r2, #4
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d012      	beq.n	800238c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00b      	beq.n	800238c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002378:	2204      	movs	r2, #4
 800237a:	409a      	lsls	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002384:	f043 0204 	orr.w	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002390:	2210      	movs	r2, #16
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d043      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d03c      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ae:	2210      	movs	r2, #16
 80023b0:	409a      	lsls	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d018      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d108      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d024      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
 80023e2:	e01f      	b.n	8002424 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
 80023f4:	e016      	b.n	8002424 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0208 	bic.w	r2, r2, #8
 8002412:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002428:	2220      	movs	r2, #32
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 808f 	beq.w	8002554 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8087 	beq.w	8002554 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244a:	2220      	movs	r2, #32
 800244c:	409a      	lsls	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b05      	cmp	r3, #5
 800245c:	d136      	bne.n	80024cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0216 	bic.w	r2, r2, #22
 800246c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800247c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <HAL_DMA_IRQHandler+0x1da>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0208 	bic.w	r2, r2, #8
 800249c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	223f      	movs	r2, #63	@ 0x3f
 80024a4:	409a      	lsls	r2, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d07e      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	4798      	blx	r3
        }
        return;
 80024ca:	e079      	b.n	80025c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01d      	beq.n	8002516 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10d      	bne.n	8002504 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d031      	beq.n	8002554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
 80024f8:	e02c      	b.n	8002554 <HAL_DMA_IRQHandler+0x2a0>
 80024fa:	bf00      	nop
 80024fc:	2000000c 	.word	0x2000000c
 8002500:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d023      	beq.n	8002554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
 8002514:	e01e      	b.n	8002554 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10f      	bne.n	8002544 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0210 	bic.w	r2, r2, #16
 8002532:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002558:	2b00      	cmp	r3, #0
 800255a:	d032      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d022      	beq.n	80025ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2205      	movs	r2, #5
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	3301      	adds	r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	d307      	bcc.n	800259c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f2      	bne.n	8002580 <HAL_DMA_IRQHandler+0x2cc>
 800259a:	e000      	b.n	800259e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800259c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4798      	blx	r3
 80025be:	e000      	b.n	80025c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025c0:	bf00      	nop
    }
  }
}
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b40      	cmp	r3, #64	@ 0x40
 80025f4:	d108      	bne.n	8002608 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002606:	e007      	b.n	8002618 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	3b10      	subs	r3, #16
 8002634:	4a14      	ldr	r2, [pc, #80]	@ (8002688 <DMA_CalcBaseAndBitshift+0x64>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800263e:	4a13      	ldr	r2, [pc, #76]	@ (800268c <DMA_CalcBaseAndBitshift+0x68>)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b03      	cmp	r3, #3
 8002650:	d909      	bls.n	8002666 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800265a:	f023 0303 	bic.w	r3, r3, #3
 800265e:	1d1a      	adds	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	659a      	str	r2, [r3, #88]	@ 0x58
 8002664:	e007      	b.n	8002676 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800266e:	f023 0303 	bic.w	r3, r3, #3
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	aaaaaaab 	.word	0xaaaaaaab
 800268c:	0800562c 	.word	0x0800562c

08002690 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d11f      	bne.n	80026ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d856      	bhi.n	800275e <DMA_CheckFifoParam+0xce>
 80026b0:	a201      	add	r2, pc, #4	@ (adr r2, 80026b8 <DMA_CheckFifoParam+0x28>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	080026db 	.word	0x080026db
 80026c0:	080026c9 	.word	0x080026c9
 80026c4:	0800275f 	.word	0x0800275f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d046      	beq.n	8002762 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d8:	e043      	b.n	8002762 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026e2:	d140      	bne.n	8002766 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e8:	e03d      	b.n	8002766 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026f2:	d121      	bne.n	8002738 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d837      	bhi.n	800276a <DMA_CheckFifoParam+0xda>
 80026fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002700 <DMA_CheckFifoParam+0x70>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	08002711 	.word	0x08002711
 8002704:	08002717 	.word	0x08002717
 8002708:	08002711 	.word	0x08002711
 800270c:	08002729 	.word	0x08002729
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
      break;
 8002714:	e030      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d025      	beq.n	800276e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002726:	e022      	b.n	800276e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002730:	d11f      	bne.n	8002772 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002736:	e01c      	b.n	8002772 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d903      	bls.n	8002746 <DMA_CheckFifoParam+0xb6>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d003      	beq.n	800274c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002744:	e018      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
      break;
 800274a:	e015      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00e      	beq.n	8002776 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      break;
 800275c:	e00b      	b.n	8002776 <DMA_CheckFifoParam+0xe6>
      break;
 800275e:	bf00      	nop
 8002760:	e00a      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;
 8002762:	bf00      	nop
 8002764:	e008      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;
 8002766:	bf00      	nop
 8002768:	e006      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
 800276c:	e004      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;
 800276e:	bf00      	nop
 8002770:	e002      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;   
 8002772:	bf00      	nop
 8002774:	e000      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;
 8002776:	bf00      	nop
    }
  } 
  
  return status; 
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	@ 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	e159      	b.n	8002a58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a4:	2201      	movs	r2, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	f040 8148 	bne.w	8002a52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d005      	beq.n	80027da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d130      	bne.n	800283c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	2203      	movs	r2, #3
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 0201 	and.w	r2, r3, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b03      	cmp	r3, #3
 8002846:	d017      	beq.n	8002878 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d123      	bne.n	80028cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	08da      	lsrs	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3208      	adds	r2, #8
 800288c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	220f      	movs	r2, #15
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	08da      	lsrs	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3208      	adds	r2, #8
 80028c6:	69b9      	ldr	r1, [r7, #24]
 80028c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0203 	and.w	r2, r3, #3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a2 	beq.w	8002a52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b57      	ldr	r3, [pc, #348]	@ (8002a70 <HAL_GPIO_Init+0x2e8>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	4a56      	ldr	r2, [pc, #344]	@ (8002a70 <HAL_GPIO_Init+0x2e8>)
 8002918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800291c:	6453      	str	r3, [r2, #68]	@ 0x44
 800291e:	4b54      	ldr	r3, [pc, #336]	@ (8002a70 <HAL_GPIO_Init+0x2e8>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800292a:	4a52      	ldr	r2, [pc, #328]	@ (8002a74 <HAL_GPIO_Init+0x2ec>)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	3302      	adds	r3, #2
 8002932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	220f      	movs	r2, #15
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a49      	ldr	r2, [pc, #292]	@ (8002a78 <HAL_GPIO_Init+0x2f0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d019      	beq.n	800298a <HAL_GPIO_Init+0x202>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a48      	ldr	r2, [pc, #288]	@ (8002a7c <HAL_GPIO_Init+0x2f4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_GPIO_Init+0x1fe>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a47      	ldr	r2, [pc, #284]	@ (8002a80 <HAL_GPIO_Init+0x2f8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00d      	beq.n	8002982 <HAL_GPIO_Init+0x1fa>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a46      	ldr	r2, [pc, #280]	@ (8002a84 <HAL_GPIO_Init+0x2fc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d007      	beq.n	800297e <HAL_GPIO_Init+0x1f6>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a45      	ldr	r2, [pc, #276]	@ (8002a88 <HAL_GPIO_Init+0x300>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_GPIO_Init+0x1f2>
 8002976:	2304      	movs	r3, #4
 8002978:	e008      	b.n	800298c <HAL_GPIO_Init+0x204>
 800297a:	2307      	movs	r3, #7
 800297c:	e006      	b.n	800298c <HAL_GPIO_Init+0x204>
 800297e:	2303      	movs	r3, #3
 8002980:	e004      	b.n	800298c <HAL_GPIO_Init+0x204>
 8002982:	2302      	movs	r3, #2
 8002984:	e002      	b.n	800298c <HAL_GPIO_Init+0x204>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_GPIO_Init+0x204>
 800298a:	2300      	movs	r3, #0
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	f002 0203 	and.w	r2, r2, #3
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	4093      	lsls	r3, r2
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800299c:	4935      	ldr	r1, [pc, #212]	@ (8002a74 <HAL_GPIO_Init+0x2ec>)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	3302      	adds	r3, #2
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029aa:	4b38      	ldr	r3, [pc, #224]	@ (8002a8c <HAL_GPIO_Init+0x304>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ce:	4a2f      	ldr	r2, [pc, #188]	@ (8002a8c <HAL_GPIO_Init+0x304>)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <HAL_GPIO_Init+0x304>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f8:	4a24      	ldr	r2, [pc, #144]	@ (8002a8c <HAL_GPIO_Init+0x304>)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029fe:	4b23      	ldr	r3, [pc, #140]	@ (8002a8c <HAL_GPIO_Init+0x304>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a22:	4a1a      	ldr	r2, [pc, #104]	@ (8002a8c <HAL_GPIO_Init+0x304>)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a28:	4b18      	ldr	r3, [pc, #96]	@ (8002a8c <HAL_GPIO_Init+0x304>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8002a8c <HAL_GPIO_Init+0x304>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3301      	adds	r3, #1
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	2b0f      	cmp	r3, #15
 8002a5c:	f67f aea2 	bls.w	80027a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3724      	adds	r7, #36	@ 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40013800 	.word	0x40013800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	40020800 	.word	0x40020800
 8002a84:	40020c00 	.word	0x40020c00
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40013c00 	.word	0x40013c00

08002a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e001      	b.n	8002ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad0:	787b      	ldrb	r3, [r7, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002adc:	e003      	b.n	8002ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ade:	887b      	ldrh	r3, [r7, #2]
 8002ae0:	041a      	lsls	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e267      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d075      	beq.n	8002bfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b12:	4b88      	ldr	r3, [pc, #544]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d00c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1e:	4b85      	ldr	r3, [pc, #532]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d112      	bne.n	8002b50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2a:	4b82      	ldr	r3, [pc, #520]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b36:	d10b      	bne.n	8002b50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	4b7e      	ldr	r3, [pc, #504]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05b      	beq.n	8002bfc <HAL_RCC_OscConfig+0x108>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d157      	bne.n	8002bfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e242      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b58:	d106      	bne.n	8002b68 <HAL_RCC_OscConfig+0x74>
 8002b5a:	4b76      	ldr	r3, [pc, #472]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a75      	ldr	r2, [pc, #468]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e01d      	b.n	8002ba4 <HAL_RCC_OscConfig+0xb0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x98>
 8002b72:	4b70      	ldr	r3, [pc, #448]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6f      	ldr	r2, [pc, #444]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a6c      	ldr	r2, [pc, #432]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0xb0>
 8002b8c:	4b69      	ldr	r3, [pc, #420]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a68      	ldr	r2, [pc, #416]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b66      	ldr	r3, [pc, #408]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a65      	ldr	r2, [pc, #404]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff f93a 	bl	8001e24 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7ff f936 	bl	8001e24 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	@ 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e207      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xc0>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7ff f926 	bl	8001e24 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7ff f922 	bl	8001e24 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	@ 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e1f3      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	4b51      	ldr	r3, [pc, #324]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0xe8>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d063      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c16:	4b47      	ldr	r3, [pc, #284]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d11c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c22:	4b44      	ldr	r3, [pc, #272]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d116      	bne.n	8002c5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	4b41      	ldr	r3, [pc, #260]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_RCC_OscConfig+0x152>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e1c7      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4b3b      	ldr	r3, [pc, #236]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4937      	ldr	r1, [pc, #220]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	e03a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c64:	4b34      	ldr	r3, [pc, #208]	@ (8002d38 <HAL_RCC_OscConfig+0x244>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7ff f8db 	bl	8001e24 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c72:	f7ff f8d7 	bl	8001e24 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e1a8      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c84:	4b2b      	ldr	r3, [pc, #172]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c90:	4b28      	ldr	r3, [pc, #160]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4925      	ldr	r1, [pc, #148]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
 8002ca4:	e015      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca6:	4b24      	ldr	r3, [pc, #144]	@ (8002d38 <HAL_RCC_OscConfig+0x244>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7ff f8ba 	bl	8001e24 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7ff f8b6 	bl	8001e24 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e187      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d036      	beq.n	8002d4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d016      	beq.n	8002d14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce6:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <HAL_RCC_OscConfig+0x248>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7ff f89a 	bl	8001e24 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf4:	f7ff f896 	bl	8001e24 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e167      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d06:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x200>
 8002d12:	e01b      	b.n	8002d4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d14:	4b09      	ldr	r3, [pc, #36]	@ (8002d3c <HAL_RCC_OscConfig+0x248>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7ff f883 	bl	8001e24 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d20:	e00e      	b.n	8002d40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d22:	f7ff f87f 	bl	8001e24 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d907      	bls.n	8002d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e150      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
 8002d34:	40023800 	.word	0x40023800
 8002d38:	42470000 	.word	0x42470000
 8002d3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	4b88      	ldr	r3, [pc, #544]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ea      	bne.n	8002d22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8097 	beq.w	8002e88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5e:	4b81      	ldr	r3, [pc, #516]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	4a7c      	ldr	r2, [pc, #496]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d86:	2301      	movs	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b77      	ldr	r3, [pc, #476]	@ (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d118      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d96:	4b74      	ldr	r3, [pc, #464]	@ (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a73      	ldr	r2, [pc, #460]	@ (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da2:	f7ff f83f 	bl	8001e24 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7ff f83b 	bl	8001e24 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e10c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	4b6a      	ldr	r3, [pc, #424]	@ (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d106      	bne.n	8002dde <HAL_RCC_OscConfig+0x2ea>
 8002dd0:	4b64      	ldr	r3, [pc, #400]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd4:	4a63      	ldr	r2, [pc, #396]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ddc:	e01c      	b.n	8002e18 <HAL_RCC_OscConfig+0x324>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x30c>
 8002de6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dea:	4a5e      	ldr	r2, [pc, #376]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0x324>
 8002e00:	4b58      	ldr	r3, [pc, #352]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e04:	4a57      	ldr	r2, [pc, #348]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e0c:	4b55      	ldr	r3, [pc, #340]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e10:	4a54      	ldr	r2, [pc, #336]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e12:	f023 0304 	bic.w	r3, r3, #4
 8002e16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d015      	beq.n	8002e4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7ff f800 	bl	8001e24 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7fe fffc 	bl	8001e24 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e0cb      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3e:	4b49      	ldr	r3, [pc, #292]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ee      	beq.n	8002e28 <HAL_RCC_OscConfig+0x334>
 8002e4a:	e014      	b.n	8002e76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4c:	f7fe ffea 	bl	8001e24 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7fe ffe6 	bl	8001e24 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e0b5      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1ee      	bne.n	8002e54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	4b39      	ldr	r3, [pc, #228]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	4a38      	ldr	r2, [pc, #224]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a1 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e92:	4b34      	ldr	r3, [pc, #208]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d05c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d141      	bne.n	8002f2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b31      	ldr	r3, [pc, #196]	@ (8002f6c <HAL_RCC_OscConfig+0x478>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe ffba 	bl	8001e24 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe ffb6 	bl	8001e24 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e087      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	4b27      	ldr	r3, [pc, #156]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	3b01      	subs	r3, #1
 8002eec:	041b      	lsls	r3, r3, #16
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	491b      	ldr	r1, [pc, #108]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <HAL_RCC_OscConfig+0x478>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f02:	f7fe ff8f 	bl	8001e24 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7fe ff8b 	bl	8001e24 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e05c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1c:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x416>
 8002f28:	e054      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2a:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <HAL_RCC_OscConfig+0x478>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe ff78 	bl	8001e24 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe ff74 	bl	8001e24 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e045      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x444>
 8002f56:	e03d      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e038      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f70:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <HAL_RCC_OscConfig+0x4ec>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d028      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d121      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d11a      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d111      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800

08002fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0cc      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b68      	ldr	r3, [pc, #416]	@ (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d90c      	bls.n	8003020 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b65      	ldr	r3, [pc, #404]	@ (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b63      	ldr	r3, [pc, #396]	@ (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0b8      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003038:	4b59      	ldr	r3, [pc, #356]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a58      	ldr	r2, [pc, #352]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003042:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003050:	4b53      	ldr	r3, [pc, #332]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a52      	ldr	r2, [pc, #328]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800305a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800305c:	4b50      	ldr	r3, [pc, #320]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	494d      	ldr	r1, [pc, #308]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d044      	beq.n	8003104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	4b47      	ldr	r3, [pc, #284]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d119      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e07f      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a2:	4b3f      	ldr	r3, [pc, #252]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e06f      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b2:	4b3b      	ldr	r3, [pc, #236]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e067      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c2:	4b37      	ldr	r3, [pc, #220]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f023 0203 	bic.w	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4934      	ldr	r1, [pc, #208]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d4:	f7fe fea6 	bl	8001e24 <HAL_GetTick>
 80030d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	e00a      	b.n	80030f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030dc:	f7fe fea2 	bl	8001e24 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e04f      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f2:	4b2b      	ldr	r3, [pc, #172]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 020c 	and.w	r2, r3, #12
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	429a      	cmp	r2, r3
 8003102:	d1eb      	bne.n	80030dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003104:	4b25      	ldr	r3, [pc, #148]	@ (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d20c      	bcs.n	800312c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b22      	ldr	r3, [pc, #136]	@ (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b20      	ldr	r3, [pc, #128]	@ (800319c <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e032      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003138:	4b19      	ldr	r3, [pc, #100]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4916      	ldr	r1, [pc, #88]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003156:	4b12      	ldr	r3, [pc, #72]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	490e      	ldr	r1, [pc, #56]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800316a:	f000 f821 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 800316e:	4602      	mov	r2, r0
 8003170:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	490a      	ldr	r1, [pc, #40]	@ (80031a4 <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	5ccb      	ldrb	r3, [r1, r3]
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	4a09      	ldr	r2, [pc, #36]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003186:	4b09      	ldr	r3, [pc, #36]	@ (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fe06 	bl	8001d9c <HAL_InitTick>

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40023c00 	.word	0x40023c00
 80031a0:	40023800 	.word	0x40023800
 80031a4:	0800561c 	.word	0x0800561c
 80031a8:	2000000c 	.word	0x2000000c
 80031ac:	20000010 	.word	0x20000010

080031b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b4:	b090      	sub	sp, #64	@ 0x40
 80031b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c8:	4b59      	ldr	r3, [pc, #356]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d00d      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x40>
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	f200 80a1 	bhi.w	800331c <HAL_RCC_GetSysClockFreq+0x16c>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x34>
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x3a>
 80031e2:	e09b      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e4:	4b53      	ldr	r3, [pc, #332]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x184>)
 80031e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031e8:	e09b      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ea:	4b53      	ldr	r3, [pc, #332]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x188>)
 80031ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031ee:	e098      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x180>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x180>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d028      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003206:	4b4a      	ldr	r3, [pc, #296]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x180>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	2200      	movs	r2, #0
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	627a      	str	r2, [r7, #36]	@ 0x24
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003218:	2100      	movs	r1, #0
 800321a:	4b47      	ldr	r3, [pc, #284]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x188>)
 800321c:	fb03 f201 	mul.w	r2, r3, r1
 8003220:	2300      	movs	r3, #0
 8003222:	fb00 f303 	mul.w	r3, r0, r3
 8003226:	4413      	add	r3, r2
 8003228:	4a43      	ldr	r2, [pc, #268]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x188>)
 800322a:	fba0 1202 	umull	r1, r2, r0, r2
 800322e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003230:	460a      	mov	r2, r1
 8003232:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003236:	4413      	add	r3, r2
 8003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800323a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323c:	2200      	movs	r2, #0
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	61fa      	str	r2, [r7, #28]
 8003242:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003246:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800324a:	f7fd f819 	bl	8000280 <__aeabi_uldivmod>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4613      	mov	r3, r2
 8003254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003256:	e053      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003258:	4b35      	ldr	r3, [pc, #212]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x180>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	2200      	movs	r2, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	617a      	str	r2, [r7, #20]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800326a:	f04f 0b00 	mov.w	fp, #0
 800326e:	4652      	mov	r2, sl
 8003270:	465b      	mov	r3, fp
 8003272:	f04f 0000 	mov.w	r0, #0
 8003276:	f04f 0100 	mov.w	r1, #0
 800327a:	0159      	lsls	r1, r3, #5
 800327c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003280:	0150      	lsls	r0, r2, #5
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	ebb2 080a 	subs.w	r8, r2, sl
 800328a:	eb63 090b 	sbc.w	r9, r3, fp
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800329a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800329e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032a2:	ebb2 0408 	subs.w	r4, r2, r8
 80032a6:	eb63 0509 	sbc.w	r5, r3, r9
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	00eb      	lsls	r3, r5, #3
 80032b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032b8:	00e2      	lsls	r2, r4, #3
 80032ba:	4614      	mov	r4, r2
 80032bc:	461d      	mov	r5, r3
 80032be:	eb14 030a 	adds.w	r3, r4, sl
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	eb45 030b 	adc.w	r3, r5, fp
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032d6:	4629      	mov	r1, r5
 80032d8:	028b      	lsls	r3, r1, #10
 80032da:	4621      	mov	r1, r4
 80032dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032e0:	4621      	mov	r1, r4
 80032e2:	028a      	lsls	r2, r1, #10
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ea:	2200      	movs	r2, #0
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	60fa      	str	r2, [r7, #12]
 80032f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f4:	f7fc ffc4 	bl	8000280 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4613      	mov	r3, r2
 80032fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003300:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x180>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	3301      	adds	r3, #1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003310:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800331a:	e002      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x184>)
 800331e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003324:	4618      	mov	r0, r3
 8003326:	3740      	adds	r7, #64	@ 0x40
 8003328:	46bd      	mov	sp, r7
 800332a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800
 8003334:	00f42400 	.word	0x00f42400
 8003338:	017d7840 	.word	0x017d7840

0800333c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e07b      	b.n	8003446 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800335e:	d009      	beq.n	8003374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	61da      	str	r2, [r3, #28]
 8003366:	e005      	b.n	8003374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fe f8a0 	bl	80014d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f8:	ea42 0103 	orr.w	r1, r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	f003 0104 	and.w	r1, r3, #4
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	f003 0210 	and.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003434:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b088      	sub	sp, #32
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800345e:	f7fe fce1 	bl	8001e24 <HAL_GetTick>
 8003462:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d001      	beq.n	8003478 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
 8003476:	e12a      	b.n	80036ce <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_SPI_Transmit+0x36>
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e122      	b.n	80036ce <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_SPI_Transmit+0x48>
 8003492:	2302      	movs	r3, #2
 8003494:	e11b      	b.n	80036ce <HAL_SPI_Transmit+0x280>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2203      	movs	r2, #3
 80034a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034e4:	d10f      	bne.n	8003506 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003504:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d007      	beq.n	8003524 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800352c:	d152      	bne.n	80035d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_SPI_Transmit+0xee>
 8003536:	8b7b      	ldrh	r3, [r7, #26]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d145      	bne.n	80035c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	1c9a      	adds	r2, r3, #2
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003560:	e032      	b.n	80035c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b02      	cmp	r3, #2
 800356e:	d112      	bne.n	8003596 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003594:	e018      	b.n	80035c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003596:	f7fe fc45 	bl	8001e24 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d803      	bhi.n	80035ae <HAL_SPI_Transmit+0x160>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d102      	bne.n	80035b4 <HAL_SPI_Transmit+0x166>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e082      	b.n	80036ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1c7      	bne.n	8003562 <HAL_SPI_Transmit+0x114>
 80035d2:	e053      	b.n	800367c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_SPI_Transmit+0x194>
 80035dc:	8b7b      	ldrh	r3, [r7, #26]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d147      	bne.n	8003672 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003608:	e033      	b.n	8003672 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b02      	cmp	r3, #2
 8003616:	d113      	bne.n	8003640 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	7812      	ldrb	r2, [r2, #0]
 8003624:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800363e:	e018      	b.n	8003672 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003640:	f7fe fbf0 	bl	8001e24 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d803      	bhi.n	8003658 <HAL_SPI_Transmit+0x20a>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d102      	bne.n	800365e <HAL_SPI_Transmit+0x210>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e02d      	b.n	80036ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1c6      	bne.n	800360a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	6839      	ldr	r1, [r7, #0]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fbab 	bl	8003ddc <SPI_EndRxTxTransaction>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b08a      	sub	sp, #40	@ 0x28
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
 80036e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036e4:	2301      	movs	r3, #1
 80036e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036e8:	f7fe fb9c 	bl	8001e24 <HAL_GetTick>
 80036ec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036f4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003700:	7ffb      	ldrb	r3, [r7, #31]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d00c      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x4a>
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800370c:	d106      	bne.n	800371c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <HAL_SPI_TransmitReceive+0x46>
 8003716:	7ffb      	ldrb	r3, [r7, #31]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d001      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
 800371e:	e17f      	b.n	8003a20 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x5c>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x5c>
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e174      	b.n	8003a20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x6e>
 8003740:	2302      	movs	r3, #2
 8003742:	e16d      	b.n	8003a20 <HAL_SPI_TransmitReceive+0x34a>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b04      	cmp	r3, #4
 8003756:	d003      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2205      	movs	r2, #5
 800375c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	887a      	ldrh	r2, [r7, #2]
 8003776:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	887a      	ldrh	r2, [r7, #2]
 8003782:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a0:	2b40      	cmp	r3, #64	@ 0x40
 80037a2:	d007      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037bc:	d17e      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_SPI_TransmitReceive+0xf6>
 80037c6:	8afb      	ldrh	r3, [r7, #22]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d16c      	bne.n	80038a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	881a      	ldrh	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f0:	e059      	b.n	80038a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11b      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x162>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x162>
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	2b01      	cmp	r3, #1
 800380e:	d113      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	881a      	ldrh	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003820:	1c9a      	adds	r2, r3, #2
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d119      	bne.n	800387a <HAL_SPI_TransmitReceive+0x1a4>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d014      	beq.n	800387a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385a:	b292      	uxth	r2, r2
 800385c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	1c9a      	adds	r2, r3, #2
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003876:	2301      	movs	r3, #1
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800387a:	f7fe fad3 	bl	8001e24 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003886:	429a      	cmp	r2, r3
 8003888:	d80d      	bhi.n	80038a6 <HAL_SPI_TransmitReceive+0x1d0>
 800388a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d009      	beq.n	80038a6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0bc      	b.n	8003a20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1a0      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x11c>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d19b      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x11c>
 80038ba:	e082      	b.n	80039c2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_SPI_TransmitReceive+0x1f4>
 80038c4:	8afb      	ldrh	r3, [r7, #22]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d171      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038f0:	e05d      	b.n	80039ae <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d11c      	bne.n	800393a <HAL_SPI_TransmitReceive+0x264>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d017      	beq.n	800393a <HAL_SPI_TransmitReceive+0x264>
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	2b01      	cmp	r3, #1
 800390e:	d114      	bne.n	800393a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d119      	bne.n	800397c <HAL_SPI_TransmitReceive+0x2a6>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d014      	beq.n	800397c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003978:	2301      	movs	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800397c:	f7fe fa52 	bl	8001e24 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003988:	429a      	cmp	r2, r3
 800398a:	d803      	bhi.n	8003994 <HAL_SPI_TransmitReceive+0x2be>
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d102      	bne.n	800399a <HAL_SPI_TransmitReceive+0x2c4>
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e038      	b.n	8003a20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d19c      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x21c>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d197      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c2:	6a3a      	ldr	r2, [r7, #32]
 80039c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fa08 	bl	8003ddc <SPI_EndRxTxTransaction>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e01d      	b.n	8003a20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
  }
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3728      	adds	r7, #40	@ 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	4613      	mov	r3, r2
 8003a34:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
 8003a44:	e097      	b.n	8003b76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_SPI_Transmit_DMA+0x2a>
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e08f      	b.n	8003b76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_SPI_Transmit_DMA+0x3c>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e088      	b.n	8003b76 <HAL_SPI_Transmit_DMA+0x14e>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	88fa      	ldrh	r2, [r7, #6]
 8003a84:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	88fa      	ldrh	r2, [r7, #6]
 8003a8a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab2:	d10f      	bne.n	8003ad4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ac2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ad2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad8:	4a29      	ldr	r2, [pc, #164]	@ (8003b80 <HAL_SPI_Transmit_DMA+0x158>)
 8003ada:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae0:	4a28      	ldr	r2, [pc, #160]	@ (8003b84 <HAL_SPI_Transmit_DMA+0x15c>)
 8003ae2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae8:	4a27      	ldr	r2, [pc, #156]	@ (8003b88 <HAL_SPI_Transmit_DMA+0x160>)
 8003aea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af0:	2200      	movs	r2, #0
 8003af2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afc:	4619      	mov	r1, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	330c      	adds	r3, #12
 8003b04:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b0c:	f7fe fb7a 	bl	8002204 <HAL_DMA_Start_IT>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1a:	f043 0210 	orr.w	r2, r3, #16
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e023      	b.n	8003b76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b38:	2b40      	cmp	r3, #64	@ 0x40
 8003b3a:	d007      	beq.n	8003b4c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b4a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0220 	orr.w	r2, r2, #32
 8003b62:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0202 	orr.w	r2, r2, #2
 8003b72:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	08003c71 	.word	0x08003c71
 8003b84:	08003bc9 	.word	0x08003bc9
 8003b88:	08003c8d 	.word	0x08003c8d

08003b8c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bd6:	f7fe f925 	bl	8001e24 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bea:	d03b      	beq.n	8003c64 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0220 	bic.w	r2, r2, #32
 8003bfa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0202 	bic.w	r2, r2, #2
 8003c0a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	2164      	movs	r1, #100	@ 0x64
 8003c10:	6978      	ldr	r0, [r7, #20]
 8003c12:	f000 f8e3 	bl	8003ddc <SPI_EndRxTxTransaction>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003c5c:	6978      	ldr	r0, [r7, #20]
 8003c5e:	f7ff ffa9 	bl	8003bb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003c62:	e002      	b.n	8003c6a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003c64:	6978      	ldr	r0, [r7, #20]
 8003c66:	f7ff ff91 	bl	8003b8c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f7ff ff8e 	bl	8003ba0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0203 	bic.w	r2, r2, #3
 8003ca8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cae:	f043 0210 	orr.w	r2, r3, #16
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff ff78 	bl	8003bb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cdc:	f7fe f8a2 	bl	8001e24 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cec:	f7fe f89a 	bl	8001e24 <HAL_GetTick>
 8003cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cf2:	4b39      	ldr	r3, [pc, #228]	@ (8003dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	015b      	lsls	r3, r3, #5
 8003cf8:	0d1b      	lsrs	r3, r3, #20
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d02:	e054      	b.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d050      	beq.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d0c:	f7fe f88a 	bl	8001e24 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d902      	bls.n	8003d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d13d      	bne.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d3a:	d111      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d44:	d004      	beq.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d4e:	d107      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d68:	d10f      	bne.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e017      	b.n	8003dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4013      	ands	r3, r2
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	bf0c      	ite	eq
 8003dbe:	2301      	moveq	r3, #1
 8003dc0:	2300      	movne	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d19b      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000000c 	.word	0x2000000c

08003ddc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2201      	movs	r2, #1
 8003df0:	2102      	movs	r1, #2
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff ff6a 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e032      	b.n	8003e74 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e7c <SPI_EndRxTxTransaction+0xa0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1b      	ldr	r2, [pc, #108]	@ (8003e80 <SPI_EndRxTxTransaction+0xa4>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	0d5b      	lsrs	r3, r3, #21
 8003e1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e2c:	d112      	bne.n	8003e54 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2180      	movs	r1, #128	@ 0x80
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff ff47 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d016      	beq.n	8003e72 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e00f      	b.n	8003e74 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6a:	2b80      	cmp	r3, #128	@ 0x80
 8003e6c:	d0f2      	beq.n	8003e54 <SPI_EndRxTxTransaction+0x78>
 8003e6e:	e000      	b.n	8003e72 <SPI_EndRxTxTransaction+0x96>
        break;
 8003e70:	bf00      	nop
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	2000000c 	.word	0x2000000c
 8003e80:	165e9f81 	.word	0x165e9f81

08003e84 <siprintf>:
 8003e84:	b40e      	push	{r1, r2, r3}
 8003e86:	b500      	push	{lr}
 8003e88:	b09c      	sub	sp, #112	@ 0x70
 8003e8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e8c:	9002      	str	r0, [sp, #8]
 8003e8e:	9006      	str	r0, [sp, #24]
 8003e90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e94:	4809      	ldr	r0, [pc, #36]	@ (8003ebc <siprintf+0x38>)
 8003e96:	9107      	str	r1, [sp, #28]
 8003e98:	9104      	str	r1, [sp, #16]
 8003e9a:	4909      	ldr	r1, [pc, #36]	@ (8003ec0 <siprintf+0x3c>)
 8003e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ea0:	9105      	str	r1, [sp, #20]
 8003ea2:	6800      	ldr	r0, [r0, #0]
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	a902      	add	r1, sp, #8
 8003ea8:	f000 f994 	bl	80041d4 <_svfiprintf_r>
 8003eac:	9b02      	ldr	r3, [sp, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	b01c      	add	sp, #112	@ 0x70
 8003eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eb8:	b003      	add	sp, #12
 8003eba:	4770      	bx	lr
 8003ebc:	20000018 	.word	0x20000018
 8003ec0:	ffff0208 	.word	0xffff0208

08003ec4 <memset>:
 8003ec4:	4402      	add	r2, r0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d100      	bne.n	8003ece <memset+0xa>
 8003ecc:	4770      	bx	lr
 8003ece:	f803 1b01 	strb.w	r1, [r3], #1
 8003ed2:	e7f9      	b.n	8003ec8 <memset+0x4>

08003ed4 <__errno>:
 8003ed4:	4b01      	ldr	r3, [pc, #4]	@ (8003edc <__errno+0x8>)
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000018 	.word	0x20000018

08003ee0 <__libc_init_array>:
 8003ee0:	b570      	push	{r4, r5, r6, lr}
 8003ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8003f18 <__libc_init_array+0x38>)
 8003ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8003f1c <__libc_init_array+0x3c>)
 8003ee6:	1b64      	subs	r4, r4, r5
 8003ee8:	10a4      	asrs	r4, r4, #2
 8003eea:	2600      	movs	r6, #0
 8003eec:	42a6      	cmp	r6, r4
 8003eee:	d109      	bne.n	8003f04 <__libc_init_array+0x24>
 8003ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8003f20 <__libc_init_array+0x40>)
 8003ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8003f24 <__libc_init_array+0x44>)
 8003ef4:	f000 fc66 	bl	80047c4 <_init>
 8003ef8:	1b64      	subs	r4, r4, r5
 8003efa:	10a4      	asrs	r4, r4, #2
 8003efc:	2600      	movs	r6, #0
 8003efe:	42a6      	cmp	r6, r4
 8003f00:	d105      	bne.n	8003f0e <__libc_init_array+0x2e>
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f08:	4798      	blx	r3
 8003f0a:	3601      	adds	r6, #1
 8003f0c:	e7ee      	b.n	8003eec <__libc_init_array+0xc>
 8003f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f12:	4798      	blx	r3
 8003f14:	3601      	adds	r6, #1
 8003f16:	e7f2      	b.n	8003efe <__libc_init_array+0x1e>
 8003f18:	08005670 	.word	0x08005670
 8003f1c:	08005670 	.word	0x08005670
 8003f20:	08005670 	.word	0x08005670
 8003f24:	08005674 	.word	0x08005674

08003f28 <__retarget_lock_acquire_recursive>:
 8003f28:	4770      	bx	lr

08003f2a <__retarget_lock_release_recursive>:
 8003f2a:	4770      	bx	lr

08003f2c <_free_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	4605      	mov	r5, r0
 8003f30:	2900      	cmp	r1, #0
 8003f32:	d041      	beq.n	8003fb8 <_free_r+0x8c>
 8003f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f38:	1f0c      	subs	r4, r1, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	bfb8      	it	lt
 8003f3e:	18e4      	addlt	r4, r4, r3
 8003f40:	f000 f8e0 	bl	8004104 <__malloc_lock>
 8003f44:	4a1d      	ldr	r2, [pc, #116]	@ (8003fbc <_free_r+0x90>)
 8003f46:	6813      	ldr	r3, [r2, #0]
 8003f48:	b933      	cbnz	r3, 8003f58 <_free_r+0x2c>
 8003f4a:	6063      	str	r3, [r4, #4]
 8003f4c:	6014      	str	r4, [r2, #0]
 8003f4e:	4628      	mov	r0, r5
 8003f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f54:	f000 b8dc 	b.w	8004110 <__malloc_unlock>
 8003f58:	42a3      	cmp	r3, r4
 8003f5a:	d908      	bls.n	8003f6e <_free_r+0x42>
 8003f5c:	6820      	ldr	r0, [r4, #0]
 8003f5e:	1821      	adds	r1, r4, r0
 8003f60:	428b      	cmp	r3, r1
 8003f62:	bf01      	itttt	eq
 8003f64:	6819      	ldreq	r1, [r3, #0]
 8003f66:	685b      	ldreq	r3, [r3, #4]
 8003f68:	1809      	addeq	r1, r1, r0
 8003f6a:	6021      	streq	r1, [r4, #0]
 8003f6c:	e7ed      	b.n	8003f4a <_free_r+0x1e>
 8003f6e:	461a      	mov	r2, r3
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	b10b      	cbz	r3, 8003f78 <_free_r+0x4c>
 8003f74:	42a3      	cmp	r3, r4
 8003f76:	d9fa      	bls.n	8003f6e <_free_r+0x42>
 8003f78:	6811      	ldr	r1, [r2, #0]
 8003f7a:	1850      	adds	r0, r2, r1
 8003f7c:	42a0      	cmp	r0, r4
 8003f7e:	d10b      	bne.n	8003f98 <_free_r+0x6c>
 8003f80:	6820      	ldr	r0, [r4, #0]
 8003f82:	4401      	add	r1, r0
 8003f84:	1850      	adds	r0, r2, r1
 8003f86:	4283      	cmp	r3, r0
 8003f88:	6011      	str	r1, [r2, #0]
 8003f8a:	d1e0      	bne.n	8003f4e <_free_r+0x22>
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	6053      	str	r3, [r2, #4]
 8003f92:	4408      	add	r0, r1
 8003f94:	6010      	str	r0, [r2, #0]
 8003f96:	e7da      	b.n	8003f4e <_free_r+0x22>
 8003f98:	d902      	bls.n	8003fa0 <_free_r+0x74>
 8003f9a:	230c      	movs	r3, #12
 8003f9c:	602b      	str	r3, [r5, #0]
 8003f9e:	e7d6      	b.n	8003f4e <_free_r+0x22>
 8003fa0:	6820      	ldr	r0, [r4, #0]
 8003fa2:	1821      	adds	r1, r4, r0
 8003fa4:	428b      	cmp	r3, r1
 8003fa6:	bf04      	itt	eq
 8003fa8:	6819      	ldreq	r1, [r3, #0]
 8003faa:	685b      	ldreq	r3, [r3, #4]
 8003fac:	6063      	str	r3, [r4, #4]
 8003fae:	bf04      	itt	eq
 8003fb0:	1809      	addeq	r1, r1, r0
 8003fb2:	6021      	streq	r1, [r4, #0]
 8003fb4:	6054      	str	r4, [r2, #4]
 8003fb6:	e7ca      	b.n	8003f4e <_free_r+0x22>
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000c74 	.word	0x20000c74

08003fc0 <sbrk_aligned>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	4e0f      	ldr	r6, [pc, #60]	@ (8004000 <sbrk_aligned+0x40>)
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	6831      	ldr	r1, [r6, #0]
 8003fc8:	4605      	mov	r5, r0
 8003fca:	b911      	cbnz	r1, 8003fd2 <sbrk_aligned+0x12>
 8003fcc:	f000 fba6 	bl	800471c <_sbrk_r>
 8003fd0:	6030      	str	r0, [r6, #0]
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	f000 fba1 	bl	800471c <_sbrk_r>
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	d103      	bne.n	8003fe6 <sbrk_aligned+0x26>
 8003fde:	f04f 34ff 	mov.w	r4, #4294967295
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	bd70      	pop	{r4, r5, r6, pc}
 8003fe6:	1cc4      	adds	r4, r0, #3
 8003fe8:	f024 0403 	bic.w	r4, r4, #3
 8003fec:	42a0      	cmp	r0, r4
 8003fee:	d0f8      	beq.n	8003fe2 <sbrk_aligned+0x22>
 8003ff0:	1a21      	subs	r1, r4, r0
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f000 fb92 	bl	800471c <_sbrk_r>
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d1f2      	bne.n	8003fe2 <sbrk_aligned+0x22>
 8003ffc:	e7ef      	b.n	8003fde <sbrk_aligned+0x1e>
 8003ffe:	bf00      	nop
 8004000:	20000c70 	.word	0x20000c70

08004004 <_malloc_r>:
 8004004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004008:	1ccd      	adds	r5, r1, #3
 800400a:	f025 0503 	bic.w	r5, r5, #3
 800400e:	3508      	adds	r5, #8
 8004010:	2d0c      	cmp	r5, #12
 8004012:	bf38      	it	cc
 8004014:	250c      	movcc	r5, #12
 8004016:	2d00      	cmp	r5, #0
 8004018:	4606      	mov	r6, r0
 800401a:	db01      	blt.n	8004020 <_malloc_r+0x1c>
 800401c:	42a9      	cmp	r1, r5
 800401e:	d904      	bls.n	800402a <_malloc_r+0x26>
 8004020:	230c      	movs	r3, #12
 8004022:	6033      	str	r3, [r6, #0]
 8004024:	2000      	movs	r0, #0
 8004026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800402a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004100 <_malloc_r+0xfc>
 800402e:	f000 f869 	bl	8004104 <__malloc_lock>
 8004032:	f8d8 3000 	ldr.w	r3, [r8]
 8004036:	461c      	mov	r4, r3
 8004038:	bb44      	cbnz	r4, 800408c <_malloc_r+0x88>
 800403a:	4629      	mov	r1, r5
 800403c:	4630      	mov	r0, r6
 800403e:	f7ff ffbf 	bl	8003fc0 <sbrk_aligned>
 8004042:	1c43      	adds	r3, r0, #1
 8004044:	4604      	mov	r4, r0
 8004046:	d158      	bne.n	80040fa <_malloc_r+0xf6>
 8004048:	f8d8 4000 	ldr.w	r4, [r8]
 800404c:	4627      	mov	r7, r4
 800404e:	2f00      	cmp	r7, #0
 8004050:	d143      	bne.n	80040da <_malloc_r+0xd6>
 8004052:	2c00      	cmp	r4, #0
 8004054:	d04b      	beq.n	80040ee <_malloc_r+0xea>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	4639      	mov	r1, r7
 800405a:	4630      	mov	r0, r6
 800405c:	eb04 0903 	add.w	r9, r4, r3
 8004060:	f000 fb5c 	bl	800471c <_sbrk_r>
 8004064:	4581      	cmp	r9, r0
 8004066:	d142      	bne.n	80040ee <_malloc_r+0xea>
 8004068:	6821      	ldr	r1, [r4, #0]
 800406a:	1a6d      	subs	r5, r5, r1
 800406c:	4629      	mov	r1, r5
 800406e:	4630      	mov	r0, r6
 8004070:	f7ff ffa6 	bl	8003fc0 <sbrk_aligned>
 8004074:	3001      	adds	r0, #1
 8004076:	d03a      	beq.n	80040ee <_malloc_r+0xea>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	442b      	add	r3, r5
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	f8d8 3000 	ldr.w	r3, [r8]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	bb62      	cbnz	r2, 80040e0 <_malloc_r+0xdc>
 8004086:	f8c8 7000 	str.w	r7, [r8]
 800408a:	e00f      	b.n	80040ac <_malloc_r+0xa8>
 800408c:	6822      	ldr	r2, [r4, #0]
 800408e:	1b52      	subs	r2, r2, r5
 8004090:	d420      	bmi.n	80040d4 <_malloc_r+0xd0>
 8004092:	2a0b      	cmp	r2, #11
 8004094:	d917      	bls.n	80040c6 <_malloc_r+0xc2>
 8004096:	1961      	adds	r1, r4, r5
 8004098:	42a3      	cmp	r3, r4
 800409a:	6025      	str	r5, [r4, #0]
 800409c:	bf18      	it	ne
 800409e:	6059      	strne	r1, [r3, #4]
 80040a0:	6863      	ldr	r3, [r4, #4]
 80040a2:	bf08      	it	eq
 80040a4:	f8c8 1000 	streq.w	r1, [r8]
 80040a8:	5162      	str	r2, [r4, r5]
 80040aa:	604b      	str	r3, [r1, #4]
 80040ac:	4630      	mov	r0, r6
 80040ae:	f000 f82f 	bl	8004110 <__malloc_unlock>
 80040b2:	f104 000b 	add.w	r0, r4, #11
 80040b6:	1d23      	adds	r3, r4, #4
 80040b8:	f020 0007 	bic.w	r0, r0, #7
 80040bc:	1ac2      	subs	r2, r0, r3
 80040be:	bf1c      	itt	ne
 80040c0:	1a1b      	subne	r3, r3, r0
 80040c2:	50a3      	strne	r3, [r4, r2]
 80040c4:	e7af      	b.n	8004026 <_malloc_r+0x22>
 80040c6:	6862      	ldr	r2, [r4, #4]
 80040c8:	42a3      	cmp	r3, r4
 80040ca:	bf0c      	ite	eq
 80040cc:	f8c8 2000 	streq.w	r2, [r8]
 80040d0:	605a      	strne	r2, [r3, #4]
 80040d2:	e7eb      	b.n	80040ac <_malloc_r+0xa8>
 80040d4:	4623      	mov	r3, r4
 80040d6:	6864      	ldr	r4, [r4, #4]
 80040d8:	e7ae      	b.n	8004038 <_malloc_r+0x34>
 80040da:	463c      	mov	r4, r7
 80040dc:	687f      	ldr	r7, [r7, #4]
 80040de:	e7b6      	b.n	800404e <_malloc_r+0x4a>
 80040e0:	461a      	mov	r2, r3
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d1fb      	bne.n	80040e0 <_malloc_r+0xdc>
 80040e8:	2300      	movs	r3, #0
 80040ea:	6053      	str	r3, [r2, #4]
 80040ec:	e7de      	b.n	80040ac <_malloc_r+0xa8>
 80040ee:	230c      	movs	r3, #12
 80040f0:	6033      	str	r3, [r6, #0]
 80040f2:	4630      	mov	r0, r6
 80040f4:	f000 f80c 	bl	8004110 <__malloc_unlock>
 80040f8:	e794      	b.n	8004024 <_malloc_r+0x20>
 80040fa:	6005      	str	r5, [r0, #0]
 80040fc:	e7d6      	b.n	80040ac <_malloc_r+0xa8>
 80040fe:	bf00      	nop
 8004100:	20000c74 	.word	0x20000c74

08004104 <__malloc_lock>:
 8004104:	4801      	ldr	r0, [pc, #4]	@ (800410c <__malloc_lock+0x8>)
 8004106:	f7ff bf0f 	b.w	8003f28 <__retarget_lock_acquire_recursive>
 800410a:	bf00      	nop
 800410c:	20000c6c 	.word	0x20000c6c

08004110 <__malloc_unlock>:
 8004110:	4801      	ldr	r0, [pc, #4]	@ (8004118 <__malloc_unlock+0x8>)
 8004112:	f7ff bf0a 	b.w	8003f2a <__retarget_lock_release_recursive>
 8004116:	bf00      	nop
 8004118:	20000c6c 	.word	0x20000c6c

0800411c <__ssputs_r>:
 800411c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	688e      	ldr	r6, [r1, #8]
 8004122:	461f      	mov	r7, r3
 8004124:	42be      	cmp	r6, r7
 8004126:	680b      	ldr	r3, [r1, #0]
 8004128:	4682      	mov	sl, r0
 800412a:	460c      	mov	r4, r1
 800412c:	4690      	mov	r8, r2
 800412e:	d82d      	bhi.n	800418c <__ssputs_r+0x70>
 8004130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004138:	d026      	beq.n	8004188 <__ssputs_r+0x6c>
 800413a:	6965      	ldr	r5, [r4, #20]
 800413c:	6909      	ldr	r1, [r1, #16]
 800413e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004142:	eba3 0901 	sub.w	r9, r3, r1
 8004146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800414a:	1c7b      	adds	r3, r7, #1
 800414c:	444b      	add	r3, r9
 800414e:	106d      	asrs	r5, r5, #1
 8004150:	429d      	cmp	r5, r3
 8004152:	bf38      	it	cc
 8004154:	461d      	movcc	r5, r3
 8004156:	0553      	lsls	r3, r2, #21
 8004158:	d527      	bpl.n	80041aa <__ssputs_r+0x8e>
 800415a:	4629      	mov	r1, r5
 800415c:	f7ff ff52 	bl	8004004 <_malloc_r>
 8004160:	4606      	mov	r6, r0
 8004162:	b360      	cbz	r0, 80041be <__ssputs_r+0xa2>
 8004164:	6921      	ldr	r1, [r4, #16]
 8004166:	464a      	mov	r2, r9
 8004168:	f000 fae8 	bl	800473c <memcpy>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004176:	81a3      	strh	r3, [r4, #12]
 8004178:	6126      	str	r6, [r4, #16]
 800417a:	6165      	str	r5, [r4, #20]
 800417c:	444e      	add	r6, r9
 800417e:	eba5 0509 	sub.w	r5, r5, r9
 8004182:	6026      	str	r6, [r4, #0]
 8004184:	60a5      	str	r5, [r4, #8]
 8004186:	463e      	mov	r6, r7
 8004188:	42be      	cmp	r6, r7
 800418a:	d900      	bls.n	800418e <__ssputs_r+0x72>
 800418c:	463e      	mov	r6, r7
 800418e:	6820      	ldr	r0, [r4, #0]
 8004190:	4632      	mov	r2, r6
 8004192:	4641      	mov	r1, r8
 8004194:	f000 faa8 	bl	80046e8 <memmove>
 8004198:	68a3      	ldr	r3, [r4, #8]
 800419a:	1b9b      	subs	r3, r3, r6
 800419c:	60a3      	str	r3, [r4, #8]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	4433      	add	r3, r6
 80041a2:	6023      	str	r3, [r4, #0]
 80041a4:	2000      	movs	r0, #0
 80041a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041aa:	462a      	mov	r2, r5
 80041ac:	f000 fad4 	bl	8004758 <_realloc_r>
 80041b0:	4606      	mov	r6, r0
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d1e0      	bne.n	8004178 <__ssputs_r+0x5c>
 80041b6:	6921      	ldr	r1, [r4, #16]
 80041b8:	4650      	mov	r0, sl
 80041ba:	f7ff feb7 	bl	8003f2c <_free_r>
 80041be:	230c      	movs	r3, #12
 80041c0:	f8ca 3000 	str.w	r3, [sl]
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ca:	81a3      	strh	r3, [r4, #12]
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	e7e9      	b.n	80041a6 <__ssputs_r+0x8a>
	...

080041d4 <_svfiprintf_r>:
 80041d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d8:	4698      	mov	r8, r3
 80041da:	898b      	ldrh	r3, [r1, #12]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	b09d      	sub	sp, #116	@ 0x74
 80041e0:	4607      	mov	r7, r0
 80041e2:	460d      	mov	r5, r1
 80041e4:	4614      	mov	r4, r2
 80041e6:	d510      	bpl.n	800420a <_svfiprintf_r+0x36>
 80041e8:	690b      	ldr	r3, [r1, #16]
 80041ea:	b973      	cbnz	r3, 800420a <_svfiprintf_r+0x36>
 80041ec:	2140      	movs	r1, #64	@ 0x40
 80041ee:	f7ff ff09 	bl	8004004 <_malloc_r>
 80041f2:	6028      	str	r0, [r5, #0]
 80041f4:	6128      	str	r0, [r5, #16]
 80041f6:	b930      	cbnz	r0, 8004206 <_svfiprintf_r+0x32>
 80041f8:	230c      	movs	r3, #12
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004200:	b01d      	add	sp, #116	@ 0x74
 8004202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004206:	2340      	movs	r3, #64	@ 0x40
 8004208:	616b      	str	r3, [r5, #20]
 800420a:	2300      	movs	r3, #0
 800420c:	9309      	str	r3, [sp, #36]	@ 0x24
 800420e:	2320      	movs	r3, #32
 8004210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004214:	f8cd 800c 	str.w	r8, [sp, #12]
 8004218:	2330      	movs	r3, #48	@ 0x30
 800421a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80043b8 <_svfiprintf_r+0x1e4>
 800421e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004222:	f04f 0901 	mov.w	r9, #1
 8004226:	4623      	mov	r3, r4
 8004228:	469a      	mov	sl, r3
 800422a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800422e:	b10a      	cbz	r2, 8004234 <_svfiprintf_r+0x60>
 8004230:	2a25      	cmp	r2, #37	@ 0x25
 8004232:	d1f9      	bne.n	8004228 <_svfiprintf_r+0x54>
 8004234:	ebba 0b04 	subs.w	fp, sl, r4
 8004238:	d00b      	beq.n	8004252 <_svfiprintf_r+0x7e>
 800423a:	465b      	mov	r3, fp
 800423c:	4622      	mov	r2, r4
 800423e:	4629      	mov	r1, r5
 8004240:	4638      	mov	r0, r7
 8004242:	f7ff ff6b 	bl	800411c <__ssputs_r>
 8004246:	3001      	adds	r0, #1
 8004248:	f000 80a7 	beq.w	800439a <_svfiprintf_r+0x1c6>
 800424c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800424e:	445a      	add	r2, fp
 8004250:	9209      	str	r2, [sp, #36]	@ 0x24
 8004252:	f89a 3000 	ldrb.w	r3, [sl]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 809f 	beq.w	800439a <_svfiprintf_r+0x1c6>
 800425c:	2300      	movs	r3, #0
 800425e:	f04f 32ff 	mov.w	r2, #4294967295
 8004262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004266:	f10a 0a01 	add.w	sl, sl, #1
 800426a:	9304      	str	r3, [sp, #16]
 800426c:	9307      	str	r3, [sp, #28]
 800426e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004272:	931a      	str	r3, [sp, #104]	@ 0x68
 8004274:	4654      	mov	r4, sl
 8004276:	2205      	movs	r2, #5
 8004278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800427c:	484e      	ldr	r0, [pc, #312]	@ (80043b8 <_svfiprintf_r+0x1e4>)
 800427e:	f7fb ffaf 	bl	80001e0 <memchr>
 8004282:	9a04      	ldr	r2, [sp, #16]
 8004284:	b9d8      	cbnz	r0, 80042be <_svfiprintf_r+0xea>
 8004286:	06d0      	lsls	r0, r2, #27
 8004288:	bf44      	itt	mi
 800428a:	2320      	movmi	r3, #32
 800428c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004290:	0711      	lsls	r1, r2, #28
 8004292:	bf44      	itt	mi
 8004294:	232b      	movmi	r3, #43	@ 0x2b
 8004296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800429a:	f89a 3000 	ldrb.w	r3, [sl]
 800429e:	2b2a      	cmp	r3, #42	@ 0x2a
 80042a0:	d015      	beq.n	80042ce <_svfiprintf_r+0xfa>
 80042a2:	9a07      	ldr	r2, [sp, #28]
 80042a4:	4654      	mov	r4, sl
 80042a6:	2000      	movs	r0, #0
 80042a8:	f04f 0c0a 	mov.w	ip, #10
 80042ac:	4621      	mov	r1, r4
 80042ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042b2:	3b30      	subs	r3, #48	@ 0x30
 80042b4:	2b09      	cmp	r3, #9
 80042b6:	d94b      	bls.n	8004350 <_svfiprintf_r+0x17c>
 80042b8:	b1b0      	cbz	r0, 80042e8 <_svfiprintf_r+0x114>
 80042ba:	9207      	str	r2, [sp, #28]
 80042bc:	e014      	b.n	80042e8 <_svfiprintf_r+0x114>
 80042be:	eba0 0308 	sub.w	r3, r0, r8
 80042c2:	fa09 f303 	lsl.w	r3, r9, r3
 80042c6:	4313      	orrs	r3, r2
 80042c8:	9304      	str	r3, [sp, #16]
 80042ca:	46a2      	mov	sl, r4
 80042cc:	e7d2      	b.n	8004274 <_svfiprintf_r+0xa0>
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	1d19      	adds	r1, r3, #4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	9103      	str	r1, [sp, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bfbb      	ittet	lt
 80042da:	425b      	neglt	r3, r3
 80042dc:	f042 0202 	orrlt.w	r2, r2, #2
 80042e0:	9307      	strge	r3, [sp, #28]
 80042e2:	9307      	strlt	r3, [sp, #28]
 80042e4:	bfb8      	it	lt
 80042e6:	9204      	strlt	r2, [sp, #16]
 80042e8:	7823      	ldrb	r3, [r4, #0]
 80042ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80042ec:	d10a      	bne.n	8004304 <_svfiprintf_r+0x130>
 80042ee:	7863      	ldrb	r3, [r4, #1]
 80042f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80042f2:	d132      	bne.n	800435a <_svfiprintf_r+0x186>
 80042f4:	9b03      	ldr	r3, [sp, #12]
 80042f6:	1d1a      	adds	r2, r3, #4
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	9203      	str	r2, [sp, #12]
 80042fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004300:	3402      	adds	r4, #2
 8004302:	9305      	str	r3, [sp, #20]
 8004304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80043c8 <_svfiprintf_r+0x1f4>
 8004308:	7821      	ldrb	r1, [r4, #0]
 800430a:	2203      	movs	r2, #3
 800430c:	4650      	mov	r0, sl
 800430e:	f7fb ff67 	bl	80001e0 <memchr>
 8004312:	b138      	cbz	r0, 8004324 <_svfiprintf_r+0x150>
 8004314:	9b04      	ldr	r3, [sp, #16]
 8004316:	eba0 000a 	sub.w	r0, r0, sl
 800431a:	2240      	movs	r2, #64	@ 0x40
 800431c:	4082      	lsls	r2, r0
 800431e:	4313      	orrs	r3, r2
 8004320:	3401      	adds	r4, #1
 8004322:	9304      	str	r3, [sp, #16]
 8004324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004328:	4824      	ldr	r0, [pc, #144]	@ (80043bc <_svfiprintf_r+0x1e8>)
 800432a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800432e:	2206      	movs	r2, #6
 8004330:	f7fb ff56 	bl	80001e0 <memchr>
 8004334:	2800      	cmp	r0, #0
 8004336:	d036      	beq.n	80043a6 <_svfiprintf_r+0x1d2>
 8004338:	4b21      	ldr	r3, [pc, #132]	@ (80043c0 <_svfiprintf_r+0x1ec>)
 800433a:	bb1b      	cbnz	r3, 8004384 <_svfiprintf_r+0x1b0>
 800433c:	9b03      	ldr	r3, [sp, #12]
 800433e:	3307      	adds	r3, #7
 8004340:	f023 0307 	bic.w	r3, r3, #7
 8004344:	3308      	adds	r3, #8
 8004346:	9303      	str	r3, [sp, #12]
 8004348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800434a:	4433      	add	r3, r6
 800434c:	9309      	str	r3, [sp, #36]	@ 0x24
 800434e:	e76a      	b.n	8004226 <_svfiprintf_r+0x52>
 8004350:	fb0c 3202 	mla	r2, ip, r2, r3
 8004354:	460c      	mov	r4, r1
 8004356:	2001      	movs	r0, #1
 8004358:	e7a8      	b.n	80042ac <_svfiprintf_r+0xd8>
 800435a:	2300      	movs	r3, #0
 800435c:	3401      	adds	r4, #1
 800435e:	9305      	str	r3, [sp, #20]
 8004360:	4619      	mov	r1, r3
 8004362:	f04f 0c0a 	mov.w	ip, #10
 8004366:	4620      	mov	r0, r4
 8004368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800436c:	3a30      	subs	r2, #48	@ 0x30
 800436e:	2a09      	cmp	r2, #9
 8004370:	d903      	bls.n	800437a <_svfiprintf_r+0x1a6>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0c6      	beq.n	8004304 <_svfiprintf_r+0x130>
 8004376:	9105      	str	r1, [sp, #20]
 8004378:	e7c4      	b.n	8004304 <_svfiprintf_r+0x130>
 800437a:	fb0c 2101 	mla	r1, ip, r1, r2
 800437e:	4604      	mov	r4, r0
 8004380:	2301      	movs	r3, #1
 8004382:	e7f0      	b.n	8004366 <_svfiprintf_r+0x192>
 8004384:	ab03      	add	r3, sp, #12
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	462a      	mov	r2, r5
 800438a:	4b0e      	ldr	r3, [pc, #56]	@ (80043c4 <_svfiprintf_r+0x1f0>)
 800438c:	a904      	add	r1, sp, #16
 800438e:	4638      	mov	r0, r7
 8004390:	f3af 8000 	nop.w
 8004394:	1c42      	adds	r2, r0, #1
 8004396:	4606      	mov	r6, r0
 8004398:	d1d6      	bne.n	8004348 <_svfiprintf_r+0x174>
 800439a:	89ab      	ldrh	r3, [r5, #12]
 800439c:	065b      	lsls	r3, r3, #25
 800439e:	f53f af2d 	bmi.w	80041fc <_svfiprintf_r+0x28>
 80043a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043a4:	e72c      	b.n	8004200 <_svfiprintf_r+0x2c>
 80043a6:	ab03      	add	r3, sp, #12
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	462a      	mov	r2, r5
 80043ac:	4b05      	ldr	r3, [pc, #20]	@ (80043c4 <_svfiprintf_r+0x1f0>)
 80043ae:	a904      	add	r1, sp, #16
 80043b0:	4638      	mov	r0, r7
 80043b2:	f000 f879 	bl	80044a8 <_printf_i>
 80043b6:	e7ed      	b.n	8004394 <_svfiprintf_r+0x1c0>
 80043b8:	08005634 	.word	0x08005634
 80043bc:	0800563e 	.word	0x0800563e
 80043c0:	00000000 	.word	0x00000000
 80043c4:	0800411d 	.word	0x0800411d
 80043c8:	0800563a 	.word	0x0800563a

080043cc <_printf_common>:
 80043cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d0:	4616      	mov	r6, r2
 80043d2:	4698      	mov	r8, r3
 80043d4:	688a      	ldr	r2, [r1, #8]
 80043d6:	690b      	ldr	r3, [r1, #16]
 80043d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043dc:	4293      	cmp	r3, r2
 80043de:	bfb8      	it	lt
 80043e0:	4613      	movlt	r3, r2
 80043e2:	6033      	str	r3, [r6, #0]
 80043e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043e8:	4607      	mov	r7, r0
 80043ea:	460c      	mov	r4, r1
 80043ec:	b10a      	cbz	r2, 80043f2 <_printf_common+0x26>
 80043ee:	3301      	adds	r3, #1
 80043f0:	6033      	str	r3, [r6, #0]
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	0699      	lsls	r1, r3, #26
 80043f6:	bf42      	ittt	mi
 80043f8:	6833      	ldrmi	r3, [r6, #0]
 80043fa:	3302      	addmi	r3, #2
 80043fc:	6033      	strmi	r3, [r6, #0]
 80043fe:	6825      	ldr	r5, [r4, #0]
 8004400:	f015 0506 	ands.w	r5, r5, #6
 8004404:	d106      	bne.n	8004414 <_printf_common+0x48>
 8004406:	f104 0a19 	add.w	sl, r4, #25
 800440a:	68e3      	ldr	r3, [r4, #12]
 800440c:	6832      	ldr	r2, [r6, #0]
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	42ab      	cmp	r3, r5
 8004412:	dc26      	bgt.n	8004462 <_printf_common+0x96>
 8004414:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004418:	6822      	ldr	r2, [r4, #0]
 800441a:	3b00      	subs	r3, #0
 800441c:	bf18      	it	ne
 800441e:	2301      	movne	r3, #1
 8004420:	0692      	lsls	r2, r2, #26
 8004422:	d42b      	bmi.n	800447c <_printf_common+0xb0>
 8004424:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004428:	4641      	mov	r1, r8
 800442a:	4638      	mov	r0, r7
 800442c:	47c8      	blx	r9
 800442e:	3001      	adds	r0, #1
 8004430:	d01e      	beq.n	8004470 <_printf_common+0xa4>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	6922      	ldr	r2, [r4, #16]
 8004436:	f003 0306 	and.w	r3, r3, #6
 800443a:	2b04      	cmp	r3, #4
 800443c:	bf02      	ittt	eq
 800443e:	68e5      	ldreq	r5, [r4, #12]
 8004440:	6833      	ldreq	r3, [r6, #0]
 8004442:	1aed      	subeq	r5, r5, r3
 8004444:	68a3      	ldr	r3, [r4, #8]
 8004446:	bf0c      	ite	eq
 8004448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800444c:	2500      	movne	r5, #0
 800444e:	4293      	cmp	r3, r2
 8004450:	bfc4      	itt	gt
 8004452:	1a9b      	subgt	r3, r3, r2
 8004454:	18ed      	addgt	r5, r5, r3
 8004456:	2600      	movs	r6, #0
 8004458:	341a      	adds	r4, #26
 800445a:	42b5      	cmp	r5, r6
 800445c:	d11a      	bne.n	8004494 <_printf_common+0xc8>
 800445e:	2000      	movs	r0, #0
 8004460:	e008      	b.n	8004474 <_printf_common+0xa8>
 8004462:	2301      	movs	r3, #1
 8004464:	4652      	mov	r2, sl
 8004466:	4641      	mov	r1, r8
 8004468:	4638      	mov	r0, r7
 800446a:	47c8      	blx	r9
 800446c:	3001      	adds	r0, #1
 800446e:	d103      	bne.n	8004478 <_printf_common+0xac>
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004478:	3501      	adds	r5, #1
 800447a:	e7c6      	b.n	800440a <_printf_common+0x3e>
 800447c:	18e1      	adds	r1, r4, r3
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	2030      	movs	r0, #48	@ 0x30
 8004482:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004486:	4422      	add	r2, r4
 8004488:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800448c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004490:	3302      	adds	r3, #2
 8004492:	e7c7      	b.n	8004424 <_printf_common+0x58>
 8004494:	2301      	movs	r3, #1
 8004496:	4622      	mov	r2, r4
 8004498:	4641      	mov	r1, r8
 800449a:	4638      	mov	r0, r7
 800449c:	47c8      	blx	r9
 800449e:	3001      	adds	r0, #1
 80044a0:	d0e6      	beq.n	8004470 <_printf_common+0xa4>
 80044a2:	3601      	adds	r6, #1
 80044a4:	e7d9      	b.n	800445a <_printf_common+0x8e>
	...

080044a8 <_printf_i>:
 80044a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044ac:	7e0f      	ldrb	r7, [r1, #24]
 80044ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044b0:	2f78      	cmp	r7, #120	@ 0x78
 80044b2:	4691      	mov	r9, r2
 80044b4:	4680      	mov	r8, r0
 80044b6:	460c      	mov	r4, r1
 80044b8:	469a      	mov	sl, r3
 80044ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044be:	d807      	bhi.n	80044d0 <_printf_i+0x28>
 80044c0:	2f62      	cmp	r7, #98	@ 0x62
 80044c2:	d80a      	bhi.n	80044da <_printf_i+0x32>
 80044c4:	2f00      	cmp	r7, #0
 80044c6:	f000 80d2 	beq.w	800466e <_printf_i+0x1c6>
 80044ca:	2f58      	cmp	r7, #88	@ 0x58
 80044cc:	f000 80b9 	beq.w	8004642 <_printf_i+0x19a>
 80044d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044d8:	e03a      	b.n	8004550 <_printf_i+0xa8>
 80044da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044de:	2b15      	cmp	r3, #21
 80044e0:	d8f6      	bhi.n	80044d0 <_printf_i+0x28>
 80044e2:	a101      	add	r1, pc, #4	@ (adr r1, 80044e8 <_printf_i+0x40>)
 80044e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044e8:	08004541 	.word	0x08004541
 80044ec:	08004555 	.word	0x08004555
 80044f0:	080044d1 	.word	0x080044d1
 80044f4:	080044d1 	.word	0x080044d1
 80044f8:	080044d1 	.word	0x080044d1
 80044fc:	080044d1 	.word	0x080044d1
 8004500:	08004555 	.word	0x08004555
 8004504:	080044d1 	.word	0x080044d1
 8004508:	080044d1 	.word	0x080044d1
 800450c:	080044d1 	.word	0x080044d1
 8004510:	080044d1 	.word	0x080044d1
 8004514:	08004655 	.word	0x08004655
 8004518:	0800457f 	.word	0x0800457f
 800451c:	0800460f 	.word	0x0800460f
 8004520:	080044d1 	.word	0x080044d1
 8004524:	080044d1 	.word	0x080044d1
 8004528:	08004677 	.word	0x08004677
 800452c:	080044d1 	.word	0x080044d1
 8004530:	0800457f 	.word	0x0800457f
 8004534:	080044d1 	.word	0x080044d1
 8004538:	080044d1 	.word	0x080044d1
 800453c:	08004617 	.word	0x08004617
 8004540:	6833      	ldr	r3, [r6, #0]
 8004542:	1d1a      	adds	r2, r3, #4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6032      	str	r2, [r6, #0]
 8004548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800454c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004550:	2301      	movs	r3, #1
 8004552:	e09d      	b.n	8004690 <_printf_i+0x1e8>
 8004554:	6833      	ldr	r3, [r6, #0]
 8004556:	6820      	ldr	r0, [r4, #0]
 8004558:	1d19      	adds	r1, r3, #4
 800455a:	6031      	str	r1, [r6, #0]
 800455c:	0606      	lsls	r6, r0, #24
 800455e:	d501      	bpl.n	8004564 <_printf_i+0xbc>
 8004560:	681d      	ldr	r5, [r3, #0]
 8004562:	e003      	b.n	800456c <_printf_i+0xc4>
 8004564:	0645      	lsls	r5, r0, #25
 8004566:	d5fb      	bpl.n	8004560 <_printf_i+0xb8>
 8004568:	f9b3 5000 	ldrsh.w	r5, [r3]
 800456c:	2d00      	cmp	r5, #0
 800456e:	da03      	bge.n	8004578 <_printf_i+0xd0>
 8004570:	232d      	movs	r3, #45	@ 0x2d
 8004572:	426d      	negs	r5, r5
 8004574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004578:	4859      	ldr	r0, [pc, #356]	@ (80046e0 <_printf_i+0x238>)
 800457a:	230a      	movs	r3, #10
 800457c:	e011      	b.n	80045a2 <_printf_i+0xfa>
 800457e:	6821      	ldr	r1, [r4, #0]
 8004580:	6833      	ldr	r3, [r6, #0]
 8004582:	0608      	lsls	r0, r1, #24
 8004584:	f853 5b04 	ldr.w	r5, [r3], #4
 8004588:	d402      	bmi.n	8004590 <_printf_i+0xe8>
 800458a:	0649      	lsls	r1, r1, #25
 800458c:	bf48      	it	mi
 800458e:	b2ad      	uxthmi	r5, r5
 8004590:	2f6f      	cmp	r7, #111	@ 0x6f
 8004592:	4853      	ldr	r0, [pc, #332]	@ (80046e0 <_printf_i+0x238>)
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	bf14      	ite	ne
 8004598:	230a      	movne	r3, #10
 800459a:	2308      	moveq	r3, #8
 800459c:	2100      	movs	r1, #0
 800459e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045a2:	6866      	ldr	r6, [r4, #4]
 80045a4:	60a6      	str	r6, [r4, #8]
 80045a6:	2e00      	cmp	r6, #0
 80045a8:	bfa2      	ittt	ge
 80045aa:	6821      	ldrge	r1, [r4, #0]
 80045ac:	f021 0104 	bicge.w	r1, r1, #4
 80045b0:	6021      	strge	r1, [r4, #0]
 80045b2:	b90d      	cbnz	r5, 80045b8 <_printf_i+0x110>
 80045b4:	2e00      	cmp	r6, #0
 80045b6:	d04b      	beq.n	8004650 <_printf_i+0x1a8>
 80045b8:	4616      	mov	r6, r2
 80045ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80045be:	fb03 5711 	mls	r7, r3, r1, r5
 80045c2:	5dc7      	ldrb	r7, [r0, r7]
 80045c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045c8:	462f      	mov	r7, r5
 80045ca:	42bb      	cmp	r3, r7
 80045cc:	460d      	mov	r5, r1
 80045ce:	d9f4      	bls.n	80045ba <_printf_i+0x112>
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d10b      	bne.n	80045ec <_printf_i+0x144>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	07df      	lsls	r7, r3, #31
 80045d8:	d508      	bpl.n	80045ec <_printf_i+0x144>
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	6861      	ldr	r1, [r4, #4]
 80045de:	4299      	cmp	r1, r3
 80045e0:	bfde      	ittt	le
 80045e2:	2330      	movle	r3, #48	@ 0x30
 80045e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045ec:	1b92      	subs	r2, r2, r6
 80045ee:	6122      	str	r2, [r4, #16]
 80045f0:	f8cd a000 	str.w	sl, [sp]
 80045f4:	464b      	mov	r3, r9
 80045f6:	aa03      	add	r2, sp, #12
 80045f8:	4621      	mov	r1, r4
 80045fa:	4640      	mov	r0, r8
 80045fc:	f7ff fee6 	bl	80043cc <_printf_common>
 8004600:	3001      	adds	r0, #1
 8004602:	d14a      	bne.n	800469a <_printf_i+0x1f2>
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	b004      	add	sp, #16
 800460a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	f043 0320 	orr.w	r3, r3, #32
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	4833      	ldr	r0, [pc, #204]	@ (80046e4 <_printf_i+0x23c>)
 8004618:	2778      	movs	r7, #120	@ 0x78
 800461a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	6831      	ldr	r1, [r6, #0]
 8004622:	061f      	lsls	r7, r3, #24
 8004624:	f851 5b04 	ldr.w	r5, [r1], #4
 8004628:	d402      	bmi.n	8004630 <_printf_i+0x188>
 800462a:	065f      	lsls	r7, r3, #25
 800462c:	bf48      	it	mi
 800462e:	b2ad      	uxthmi	r5, r5
 8004630:	6031      	str	r1, [r6, #0]
 8004632:	07d9      	lsls	r1, r3, #31
 8004634:	bf44      	itt	mi
 8004636:	f043 0320 	orrmi.w	r3, r3, #32
 800463a:	6023      	strmi	r3, [r4, #0]
 800463c:	b11d      	cbz	r5, 8004646 <_printf_i+0x19e>
 800463e:	2310      	movs	r3, #16
 8004640:	e7ac      	b.n	800459c <_printf_i+0xf4>
 8004642:	4827      	ldr	r0, [pc, #156]	@ (80046e0 <_printf_i+0x238>)
 8004644:	e7e9      	b.n	800461a <_printf_i+0x172>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	f023 0320 	bic.w	r3, r3, #32
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	e7f6      	b.n	800463e <_printf_i+0x196>
 8004650:	4616      	mov	r6, r2
 8004652:	e7bd      	b.n	80045d0 <_printf_i+0x128>
 8004654:	6833      	ldr	r3, [r6, #0]
 8004656:	6825      	ldr	r5, [r4, #0]
 8004658:	6961      	ldr	r1, [r4, #20]
 800465a:	1d18      	adds	r0, r3, #4
 800465c:	6030      	str	r0, [r6, #0]
 800465e:	062e      	lsls	r6, r5, #24
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	d501      	bpl.n	8004668 <_printf_i+0x1c0>
 8004664:	6019      	str	r1, [r3, #0]
 8004666:	e002      	b.n	800466e <_printf_i+0x1c6>
 8004668:	0668      	lsls	r0, r5, #25
 800466a:	d5fb      	bpl.n	8004664 <_printf_i+0x1bc>
 800466c:	8019      	strh	r1, [r3, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	4616      	mov	r6, r2
 8004674:	e7bc      	b.n	80045f0 <_printf_i+0x148>
 8004676:	6833      	ldr	r3, [r6, #0]
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	6032      	str	r2, [r6, #0]
 800467c:	681e      	ldr	r6, [r3, #0]
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	2100      	movs	r1, #0
 8004682:	4630      	mov	r0, r6
 8004684:	f7fb fdac 	bl	80001e0 <memchr>
 8004688:	b108      	cbz	r0, 800468e <_printf_i+0x1e6>
 800468a:	1b80      	subs	r0, r0, r6
 800468c:	6060      	str	r0, [r4, #4]
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	2300      	movs	r3, #0
 8004694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004698:	e7aa      	b.n	80045f0 <_printf_i+0x148>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	4632      	mov	r2, r6
 800469e:	4649      	mov	r1, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	47d0      	blx	sl
 80046a4:	3001      	adds	r0, #1
 80046a6:	d0ad      	beq.n	8004604 <_printf_i+0x15c>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	079b      	lsls	r3, r3, #30
 80046ac:	d413      	bmi.n	80046d6 <_printf_i+0x22e>
 80046ae:	68e0      	ldr	r0, [r4, #12]
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	4298      	cmp	r0, r3
 80046b4:	bfb8      	it	lt
 80046b6:	4618      	movlt	r0, r3
 80046b8:	e7a6      	b.n	8004608 <_printf_i+0x160>
 80046ba:	2301      	movs	r3, #1
 80046bc:	4632      	mov	r2, r6
 80046be:	4649      	mov	r1, r9
 80046c0:	4640      	mov	r0, r8
 80046c2:	47d0      	blx	sl
 80046c4:	3001      	adds	r0, #1
 80046c6:	d09d      	beq.n	8004604 <_printf_i+0x15c>
 80046c8:	3501      	adds	r5, #1
 80046ca:	68e3      	ldr	r3, [r4, #12]
 80046cc:	9903      	ldr	r1, [sp, #12]
 80046ce:	1a5b      	subs	r3, r3, r1
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	dcf2      	bgt.n	80046ba <_printf_i+0x212>
 80046d4:	e7eb      	b.n	80046ae <_printf_i+0x206>
 80046d6:	2500      	movs	r5, #0
 80046d8:	f104 0619 	add.w	r6, r4, #25
 80046dc:	e7f5      	b.n	80046ca <_printf_i+0x222>
 80046de:	bf00      	nop
 80046e0:	08005645 	.word	0x08005645
 80046e4:	08005656 	.word	0x08005656

080046e8 <memmove>:
 80046e8:	4288      	cmp	r0, r1
 80046ea:	b510      	push	{r4, lr}
 80046ec:	eb01 0402 	add.w	r4, r1, r2
 80046f0:	d902      	bls.n	80046f8 <memmove+0x10>
 80046f2:	4284      	cmp	r4, r0
 80046f4:	4623      	mov	r3, r4
 80046f6:	d807      	bhi.n	8004708 <memmove+0x20>
 80046f8:	1e43      	subs	r3, r0, #1
 80046fa:	42a1      	cmp	r1, r4
 80046fc:	d008      	beq.n	8004710 <memmove+0x28>
 80046fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004702:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004706:	e7f8      	b.n	80046fa <memmove+0x12>
 8004708:	4402      	add	r2, r0
 800470a:	4601      	mov	r1, r0
 800470c:	428a      	cmp	r2, r1
 800470e:	d100      	bne.n	8004712 <memmove+0x2a>
 8004710:	bd10      	pop	{r4, pc}
 8004712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800471a:	e7f7      	b.n	800470c <memmove+0x24>

0800471c <_sbrk_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4d06      	ldr	r5, [pc, #24]	@ (8004738 <_sbrk_r+0x1c>)
 8004720:	2300      	movs	r3, #0
 8004722:	4604      	mov	r4, r0
 8004724:	4608      	mov	r0, r1
 8004726:	602b      	str	r3, [r5, #0]
 8004728:	f7fc ffbe 	bl	80016a8 <_sbrk>
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d102      	bne.n	8004736 <_sbrk_r+0x1a>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	b103      	cbz	r3, 8004736 <_sbrk_r+0x1a>
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	bd38      	pop	{r3, r4, r5, pc}
 8004738:	20000c68 	.word	0x20000c68

0800473c <memcpy>:
 800473c:	440a      	add	r2, r1
 800473e:	4291      	cmp	r1, r2
 8004740:	f100 33ff 	add.w	r3, r0, #4294967295
 8004744:	d100      	bne.n	8004748 <memcpy+0xc>
 8004746:	4770      	bx	lr
 8004748:	b510      	push	{r4, lr}
 800474a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800474e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004752:	4291      	cmp	r1, r2
 8004754:	d1f9      	bne.n	800474a <memcpy+0xe>
 8004756:	bd10      	pop	{r4, pc}

08004758 <_realloc_r>:
 8004758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475c:	4680      	mov	r8, r0
 800475e:	4615      	mov	r5, r2
 8004760:	460c      	mov	r4, r1
 8004762:	b921      	cbnz	r1, 800476e <_realloc_r+0x16>
 8004764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004768:	4611      	mov	r1, r2
 800476a:	f7ff bc4b 	b.w	8004004 <_malloc_r>
 800476e:	b92a      	cbnz	r2, 800477c <_realloc_r+0x24>
 8004770:	f7ff fbdc 	bl	8003f2c <_free_r>
 8004774:	2400      	movs	r4, #0
 8004776:	4620      	mov	r0, r4
 8004778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800477c:	f000 f81a 	bl	80047b4 <_malloc_usable_size_r>
 8004780:	4285      	cmp	r5, r0
 8004782:	4606      	mov	r6, r0
 8004784:	d802      	bhi.n	800478c <_realloc_r+0x34>
 8004786:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800478a:	d8f4      	bhi.n	8004776 <_realloc_r+0x1e>
 800478c:	4629      	mov	r1, r5
 800478e:	4640      	mov	r0, r8
 8004790:	f7ff fc38 	bl	8004004 <_malloc_r>
 8004794:	4607      	mov	r7, r0
 8004796:	2800      	cmp	r0, #0
 8004798:	d0ec      	beq.n	8004774 <_realloc_r+0x1c>
 800479a:	42b5      	cmp	r5, r6
 800479c:	462a      	mov	r2, r5
 800479e:	4621      	mov	r1, r4
 80047a0:	bf28      	it	cs
 80047a2:	4632      	movcs	r2, r6
 80047a4:	f7ff ffca 	bl	800473c <memcpy>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4640      	mov	r0, r8
 80047ac:	f7ff fbbe 	bl	8003f2c <_free_r>
 80047b0:	463c      	mov	r4, r7
 80047b2:	e7e0      	b.n	8004776 <_realloc_r+0x1e>

080047b4 <_malloc_usable_size_r>:
 80047b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b8:	1f18      	subs	r0, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfbc      	itt	lt
 80047be:	580b      	ldrlt	r3, [r1, r0]
 80047c0:	18c0      	addlt	r0, r0, r3
 80047c2:	4770      	bx	lr

080047c4 <_init>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr

080047d0 <_fini>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr


TFT_touch_xpt2046_calib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e948  08008570  08008570  00009570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016eb8  08016eb8  000181e8  2**0
                  CONTENTS
  4 .ARM          00000008  08016eb8  08016eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016ec0  08016ec0  000181e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016ec0  08016ec0  00017ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016ec4  08016ec4  00017ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08016ec8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ae0  200001e8  080170b0  000181e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009cc8  080170b0  00018cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c79  00000000  00000000  00018218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002172  00000000  00000000  00021e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00024008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000724  00000000  00000000  000249b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171a1  00000000  00000000  000250d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c014  00000000  00000000  0003c275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000886b8  00000000  00000000  00048289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0941  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003978  00000000  00000000  000d0984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  000d42fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008558 	.word	0x08008558

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08008558 	.word	0x08008558

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <conv2d>:
  *          dimensions determined by the input size, filter size, and stride settings which
  * 		 is defined and can be redefined in "constants.h".
  ******************************************************************************
  */
void conv2d(volatile float *in_mat, volatile float *out_mat, float *filter_weight, float *filter_bias, int in_dim, int in_ch, int out_ch)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b090      	sub	sp, #64	@ 0x40
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
	int out_dim = afterKernel(in_dim);	// calculate out_mat dimentions
 8000f56:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000f58:	f000 fa30 	bl	80013bc <afterKernel>
 8000f5c:	61f8      	str	r0, [r7, #28]

	// Initialize output matrix to zero
    for (int i = 0; i < out_ch * out_dim * out_dim; i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f62:	e009      	b.n	8000f78 <conv2d+0x30>
    {
        out_mat[i] = 0.0f;
 8000f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < out_ch * out_dim * out_dim; i++)
 8000f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f74:	3301      	adds	r3, #1
 8000f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	fb02 f303 	mul.w	r3, r2, r3
 8000f80:	69fa      	ldr	r2, [r7, #28]
 8000f82:	fb02 f303 	mul.w	r3, r2, r3
 8000f86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dbeb      	blt.n	8000f64 <conv2d+0x1c>
    }

	// Perform convolution (damme bull$h!#)
	for (int i_out_ch = 0; i_out_ch < out_ch; i_out_ch++)	// iterate though output channels
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f90:	e08d      	b.n	80010ae <conv2d+0x166>
	{
		// START: iterate though out_mat to store value
		for (int m = 0; m < out_dim; m++)	// m for row
 8000f92:	2300      	movs	r3, #0
 8000f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f96:	e082      	b.n	800109e <conv2d+0x156>
		{
			for (int n = 0; n < out_dim; n++)	// n for col
 8000f98:	2300      	movs	r3, #0
 8000f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f9c:	e078      	b.n	8001090 <conv2d+0x148>
			{
				float sum = 0.0f;
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				for (int i_in_ch = 0; i_in_ch < in_ch; i_in_ch++)	// iterate though input channels
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fa8:	e04c      	b.n	8001044 <conv2d+0xfc>
				{
					// START: iterate though Kernel
					for (int p = 0; p < FILTER_SIZE; p++)			// for accessing row of filter
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fae:	e043      	b.n	8001038 <conv2d+0xf0>
					{
						for (int q = 0; q < FILTER_SIZE; q++) 		// for accessing col of filter
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
 8000fb4:	e03a      	b.n	800102c <conv2d+0xe4>
						{
							int in_idx = (i_in_ch * in_dim * in_dim) + ((m + p) * in_dim) + (n + q);
 8000fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000fc0:	fb03 f202 	mul.w	r2, r3, r2
 8000fc4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc8:	440b      	add	r3, r1
 8000fca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000fcc:	fb01 f303 	mul.w	r3, r1, r3
 8000fd0:	441a      	add	r2, r3
 8000fd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	440b      	add	r3, r1
 8000fd8:	4413      	add	r3, r2
 8000fda:	617b      	str	r3, [r7, #20]
							int filter_idx = (i_out_ch * in_ch * FILTER_SIZE * FILTER_SIZE) + 
 8000fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000fe0:	fb03 f202 	mul.w	r2, r3, r2
 8000fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fe6:	441a      	add	r2, r3
 8000fe8:	4613      	mov	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	1899      	adds	r1, r3, r2
                                             (i_in_ch * FILTER_SIZE * FILTER_SIZE) + 
                                             (p * FILTER_SIZE) + q;
 8000fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
                                             (i_in_ch * FILTER_SIZE * FILTER_SIZE) + 
 8000ff6:	440b      	add	r3, r1
							int filter_idx = (i_out_ch * in_ch * FILTER_SIZE * FILTER_SIZE) + 
 8000ff8:	6a3a      	ldr	r2, [r7, #32]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
							// sum += in_mat[i_ch_out][m+p][n+q] * filter_weight[i_out_ch][i_in_ch][p][q]
							sum += in_mat[in_idx] * filter_weight[filter_idx];
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	ed93 7a00 	vldr	s14, [r3]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800101e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001022:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
						for (int q = 0; q < FILTER_SIZE; q++) 		// for accessing col of filter
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	3301      	adds	r3, #1
 800102a:	623b      	str	r3, [r7, #32]
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	2b02      	cmp	r3, #2
 8001030:	ddc1      	ble.n	8000fb6 <conv2d+0x6e>
					for (int p = 0; p < FILTER_SIZE; p++)			// for accessing row of filter
 8001032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001034:	3301      	adds	r3, #1
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	2b02      	cmp	r3, #2
 800103c:	ddb8      	ble.n	8000fb0 <conv2d+0x68>
				for (int i_in_ch = 0; i_in_ch < in_ch; i_in_ch++)	// iterate though input channels
 800103e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001040:	3301      	adds	r3, #1
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001044:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001048:	429a      	cmp	r2, r3
 800104a:	dbae      	blt.n	8000faa <conv2d+0x62>
						}
					}
					// END: iterate though Kernel
				}
				int out_idx = (i_out_ch * out_dim * out_dim) + (m * out_dim) + n;
 800104c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	fb03 f202 	mul.w	r2, r3, r2
 800105a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800105c:	69f9      	ldr	r1, [r7, #28]
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4413      	add	r3, r2
 8001064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001066:	4413      	add	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
				out_mat[out_idx] = sum + filter_bias[i_out_ch];
 800106a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	4413      	add	r3, r2
 8001072:	ed93 7a00 	vldr	s14, [r3]
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	4413      	add	r3, r2
 800107e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001086:	edc3 7a00 	vstr	s15, [r3]
			for (int n = 0; n < out_dim; n++)	// n for col
 800108a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800108c:	3301      	adds	r3, #1
 800108e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	429a      	cmp	r2, r3
 8001096:	db82      	blt.n	8000f9e <conv2d+0x56>
		for (int m = 0; m < out_dim; m++)	// m for row
 8001098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109a:	3301      	adds	r3, #1
 800109c:	637b      	str	r3, [r7, #52]	@ 0x34
 800109e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	f6ff af78 	blt.w	8000f98 <conv2d+0x50>
	for (int i_out_ch = 0; i_out_ch < out_ch; i_out_ch++)	// iterate though output channels
 80010a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010aa:	3301      	adds	r3, #1
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80010ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010b2:	429a      	cmp	r2, r3
 80010b4:	f6ff af6d 	blt.w	8000f92 <conv2d+0x4a>
			}
		}
		// END: iterate though out_mat to store value
	}
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3740      	adds	r7, #64	@ 0x40
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <relu>:
/*	
	Function: relu
	Input:
	Output:
*/
void relu(volatile float *mat, int mat_size, int num_ch) {
 80010c2:	b480      	push	{r7}
 80010c4:	b089      	sub	sp, #36	@ 0x24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
    int total_elements = num_ch * mat_size * mat_size;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	fb03 f202 	mul.w	r2, r3, r2
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
    volatile float *ptr = mat;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < total_elements; i++) {
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	e011      	b.n	800110c <relu+0x4a>
        if (*ptr < 0) {
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	edd3 7a00 	vldr	s15, [r3]
 80010ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	d503      	bpl.n	8001100 <relu+0x3e>
            *ptr = 0;
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
        }
        ptr++;
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	3304      	adds	r3, #4
 8001104:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < total_elements; i++) {
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	3301      	adds	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbe9      	blt.n	80010e8 <relu+0x26>
    }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	@ 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <softmax>:
  * 			in the previous step.
  *          The result is stored in the output matrix.
  ******************************************************************************
  */
void softmax(volatile float *in_mat, volatile float *out_mat, int mat_size)
{
 8001122:	b5b0      	push	{r4, r5, r7, lr}
 8001124:	b088      	sub	sp, #32
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
	float total_exp = 0.0;
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
	// calculate sum of e**input_mat[i]
	for (int i = 0; i < mat_size; i++)
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	e023      	b.n	8001182 <softmax+0x60>
	{
		total_exp += exp(in_mat[i]);
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fa07 	bl	8000558 <__aeabi_f2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	ec43 2b10 	vmov	d0, r2, r3
 8001152:	f006 fff5 	bl	8008140 <exp>
 8001156:	ec55 4b10 	vmov	r4, r5, d0
 800115a:	69f8      	ldr	r0, [r7, #28]
 800115c:	f7ff f9fc 	bl	8000558 <__aeabi_f2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4620      	mov	r0, r4
 8001166:	4629      	mov	r1, r5
 8001168:	f7ff f898 	bl	800029c <__adddf3>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fd20 	bl	8000bb8 <__aeabi_d2f>
 8001178:	4603      	mov	r3, r0
 800117a:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < mat_size; i++)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	3301      	adds	r3, #1
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	dbd7      	blt.n	800113a <softmax+0x18>
	}
	// calculate softmax result
	for (int i = 0; i < mat_size; i++)
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e027      	b.n	80011e0 <softmax+0xbe>
	{
		out_mat[i] = exp(in_mat[i]) / total_exp;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9dc 	bl	8000558 <__aeabi_f2d>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	ec43 2b10 	vmov	d0, r2, r3
 80011a8:	f006 ffca 	bl	8008140 <exp>
 80011ac:	ec55 4b10 	vmov	r4, r5, d0
 80011b0:	69f8      	ldr	r0, [r7, #28]
 80011b2:	f7ff f9d1 	bl	8000558 <__aeabi_f2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4620      	mov	r0, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	f7ff fb4d 	bl	800085c <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	18d4      	adds	r4, r2, r3
 80011d2:	f7ff fcf1 	bl	8000bb8 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < mat_size; i++)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dbd3      	blt.n	8001190 <softmax+0x6e>
	}
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}

080011f2 <fullyconnected>:
  *          2. Adds the bias for the corresponding output element.
  *          The result is stored in the output matrix.
  ******************************************************************************
  */
void fullyconnected(volatile float *in_mat, volatile float *out_mat, float *weight, float *bias, int in_mat_size, int out_mat_size)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b087      	sub	sp, #28
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	603b      	str	r3, [r7, #0]
	// need to impliment matmul, but too reiji so ...
	// loop though the output mat to save cal result
	for (int i_out = 0; i_out < out_mat_size; i_out++)			// i_out for out_mat index
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e048      	b.n	8001298 <fullyconnected+0xa6>
	{
		out_mat[i_out] = 0;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	4413      	add	r3, r2
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
		// loop though the input mat to cal
		for (int i_in = 0; i_in < in_mat_size; i_in ++)		// j for input_mat index
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	e023      	b.n	8001262 <fullyconnected+0x70>
		{
			out_mat[i_out] += in_mat[i_in] * weight[i_out * in_mat_size + i_in];
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4413      	add	r3, r2
 8001222:	ed93 7a00 	vldr	s14, [r3]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	6a3a      	ldr	r2, [r7, #32]
 800122a:	fb03 f202 	mul.w	r2, r3, r2
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4413      	add	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	4413      	add	r3, r2
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	4413      	add	r3, r2
 8001254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001258:	edc3 7a00 	vstr	s15, [r3]
		for (int i_in = 0; i_in < in_mat_size; i_in ++)		// j for input_mat index
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	3301      	adds	r3, #1
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	429a      	cmp	r2, r3
 8001268:	dbd7      	blt.n	800121a <fullyconnected+0x28>
		}
		out_mat[i_out] += bias[i_out]; 						// adding bias
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	4413      	add	r3, r2
 8001272:	ed93 7a00 	vldr	s14, [r3]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	4413      	add	r3, r2
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	4413      	add	r3, r2
 800128a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128e:	edc3 7a00 	vstr	s15, [r3]
	for (int i_out = 0; i_out < out_mat_size; i_out++)			// i_out for out_mat index
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	429a      	cmp	r2, r3
 800129e:	dbb2      	blt.n	8001206 <fullyconnected+0x14>
	}
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <maxpooling2x2>:
	Function:
	Input:
	Output:
*/
void maxpooling2x2(volatile float *in_mat, volatile float *out_mat, uint8_t in_mat_size, uint8_t num_ch)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b091      	sub	sp, #68	@ 0x44
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	4611      	mov	r1, r2
 80012ba:	461a      	mov	r2, r3
 80012bc:	460b      	mov	r3, r1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	4613      	mov	r3, r2
 80012c2:	71bb      	strb	r3, [r7, #6]
	 // Calculate the size of the output matrix
	uint8_t out_mat_size = (int)(in_mat_size / 2);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	085b      	lsrs	r3, r3, #1
 80012c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	for (int i_ch = 0; i_ch < num_ch; i_ch++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012d0:	e069      	b.n	80013a6 <maxpooling2x2+0xf8>
	{
		// Iterate through the output matrix
		for (int i = 0; i < out_mat_size; i++) 
 80012d2:	2300      	movs	r3, #0
 80012d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012d6:	e05e      	b.n	8001396 <maxpooling2x2+0xe8>
		{
			for (int j = 0; j < out_mat_size; j++)
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	@ 0x34
 80012dc:	e053      	b.n	8001386 <maxpooling2x2+0xd8>
			{
				float max_value = -__FLT_MAX__; // Initialize to the smallest float value
 80012de:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 80012e2:	633b      	str	r3, [r7, #48]	@ 0x30
				
				// Iterate through the pooling window
				for (int m = 0; m < POOLING_SIZE; m++) 
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012e8:	e02f      	b.n	800134a <maxpooling2x2+0x9c>
				{
					for (int n = 0; n < POOLING_SIZE; n++) 
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012ee:	e026      	b.n	800133e <maxpooling2x2+0x90>
					{
						// Calculate the index of the current input element
						int row_idx = i * POOLING_SIZE + m;
 80012f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012f6:	4413      	add	r3, r2
 80012f8:	61fb      	str	r3, [r7, #28]
						int col_idx = j * POOLING_SIZE + n;
 80012fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001300:	4413      	add	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
						int input_idx = row_idx * in_mat_size + col_idx;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	fb02 f303 	mul.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4413      	add	r3, r2
 8001310:	617b      	str	r3, [r7, #20]

						// Update the maximum value
						if (in_mat[input_idx] > max_value) {
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4413      	add	r3, r2
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001322:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	d505      	bpl.n	8001338 <maxpooling2x2+0x8a>
							max_value = in_mat[input_idx];
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
					for (int n = 0; n < POOLING_SIZE; n++) 
 8001338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800133a:	3301      	adds	r3, #1
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800133e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001340:	2b01      	cmp	r3, #1
 8001342:	ddd5      	ble.n	80012f0 <maxpooling2x2+0x42>
				for (int m = 0; m < POOLING_SIZE; m++) 
 8001344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001346:	3301      	adds	r3, #1
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800134a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134c:	2b01      	cmp	r3, #1
 800134e:	ddcc      	ble.n	80012ea <maxpooling2x2+0x3c>
						}
					}
				}
				// Assign the maximum value to the output matrix
				// output_mat[i_ch][i][j] = max_value;
				int output_idx = i_ch * out_mat_size * out_mat_size + i * out_mat_size + j;
 8001350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001354:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800135e:	fb03 f202 	mul.w	r2, r3, r2
 8001362:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001366:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001368:	fb01 f303 	mul.w	r3, r1, r3
 800136c:	4413      	add	r3, r2
 800136e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001370:	4413      	add	r3, r2
 8001372:	623b      	str	r3, [r7, #32]
				out_mat[output_idx] = max_value;
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800137e:	601a      	str	r2, [r3, #0]
			for (int j = 0; j < out_mat_size; j++)
 8001380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001382:	3301      	adds	r3, #1
 8001384:	637b      	str	r3, [r7, #52]	@ 0x34
 8001386:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800138a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800138c:	429a      	cmp	r2, r3
 800138e:	dba6      	blt.n	80012de <maxpooling2x2+0x30>
		for (int i = 0; i < out_mat_size; i++) 
 8001390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001392:	3301      	adds	r3, #1
 8001394:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800139a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800139c:	429a      	cmp	r2, r3
 800139e:	db9b      	blt.n	80012d8 <maxpooling2x2+0x2a>
	for (int i_ch = 0; i_ch < num_ch; i_ch++)
 80013a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013a2:	3301      	adds	r3, #1
 80013a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013a6:	79bb      	ldrb	r3, [r7, #6]
 80013a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013aa:	429a      	cmp	r2, r3
 80013ac:	db91      	blt.n	80012d2 <maxpooling2x2+0x24>
			}
		}
	}
}
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
 80013b2:	3744      	adds	r7, #68	@ 0x44
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <afterKernel>:


// #define AFTER_KERNEL(N) (N - FILTER_SIZE + 1)	// P = 0; S = 1
int afterKernel(int n)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	return (n - FILTER_SIZE + 1);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b02      	subs	r3, #2
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <givePredict>:

void givePredict(volatile float *mat, volatile uint8_t *predicted_num, volatile float *predicted_num_confidence)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	@ 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	float max_confidence = mat[0];
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61fb      	str	r3, [r7, #28]
	int max_idx = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < OUTPUT_SIZE; i++)
 80013ea:	2301      	movs	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e017      	b.n	8001420 <givePredict+0x4c>
	{
		if (max_confidence < mat[i])
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001400:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	d507      	bpl.n	800141a <givePredict+0x46>
		{
			max_confidence = mat[i];
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61fb      	str	r3, [r7, #28]
			max_idx = i;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < OUTPUT_SIZE; i++)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b09      	cmp	r3, #9
 8001424:	dde4      	ble.n	80013f0 <givePredict+0x1c>
		}
	}
	*predicted_num = max_idx;
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	701a      	strb	r2, [r3, #0]
	*predicted_num_confidence = max_confidence;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	3724      	adds	r7, #36	@ 0x24
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <feedforward>:


/********************* Convolution BIGGGGboi functions ********************/
void feedforward(volatile float *in_mat, volatile uint8_t *predicted_num, volatile float *predicted_num_confidence)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af04      	add	r7, sp, #16
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
	// void relu(float *mat, int mat_size, int num_ch) 
	// void maxpooling2x2(float *in_mat, float *out_mat, uint8_t in_mat_size, uint8_t num_ch)


	// layer1 ================================================
	conv2d(in_mat, wtf_mat, (float *)conv1_filter_weight, (float *)conv1_filter_bias, INPUT_SIZE, NUM_01CH, CONV1_K_NUM);
 800144c:	2305      	movs	r3, #5
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	2301      	movs	r3, #1
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	231c      	movs	r3, #28
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4b35      	ldr	r3, [pc, #212]	@ (8001530 <feedforward+0xf0>)
 800145a:	4a36      	ldr	r2, [pc, #216]	@ (8001534 <feedforward+0xf4>)
 800145c:	4936      	ldr	r1, [pc, #216]	@ (8001538 <feedforward+0xf8>)
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f7ff fd72 	bl	8000f48 <conv2d>
	
	relu(wtf_mat, AFTER_CONV1_DIM, CONV1_K_NUM);
 8001464:	2205      	movs	r2, #5
 8001466:	211a      	movs	r1, #26
 8001468:	4833      	ldr	r0, [pc, #204]	@ (8001538 <feedforward+0xf8>)
 800146a:	f7ff fe2a 	bl	80010c2 <relu>

	// layer 2 ================================================
	conv2d(wtf_mat, &wtf_mat[ARRAY_SEPARATOR01], (float *)conv2_filter_weight, (float *)conv2_filter_bias, AFTER_CONV1_DIM, CONV1_K_NUM, CONV2_K_NUM);
 800146e:	230a      	movs	r3, #10
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2305      	movs	r3, #5
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	231a      	movs	r3, #26
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	4b30      	ldr	r3, [pc, #192]	@ (800153c <feedforward+0xfc>)
 800147c:	4a30      	ldr	r2, [pc, #192]	@ (8001540 <feedforward+0x100>)
 800147e:	4931      	ldr	r1, [pc, #196]	@ (8001544 <feedforward+0x104>)
 8001480:	482d      	ldr	r0, [pc, #180]	@ (8001538 <feedforward+0xf8>)
 8001482:	f7ff fd61 	bl	8000f48 <conv2d>
	
	relu(&wtf_mat[ARRAY_SEPARATOR01], AFTER_CONV2_DIM, CONV2_K_NUM);
 8001486:	220a      	movs	r2, #10
 8001488:	2118      	movs	r1, #24
 800148a:	482e      	ldr	r0, [pc, #184]	@ (8001544 <feedforward+0x104>)
 800148c:	f7ff fe19 	bl	80010c2 <relu>
	
	maxpooling2x2(&wtf_mat[ARRAY_SEPARATOR01], wtf_mat, AFTER_CONV2_DIM, CONV2_K_NUM);
 8001490:	230a      	movs	r3, #10
 8001492:	2218      	movs	r2, #24
 8001494:	4928      	ldr	r1, [pc, #160]	@ (8001538 <feedforward+0xf8>)
 8001496:	482b      	ldr	r0, [pc, #172]	@ (8001544 <feedforward+0x104>)
 8001498:	f7ff ff09 	bl	80012ae <maxpooling2x2>

	// layer 3 ================================================
	conv2d(wtf_mat, &wtf_mat[ARRAY_SEPARATOR02], (float *)conv3_filter_weight, (float *)conv3_filter_bias, AFTER_MAXP1_DIM, NUM_10CH, CONV3_K_NUM);
 800149c:	230c      	movs	r3, #12
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	230a      	movs	r3, #10
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	230c      	movs	r3, #12
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	4b27      	ldr	r3, [pc, #156]	@ (8001548 <feedforward+0x108>)
 80014aa:	4a28      	ldr	r2, [pc, #160]	@ (800154c <feedforward+0x10c>)
 80014ac:	4928      	ldr	r1, [pc, #160]	@ (8001550 <feedforward+0x110>)
 80014ae:	4822      	ldr	r0, [pc, #136]	@ (8001538 <feedforward+0xf8>)
 80014b0:	f7ff fd4a 	bl	8000f48 <conv2d>
	relu(&wtf_mat[ARRAY_SEPARATOR02], AFTER_CONV3_DIM, CONV3_K_NUM);	
 80014b4:	220c      	movs	r2, #12
 80014b6:	210a      	movs	r1, #10
 80014b8:	4825      	ldr	r0, [pc, #148]	@ (8001550 <feedforward+0x110>)
 80014ba:	f7ff fe02 	bl	80010c2 <relu>

	// layer 4 ================================================
	conv2d(&wtf_mat[ARRAY_SEPARATOR02], &wtf_mat[ARRAY_SEPARATOR03], (float *)conv4_filter_weight, (float *)conv4_filter_bias, AFTER_CONV3_DIM, NUM_12CH, NUM_15CH);
 80014be:	230f      	movs	r3, #15
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	230c      	movs	r3, #12
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	230a      	movs	r3, #10
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <feedforward+0x114>)
 80014cc:	4a22      	ldr	r2, [pc, #136]	@ (8001558 <feedforward+0x118>)
 80014ce:	4923      	ldr	r1, [pc, #140]	@ (800155c <feedforward+0x11c>)
 80014d0:	481f      	ldr	r0, [pc, #124]	@ (8001550 <feedforward+0x110>)
 80014d2:	f7ff fd39 	bl	8000f48 <conv2d>
	relu(&wtf_mat[ARRAY_SEPARATOR03], AFTER_CONV4_DIM, NUM_15CH);
 80014d6:	220f      	movs	r2, #15
 80014d8:	2108      	movs	r1, #8
 80014da:	4820      	ldr	r0, [pc, #128]	@ (800155c <feedforward+0x11c>)
 80014dc:	f7ff fdf1 	bl	80010c2 <relu>
	maxpooling2x2(&wtf_mat[ARRAY_SEPARATOR03], &wtf_mat[ARRAY_SEPARATOR04], AFTER_CONV4_DIM, CONV4_K_NUM);
 80014e0:	230f      	movs	r3, #15
 80014e2:	2208      	movs	r2, #8
 80014e4:	491e      	ldr	r1, [pc, #120]	@ (8001560 <feedforward+0x120>)
 80014e6:	481d      	ldr	r0, [pc, #116]	@ (800155c <feedforward+0x11c>)
 80014e8:	f7ff fee1 	bl	80012ae <maxpooling2x2>
	// wtf_mat[ARRAY_SEPARATOR04] is already pentan -> no need flatten

	// Fullyconnected 1 =======================================
	fullyconnected(&wtf_mat[ARRAY_SEPARATOR04], &wtf_mat[ARRAY_SEPARATOR05], (float *)lin1_weight, (float *)lin1_bias, FC01NODENUM, FC02NODENUM);	
 80014ec:	2328      	movs	r3, #40	@ 0x28
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	23f0      	movs	r3, #240	@ 0xf0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <feedforward+0x124>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <feedforward+0x128>)
 80014f8:	491c      	ldr	r1, [pc, #112]	@ (800156c <feedforward+0x12c>)
 80014fa:	4819      	ldr	r0, [pc, #100]	@ (8001560 <feedforward+0x120>)
 80014fc:	f7ff fe79 	bl	80011f2 <fullyconnected>

	// Fullyconnected 2 =======================================
	fullyconnected(&wtf_mat[ARRAY_SEPARATOR05], &wtf_mat[ARRAY_SEPARATOR06], (float *)lin2_weight, (float *)lin2_bias, FC02NODENUM, OUTPUT_SIZE);	
 8001500:	230a      	movs	r3, #10
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	2328      	movs	r3, #40	@ 0x28
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <feedforward+0x130>)
 800150a:	4a1a      	ldr	r2, [pc, #104]	@ (8001574 <feedforward+0x134>)
 800150c:	491a      	ldr	r1, [pc, #104]	@ (8001578 <feedforward+0x138>)
 800150e:	4817      	ldr	r0, [pc, #92]	@ (800156c <feedforward+0x12c>)
 8001510:	f7ff fe6f 	bl	80011f2 <fullyconnected>

	// Soft_expensive ================================================
	softmax(&wtf_mat[ARRAY_SEPARATOR06], &wtf_mat[ARRAY_SEPARATOR07], OUTPUT_SIZE);
 8001514:	220a      	movs	r2, #10
 8001516:	4919      	ldr	r1, [pc, #100]	@ (800157c <feedforward+0x13c>)
 8001518:	4817      	ldr	r0, [pc, #92]	@ (8001578 <feedforward+0x138>)
 800151a:	f7ff fe02 	bl	8001122 <softmax>

	// Forgot the give predict function
	givePredict(&wtf_mat[ARRAY_SEPARATOR07], predicted_num, predicted_num_confidence);
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	4816      	ldr	r0, [pc, #88]	@ (800157c <feedforward+0x13c>)
 8001524:	f7ff ff56 	bl	80013d4 <givePredict>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	0800874c 	.word	0x0800874c
 8001534:	08008698 	.word	0x08008698
 8001538:	20000204 	.word	0x20000204
 800153c:	08008e68 	.word	0x08008e68
 8001540:	08008760 	.word	0x08008760
 8001544:	200036d4 	.word	0x200036d4
 8001548:	08009f70 	.word	0x08009f70
 800154c:	08008e90 	.word	0x08008e90
 8001550:	20001884 	.word	0x20001884
 8001554:	0800b8f0 	.word	0x0800b8f0
 8001558:	08009fa0 	.word	0x08009fa0
 800155c:	20002b44 	.word	0x20002b44
 8001560:	20003a44 	.word	0x20003a44
 8001564:	08014f2c 	.word	0x08014f2c
 8001568:	0800b92c 	.word	0x0800b92c
 800156c:	20003e04 	.word	0x20003e04
 8001570:	0801560c 	.word	0x0801560c
 8001574:	08014fcc 	.word	0x08014fcc
 8001578:	20003ea4 	.word	0x20003ea4
 800157c:	20003ecc 	.word	0x20003ecc

08001580 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800158a:	2200      	movs	r2, #0
 800158c:	2110      	movs	r1, #16
 800158e:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <ST7789_WriteCommand+0x40>)
 8001590:	f002 fda8 	bl	80040e4 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001594:	2200      	movs	r2, #0
 8001596:	2102      	movs	r1, #2
 8001598:	4809      	ldr	r0, [pc, #36]	@ (80015c0 <ST7789_WriteCommand+0x40>)
 800159a:	f002 fda3 	bl	80040e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800159e:	1df9      	adds	r1, r7, #7
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
 80015a4:	2201      	movs	r2, #1
 80015a6:	4807      	ldr	r0, [pc, #28]	@ (80015c4 <ST7789_WriteCommand+0x44>)
 80015a8:	f003 fa63 	bl	8004a72 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80015ac:	2201      	movs	r2, #1
 80015ae:	2110      	movs	r1, #16
 80015b0:	4803      	ldr	r0, [pc, #12]	@ (80015c0 <ST7789_WriteCommand+0x40>)
 80015b2:	f002 fd97 	bl	80040e4 <HAL_GPIO_WritePin>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40020000 	.word	0x40020000
 80015c4:	20009a34 	.word	0x20009a34

080015c8 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80015d2:	2200      	movs	r2, #0
 80015d4:	2110      	movs	r1, #16
 80015d6:	4820      	ldr	r0, [pc, #128]	@ (8001658 <ST7789_WriteData+0x90>)
 80015d8:	f002 fd84 	bl	80040e4 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80015dc:	2201      	movs	r2, #1
 80015de:	2102      	movs	r1, #2
 80015e0:	481d      	ldr	r0, [pc, #116]	@ (8001658 <ST7789_WriteData+0x90>)
 80015e2:	f002 fd7f 	bl	80040e4 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80015e6:	e02a      	b.n	800163e <ST7789_WriteData+0x76>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ee:	4293      	cmp	r3, r2
 80015f0:	bf28      	it	cs
 80015f2:	4613      	movcs	r3, r2
 80015f4:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <ST7789_WriteData+0x94>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	4293      	cmp	r3, r2
 8001600:	d30e      	bcc.n	8001620 <ST7789_WriteData+0x58>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8001602:	89fb      	ldrh	r3, [r7, #14]
 8001604:	461a      	mov	r2, r3
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4815      	ldr	r0, [pc, #84]	@ (8001660 <ST7789_WriteData+0x98>)
 800160a:	f003 fd1f 	bl	800504c <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 800160e:	bf00      	nop
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <ST7789_WriteData+0x98>)
 8001612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001614:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d1f8      	bne.n	8001610 <ST7789_WriteData+0x48>
 800161e:	e006      	b.n	800162e <ST7789_WriteData+0x66>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001620:	89fa      	ldrh	r2, [r7, #14]
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	480d      	ldr	r0, [pc, #52]	@ (8001660 <ST7789_WriteData+0x98>)
 800162a:	f003 fa22 	bl	8004a72 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1d1      	bne.n	80015e8 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 8001644:	2201      	movs	r2, #1
 8001646:	2110      	movs	r1, #16
 8001648:	4803      	ldr	r0, [pc, #12]	@ (8001658 <ST7789_WriteData+0x90>)
 800164a:	f002 fd4b 	bl	80040e4 <HAL_GPIO_WritePin>
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40020000 	.word	0x40020000
 800165c:	20000010 	.word	0x20000010
 8001660:	20009a34 	.word	0x20009a34

08001664 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800166e:	2200      	movs	r2, #0
 8001670:	2110      	movs	r1, #16
 8001672:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <ST7789_WriteSmallData+0x40>)
 8001674:	f002 fd36 	bl	80040e4 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001678:	2201      	movs	r2, #1
 800167a:	2102      	movs	r1, #2
 800167c:	4809      	ldr	r0, [pc, #36]	@ (80016a4 <ST7789_WriteSmallData+0x40>)
 800167e:	f002 fd31 	bl	80040e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001682:	1df9      	adds	r1, r7, #7
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	2201      	movs	r2, #1
 800168a:	4807      	ldr	r0, [pc, #28]	@ (80016a8 <ST7789_WriteSmallData+0x44>)
 800168c:	f003 f9f1 	bl	8004a72 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001690:	2201      	movs	r2, #1
 8001692:	2110      	movs	r1, #16
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <ST7789_WriteSmallData+0x40>)
 8001696:	f002 fd25 	bl	80040e4 <HAL_GPIO_WritePin>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40020000 	.word	0x40020000
 80016a8:	20009a34 	.word	0x20009a34

080016ac <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80016b6:	2036      	movs	r0, #54	@ 0x36
 80016b8:	f7ff ff62 	bl	8001580 <ST7789_WriteCommand>
	switch (m) {
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d81a      	bhi.n	80016f8 <ST7789_SetRotation+0x4c>
 80016c2:	a201      	add	r2, pc, #4	@ (adr r2, 80016c8 <ST7789_SetRotation+0x1c>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016e1 	.word	0x080016e1
 80016d0:	080016e9 	.word	0x080016e9
 80016d4:	080016f1 	.word	0x080016f1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80016d8:	20c0      	movs	r0, #192	@ 0xc0
 80016da:	f7ff ffc3 	bl	8001664 <ST7789_WriteSmallData>
		break;
 80016de:	e00c      	b.n	80016fa <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80016e0:	20a0      	movs	r0, #160	@ 0xa0
 80016e2:	f7ff ffbf 	bl	8001664 <ST7789_WriteSmallData>
		break;
 80016e6:	e008      	b.n	80016fa <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff ffbb 	bl	8001664 <ST7789_WriteSmallData>
		break;
 80016ee:	e004      	b.n	80016fa <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80016f0:	2060      	movs	r0, #96	@ 0x60
 80016f2:	f7ff ffb7 	bl	8001664 <ST7789_WriteSmallData>
		break;
 80016f6:	e000      	b.n	80016fa <ST7789_SetRotation+0x4e>
	default:
		break;
 80016f8:	bf00      	nop
	}
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop

08001704 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	4604      	mov	r4, r0
 800170c:	4608      	mov	r0, r1
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4623      	mov	r3, r4
 8001714:	80fb      	strh	r3, [r7, #6]
 8001716:	4603      	mov	r3, r0
 8001718:	80bb      	strh	r3, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	807b      	strh	r3, [r7, #2]
 800171e:	4613      	mov	r3, r2
 8001720:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001722:	2200      	movs	r2, #0
 8001724:	2110      	movs	r1, #16
 8001726:	4824      	ldr	r0, [pc, #144]	@ (80017b8 <ST7789_SetAddressWindow+0xb4>)
 8001728:	f002 fcdc 	bl	80040e4 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	82fb      	strh	r3, [r7, #22]
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001734:	88bb      	ldrh	r3, [r7, #4]
 8001736:	827b      	strh	r3, [r7, #18]
 8001738:	883b      	ldrh	r3, [r7, #0]
 800173a:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800173c:	202a      	movs	r0, #42	@ 0x2a
 800173e:	f7ff ff1f 	bl	8001580 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001742:	8afb      	ldrh	r3, [r7, #22]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	b29b      	uxth	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	733b      	strb	r3, [r7, #12]
 800174c:	8afb      	ldrh	r3, [r7, #22]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	737b      	strb	r3, [r7, #13]
 8001752:	8abb      	ldrh	r3, [r7, #20]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	b29b      	uxth	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	73bb      	strb	r3, [r7, #14]
 800175c:	8abb      	ldrh	r3, [r7, #20]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2104      	movs	r1, #4
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff2d 	bl	80015c8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800176e:	202b      	movs	r0, #43	@ 0x2b
 8001770:	f7ff ff06 	bl	8001580 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001774:	8a7b      	ldrh	r3, [r7, #18]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	b29b      	uxth	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	723b      	strb	r3, [r7, #8]
 800177e:	8a7b      	ldrh	r3, [r7, #18]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	727b      	strb	r3, [r7, #9]
 8001784:	8a3b      	ldrh	r3, [r7, #16]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	b29b      	uxth	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	72bb      	strb	r3, [r7, #10]
 800178e:	8a3b      	ldrh	r3, [r7, #16]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	2104      	movs	r1, #4
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff14 	bl	80015c8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80017a0:	202c      	movs	r0, #44	@ 0x2c
 80017a2:	f7ff feed 	bl	8001580 <ST7789_WriteCommand>
	ST7789_UnSelect();
 80017a6:	2201      	movs	r2, #1
 80017a8:	2110      	movs	r1, #16
 80017aa:	4803      	ldr	r0, [pc, #12]	@ (80017b8 <ST7789_SetAddressWindow+0xb4>)
 80017ac:	f002 fc9a 	bl	80040e4 <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	40020000 	.word	0x40020000

080017bc <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b08b      	sub	sp, #44	@ 0x2c
 80017c0:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 80017c2:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80017c6:	2100      	movs	r1, #0
 80017c8:	484a      	ldr	r0, [pc, #296]	@ (80018f4 <ST7789_Init+0x138>)
 80017ca:	f004 fc7f 	bl	80060cc <memset>
	#endif
	HAL_Delay(10);
 80017ce:	200a      	movs	r0, #10
 80017d0:	f001 fe46 	bl	8003460 <HAL_Delay>
    ST7789_RST_Clr();
 80017d4:	2200      	movs	r2, #0
 80017d6:	2108      	movs	r1, #8
 80017d8:	4847      	ldr	r0, [pc, #284]	@ (80018f8 <ST7789_Init+0x13c>)
 80017da:	f002 fc83 	bl	80040e4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80017de:	200a      	movs	r0, #10
 80017e0:	f001 fe3e 	bl	8003460 <HAL_Delay>
    ST7789_RST_Set();
 80017e4:	2201      	movs	r2, #1
 80017e6:	2108      	movs	r1, #8
 80017e8:	4843      	ldr	r0, [pc, #268]	@ (80018f8 <ST7789_Init+0x13c>)
 80017ea:	f002 fc7b 	bl	80040e4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80017ee:	2014      	movs	r0, #20
 80017f0:	f001 fe36 	bl	8003460 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80017f4:	203a      	movs	r0, #58	@ 0x3a
 80017f6:	f7ff fec3 	bl	8001580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80017fa:	2055      	movs	r0, #85	@ 0x55
 80017fc:	f7ff ff32 	bl	8001664 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001800:	20b2      	movs	r0, #178	@ 0xb2
 8001802:	f7ff febd 	bl	8001580 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001806:	4a3d      	ldr	r2, [pc, #244]	@ (80018fc <ST7789_Init+0x140>)
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001810:	6018      	str	r0, [r3, #0]
 8001812:	3304      	adds	r3, #4
 8001814:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	2105      	movs	r1, #5
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fed3 	bl	80015c8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff ff42 	bl	80016ac <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001828:	20b7      	movs	r0, #183	@ 0xb7
 800182a:	f7ff fea9 	bl	8001580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800182e:	2035      	movs	r0, #53	@ 0x35
 8001830:	f7ff ff18 	bl	8001664 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001834:	20bb      	movs	r0, #187	@ 0xbb
 8001836:	f7ff fea3 	bl	8001580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800183a:	2019      	movs	r0, #25
 800183c:	f7ff ff12 	bl	8001664 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001840:	20c0      	movs	r0, #192	@ 0xc0
 8001842:	f7ff fe9d 	bl	8001580 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001846:	202c      	movs	r0, #44	@ 0x2c
 8001848:	f7ff ff0c 	bl	8001664 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 800184c:	20c2      	movs	r0, #194	@ 0xc2
 800184e:	f7ff fe97 	bl	8001580 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001852:	2001      	movs	r0, #1
 8001854:	f7ff ff06 	bl	8001664 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001858:	20c3      	movs	r0, #195	@ 0xc3
 800185a:	f7ff fe91 	bl	8001580 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800185e:	2012      	movs	r0, #18
 8001860:	f7ff ff00 	bl	8001664 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001864:	20c4      	movs	r0, #196	@ 0xc4
 8001866:	f7ff fe8b 	bl	8001580 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800186a:	2020      	movs	r0, #32
 800186c:	f7ff fefa 	bl	8001664 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001870:	20c6      	movs	r0, #198	@ 0xc6
 8001872:	f7ff fe85 	bl	8001580 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001876:	200f      	movs	r0, #15
 8001878:	f7ff fef4 	bl	8001664 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 800187c:	20d0      	movs	r0, #208	@ 0xd0
 800187e:	f7ff fe7f 	bl	8001580 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001882:	20a4      	movs	r0, #164	@ 0xa4
 8001884:	f7ff feee 	bl	8001664 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001888:	20a1      	movs	r0, #161	@ 0xa1
 800188a:	f7ff feeb 	bl	8001664 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800188e:	20e0      	movs	r0, #224	@ 0xe0
 8001890:	f7ff fe76 	bl	8001580 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001894:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <ST7789_Init+0x144>)
 8001896:	f107 0410 	add.w	r4, r7, #16
 800189a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800189c:	c407      	stmia	r4!, {r0, r1, r2}
 800189e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	210e      	movs	r1, #14
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fe8e 	bl	80015c8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80018ac:	20e1      	movs	r0, #225	@ 0xe1
 80018ae:	f7ff fe67 	bl	8001580 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <ST7789_Init+0x148>)
 80018b4:	463c      	mov	r4, r7
 80018b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b8:	c407      	stmia	r4!, {r0, r1, r2}
 80018ba:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80018bc:	463b      	mov	r3, r7
 80018be:	210e      	movs	r1, #14
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fe81 	bl	80015c8 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 80018c6:	2021      	movs	r0, #33	@ 0x21
 80018c8:	f7ff fe5a 	bl	8001580 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80018cc:	2011      	movs	r0, #17
 80018ce:	f7ff fe57 	bl	8001580 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80018d2:	2013      	movs	r0, #19
 80018d4:	f7ff fe54 	bl	8001580 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 80018d8:	2029      	movs	r0, #41	@ 0x29
 80018da:	f7ff fe51 	bl	8001580 <ST7789_WriteCommand>

	HAL_Delay(50);
 80018de:	2032      	movs	r0, #50	@ 0x32
 80018e0:	f001 fdbe 	bl	8003460 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 80018e4:	2000      	movs	r0, #0
 80018e6:	f000 f80f 	bl	8001908 <ST7789_Fill_Color>
}
 80018ea:	bf00      	nop
 80018ec:	372c      	adds	r7, #44	@ 0x2c
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200090d4 	.word	0x200090d4
 80018f8:	40020000 	.word	0x40020000
 80018fc:	08008570 	.word	0x08008570
 8001900:	08008578 	.word	0x08008578
 8001904:	08008588 	.word	0x08008588

08001908 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001912:	f240 133f 	movw	r3, #319	@ 0x13f
 8001916:	22ef      	movs	r2, #239	@ 0xef
 8001918:	2100      	movs	r1, #0
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff fef2 	bl	8001704 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001920:	2200      	movs	r2, #0
 8001922:	2110      	movs	r1, #16
 8001924:	4810      	ldr	r0, [pc, #64]	@ (8001968 <ST7789_Fill_Color+0x60>)
 8001926:	f002 fbdd 	bl	80040e4 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800192a:	2300      	movs	r3, #0
 800192c:	81fb      	strh	r3, [r7, #14]
 800192e:	e00e      	b.n	800194e <ST7789_Fill_Color+0x46>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001936:	4619      	mov	r1, r3
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <ST7789_Fill_Color+0x64>)
 800193a:	f004 fbc7 	bl	80060cc <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 800193e:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8001942:	480a      	ldr	r0, [pc, #40]	@ (800196c <ST7789_Fill_Color+0x64>)
 8001944:	f7ff fe40 	bl	80015c8 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001948:	89fb      	ldrh	r3, [r7, #14]
 800194a:	3301      	adds	r3, #1
 800194c:	81fb      	strh	r3, [r7, #14]
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	2b3f      	cmp	r3, #63	@ 0x3f
 8001952:	d9ed      	bls.n	8001930 <ST7789_Fill_Color+0x28>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001954:	2201      	movs	r2, #1
 8001956:	2110      	movs	r1, #16
 8001958:	4803      	ldr	r0, [pc, #12]	@ (8001968 <ST7789_Fill_Color+0x60>)
 800195a:	f002 fbc3 	bl	80040e4 <HAL_GPIO_WritePin>
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40020000 	.word	0x40020000
 800196c:	200090d4 	.word	0x200090d4

08001970 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
 800197a:	460b      	mov	r3, r1
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	2bef      	cmp	r3, #239	@ 0xef
 8001986:	d822      	bhi.n	80019ce <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8001988:	88bb      	ldrh	r3, [r7, #4]
 800198a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800198e:	d21e      	bcs.n	80019ce <ST7789_DrawPixel+0x5e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	88fa      	ldrh	r2, [r7, #6]
 8001994:	88b9      	ldrh	r1, [r7, #4]
 8001996:	88f8      	ldrh	r0, [r7, #6]
 8001998:	f7ff feb4 	bl	8001704 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	733b      	strb	r3, [r7, #12]
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80019ac:	2200      	movs	r2, #0
 80019ae:	2110      	movs	r1, #16
 80019b0:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <ST7789_DrawPixel+0x68>)
 80019b2:	f002 fb97 	bl	80040e4 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	2102      	movs	r1, #2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fe03 	bl	80015c8 <ST7789_WriteData>
	ST7789_UnSelect();
 80019c2:	2201      	movs	r2, #1
 80019c4:	2110      	movs	r1, #16
 80019c6:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <ST7789_DrawPixel+0x68>)
 80019c8:	f002 fb8c 	bl	80040e4 <HAL_GPIO_WritePin>
 80019cc:	e000      	b.n	80019d0 <ST7789_DrawPixel+0x60>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80019ce:	bf00      	nop
}
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020000 	.word	0x40020000

080019dc <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4604      	mov	r4, r0
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4623      	mov	r3, r4
 80019ec:	80fb      	strh	r3, [r7, #6]
 80019ee:	4603      	mov	r3, r0
 80019f0:	80bb      	strh	r3, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	807b      	strh	r3, [r7, #2]
 80019f6:	4613      	mov	r3, r2
 80019f8:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 80019fa:	883a      	ldrh	r2, [r7, #0]
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a04:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a08:	8879      	ldrh	r1, [r7, #2]
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	1acb      	subs	r3, r1, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bfb8      	it	lt
 8001a12:	425b      	neglt	r3, r3
 8001a14:	429a      	cmp	r2, r3
 8001a16:	bfcc      	ite	gt
 8001a18:	2301      	movgt	r3, #1
 8001a1a:	2300      	movle	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8001a20:	8a7b      	ldrh	r3, [r7, #18]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <ST7789_DrawLine+0x62>
		swap = x0;
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8001a2a:	88bb      	ldrh	r3, [r7, #4]
 8001a2c:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8001a2e:	8a3b      	ldrh	r3, [r7, #16]
 8001a30:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8001a36:	883b      	ldrh	r3, [r7, #0]
 8001a38:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8001a3a:	8a3b      	ldrh	r3, [r7, #16]
 8001a3c:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d90b      	bls.n	8001a5e <ST7789_DrawLine+0x82>
		swap = x0;
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8001a4e:	8a3b      	ldrh	r3, [r7, #16]
 8001a50:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8001a52:	88bb      	ldrh	r3, [r7, #4]
 8001a54:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8001a56:	883b      	ldrh	r3, [r7, #0]
 8001a58:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8001a5a:	8a3b      	ldrh	r3, [r7, #16]
 8001a5c:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8001a68:	883a      	ldrh	r2, [r7, #0]
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bfb8      	it	lt
 8001a72:	425b      	neglt	r3, r3
 8001a74:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8001a76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a7a:	0fda      	lsrs	r2, r3, #31
 8001a7c:	4413      	add	r3, r2
 8001a7e:	105b      	asrs	r3, r3, #1
 8001a80:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 8001a82:	88ba      	ldrh	r2, [r7, #4]
 8001a84:	883b      	ldrh	r3, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d202      	bcs.n	8001a90 <ST7789_DrawLine+0xb4>
        ystep = 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	82bb      	strh	r3, [r7, #20]
 8001a8e:	e028      	b.n	8001ae2 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 8001a90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a94:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8001a96:	e024      	b.n	8001ae2 <ST7789_DrawLine+0x106>
        if (steep) {
 8001a98:	8a7b      	ldrh	r3, [r7, #18]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 8001a9e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001aa0:	88f9      	ldrh	r1, [r7, #6]
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff63 	bl	8001970 <ST7789_DrawPixel>
 8001aaa:	e005      	b.n	8001ab8 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8001aac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001aae:	88b9      	ldrh	r1, [r7, #4]
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff5c 	bl	8001970 <ST7789_DrawPixel>
        }
        err -= dy;
 8001ab8:	8afa      	ldrh	r2, [r7, #22]
 8001aba:	89bb      	ldrh	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8001ac2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	da08      	bge.n	8001adc <ST7789_DrawLine+0x100>
            y0 += ystep;
 8001aca:	8aba      	ldrh	r2, [r7, #20]
 8001acc:	88bb      	ldrh	r3, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001ad2:	8afa      	ldrh	r2, [r7, #22]
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	80fb      	strh	r3, [r7, #6]
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d9d6      	bls.n	8001a98 <ST7789_DrawLine+0xbc>
        }
    }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}

08001af4 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	4604      	mov	r4, r0
 8001afc:	4608      	mov	r0, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4623      	mov	r3, r4
 8001b04:	80fb      	strh	r3, [r7, #6]
 8001b06:	4603      	mov	r3, r0
 8001b08:	80bb      	strh	r3, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	807b      	strh	r3, [r7, #2]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001b12:	2200      	movs	r2, #0
 8001b14:	2110      	movs	r1, #16
 8001b16:	4818      	ldr	r0, [pc, #96]	@ (8001b78 <ST7789_DrawRectangle+0x84>)
 8001b18:	f002 fae4 	bl	80040e4 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8001b1c:	88bc      	ldrh	r4, [r7, #4]
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	88b9      	ldrh	r1, [r7, #4]
 8001b22:	88f8      	ldrh	r0, [r7, #6]
 8001b24:	8b3b      	ldrh	r3, [r7, #24]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4623      	mov	r3, r4
 8001b2a:	f7ff ff57 	bl	80019dc <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 8001b2e:	883c      	ldrh	r4, [r7, #0]
 8001b30:	88fa      	ldrh	r2, [r7, #6]
 8001b32:	88b9      	ldrh	r1, [r7, #4]
 8001b34:	88f8      	ldrh	r0, [r7, #6]
 8001b36:	8b3b      	ldrh	r3, [r7, #24]
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	f7ff ff4e 	bl	80019dc <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 8001b40:	883c      	ldrh	r4, [r7, #0]
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	8839      	ldrh	r1, [r7, #0]
 8001b46:	88f8      	ldrh	r0, [r7, #6]
 8001b48:	8b3b      	ldrh	r3, [r7, #24]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	f7ff ff45 	bl	80019dc <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 8001b52:	883c      	ldrh	r4, [r7, #0]
 8001b54:	887a      	ldrh	r2, [r7, #2]
 8001b56:	88b9      	ldrh	r1, [r7, #4]
 8001b58:	8878      	ldrh	r0, [r7, #2]
 8001b5a:	8b3b      	ldrh	r3, [r7, #24]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4623      	mov	r3, r4
 8001b60:	f7ff ff3c 	bl	80019dc <ST7789_DrawLine>
	ST7789_UnSelect();
 8001b64:	2201      	movs	r2, #1
 8001b66:	2110      	movs	r1, #16
 8001b68:	4803      	ldr	r0, [pc, #12]	@ (8001b78 <ST7789_DrawRectangle+0x84>)
 8001b6a:	f002 fabb 	bl	80040e4 <HAL_GPIO_WritePin>
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd90      	pop	{r4, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40020000 	.word	0x40020000

08001b7c <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b088      	sub	sp, #32
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	80bb      	strh	r3, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001b92:	2200      	movs	r2, #0
 8001b94:	2110      	movs	r1, #16
 8001b96:	4837      	ldr	r0, [pc, #220]	@ (8001c74 <ST7789_WriteChar+0xf8>)
 8001b98:	f002 faa4 	bl	80040e4 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001b9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	88bb      	ldrh	r3, [r7, #4]
 8001bb4:	440b      	add	r3, r1
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	88b9      	ldrh	r1, [r7, #4]
 8001bbe:	88f8      	ldrh	r0, [r7, #6]
 8001bc0:	f7ff fda0 	bl	8001704 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	e041      	b.n	8001c4e <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8001bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	3b20      	subs	r3, #32
 8001bd0:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	440b      	add	r3, r1
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	e027      	b.n	8001c3c <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00e      	beq.n	8001c1a <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001bfc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	743b      	strb	r3, [r7, #16]
 8001c06:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	2102      	movs	r1, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fcd8 	bl	80015c8 <ST7789_WriteData>
 8001c18:	e00d      	b.n	8001c36 <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001c1a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	733b      	strb	r3, [r7, #12]
 8001c24:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2102      	movs	r1, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fcc9 	bl	80015c8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c40:	461a      	mov	r2, r3
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d3d1      	bcc.n	8001bec <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001c52:	461a      	mov	r2, r3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d3b7      	bcc.n	8001bca <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2110      	movs	r1, #16
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <ST7789_WriteChar+0xf8>)
 8001c60:	f002 fa40 	bl	80040e4 <HAL_GPIO_WritePin>
}
 8001c64:	bf00      	nop
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c6e:	b002      	add	sp, #8
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40020000 	.word	0x40020000

08001c78 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001c78:	b082      	sub	sp, #8
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af04      	add	r7, sp, #16
 8001c80:	603a      	str	r2, [r7, #0]
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	4603      	mov	r3, r0
 8001c86:	80fb      	strh	r3, [r7, #6]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2110      	movs	r1, #16
 8001c90:	4822      	ldr	r0, [pc, #136]	@ (8001d1c <ST7789_WriteString+0xa4>)
 8001c92:	f002 fa27 	bl	80040e4 <HAL_GPIO_WritePin>
	while (*str) {
 8001c96:	e02e      	b.n	8001cf6 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	7d3a      	ldrb	r2, [r7, #20]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	2bef      	cmp	r3, #239	@ 0xef
 8001ca0:	dd14      	ble.n	8001ccc <ST7789_WriteString+0x54>
			x = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001ca6:	7d7b      	ldrb	r3, [r7, #21]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	88bb      	ldrh	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001cb0:	88bb      	ldrh	r3, [r7, #4]
 8001cb2:	7d7a      	ldrb	r2, [r7, #21]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001cba:	da21      	bge.n	8001d00 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d103      	bne.n	8001ccc <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	603b      	str	r3, [r7, #0]
				continue;
 8001cca:	e014      	b.n	8001cf6 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	781a      	ldrb	r2, [r3, #0]
 8001cd0:	88b9      	ldrh	r1, [r7, #4]
 8001cd2:	88f8      	ldrh	r0, [r7, #6]
 8001cd4:	8c3b      	ldrh	r3, [r7, #32]
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	8bbb      	ldrh	r3, [r7, #28]
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f7ff ff4b 	bl	8001b7c <ST7789_WriteChar>
		x += font.width;
 8001ce6:	7d3b      	ldrb	r3, [r7, #20]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	4413      	add	r3, r2
 8001cee:	80fb      	strh	r3, [r7, #6]
		str++;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1cc      	bne.n	8001c98 <ST7789_WriteString+0x20>
 8001cfe:	e000      	b.n	8001d02 <ST7789_WriteString+0x8a>
				break;
 8001d00:	bf00      	nop
	}
	ST7789_UnSelect();
 8001d02:	2201      	movs	r2, #1
 8001d04:	2110      	movs	r1, #16
 8001d06:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <ST7789_WriteString+0xa4>)
 8001d08:	f002 f9ec 	bl	80040e4 <HAL_GPIO_WritePin>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d16:	b002      	add	sp, #8
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40020000 	.word	0x40020000

08001d20 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	4604      	mov	r4, r0
 8001d28:	4608      	mov	r0, r1
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	80fb      	strh	r3, [r7, #6]
 8001d32:	4603      	mov	r3, r0
 8001d34:	80bb      	strh	r3, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	807b      	strh	r3, [r7, #2]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2110      	movs	r1, #16
 8001d42:	4823      	ldr	r0, [pc, #140]	@ (8001dd0 <ST7789_DrawFilledRectangle+0xb0>)
 8001d44:	f002 f9ce 	bl	80040e4 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	2bef      	cmp	r3, #239	@ 0xef
 8001d4c:	d83c      	bhi.n	8001dc8 <ST7789_DrawFilledRectangle+0xa8>
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001d54:	d238      	bcs.n	8001dc8 <ST7789_DrawFilledRectangle+0xa8>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8001d56:	88fa      	ldrh	r2, [r7, #6]
 8001d58:	887b      	ldrh	r3, [r7, #2]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	2bef      	cmp	r3, #239	@ 0xef
 8001d5e:	dd03      	ble.n	8001d68 <ST7789_DrawFilledRectangle+0x48>
		w = ST7789_WIDTH - x;
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001d66:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8001d68:	88ba      	ldrh	r2, [r7, #4]
 8001d6a:	883b      	ldrh	r3, [r7, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001d72:	db03      	blt.n	8001d7c <ST7789_DrawFilledRectangle+0x5c>
		h = ST7789_HEIGHT - y;
 8001d74:	88bb      	ldrh	r3, [r7, #4]
 8001d76:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001d7a:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e017      	b.n	8001db2 <ST7789_DrawFilledRectangle+0x92>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	88bb      	ldrh	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	b299      	uxth	r1, r3
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	4413      	add	r3, r2
 8001d92:	b29c      	uxth	r4, r3
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	88bb      	ldrh	r3, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	88f8      	ldrh	r0, [r7, #6]
 8001da0:	8c3b      	ldrh	r3, [r7, #32]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4613      	mov	r3, r2
 8001da6:	4622      	mov	r2, r4
 8001da8:	f7ff fe18 	bl	80019dc <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	3301      	adds	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	883a      	ldrh	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d2e2      	bcs.n	8001d82 <ST7789_DrawFilledRectangle+0x62>
	}
	ST7789_UnSelect();
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2110      	movs	r1, #16
 8001dc0:	4803      	ldr	r0, [pc, #12]	@ (8001dd0 <ST7789_DrawFilledRectangle+0xb0>)
 8001dc2:	f002 f98f 	bl	80040e4 <HAL_GPIO_WritePin>
 8001dc6:	e000      	b.n	8001dca <ST7789_DrawFilledRectangle+0xaa>
		return;
 8001dc8:	bf00      	nop
}
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd90      	pop	{r4, r7, pc}
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <clearCNNinput>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clearCNNinput(volatile float *in_mat)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < INPUT_SIZE; i++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	e01d      	b.n	8001e26 <clearCNNinput+0x52>
	{
		for (j = 0; j < INPUT_SIZE; j ++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	73bb      	strb	r3, [r7, #14]
 8001dee:	e014      	b.n	8001e1a <clearCNNinput+0x46>
		{
			uint16_t in_mat_idx = i * INPUT_SIZE + j;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	00d2      	lsls	r2, r2, #3
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	7bbb      	ldrb	r3, [r7, #14]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	81bb      	strh	r3, [r7, #12]
			in_mat[in_mat_idx] = 0;
 8001e06:	89bb      	ldrh	r3, [r7, #12]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
		for (j = 0; j < INPUT_SIZE; j ++)
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	3301      	adds	r3, #1
 8001e18:	73bb      	strb	r3, [r7, #14]
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	2b1b      	cmp	r3, #27
 8001e1e:	d9e7      	bls.n	8001df0 <clearCNNinput+0x1c>
	for (i = 0; i < INPUT_SIZE; i++)
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	3301      	adds	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	2b1b      	cmp	r3, #27
 8001e2a:	d9de      	bls.n	8001dea <clearCNNinput+0x16>
		}
	}
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <resetButtonPressed>:

void resetButtonPressed(volatile float* cnn_input, volatile uint16_t coordinate_x, volatile uint16_t coordinate_y)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af04      	add	r7, sp, #16
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	803b      	strh	r3, [r7, #0]
	if ((coordinate_x > 157 && coordinate_x < 208) &&
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b9d      	cmp	r3, #157	@ 0x9d
 8001e52:	d941      	bls.n	8001ed8 <resetButtonPressed+0x9c>
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2bcf      	cmp	r3, #207	@ 0xcf
 8001e5a:	d83d      	bhi.n	8001ed8 <resetButtonPressed+0x9c>
		(coordinate_y >  23 && coordinate_y <  43))
 8001e5c:	883b      	ldrh	r3, [r7, #0]
 8001e5e:	b29b      	uxth	r3, r3
	if ((coordinate_x > 157 && coordinate_x < 208) &&
 8001e60:	2b17      	cmp	r3, #23
 8001e62:	d939      	bls.n	8001ed8 <resetButtonPressed+0x9c>
		(coordinate_y >  23 && coordinate_y <  43))
 8001e64:	883b      	ldrh	r3, [r7, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e6a:	d835      	bhi.n	8001ed8 <resetButtonPressed+0x9c>
	{
		ST7789_DrawFilledRectangle(10, 90, 220, 220, WHITE);
 8001e6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	23dc      	movs	r3, #220	@ 0xdc
 8001e74:	22dc      	movs	r2, #220	@ 0xdc
 8001e76:	215a      	movs	r1, #90	@ 0x5a
 8001e78:	200a      	movs	r0, #10
 8001e7a:	f7ff ff51 	bl	8001d20 <ST7789_DrawFilledRectangle>
		ST7789_DrawFilledRectangle(10, 10, 28, 28, WHITE);
 8001e7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	231c      	movs	r3, #28
 8001e86:	221c      	movs	r2, #28
 8001e88:	210a      	movs	r1, #10
 8001e8a:	200a      	movs	r0, #10
 8001e8c:	f7ff ff48 	bl	8001d20 <ST7789_DrawFilledRectangle>
		HAL_Delay(100);
 8001e90:	2064      	movs	r0, #100	@ 0x64
 8001e92:	f001 fae5 	bl	8003460 <HAL_Delay>
		ST7789_WriteString(45, 10, "Predicted: _", Font_7x10, RED, WHITE);
 8001e96:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <resetButtonPressed+0xa4>)
 8001e98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e9c:	9202      	str	r2, [sp, #8]
 8001e9e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001ea2:	9201      	str	r2, [sp, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	9200      	str	r2, [sp, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee4 <resetButtonPressed+0xa8>)
 8001eac:	210a      	movs	r1, #10
 8001eae:	202d      	movs	r0, #45	@ 0x2d
 8001eb0:	f7ff fee2 	bl	8001c78 <ST7789_WriteString>
		ST7789_WriteString(45, 25, "Conf.: _____", Font_7x10, RED, WHITE);
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <resetButtonPressed+0xa4>)
 8001eb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eba:	9202      	str	r2, [sp, #8]
 8001ebc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001ec0:	9201      	str	r2, [sp, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	9200      	str	r2, [sp, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	@ (8001ee8 <resetButtonPressed+0xac>)
 8001eca:	2119      	movs	r1, #25
 8001ecc:	202d      	movs	r0, #45	@ 0x2d
 8001ece:	f7ff fed3 	bl	8001c78 <ST7789_WriteString>
		clearCNNinput(cnn_input);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ff7e 	bl	8001dd4 <clearCNNinput>
	}
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	08008620 	.word	0x08008620
 8001ee8:	08008630 	.word	0x08008630

08001eec <drawInterface>:

void drawInterface()
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af04      	add	r7, sp, #16
	// Turn screen Black
//	ST7789_InvertColors(ST7789_INVOFF);
	ST7789_Fill_Color(WHITE);
 8001ef2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ef6:	f7ff fd07 	bl	8001908 <ST7789_Fill_Color>
	HAL_Delay(500);
 8001efa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001efe:	f001 faaf 	bl	8003460 <HAL_Delay>
//	ST7789_WriteString(10, 20, "Touch Test", Font_11x18, RED, WHITE);
//	HAL_Delay(500);

	// Draw resset button
	ST7789_DrawFilledRectangle(158, 8, 59, 22, BLACK);
 8001f02:	2300      	movs	r3, #0
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2316      	movs	r3, #22
 8001f08:	223b      	movs	r2, #59	@ 0x3b
 8001f0a:	2108      	movs	r1, #8
 8001f0c:	209e      	movs	r0, #158	@ 0x9e
 8001f0e:	f7ff ff07 	bl	8001d20 <ST7789_DrawFilledRectangle>
	ST7789_WriteString(160, 10, "RESET", Font_11x18, CYAN, BLACK);// 160~226 - 20~38
 8001f12:	4b32      	ldr	r3, [pc, #200]	@ (8001fdc <drawInterface+0xf0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	9202      	str	r2, [sp, #8]
 8001f18:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001f1c:	9201      	str	r2, [sp, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	9200      	str	r2, [sp, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a2e      	ldr	r2, [pc, #184]	@ (8001fe0 <drawInterface+0xf4>)
 8001f26:	210a      	movs	r1, #10
 8001f28:	20a0      	movs	r0, #160	@ 0xa0
 8001f2a:	f7ff fea5 	bl	8001c78 <ST7789_WriteString>

	// Draw CNN button
	ST7789_DrawFilledRectangle(158, 38, 59, 22, BLACK);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2316      	movs	r3, #22
 8001f34:	223b      	movs	r2, #59	@ 0x3b
 8001f36:	2126      	movs	r1, #38	@ 0x26
 8001f38:	209e      	movs	r0, #158	@ 0x9e
 8001f3a:	f7ff fef1 	bl	8001d20 <ST7789_DrawFilledRectangle>
	ST7789_WriteString(160, 40, " CNN ", Font_11x18, CYAN, BLACK);// 160~226 - 20~38
 8001f3e:	4b27      	ldr	r3, [pc, #156]	@ (8001fdc <drawInterface+0xf0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	9202      	str	r2, [sp, #8]
 8001f44:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001f48:	9201      	str	r2, [sp, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	9200      	str	r2, [sp, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a24      	ldr	r2, [pc, #144]	@ (8001fe4 <drawInterface+0xf8>)
 8001f52:	2128      	movs	r1, #40	@ 0x28
 8001f54:	20a0      	movs	r0, #160	@ 0xa0
 8001f56:	f7ff fe8f 	bl	8001c78 <ST7789_WriteString>

	// Minimap border
	ST7789_DrawRectangle(8, 8, 40, 40, BLACK);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2328      	movs	r3, #40	@ 0x28
 8001f60:	2228      	movs	r2, #40	@ 0x28
 8001f62:	2108      	movs	r1, #8
 8001f64:	2008      	movs	r0, #8
 8001f66:	f7ff fdc5 	bl	8001af4 <ST7789_DrawRectangle>
	ST7789_WriteString(8, 45, "CNN input:", Font_7x10, RED, WHITE);
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <drawInterface+0xfc>)
 8001f6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f70:	9202      	str	r2, [sp, #8]
 8001f72:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001f76:	9201      	str	r2, [sp, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	9200      	str	r2, [sp, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fec <drawInterface+0x100>)
 8001f80:	212d      	movs	r1, #45	@ 0x2d
 8001f82:	2008      	movs	r0, #8
 8001f84:	f7ff fe78 	bl	8001c78 <ST7789_WriteString>
	ST7789_WriteString(45, 10, "Predicted: _", Font_7x10, RED, WHITE);
 8001f88:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <drawInterface+0xfc>)
 8001f8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f8e:	9202      	str	r2, [sp, #8]
 8001f90:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001f94:	9201      	str	r2, [sp, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	9200      	str	r2, [sp, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ff0 <drawInterface+0x104>)
 8001f9e:	210a      	movs	r1, #10
 8001fa0:	202d      	movs	r0, #45	@ 0x2d
 8001fa2:	f7ff fe69 	bl	8001c78 <ST7789_WriteString>
	ST7789_WriteString(45, 25, "Conf.: _____", Font_7x10, RED, WHITE);
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <drawInterface+0xfc>)
 8001fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fac:	9202      	str	r2, [sp, #8]
 8001fae:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001fb2:	9201      	str	r2, [sp, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	9200      	str	r2, [sp, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff4 <drawInterface+0x108>)
 8001fbc:	2119      	movs	r1, #25
 8001fbe:	202d      	movs	r0, #45	@ 0x2d
 8001fc0:	f7ff fe5a 	bl	8001c78 <ST7789_WriteString>

	// Draw drawing border
	ST7789_DrawRectangle(8, 88, 232, 312, BLACK);
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f44f 739c 	mov.w	r3, #312	@ 0x138
 8001fcc:	22e8      	movs	r2, #232	@ 0xe8
 8001fce:	2158      	movs	r1, #88	@ 0x58
 8001fd0:	2008      	movs	r0, #8
 8001fd2:	f7ff fd8f 	bl	8001af4 <ST7789_DrawRectangle>
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	08008640 	.word	0x08008640
 8001fe4:	08008648 	.word	0x08008648
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	08008650 	.word	0x08008650
 8001ff0:	08008620 	.word	0x08008620
 8001ff4:	08008630 	.word	0x08008630

08001ff8 <drawMinimap>:

void drawMinimap(volatile float *in_mat)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	// (x1, y1) = (10, 10)
	uint8_t i = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
	uint8_t j = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	73bb      	strb	r3, [r7, #14]
	uint16_t in_mat_idx = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	81bb      	strh	r3, [r7, #12]

	// Loop through matrix and draw pixels
	for (i = 0; i < INPUT_SIZE; i++)
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e033      	b.n	800207a <drawMinimap+0x82>
	{
		for (j = 0; j < INPUT_SIZE; j++)
 8002012:	2300      	movs	r3, #0
 8002014:	73bb      	strb	r3, [r7, #14]
 8002016:	e02a      	b.n	800206e <drawMinimap+0x76>
		{
			in_mat_idx = i * INPUT_SIZE + j;  // Calculate the index once per loop
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	00d2      	lsls	r2, r2, #3
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	b29a      	uxth	r2, r3
 8002026:	7bbb      	ldrb	r3, [r7, #14]
 8002028:	b29b      	uxth	r3, r3
 800202a:	4413      	add	r3, r2
 800202c:	81bb      	strh	r3, [r7, #12]
			uint16_t color = (in_mat[in_mat_idx] == 0) ? WHITE : RED; // Determine color
 800202e:	89bb      	ldrh	r3, [r7, #12]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	d102      	bne.n	800204a <drawMinimap+0x52>
 8002044:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002048:	e001      	b.n	800204e <drawMinimap+0x56>
 800204a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800204e:	817b      	strh	r3, [r7, #10]
			ST7789_DrawPixel(10 + i, 10 + j, color);  // Draw pixel with selected color
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	b29b      	uxth	r3, r3
 8002054:	330a      	adds	r3, #10
 8002056:	b298      	uxth	r0, r3
 8002058:	7bbb      	ldrb	r3, [r7, #14]
 800205a:	b29b      	uxth	r3, r3
 800205c:	330a      	adds	r3, #10
 800205e:	b29b      	uxth	r3, r3
 8002060:	897a      	ldrh	r2, [r7, #10]
 8002062:	4619      	mov	r1, r3
 8002064:	f7ff fc84 	bl	8001970 <ST7789_DrawPixel>
		for (j = 0; j < INPUT_SIZE; j++)
 8002068:	7bbb      	ldrb	r3, [r7, #14]
 800206a:	3301      	adds	r3, #1
 800206c:	73bb      	strb	r3, [r7, #14]
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	2b1b      	cmp	r3, #27
 8002072:	d9d1      	bls.n	8002018 <drawMinimap+0x20>
	for (i = 0; i < INPUT_SIZE; i++)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	3301      	adds	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	2b1b      	cmp	r3, #27
 800207e:	d9c8      	bls.n	8002012 <drawMinimap+0x1a>
		}
	}
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	f5ad 6d4a 	sub.w	sp, sp, #3232	@ 0xca0
 8002092:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002094:	f001 f972 	bl	800337c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002098:	f000 fb04 	bl	80026a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800209c:	f000 fbfa 	bl	8002894 <MX_GPIO_Init>
  MX_DMA_Init();
 80020a0:	f000 fbd8 	bl	8002854 <MX_DMA_Init>
  MX_SPI1_Init();
 80020a4:	f000 fb68 	bl	8002778 <MX_SPI1_Init>
  MX_SPI2_Init();
 80020a8:	f000 fb9c 	bl	80027e4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 80020ac:	f7ff fb86 	bl	80017bc <ST7789_Init>

  xpt2046_spi(&hspi2);
 80020b0:	4854      	ldr	r0, [pc, #336]	@ (8002204 <main+0x178>)
 80020b2:	f000 ff7b 	bl	8002fac <xpt2046_spi>
  xpt2046_init();
 80020b6:	f000 fe7b 	bl	8002db0 <xpt2046_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  ST7789_Test();
  char print_string[30];
  uint8_t change_flag = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 3c8f 	strb.w	r3, [r7, #3215]	@ 0xc8f
  volatile uint16_t coordinate_x = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8a7 3c4e 	strh.w	r3, [r7, #3150]	@ 0xc4e
  volatile uint16_t coordinate_y = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8a7 3c4c 	strh.w	r3, [r7, #3148]	@ 0xc4c
  volatile float cnn_input[INPUT_SIZE * INPUT_SIZE];	// to store CNN input
	for (uint16_t i = 0; i < INPUT_SIZE; i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8a7 3c8c 	strh.w	r3, [r7, #3212]	@ 0xc8c
 80020d2:	e028      	b.n	8002126 <main+0x9a>
	{
		for (uint16_t j = 0; j < INPUT_SIZE; j++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8a7 3c8a 	strh.w	r3, [r7, #3210]	@ 0xc8a
 80020da:	e01b      	b.n	8002114 <main+0x88>
		{
			uint16_t in_mat_idx = i * INPUT_SIZE + j;  // Calculate the index once per loop
 80020dc:	f8b7 3c8c 	ldrh.w	r3, [r7, #3212]	@ 0xc8c
 80020e0:	461a      	mov	r2, r3
 80020e2:	00d2      	lsls	r2, r2, #3
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	f8b7 3c8a 	ldrh.w	r3, [r7, #3210]	@ 0xc8a
 80020ee:	4413      	add	r3, r2
 80020f0:	f8a7 3c70 	strh.w	r3, [r7, #3184]	@ 0xc70
			cnn_input[in_mat_idx] = 0;
 80020f4:	f8b7 3c70 	ldrh.w	r3, [r7, #3184]	@ 0xc70
 80020f8:	f507 6249 	add.w	r2, r7, #3216	@ 0xc90
 80020fc:	f6a2 4284 	subw	r2, r2, #3204	@ 0xc84
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
		for (uint16_t j = 0; j < INPUT_SIZE; j++)
 800210a:	f8b7 3c8a 	ldrh.w	r3, [r7, #3210]	@ 0xc8a
 800210e:	3301      	adds	r3, #1
 8002110:	f8a7 3c8a 	strh.w	r3, [r7, #3210]	@ 0xc8a
 8002114:	f8b7 3c8a 	ldrh.w	r3, [r7, #3210]	@ 0xc8a
 8002118:	2b1b      	cmp	r3, #27
 800211a:	d9df      	bls.n	80020dc <main+0x50>
	for (uint16_t i = 0; i < INPUT_SIZE; i++)
 800211c:	f8b7 3c8c 	ldrh.w	r3, [r7, #3212]	@ 0xc8c
 8002120:	3301      	adds	r3, #1
 8002122:	f8a7 3c8c 	strh.w	r3, [r7, #3212]	@ 0xc8c
 8002126:	f8b7 3c8c 	ldrh.w	r3, [r7, #3212]	@ 0xc8c
 800212a:	2b1b      	cmp	r3, #27
 800212c:	d9d2      	bls.n	80020d4 <main+0x48>
		}
	}

  drawInterface();
 800212e:	f7ff fedd 	bl	8001eec <drawInterface>
  while (1)
  {
	uint16_t pre_coordinate_x = coordinate_x;
 8002132:	f8b7 3c4e 	ldrh.w	r3, [r7, #3150]	@ 0xc4e
 8002136:	f8a7 3c88 	strh.w	r3, [r7, #3208]	@ 0xc88
	uint16_t pre_coordinate_y = coordinate_y;
 800213a:	f8b7 3c4c 	ldrh.w	r3, [r7, #3148]	@ 0xc4c
 800213e:	f8a7 3c86 	strh.w	r3, [r7, #3206]	@ 0xc86
	xpt2046_read_position(&coordinate_x, &coordinate_y);
 8002142:	f607 424c 	addw	r2, r7, #3148	@ 0xc4c
 8002146:	f607 434e 	addw	r3, r7, #3150	@ 0xc4e
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f001 f8f3 	bl	8003338 <xpt2046_read_position>
	if (coordinate_x == 0 && coordinate_y == 0)
 8002152:	f8b7 3c4e 	ldrh.w	r3, [r7, #3150]	@ 0xc4e
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d15b      	bne.n	8002214 <main+0x188>
 800215c:	f8b7 3c4c 	ldrh.w	r3, [r7, #3148]	@ 0xc4c
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d156      	bne.n	8002214 <main+0x188>
	{
		// do smt
		if (change_flag != 0)
 8002166:	f897 3c8f 	ldrb.w	r3, [r7, #3215]	@ 0xc8f
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 808b 	beq.w	8002286 <main+0x1fa>
		{
			ST7789_DrawFilledRectangle(38, 66, 60, 10, WHITE);
 8002170:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	230a      	movs	r3, #10
 8002178:	223c      	movs	r2, #60	@ 0x3c
 800217a:	2142      	movs	r1, #66	@ 0x42
 800217c:	2026      	movs	r0, #38	@ 0x26
 800217e:	f7ff fdcf 	bl	8001d20 <ST7789_DrawFilledRectangle>
			sprintf(print_string,"x = 0");
 8002182:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002186:	4920      	ldr	r1, [pc, #128]	@ (8002208 <main+0x17c>)
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fea7 	bl	8005edc <siprintf>
			ST7789_WriteString(10, 66, print_string, Font_7x10, RED, WHITE);
 800218e:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <main+0x180>)
 8002190:	f507 6145 	add.w	r1, r7, #3152	@ 0xc50
 8002194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002198:	9202      	str	r2, [sp, #8]
 800219a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800219e:	9201      	str	r2, [sp, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	9200      	str	r2, [sp, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	460a      	mov	r2, r1
 80021a8:	2142      	movs	r1, #66	@ 0x42
 80021aa:	200a      	movs	r0, #10
 80021ac:	f7ff fd64 	bl	8001c78 <ST7789_WriteString>
			HAL_Delay(50);
 80021b0:	2032      	movs	r0, #50	@ 0x32
 80021b2:	f001 f955 	bl	8003460 <HAL_Delay>
			ST7789_DrawFilledRectangle(38, 78, 60, 9, WHITE);
 80021b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2309      	movs	r3, #9
 80021be:	223c      	movs	r2, #60	@ 0x3c
 80021c0:	214e      	movs	r1, #78	@ 0x4e
 80021c2:	2026      	movs	r0, #38	@ 0x26
 80021c4:	f7ff fdac 	bl	8001d20 <ST7789_DrawFilledRectangle>
			sprintf(print_string,"y = 0");
 80021c8:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80021cc:	4910      	ldr	r1, [pc, #64]	@ (8002210 <main+0x184>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fe84 	bl	8005edc <siprintf>
			ST7789_WriteString(10, 78, print_string, Font_7x10, RED, WHITE);
 80021d4:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <main+0x180>)
 80021d6:	f507 6145 	add.w	r1, r7, #3152	@ 0xc50
 80021da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021de:	9202      	str	r2, [sp, #8]
 80021e0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80021e4:	9201      	str	r2, [sp, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	9200      	str	r2, [sp, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	460a      	mov	r2, r1
 80021ee:	214e      	movs	r1, #78	@ 0x4e
 80021f0:	200a      	movs	r0, #10
 80021f2:	f7ff fd41 	bl	8001c78 <ST7789_WriteString>
			HAL_Delay(50);
 80021f6:	2032      	movs	r0, #50	@ 0x32
 80021f8:	f001 f932 	bl	8003460 <HAL_Delay>
			change_flag = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3c8f 	strb.w	r3, [r7, #3215]	@ 0xc8f
		if (change_flag != 0)
 8002202:	e040      	b.n	8002286 <main+0x1fa>
 8002204:	20009a8c 	.word	0x20009a8c
 8002208:	0800865c 	.word	0x0800865c
 800220c:	20000000 	.word	0x20000000
 8002210:	08008664 	.word	0x08008664
		}
	}
	else
	{
		// update screen
		sprintf(print_string,"x = %d", coordinate_x);
 8002214:	f8b7 3c4e 	ldrh.w	r3, [r7, #3150]	@ 0xc4e
 8002218:	b29b      	uxth	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002220:	49cd      	ldr	r1, [pc, #820]	@ (8002558 <main+0x4cc>)
 8002222:	4618      	mov	r0, r3
 8002224:	f003 fe5a 	bl	8005edc <siprintf>
		ST7789_WriteString(10, 66, print_string, Font_7x10, RED, WHITE);
 8002228:	4bcc      	ldr	r3, [pc, #816]	@ (800255c <main+0x4d0>)
 800222a:	f507 6145 	add.w	r1, r7, #3152	@ 0xc50
 800222e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002232:	9202      	str	r2, [sp, #8]
 8002234:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002238:	9201      	str	r2, [sp, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	9200      	str	r2, [sp, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	460a      	mov	r2, r1
 8002242:	2142      	movs	r1, #66	@ 0x42
 8002244:	200a      	movs	r0, #10
 8002246:	f7ff fd17 	bl	8001c78 <ST7789_WriteString>
//		HAL_Delay(100);
		sprintf(print_string,"y = %d", coordinate_y );
 800224a:	f8b7 3c4c 	ldrh.w	r3, [r7, #3148]	@ 0xc4c
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002256:	49c2      	ldr	r1, [pc, #776]	@ (8002560 <main+0x4d4>)
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fe3f 	bl	8005edc <siprintf>
		ST7789_WriteString(10, 78, print_string, Font_7x10, RED, WHITE);
 800225e:	4bbf      	ldr	r3, [pc, #764]	@ (800255c <main+0x4d0>)
 8002260:	f507 6145 	add.w	r1, r7, #3152	@ 0xc50
 8002264:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002268:	9202      	str	r2, [sp, #8]
 800226a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800226e:	9201      	str	r2, [sp, #4]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	9200      	str	r2, [sp, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	460a      	mov	r2, r1
 8002278:	214e      	movs	r1, #78	@ 0x4e
 800227a:	200a      	movs	r0, #10
 800227c:	f7ff fcfc 	bl	8001c78 <ST7789_WriteString>
//		HAL_Delay(100);
		change_flag = 1;
 8002280:	2301      	movs	r3, #1
 8002282:	f887 3c8f 	strb.w	r3, [r7, #3215]	@ 0xc8f
	}

//	// Draw function
	if (
			// bounding of draw box
			(coordinate_x >  25 && coordinate_x < 221) &&
 8002286:	f8b7 3c4e 	ldrh.w	r3, [r7, #3150]	@ 0xc4e
 800228a:	b29b      	uxth	r3, r3
	if (
 800228c:	2b19      	cmp	r3, #25
 800228e:	f240 818b 	bls.w	80025a8 <main+0x51c>
			(coordinate_x >  25 && coordinate_x < 221) &&
 8002292:	f8b7 3c4e 	ldrh.w	r3, [r7, #3150]	@ 0xc4e
 8002296:	b29b      	uxth	r3, r3
 8002298:	2bdc      	cmp	r3, #220	@ 0xdc
 800229a:	f200 8185 	bhi.w	80025a8 <main+0x51c>
			(coordinate_y > 108 && coordinate_y < 307) &&
 800229e:	f8b7 3c4c 	ldrh.w	r3, [r7, #3148]	@ 0xc4c
 80022a2:	b29b      	uxth	r3, r3
			(coordinate_x >  25 && coordinate_x < 221) &&
 80022a4:	2b6c      	cmp	r3, #108	@ 0x6c
 80022a6:	f240 817f 	bls.w	80025a8 <main+0x51c>
			(coordinate_y > 108 && coordinate_y < 307) &&
 80022aa:	f8b7 3c4c 	ldrh.w	r3, [r7, #3148]	@ 0xc4c
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 80022b4:	f200 8178 	bhi.w	80025a8 <main+0x51c>
			// prevent jumping in value
			(coordinate_x < pre_coordinate_x + 10) && (coordinate_x > pre_coordinate_x - 10) &&
 80022b8:	f8b7 3c88 	ldrh.w	r3, [r7, #3208]	@ 0xc88
 80022bc:	3309      	adds	r3, #9
 80022be:	f8b7 2c4e 	ldrh.w	r2, [r7, #3150]	@ 0xc4e
 80022c2:	b292      	uxth	r2, r2
			(coordinate_y > 108 && coordinate_y < 307) &&
 80022c4:	4293      	cmp	r3, r2
 80022c6:	f2c0 816f 	blt.w	80025a8 <main+0x51c>
			(coordinate_x < pre_coordinate_x + 10) && (coordinate_x > pre_coordinate_x - 10) &&
 80022ca:	f8b7 3c88 	ldrh.w	r3, [r7, #3208]	@ 0xc88
 80022ce:	3b09      	subs	r3, #9
 80022d0:	f8b7 2c4e 	ldrh.w	r2, [r7, #3150]	@ 0xc4e
 80022d4:	b292      	uxth	r2, r2
 80022d6:	4293      	cmp	r3, r2
 80022d8:	f300 8166 	bgt.w	80025a8 <main+0x51c>
			(coordinate_y < pre_coordinate_y + 10) && (coordinate_y > pre_coordinate_y - 10)
 80022dc:	f8b7 3c86 	ldrh.w	r3, [r7, #3206]	@ 0xc86
 80022e0:	3309      	adds	r3, #9
 80022e2:	f8b7 2c4c 	ldrh.w	r2, [r7, #3148]	@ 0xc4c
 80022e6:	b292      	uxth	r2, r2
			(coordinate_x < pre_coordinate_x + 10) && (coordinate_x > pre_coordinate_x - 10) &&
 80022e8:	4293      	cmp	r3, r2
 80022ea:	f2c0 815d 	blt.w	80025a8 <main+0x51c>
			(coordinate_y < pre_coordinate_y + 10) && (coordinate_y > pre_coordinate_y - 10)
 80022ee:	f8b7 3c86 	ldrh.w	r3, [r7, #3206]	@ 0xc86
 80022f2:	3b09      	subs	r3, #9
 80022f4:	f8b7 2c4c 	ldrh.w	r2, [r7, #3148]	@ 0xc4c
 80022f8:	b292      	uxth	r2, r2
 80022fa:	4293      	cmp	r3, r2
 80022fc:	f300 8154 	bgt.w	80025a8 <main+0x51c>
		)
	{
		ST7789_DrawFilledRectangle(coordinate_x - 4, coordinate_y - 4, 8, 8, RED);
 8002300:	f8b7 3c4e 	ldrh.w	r3, [r7, #3150]	@ 0xc4e
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b04      	subs	r3, #4
 8002308:	b298      	uxth	r0, r3
 800230a:	f8b7 3c4c 	ldrh.w	r3, [r7, #3148]	@ 0xc4c
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b04      	subs	r3, #4
 8002312:	b299      	uxth	r1, r3
 8002314:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2308      	movs	r3, #8
 800231c:	2208      	movs	r2, #8
 800231e:	f7ff fcff 	bl	8001d20 <ST7789_DrawFilledRectangle>

		// update input mat
		uint8_t cnn_input_idx_x = (coordinate_x - 25)/ 7;
 8002322:	f8b7 3c4e 	ldrh.w	r3, [r7, #3150]	@ 0xc4e
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b19      	subs	r3, #25
 800232a:	4a8e      	ldr	r2, [pc, #568]	@ (8002564 <main+0x4d8>)
 800232c:	fb82 1203 	smull	r1, r2, r2, r3
 8002330:	441a      	add	r2, r3
 8002332:	1092      	asrs	r2, r2, #2
 8002334:	17db      	asrs	r3, r3, #31
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f887 3c85 	strb.w	r3, [r7, #3205]	@ 0xc85
		uint8_t cnn_input_idx_y = (coordinate_y - 108)/ 7;
 800233c:	f8b7 3c4c 	ldrh.w	r3, [r7, #3148]	@ 0xc4c
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b6c      	subs	r3, #108	@ 0x6c
 8002344:	4a87      	ldr	r2, [pc, #540]	@ (8002564 <main+0x4d8>)
 8002346:	fb82 1203 	smull	r1, r2, r2, r3
 800234a:	441a      	add	r2, r3
 800234c:	1092      	asrs	r2, r2, #2
 800234e:	17db      	asrs	r3, r3, #31
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f887 3c84 	strb.w	r3, [r7, #3204]	@ 0xc84
		// make the input bolder - enlarge the input to 4 pixel
		uint16_t cnn_input_index00 = cnn_input_idx_x * INPUT_SIZE + cnn_input_idx_y;
 8002356:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	00d2      	lsls	r2, r2, #3
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	b29a      	uxth	r2, r3
 8002366:	f897 3c84 	ldrb.w	r3, [r7, #3204]	@ 0xc84
 800236a:	b29b      	uxth	r3, r3
 800236c:	4413      	add	r3, r2
 800236e:	f8a7 3c82 	strh.w	r3, [r7, #3202]	@ 0xc82
		uint16_t cnn_input_index01 = (cnn_input_idx_x - 1) * INPUT_SIZE + cnn_input_idx_y - 1;
 8002372:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 8002376:	3b01      	subs	r3, #1
 8002378:	b29b      	uxth	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	00d2      	lsls	r2, r2, #3
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	b29a      	uxth	r2, r3
 8002384:	f897 3c84 	ldrb.w	r3, [r7, #3204]	@ 0xc84
 8002388:	b29b      	uxth	r3, r3
 800238a:	4413      	add	r3, r2
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	f8a7 3c80 	strh.w	r3, [r7, #3200]	@ 0xc80
		uint16_t cnn_input_index02 = (cnn_input_idx_x - 1) * INPUT_SIZE + cnn_input_idx_y;
 8002394:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 8002398:	3b01      	subs	r3, #1
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	00d2      	lsls	r2, r2, #3
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	f897 3c84 	ldrb.w	r3, [r7, #3204]	@ 0xc84
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	f8a7 3c7e 	strh.w	r3, [r7, #3198]	@ 0xc7e
		uint16_t cnn_input_index03 = (cnn_input_idx_x - 1) * INPUT_SIZE + cnn_input_idx_y + 1;
 80023b2:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	00d2      	lsls	r2, r2, #3
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	f897 3c84 	ldrb.w	r3, [r7, #3204]	@ 0xc84
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f8a7 3c7c 	strh.w	r3, [r7, #3196]	@ 0xc7c
		uint16_t cnn_input_index04 = cnn_input_idx_x * INPUT_SIZE + cnn_input_idx_y - 1;
 80023d4:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 80023d8:	b29b      	uxth	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	00d2      	lsls	r2, r2, #3
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	f897 3c84 	ldrb.w	r3, [r7, #3204]	@ 0xc84
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f8a7 3c7a 	strh.w	r3, [r7, #3194]	@ 0xc7a
		uint16_t cnn_input_index05 = cnn_input_idx_x * INPUT_SIZE + cnn_input_idx_y + 1;
 80023f4:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	00d2      	lsls	r2, r2, #3
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	b29a      	uxth	r2, r3
 8002404:	f897 3c84 	ldrb.w	r3, [r7, #3204]	@ 0xc84
 8002408:	b29b      	uxth	r3, r3
 800240a:	4413      	add	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	3301      	adds	r3, #1
 8002410:	f8a7 3c78 	strh.w	r3, [r7, #3192]	@ 0xc78
		uint16_t cnn_input_index06 = (cnn_input_idx_x + 1) * INPUT_SIZE + cnn_input_idx_y - 1;
 8002414:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 8002418:	3301      	adds	r3, #1
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	00d2      	lsls	r2, r2, #3
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	b29a      	uxth	r2, r3
 8002426:	f897 3c84 	ldrb.w	r3, [r7, #3204]	@ 0xc84
 800242a:	b29b      	uxth	r3, r3
 800242c:	4413      	add	r3, r2
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	f8a7 3c76 	strh.w	r3, [r7, #3190]	@ 0xc76
		uint16_t cnn_input_index07 = (cnn_input_idx_x + 1) * INPUT_SIZE + cnn_input_idx_y;
 8002436:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 800243a:	3301      	adds	r3, #1
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	00d2      	lsls	r2, r2, #3
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	b29a      	uxth	r2, r3
 8002448:	f897 3c84 	ldrb.w	r3, [r7, #3204]	@ 0xc84
 800244c:	b29b      	uxth	r3, r3
 800244e:	4413      	add	r3, r2
 8002450:	f8a7 3c74 	strh.w	r3, [r7, #3188]	@ 0xc74
		uint16_t cnn_input_index08 = (cnn_input_idx_x + 1) * INPUT_SIZE + cnn_input_idx_y + 1;
 8002454:	f897 3c85 	ldrb.w	r3, [r7, #3205]	@ 0xc85
 8002458:	3301      	adds	r3, #1
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	00d2      	lsls	r2, r2, #3
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	b29a      	uxth	r2, r3
 8002466:	f897 3c84 	ldrb.w	r3, [r7, #3204]	@ 0xc84
 800246a:	b29b      	uxth	r3, r3
 800246c:	4413      	add	r3, r2
 800246e:	b29b      	uxth	r3, r3
 8002470:	3301      	adds	r3, #1
 8002472:	f8a7 3c72 	strh.w	r3, [r7, #3186]	@ 0xc72

		if (cnn_input_index00 < INPUT_SIZE * INPUT_SIZE)
 8002476:	f8b7 3c82 	ldrh.w	r3, [r7, #3202]	@ 0xc82
 800247a:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800247e:	d20a      	bcs.n	8002496 <main+0x40a>
		{
		    cnn_input[cnn_input_index00] = 1.0f;
 8002480:	f8b7 3c82 	ldrh.w	r3, [r7, #3202]	@ 0xc82
 8002484:	f507 6249 	add.w	r2, r7, #3216	@ 0xc90
 8002488:	f6a2 4284 	subw	r2, r2, #3204	@ 0xc84
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002494:	601a      	str	r2, [r3, #0]
		}

		if (cnn_input_index01 < INPUT_SIZE * INPUT_SIZE)
 8002496:	f8b7 3c80 	ldrh.w	r3, [r7, #3200]	@ 0xc80
 800249a:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800249e:	d20a      	bcs.n	80024b6 <main+0x42a>
		{
			cnn_input[cnn_input_index01] = 0.5f;
 80024a0:	f8b7 3c80 	ldrh.w	r3, [r7, #3200]	@ 0xc80
 80024a4:	f507 6249 	add.w	r2, r7, #3216	@ 0xc90
 80024a8:	f6a2 4284 	subw	r2, r2, #3204	@ 0xc84
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80024b4:	601a      	str	r2, [r3, #0]
		}

		if (cnn_input_index02 < INPUT_SIZE * INPUT_SIZE)
 80024b6:	f8b7 3c7e 	ldrh.w	r3, [r7, #3198]	@ 0xc7e
 80024ba:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 80024be:	d20a      	bcs.n	80024d6 <main+0x44a>
		{
			cnn_input[cnn_input_index02] = 1.0f;
 80024c0:	f8b7 3c7e 	ldrh.w	r3, [r7, #3198]	@ 0xc7e
 80024c4:	f507 6249 	add.w	r2, r7, #3216	@ 0xc90
 80024c8:	f6a2 4284 	subw	r2, r2, #3204	@ 0xc84
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80024d4:	601a      	str	r2, [r3, #0]
		}

		if (cnn_input_index03 < INPUT_SIZE * INPUT_SIZE)
 80024d6:	f8b7 3c7c 	ldrh.w	r3, [r7, #3196]	@ 0xc7c
 80024da:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 80024de:	d20a      	bcs.n	80024f6 <main+0x46a>
		{
			cnn_input[cnn_input_index03] = 0.5f;
 80024e0:	f8b7 3c7c 	ldrh.w	r3, [r7, #3196]	@ 0xc7c
 80024e4:	f507 6249 	add.w	r2, r7, #3216	@ 0xc90
 80024e8:	f6a2 4284 	subw	r2, r2, #3204	@ 0xc84
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80024f4:	601a      	str	r2, [r3, #0]
		}

		if (cnn_input_index04 < INPUT_SIZE * INPUT_SIZE)
 80024f6:	f8b7 3c7a 	ldrh.w	r3, [r7, #3194]	@ 0xc7a
 80024fa:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 80024fe:	d20a      	bcs.n	8002516 <main+0x48a>
		{
			cnn_input[cnn_input_index04] = 1.0f;
 8002500:	f8b7 3c7a 	ldrh.w	r3, [r7, #3194]	@ 0xc7a
 8002504:	f507 6249 	add.w	r2, r7, #3216	@ 0xc90
 8002508:	f6a2 4284 	subw	r2, r2, #3204	@ 0xc84
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002514:	601a      	str	r2, [r3, #0]
		}

		if (cnn_input_index05 < INPUT_SIZE * INPUT_SIZE)
 8002516:	f8b7 3c78 	ldrh.w	r3, [r7, #3192]	@ 0xc78
 800251a:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800251e:	d20a      	bcs.n	8002536 <main+0x4aa>
		{
			cnn_input[cnn_input_index05] = 1.0f;
 8002520:	f8b7 3c78 	ldrh.w	r3, [r7, #3192]	@ 0xc78
 8002524:	f507 6249 	add.w	r2, r7, #3216	@ 0xc90
 8002528:	f6a2 4284 	subw	r2, r2, #3204	@ 0xc84
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002534:	601a      	str	r2, [r3, #0]
		}

		if (cnn_input_index06 < INPUT_SIZE * INPUT_SIZE)
 8002536:	f8b7 3c76 	ldrh.w	r3, [r7, #3190]	@ 0xc76
 800253a:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800253e:	d213      	bcs.n	8002568 <main+0x4dc>
		{
			cnn_input[cnn_input_index06] = 0.5f;
 8002540:	f8b7 3c76 	ldrh.w	r3, [r7, #3190]	@ 0xc76
 8002544:	f507 6249 	add.w	r2, r7, #3216	@ 0xc90
 8002548:	f6a2 4284 	subw	r2, r2, #3204	@ 0xc84
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e007      	b.n	8002568 <main+0x4dc>
 8002558:	0800866c 	.word	0x0800866c
 800255c:	20000000 	.word	0x20000000
 8002560:	08008674 	.word	0x08008674
 8002564:	92492493 	.word	0x92492493
		}

		if (cnn_input_index07 < INPUT_SIZE * INPUT_SIZE)
 8002568:	f8b7 3c74 	ldrh.w	r3, [r7, #3188]	@ 0xc74
 800256c:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 8002570:	d20a      	bcs.n	8002588 <main+0x4fc>
		{
			cnn_input[cnn_input_index07] = 1.0f;
 8002572:	f8b7 3c74 	ldrh.w	r3, [r7, #3188]	@ 0xc74
 8002576:	f507 6249 	add.w	r2, r7, #3216	@ 0xc90
 800257a:	f6a2 4284 	subw	r2, r2, #3204	@ 0xc84
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002586:	601a      	str	r2, [r3, #0]
		}

		if (cnn_input_index08 < INPUT_SIZE * INPUT_SIZE)
 8002588:	f8b7 3c72 	ldrh.w	r3, [r7, #3186]	@ 0xc72
 800258c:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 8002590:	d20a      	bcs.n	80025a8 <main+0x51c>
		{
			cnn_input[cnn_input_index08] = 0.5f;
 8002592:	f8b7 3c72 	ldrh.w	r3, [r7, #3186]	@ 0xc72
 8002596:	f507 6249 	add.w	r2, r7, #3216	@ 0xc90
 800259a:	f6a2 4284 	subw	r2, r2, #3204	@ 0xc84
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80025a6:	601a      	str	r2, [r3, #0]
		}
	}

	// CNN button:
	if ((coordinate_x > 157 && coordinate_x < 208) &&
 80025a8:	f8b7 3c4e 	ldrh.w	r3, [r7, #3150]	@ 0xc4e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b9d      	cmp	r3, #157	@ 0x9d
 80025b0:	d961      	bls.n	8002676 <main+0x5ea>
 80025b2:	f8b7 3c4e 	ldrh.w	r3, [r7, #3150]	@ 0xc4e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2bcf      	cmp	r3, #207	@ 0xcf
 80025ba:	d85c      	bhi.n	8002676 <main+0x5ea>
			(coordinate_y >  59 && coordinate_y <  71))
 80025bc:	f8b7 3c4c 	ldrh.w	r3, [r7, #3148]	@ 0xc4c
 80025c0:	b29b      	uxth	r3, r3
	if ((coordinate_x > 157 && coordinate_x < 208) &&
 80025c2:	2b3b      	cmp	r3, #59	@ 0x3b
 80025c4:	d957      	bls.n	8002676 <main+0x5ea>
			(coordinate_y >  59 && coordinate_y <  71))
 80025c6:	f8b7 3c4c 	ldrh.w	r3, [r7, #3148]	@ 0xc4c
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b46      	cmp	r3, #70	@ 0x46
 80025ce:	d852      	bhi.n	8002676 <main+0x5ea>
	{
		volatile uint8_t predicted_num = 0;
 80025d0:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 80025d4:	f6a3 4385 	subw	r3, r3, #3205	@ 0xc85
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
		volatile float predicted_num_confidence = 0.0;
 80025dc:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 80025e0:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
		feedforward(cnn_input, &predicted_num, &predicted_num_confidence);
 80025ea:	1d3a      	adds	r2, r7, #4
 80025ec:	f107 010b 	add.w	r1, r7, #11
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe ff23 	bl	8001440 <feedforward>
		sprintf(print_string,"Predicted: %d", predicted_num);
 80025fa:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 80025fe:	f6a3 4385 	subw	r3, r3, #3205	@ 0xc85
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800260c:	4922      	ldr	r1, [pc, #136]	@ (8002698 <main+0x60c>)
 800260e:	4618      	mov	r0, r3
 8002610:	f003 fc64 	bl	8005edc <siprintf>
		ST7789_WriteString(45, 10, print_string, Font_7x10, RED, WHITE);
 8002614:	4b21      	ldr	r3, [pc, #132]	@ (800269c <main+0x610>)
 8002616:	f507 6145 	add.w	r1, r7, #3152	@ 0xc50
 800261a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800261e:	9202      	str	r2, [sp, #8]
 8002620:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002624:	9201      	str	r2, [sp, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	9200      	str	r2, [sp, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	460a      	mov	r2, r1
 800262e:	210a      	movs	r1, #10
 8002630:	202d      	movs	r0, #45	@ 0x2d
 8002632:	f7ff fb21 	bl	8001c78 <ST7789_WriteString>
		sprintf(print_string,"Conf.: %.3f", predicted_num_confidence);
 8002636:	f507 6349 	add.w	r3, r7, #3216	@ 0xc90
 800263a:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ff89 	bl	8000558 <__aeabi_f2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	f507 6045 	add.w	r0, r7, #3152	@ 0xc50
 800264e:	4914      	ldr	r1, [pc, #80]	@ (80026a0 <main+0x614>)
 8002650:	f003 fc44 	bl	8005edc <siprintf>
		ST7789_WriteString(45, 25, print_string, Font_7x10, RED, WHITE);
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <main+0x610>)
 8002656:	f507 6145 	add.w	r1, r7, #3152	@ 0xc50
 800265a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800265e:	9202      	str	r2, [sp, #8]
 8002660:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002664:	9201      	str	r2, [sp, #4]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	9200      	str	r2, [sp, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	460a      	mov	r2, r1
 800266e:	2119      	movs	r1, #25
 8002670:	202d      	movs	r0, #45	@ 0x2d
 8002672:	f7ff fb01 	bl	8001c78 <ST7789_WriteString>
	}

	// draw mini drawin plane
	drawMinimap(cnn_input);
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fcbc 	bl	8001ff8 <drawMinimap>

	// Reset button
	resetButtonPressed(cnn_input,  coordinate_x, coordinate_y);
 8002680:	f8b7 3c4e 	ldrh.w	r3, [r7, #3150]	@ 0xc4e
 8002684:	b299      	uxth	r1, r3
 8002686:	f8b7 3c4c 	ldrh.w	r3, [r7, #3148]	@ 0xc4c
 800268a:	b29a      	uxth	r2, r3
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fbd3 	bl	8001e3c <resetButtonPressed>
  {
 8002696:	e54c      	b.n	8002132 <main+0xa6>
 8002698:	0800867c 	.word	0x0800867c
 800269c:	20000000 	.word	0x20000000
 80026a0:	0800868c 	.word	0x0800868c

080026a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b094      	sub	sp, #80	@ 0x50
 80026a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026aa:	f107 0320 	add.w	r3, r7, #32
 80026ae:	2230      	movs	r2, #48	@ 0x30
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 fd0a 	bl	80060cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <SystemClock_Config+0xcc>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	4a27      	ldr	r2, [pc, #156]	@ (8002770 <SystemClock_Config+0xcc>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d8:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <SystemClock_Config+0xcc>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80026e4:	2300      	movs	r3, #0
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	4b22      	ldr	r3, [pc, #136]	@ (8002774 <SystemClock_Config+0xd0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80026f0:	4a20      	ldr	r2, [pc, #128]	@ (8002774 <SystemClock_Config+0xd0>)
 80026f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002774 <SystemClock_Config+0xd0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002704:	2301      	movs	r3, #1
 8002706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002708:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800270e:	2302      	movs	r3, #2
 8002710:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002712:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002718:	2319      	movs	r3, #25
 800271a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800271c:	23a8      	movs	r3, #168	@ 0xa8
 800271e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002720:	2302      	movs	r3, #2
 8002722:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002724:	2304      	movs	r3, #4
 8002726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002728:	f107 0320 	add.w	r3, r7, #32
 800272c:	4618      	mov	r0, r3
 800272e:	f001 fcf3 	bl	8004118 <HAL_RCC_OscConfig>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002738:	f000 f920 	bl	800297c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800273c:	230f      	movs	r3, #15
 800273e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002740:	2302      	movs	r3, #2
 8002742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800274c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002752:	f107 030c 	add.w	r3, r7, #12
 8002756:	2102      	movs	r1, #2
 8002758:	4618      	mov	r0, r3
 800275a:	f001 ff55 	bl	8004608 <HAL_RCC_ClockConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002764:	f000 f90a 	bl	800297c <Error_Handler>
  }
}
 8002768:	bf00      	nop
 800276a:	3750      	adds	r7, #80	@ 0x50
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	40007000 	.word	0x40007000

08002778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800277c:	4b17      	ldr	r3, [pc, #92]	@ (80027dc <MX_SPI1_Init+0x64>)
 800277e:	4a18      	ldr	r2, [pc, #96]	@ (80027e0 <MX_SPI1_Init+0x68>)
 8002780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002782:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <MX_SPI1_Init+0x64>)
 8002784:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800278a:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <MX_SPI1_Init+0x64>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002790:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <MX_SPI1_Init+0x64>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002796:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <MX_SPI1_Init+0x64>)
 8002798:	2202      	movs	r2, #2
 800279a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800279c:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <MX_SPI1_Init+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80027aa:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027ac:	2208      	movs	r2, #8
 80027ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027b0:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027bc:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027be:	2200      	movs	r2, #0
 80027c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027c4:	220a      	movs	r2, #10
 80027c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027c8:	4804      	ldr	r0, [pc, #16]	@ (80027dc <MX_SPI1_Init+0x64>)
 80027ca:	f002 f8c9 	bl	8004960 <HAL_SPI_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027d4:	f000 f8d2 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20009a34 	.word	0x20009a34
 80027e0:	40013000 	.word	0x40013000

080027e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80027e8:	4b18      	ldr	r3, [pc, #96]	@ (800284c <MX_SPI2_Init+0x68>)
 80027ea:	4a19      	ldr	r2, [pc, #100]	@ (8002850 <MX_SPI2_Init+0x6c>)
 80027ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027ee:	4b17      	ldr	r3, [pc, #92]	@ (800284c <MX_SPI2_Init+0x68>)
 80027f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027f6:	4b15      	ldr	r3, [pc, #84]	@ (800284c <MX_SPI2_Init+0x68>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80027fc:	4b13      	ldr	r3, [pc, #76]	@ (800284c <MX_SPI2_Init+0x68>)
 80027fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002802:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002804:	4b11      	ldr	r3, [pc, #68]	@ (800284c <MX_SPI2_Init+0x68>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800280a:	4b10      	ldr	r3, [pc, #64]	@ (800284c <MX_SPI2_Init+0x68>)
 800280c:	2200      	movs	r2, #0
 800280e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002810:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <MX_SPI2_Init+0x68>)
 8002812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002816:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <MX_SPI2_Init+0x68>)
 800281a:	2210      	movs	r2, #16
 800281c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800281e:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <MX_SPI2_Init+0x68>)
 8002820:	2200      	movs	r2, #0
 8002822:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002824:	4b09      	ldr	r3, [pc, #36]	@ (800284c <MX_SPI2_Init+0x68>)
 8002826:	2200      	movs	r2, #0
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800282a:	4b08      	ldr	r3, [pc, #32]	@ (800284c <MX_SPI2_Init+0x68>)
 800282c:	2200      	movs	r2, #0
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002830:	4b06      	ldr	r3, [pc, #24]	@ (800284c <MX_SPI2_Init+0x68>)
 8002832:	220a      	movs	r2, #10
 8002834:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002836:	4805      	ldr	r0, [pc, #20]	@ (800284c <MX_SPI2_Init+0x68>)
 8002838:	f002 f892 	bl	8004960 <HAL_SPI_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002842:	f000 f89b 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20009a8c 	.word	0x20009a8c
 8002850:	40003800 	.word	0x40003800

08002854 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <MX_DMA_Init+0x3c>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	4a0b      	ldr	r2, [pc, #44]	@ (8002890 <MX_DMA_Init+0x3c>)
 8002864:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002868:	6313      	str	r3, [r2, #48]	@ 0x30
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <MX_DMA_Init+0x3c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	203b      	movs	r0, #59	@ 0x3b
 800287c:	f000 feef 	bl	800365e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002880:	203b      	movs	r0, #59	@ 0x3b
 8002882:	f000 ff08 	bl	8003696 <HAL_NVIC_EnableIRQ>

}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800

08002894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	4b30      	ldr	r3, [pc, #192]	@ (8002970 <MX_GPIO_Init+0xdc>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002970 <MX_GPIO_Init+0xdc>)
 80028b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002970 <MX_GPIO_Init+0xdc>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	4b29      	ldr	r3, [pc, #164]	@ (8002970 <MX_GPIO_Init+0xdc>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	4a28      	ldr	r2, [pc, #160]	@ (8002970 <MX_GPIO_Init+0xdc>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d6:	4b26      	ldr	r3, [pc, #152]	@ (8002970 <MX_GPIO_Init+0xdc>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <MX_GPIO_Init+0xdc>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a21      	ldr	r2, [pc, #132]	@ (8002970 <MX_GPIO_Init+0xdc>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002970 <MX_GPIO_Init+0xdc>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	211a      	movs	r1, #26
 8002902:	481c      	ldr	r0, [pc, #112]	@ (8002974 <MX_GPIO_Init+0xe0>)
 8002904:	f001 fbee 	bl	80040e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_RESET);
 8002908:	2200      	movs	r2, #0
 800290a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800290e:	481a      	ldr	r0, [pc, #104]	@ (8002978 <MX_GPIO_Init+0xe4>)
 8002910:	f001 fbe8 	bl	80040e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin;
 8002914:	231a      	movs	r3, #26
 8002916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002918:	2311      	movs	r3, #17
 800291a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002920:	2302      	movs	r3, #2
 8002922:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	4619      	mov	r1, r3
 800292a:	4812      	ldr	r0, [pc, #72]	@ (8002974 <MX_GPIO_Init+0xe0>)
 800292c:	f001 fa3e 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8002930:	2302      	movs	r3, #2
 8002932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002934:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800293e:	f107 030c 	add.w	r3, r7, #12
 8002942:	4619      	mov	r1, r3
 8002944:	480c      	ldr	r0, [pc, #48]	@ (8002978 <MX_GPIO_Init+0xe4>)
 8002946:	f001 fa31 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 800294a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800294e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002950:	2311      	movs	r3, #17
 8002952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 800295c:	f107 030c 	add.w	r3, r7, #12
 8002960:	4619      	mov	r1, r3
 8002962:	4805      	ldr	r0, [pc, #20]	@ (8002978 <MX_GPIO_Init+0xe4>)
 8002964:	f001 fa22 	bl	8003dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002968:	bf00      	nop
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	40020000 	.word	0x40020000
 8002978:	40020400 	.word	0x40020400

0800297c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002980:	b672      	cpsid	i
}
 8002982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <Error_Handler+0x8>

08002988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_MspInit+0x4c>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	4a0f      	ldr	r2, [pc, #60]	@ (80029d4 <HAL_MspInit+0x4c>)
 8002998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800299c:	6453      	str	r3, [r2, #68]	@ 0x44
 800299e:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <HAL_MspInit+0x4c>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_MspInit+0x4c>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	4a08      	ldr	r2, [pc, #32]	@ (80029d4 <HAL_MspInit+0x4c>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ba:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <HAL_MspInit+0x4c>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800

080029d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	@ 0x30
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 031c 	add.w	r3, r7, #28
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a49      	ldr	r2, [pc, #292]	@ (8002b1c <HAL_SPI_MspInit+0x144>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d15a      	bne.n	8002ab0 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	4b48      	ldr	r3, [pc, #288]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	4a47      	ldr	r2, [pc, #284]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002a04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a0a:	4b45      	ldr	r3, [pc, #276]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	4b41      	ldr	r3, [pc, #260]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a40      	ldr	r2, [pc, #256]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b3e      	ldr	r3, [pc, #248]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a32:	23e0      	movs	r3, #224	@ 0xe0
 8002a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a42:	2305      	movs	r3, #5
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4835      	ldr	r0, [pc, #212]	@ (8002b24 <HAL_SPI_MspInit+0x14c>)
 8002a4e:	f001 f9ad 	bl	8003dac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002a52:	4b35      	ldr	r3, [pc, #212]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002a54:	4a35      	ldr	r2, [pc, #212]	@ (8002b2c <HAL_SPI_MspInit+0x154>)
 8002a56:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002a58:	4b33      	ldr	r3, [pc, #204]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002a5a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002a5e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a60:	4b31      	ldr	r3, [pc, #196]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002a62:	2240      	movs	r2, #64	@ 0x40
 8002a64:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a66:	4b30      	ldr	r3, [pc, #192]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002a6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a72:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a74:	4b2c      	ldr	r3, [pc, #176]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002a80:	4b29      	ldr	r3, [pc, #164]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a86:	4b28      	ldr	r3, [pc, #160]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a8c:	4b26      	ldr	r3, [pc, #152]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002a92:	4825      	ldr	r0, [pc, #148]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002a94:	f000 fe1a 	bl	80036cc <HAL_DMA_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8002a9e:	f7ff ff6d 	bl	800297c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a20      	ldr	r2, [pc, #128]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002aa6:	649a      	str	r2, [r3, #72]	@ 0x48
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b28 <HAL_SPI_MspInit+0x150>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002aae:	e031      	b.n	8002b14 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b30 <HAL_SPI_MspInit+0x158>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d12c      	bne.n	8002b14 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	4a17      	ldr	r2, [pc, #92]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	4a10      	ldr	r2, [pc, #64]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <HAL_SPI_MspInit+0x148>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002af2:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8002af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b00:	2303      	movs	r3, #3
 8002b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b04:	2305      	movs	r3, #5
 8002b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	f107 031c 	add.w	r3, r7, #28
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4809      	ldr	r0, [pc, #36]	@ (8002b34 <HAL_SPI_MspInit+0x15c>)
 8002b10:	f001 f94c 	bl	8003dac <HAL_GPIO_Init>
}
 8002b14:	bf00      	nop
 8002b16:	3730      	adds	r7, #48	@ 0x30
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40013000 	.word	0x40013000
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	20009ae4 	.word	0x20009ae4
 8002b2c:	40026458 	.word	0x40026458
 8002b30:	40003800 	.word	0x40003800
 8002b34:	40020400 	.word	0x40020400

08002b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <NMI_Handler+0x4>

08002b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <HardFault_Handler+0x4>

08002b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <MemManage_Handler+0x4>

08002b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <BusFault_Handler+0x4>

08002b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <UsageFault_Handler+0x4>

08002b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b8e:	f000 fc47 	bl	8003420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002b9c:	4802      	ldr	r0, [pc, #8]	@ (8002ba8 <DMA2_Stream3_IRQHandler+0x10>)
 8002b9e:	f000 fe9b 	bl	80038d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20009ae4 	.word	0x20009ae4

08002bac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return 1;
 8002bb0:	2301      	movs	r3, #1
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <_kill>:

int _kill(int pid, int sig)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bc6:	f003 fad3 	bl	8006170 <__errno>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2216      	movs	r2, #22
 8002bce:	601a      	str	r2, [r3, #0]
  return -1;
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_exit>:

void _exit (int status)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ffe7 	bl	8002bbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bee:	bf00      	nop
 8002bf0:	e7fd      	b.n	8002bee <_exit+0x12>

08002bf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	e00a      	b.n	8002c1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c04:	f3af 8000 	nop.w
 8002c08:	4601      	mov	r1, r0
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	60ba      	str	r2, [r7, #8]
 8002c10:	b2ca      	uxtb	r2, r1
 8002c12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	dbf0      	blt.n	8002c04 <_read+0x12>
  }

  return len;
 8002c22:	687b      	ldr	r3, [r7, #4]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e009      	b.n	8002c52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	60ba      	str	r2, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	dbf1      	blt.n	8002c3e <_write+0x12>
  }
  return len;
 8002c5a:	687b      	ldr	r3, [r7, #4]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_close>:

int _close(int file)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <_isatty>:

int _isatty(int file)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ca4:	2301      	movs	r3, #1
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd4:	4a14      	ldr	r2, [pc, #80]	@ (8002d28 <_sbrk+0x5c>)
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <_sbrk+0x60>)
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ce0:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <_sbrk+0x64>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce8:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <_sbrk+0x64>)
 8002cea:	4a12      	ldr	r2, [pc, #72]	@ (8002d34 <_sbrk+0x68>)
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cee:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d207      	bcs.n	8002d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cfc:	f003 fa38 	bl	8006170 <__errno>
 8002d00:	4603      	mov	r3, r0
 8002d02:	220c      	movs	r2, #12
 8002d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	e009      	b.n	8002d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d0c:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <_sbrk+0x64>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d12:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	4a05      	ldr	r2, [pc, #20]	@ (8002d30 <_sbrk+0x64>)
 8002d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20018000 	.word	0x20018000
 8002d2c:	00000400 	.word	0x00000400
 8002d30:	20009b44 	.word	0x20009b44
 8002d34:	20009cc8 	.word	0x20009cc8

08002d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d3c:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <SystemInit+0x20>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d42:	4a05      	ldr	r2, [pc, #20]	@ (8002d58 <SystemInit+0x20>)
 8002d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d60:	f7ff ffea 	bl	8002d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d64:	480c      	ldr	r0, [pc, #48]	@ (8002d98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d66:	490d      	ldr	r1, [pc, #52]	@ (8002d9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d68:	4a0d      	ldr	r2, [pc, #52]	@ (8002da0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d6c:	e002      	b.n	8002d74 <LoopCopyDataInit>

08002d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d72:	3304      	adds	r3, #4

08002d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d78:	d3f9      	bcc.n	8002d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002da8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d80:	e001      	b.n	8002d86 <LoopFillZerobss>

08002d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d84:	3204      	adds	r2, #4

08002d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d88:	d3fb      	bcc.n	8002d82 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002d8a:	f003 f9f7 	bl	800617c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d8e:	f7ff f97d 	bl	800208c <main>
  bx  lr    
 8002d92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d9c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002da0:	08016ec8 	.word	0x08016ec8
  ldr r2, =_sbss
 8002da4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002da8:	20009cc8 	.word	0x20009cc8

08002dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <ADC_IRQHandler>
	...

08002db0 <xpt2046_init>:

/**
 * Init the moduel
 */
void xpt2046_init()
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
	ts_ControlByte.bitMode = XPT2046_12BIT_MODE;
 8002db4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e30 <xpt2046_init+0x80>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	709a      	strb	r2, [r3, #2]
	ts_ControlByte.powerMode = XPT2046_REFERENCE_OFF_ADC_ON;
 8002dba:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <xpt2046_init+0x80>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	711a      	strb	r2, [r3, #4]
	ts_ControlByte.reference = XPT2046_DFR_MODE;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e30 <xpt2046_init+0x80>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	70da      	strb	r2, [r3, #3]
	ts_ControlByte.channel = XPT2046_DFR_X; //by default
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <xpt2046_init+0x80>)
 8002dc8:	2250      	movs	r2, #80	@ 0x50
 8002dca:	705a      	strb	r2, [r3, #1]
	ts_ControlByte.startBit = XPT2046_START;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	@ (8002e30 <xpt2046_init+0x80>)
 8002dce:	2280      	movs	r2, #128	@ 0x80
 8002dd0:	701a      	strb	r2, [r3, #0]
	ts_Orientation = XPT2046_ORIENTATION_PORTRAIT_MIRROR;
 8002dd2:	4b18      	ldr	r3, [pc, #96]	@ (8002e34 <xpt2046_init+0x84>)
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	701a      	strb	r2, [r3, #0]
	ts_Size.width = XPT2046_WIDTH;
 8002dd8:	4b17      	ldr	r3, [pc, #92]	@ (8002e38 <xpt2046_init+0x88>)
 8002dda:	22f0      	movs	r2, #240	@ 0xf0
 8002ddc:	801a      	strh	r2, [r3, #0]
	ts_Size.height = XPT2046_HEIGHT;
 8002dde:	4b16      	ldr	r3, [pc, #88]	@ (8002e38 <xpt2046_init+0x88>)
 8002de0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002de4:	805a      	strh	r2, [r3, #2]
	ts_Cs_Pin = XPT2046_CS_Pin;
 8002de6:	4b15      	ldr	r3, [pc, #84]	@ (8002e3c <xpt2046_init+0x8c>)
 8002de8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002dec:	801a      	strh	r2, [r3, #0]
	ts_Cs_Port = XPT2046_CS_Port;
 8002dee:	4b14      	ldr	r3, [pc, #80]	@ (8002e40 <xpt2046_init+0x90>)
 8002df0:	4a14      	ldr	r2, [pc, #80]	@ (8002e44 <xpt2046_init+0x94>)
 8002df2:	601a      	str	r2, [r3, #0]
	ts_Penirq_Pin = XPT2046_PENIRQ_Pin;
 8002df4:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <xpt2046_init+0x98>)
 8002df6:	2202      	movs	r2, #2
 8002df8:	801a      	strh	r2, [r3, #0]
	ts_Penirq_Port = XPT2046_PENIRQ_Port;
 8002dfa:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <xpt2046_init+0x9c>)
 8002dfc:	4a11      	ldr	r2, [pc, #68]	@ (8002e44 <xpt2046_init+0x94>)
 8002dfe:	601a      	str	r2, [r3, #0]
	command = ts_ControlByte.bitMode |  ts_ControlByte.powerMode |ts_ControlByte.reference |ts_ControlByte.channel |ts_ControlByte.startBit;
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <xpt2046_init+0x80>)
 8002e02:	789a      	ldrb	r2, [r3, #2]
 8002e04:	4b0a      	ldr	r3, [pc, #40]	@ (8002e30 <xpt2046_init+0x80>)
 8002e06:	791b      	ldrb	r3, [r3, #4]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <xpt2046_init+0x80>)
 8002e0e:	78db      	ldrb	r3, [r3, #3]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <xpt2046_init+0x80>)
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <xpt2046_init+0x80>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <xpt2046_init+0xa0>)
 8002e26:	701a      	strb	r2, [r3, #0]
	xpt2046_unselect();
 8002e28:	f000 f834 	bl	8002e94 <xpt2046_unselect>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20009b60 	.word	0x20009b60
 8002e34:	20009b5a 	.word	0x20009b5a
 8002e38:	20009b5c 	.word	0x20009b5c
 8002e3c:	20009b70 	.word	0x20009b70
 8002e40:	20009b68 	.word	0x20009b68
 8002e44:	40020400 	.word	0x40020400
 8002e48:	20009b72 	.word	0x20009b72
 8002e4c:	20009b6c 	.word	0x20009b6c
 8002e50:	20009b74 	.word	0x20009b74

08002e54 <xpt2046_zthreshold>:
	ts_Penirq_Port = penirq_port;
	ts_Penirq_Pin = penirq_pin;
}

uint16_t xpt2046_zthreshold()
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	if(ts_ControlByte.bitMode == XPT2046_8BIT_MODE)
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <xpt2046_zthreshold+0x1c>)
 8002e5a:	789b      	ldrb	r3, [r3, #2]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d101      	bne.n	8002e64 <xpt2046_zthreshold+0x10>
	{
		return Z_THRESHOLD_08BIT;
 8002e60:	2307      	movs	r3, #7
 8002e62:	e000      	b.n	8002e66 <xpt2046_zthreshold+0x12>
	}else
	{
		return Z_THRESHOLD_12BIT;
 8002e64:	2328      	movs	r3, #40	@ 0x28
	}
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	20009b60 	.word	0x20009b60

08002e74 <xpt2046_select>:
void xpt2046_select()
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ts_Cs_Port,ts_Cs_Pin,GPIO_PIN_RESET);
 8002e78:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <xpt2046_select+0x18>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a04      	ldr	r2, [pc, #16]	@ (8002e90 <xpt2046_select+0x1c>)
 8002e7e:	8811      	ldrh	r1, [r2, #0]
 8002e80:	2200      	movs	r2, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f92e 	bl	80040e4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(XPT2046_CS_Port,XPT2046_CS_Pin,GPIO_PIN_RESET);
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20009b68 	.word	0x20009b68
 8002e90:	20009b70 	.word	0x20009b70

08002e94 <xpt2046_unselect>:

void xpt2046_unselect()
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ts_Cs_Port,ts_Cs_Pin,GPIO_PIN_SET);
 8002e98:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <xpt2046_unselect+0x18>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <xpt2046_unselect+0x1c>)
 8002e9e:	8811      	ldrh	r1, [r2, #0]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 f91e 	bl	80040e4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(XPT2046_CS_Port,XPT2046_CS_Pin,GPIO_PIN_SET);
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20009b68 	.word	0x20009b68
 8002eb0:	20009b70 	.word	0x20009b70

08002eb4 <xpt2046_interrupt>:

uint8_t xpt2046_interrupt()
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(ts_Penirq_Port,ts_Penirq_Pin) == GPIO_PIN_RESET; //Means touchScreen was pressed
 8002eb8:	4b07      	ldr	r3, [pc, #28]	@ (8002ed8 <xpt2046_interrupt+0x24>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a07      	ldr	r2, [pc, #28]	@ (8002edc <xpt2046_interrupt+0x28>)
 8002ebe:	8812      	ldrh	r2, [r2, #0]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 f8f6 	bl	80040b4 <HAL_GPIO_ReadPin>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf0c      	ite	eq
 8002ece:	2301      	moveq	r3, #1
 8002ed0:	2300      	movne	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20009b6c 	.word	0x20009b6c
 8002edc:	20009b72 	.word	0x20009b72

08002ee0 <xpt2046_pressed>:

uint8_t xpt2046_pressed()
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
	if(xpt2046_interruptions_activated())
 8002ee6:	f000 f819 	bl	8002f1c <xpt2046_interruptions_activated>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <xpt2046_pressed+0x18>
	{
		return xpt2046_interrupt();
 8002ef0:	f7ff ffe0 	bl	8002eb4 <xpt2046_interrupt>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	e00b      	b.n	8002f10 <xpt2046_pressed+0x30>
	}else
	{
		uint16_t zt =  xpt2046_zthreshold();
 8002ef8:	f7ff ffac 	bl	8002e54 <xpt2046_zthreshold>
 8002efc:	4603      	mov	r3, r0
 8002efe:	80fb      	strh	r3, [r7, #6]
		return (ts_CoordinatesRaw.z1 > zt );
 8002f00:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <xpt2046_pressed+0x38>)
 8002f02:	889b      	ldrh	r3, [r3, #4]
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	bf34      	ite	cc
 8002f0a:	2301      	movcc	r3, #1
 8002f0c:	2300      	movcs	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
	}
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20009b4c 	.word	0x20009b4c

08002f1c <xpt2046_interruptions_activated>:

uint8_t xpt2046_interruptions_activated()
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
	return (ts_ControlByte.powerMode == XPT2046_POWER_DOWN || ts_ControlByte.powerMode == XPT2046_REFERENCE_ON_ADC_OFF);
 8002f20:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <xpt2046_interruptions_activated+0x28>)
 8002f22:	791b      	ldrb	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <xpt2046_interruptions_activated+0x14>
 8002f28:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <xpt2046_interruptions_activated+0x28>)
 8002f2a:	791b      	ldrb	r3, [r3, #4]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d101      	bne.n	8002f34 <xpt2046_interruptions_activated+0x18>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <xpt2046_interruptions_activated+0x1a>
 8002f34:	2300      	movs	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20009b60 	.word	0x20009b60

08002f48 <xpt2046_control_byte_update>:
/**
 * Generate control byte
 */
void xpt2046_control_byte_update()
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
	command =  ts_ControlByte.startBit |  ts_ControlByte.channel | ts_ControlByte.bitMode | ts_ControlByte.reference | ts_ControlByte.powerMode  ;
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <xpt2046_control_byte_update+0x38>)
 8002f4e:	781a      	ldrb	r2, [r3, #0]
 8002f50:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <xpt2046_control_byte_update+0x38>)
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <xpt2046_control_byte_update+0x38>)
 8002f5a:	789b      	ldrb	r3, [r3, #2]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b07      	ldr	r3, [pc, #28]	@ (8002f80 <xpt2046_control_byte_update+0x38>)
 8002f62:	78db      	ldrb	r3, [r3, #3]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <xpt2046_control_byte_update+0x38>)
 8002f6a:	791b      	ldrb	r3, [r3, #4]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <xpt2046_control_byte_update+0x3c>)
 8002f72:	701a      	strb	r2, [r3, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20009b60 	.word	0x20009b60
 8002f84:	20009b74 	.word	0x20009b74

08002f88 <xpt2046_max_measurement>:


/**
 * Return max value depending on bit mode.
 */
uint16_t xpt2046_max_measurement(){
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
	if(ts_ControlByte.bitMode == XPT2046_8BIT_MODE)
 8002f8c:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <xpt2046_max_measurement+0x20>)
 8002f8e:	789b      	ldrb	r3, [r3, #2]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d101      	bne.n	8002f98 <xpt2046_max_measurement+0x10>
	{
		return 120; //This must be calibrated
 8002f94:	2378      	movs	r3, #120	@ 0x78
 8002f96:	e001      	b.n	8002f9c <xpt2046_max_measurement+0x14>
	}else
	{
		return 1900; // this value must be calibrated on your on touch screen
 8002f98:	f240 736c 	movw	r3, #1900	@ 0x76c
	}
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20009b60 	.word	0x20009b60

08002fac <xpt2046_spi>:
}
/**
 *  Set internal SPI to user defined SPI port
 */
void xpt2046_spi(SPI_HandleTypeDef* spi)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	spiPort =  spi;
 8002fb4:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <xpt2046_spi+0x1c>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6013      	str	r3, [r2, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20009b48 	.word	0x20009b48

08002fcc <xpt2046_update>:


/**
 * Update X,Y,Z values of touchScreen
 */
void xpt2046_update(){
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	@ 0x30
 8002fd0:	af02      	add	r7, sp, #8
	xpt2046_select();
 8002fd2:	f7ff ff4f 	bl	8002e74 <xpt2046_select>

	if(xpt2046_interruptions_activated())
 8002fd6:	f7ff ffa1 	bl	8002f1c <xpt2046_interruptions_activated>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <xpt2046_update+0x20>
	{
		/* this means Interrupt pin was enabled*/
		if(!xpt2046_interrupt())
 8002fe0:	f7ff ff68 	bl	8002eb4 <xpt2046_interrupt>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 819c 	beq.w	8003324 <xpt2046_update+0x358>
		}


	}

	uint8_t zeros[2] = { 0x00,0x00};
 8002fec:	2300      	movs	r3, #0
 8002fee:	823b      	strh	r3, [r7, #16]
	uint32_t x_avg = 0, y_avg = 0,z1_avg=0,z2_avg=0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < AVERAGE_POINTS; i++)
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	e0ad      	b.n	8003162 <xpt2046_update+0x196>
	{
		ts_ControlByte.channel = XPT2046_DFR_X;
 8003006:	4b98      	ldr	r3, [pc, #608]	@ (8003268 <xpt2046_update+0x29c>)
 8003008:	2250      	movs	r2, #80	@ 0x50
 800300a:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 800300c:	f7ff ff9c 	bl	8002f48 <xpt2046_control_byte_update>

		uint8_t receiveByteX[2] = {0x00,0x00};
 8003010:	2300      	movs	r3, #0
 8003012:	81bb      	strh	r3, [r7, #12]

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8003014:	4b95      	ldr	r3, [pc, #596]	@ (800326c <xpt2046_update+0x2a0>)
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
 800301c:	2201      	movs	r2, #1
 800301e:	4994      	ldr	r1, [pc, #592]	@ (8003270 <xpt2046_update+0x2a4>)
 8003020:	f001 fd27 	bl	8004a72 <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteX,sizeof(receiveByteX),HAL_MAX_DELAY);
 8003024:	4b91      	ldr	r3, [pc, #580]	@ (800326c <xpt2046_update+0x2a0>)
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	f107 020c 	add.w	r2, r7, #12
 800302c:	f107 0110 	add.w	r1, r7, #16
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2302      	movs	r3, #2
 8003038:	f001 fe5f 	bl	8004cfa <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Y;
 800303c:	4b8a      	ldr	r3, [pc, #552]	@ (8003268 <xpt2046_update+0x29c>)
 800303e:	2210      	movs	r2, #16
 8003040:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 8003042:	f7ff ff81 	bl	8002f48 <xpt2046_control_byte_update>

		uint8_t receiveByteY[2] = {0x00,0x00};
 8003046:	2300      	movs	r3, #0
 8003048:	813b      	strh	r3, [r7, #8]
		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 800304a:	4b88      	ldr	r3, [pc, #544]	@ (800326c <xpt2046_update+0x2a0>)
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	2201      	movs	r2, #1
 8003054:	4986      	ldr	r1, [pc, #536]	@ (8003270 <xpt2046_update+0x2a4>)
 8003056:	f001 fd0c 	bl	8004a72 <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteY,sizeof(receiveByteY),HAL_MAX_DELAY);
 800305a:	4b84      	ldr	r3, [pc, #528]	@ (800326c <xpt2046_update+0x2a0>)
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	f107 0208 	add.w	r2, r7, #8
 8003062:	f107 0110 	add.w	r1, r7, #16
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2302      	movs	r3, #2
 800306e:	f001 fe44 	bl	8004cfa <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Z1;
 8003072:	4b7d      	ldr	r3, [pc, #500]	@ (8003268 <xpt2046_update+0x29c>)
 8003074:	2230      	movs	r2, #48	@ 0x30
 8003076:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 8003078:	f7ff ff66 	bl	8002f48 <xpt2046_control_byte_update>
		uint8_t receiveByteZ1[2] = {0x00,0x00};
 800307c:	2300      	movs	r3, #0
 800307e:	80bb      	strh	r3, [r7, #4]

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8003080:	4b7a      	ldr	r3, [pc, #488]	@ (800326c <xpt2046_update+0x2a0>)
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	f04f 33ff 	mov.w	r3, #4294967295
 8003088:	2201      	movs	r2, #1
 800308a:	4979      	ldr	r1, [pc, #484]	@ (8003270 <xpt2046_update+0x2a4>)
 800308c:	f001 fcf1 	bl	8004a72 <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteZ1,sizeof(receiveByteZ1),HAL_MAX_DELAY);
 8003090:	4b76      	ldr	r3, [pc, #472]	@ (800326c <xpt2046_update+0x2a0>)
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	1d3a      	adds	r2, r7, #4
 8003096:	f107 0110 	add.w	r1, r7, #16
 800309a:	f04f 33ff 	mov.w	r3, #4294967295
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2302      	movs	r3, #2
 80030a2:	f001 fe2a 	bl	8004cfa <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Z2;
 80030a6:	4b70      	ldr	r3, [pc, #448]	@ (8003268 <xpt2046_update+0x29c>)
 80030a8:	2240      	movs	r2, #64	@ 0x40
 80030aa:	705a      	strb	r2, [r3, #1]
		xpt2046_control_byte_update();
 80030ac:	f7ff ff4c 	bl	8002f48 <xpt2046_control_byte_update>
		uint8_t receiveByteZ2[2] = {0x00,0x00};
 80030b0:	2300      	movs	r3, #0
 80030b2:	803b      	strh	r3, [r7, #0]

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 80030b4:	4b6d      	ldr	r3, [pc, #436]	@ (800326c <xpt2046_update+0x2a0>)
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	2201      	movs	r2, #1
 80030be:	496c      	ldr	r1, [pc, #432]	@ (8003270 <xpt2046_update+0x2a4>)
 80030c0:	f001 fcd7 	bl	8004a72 <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteZ2,sizeof(receiveByteZ2),HAL_MAX_DELAY);
 80030c4:	4b69      	ldr	r3, [pc, #420]	@ (800326c <xpt2046_update+0x2a0>)
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	463a      	mov	r2, r7
 80030ca:	f107 0110 	add.w	r1, r7, #16
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	2302      	movs	r3, #2
 80030d6:	f001 fe10 	bl	8004cfa <HAL_SPI_TransmitReceive>
		if(ts_ControlByte.bitMode == XPT2046_12BIT_MODE)
 80030da:	4b63      	ldr	r3, [pc, #396]	@ (8003268 <xpt2046_update+0x29c>)
 80030dc:	789b      	ldrb	r3, [r3, #2]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d128      	bne.n	8003134 <xpt2046_update+0x168>
		{
			x_avg+= 	(receiveByteX[1] 	<< 4) | (receiveByteX[0] 	>> 4);
 80030e2:	7b7b      	ldrb	r3, [r7, #13]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	7b3a      	ldrb	r2, [r7, #12]
 80030e8:	0912      	lsrs	r2, r2, #4
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	4313      	orrs	r3, r2
 80030ee:	461a      	mov	r2, r3
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	4413      	add	r3, r2
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
			y_avg+= 	(receiveByteY[1] 	<< 4) | (receiveByteY[0] 	>> 4);
 80030f6:	7a7b      	ldrb	r3, [r7, #9]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	7a3a      	ldrb	r2, [r7, #8]
 80030fc:	0912      	lsrs	r2, r2, #4
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	4313      	orrs	r3, r2
 8003102:	461a      	mov	r2, r3
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	4413      	add	r3, r2
 8003108:	623b      	str	r3, [r7, #32]
			z1_avg+= 	(receiveByteZ1[1] 	<< 4) | (receiveByteZ1[0] 	>> 4);
 800310a:	797b      	ldrb	r3, [r7, #5]
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	793a      	ldrb	r2, [r7, #4]
 8003110:	0912      	lsrs	r2, r2, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	4313      	orrs	r3, r2
 8003116:	461a      	mov	r2, r3
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	4413      	add	r3, r2
 800311c:	61fb      	str	r3, [r7, #28]
			z2_avg+= 	(receiveByteZ2[1] 	<< 4) | (receiveByteZ2[0] 	>> 4);
 800311e:	787b      	ldrb	r3, [r7, #1]
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	783a      	ldrb	r2, [r7, #0]
 8003124:	0912      	lsrs	r2, r2, #4
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	4313      	orrs	r3, r2
 800312a:	461a      	mov	r2, r3
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	4413      	add	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e013      	b.n	800315c <xpt2046_update+0x190>
		}else
		{
			x_avg+= 	(receiveByteX[1]);
 8003134:	7b7b      	ldrb	r3, [r7, #13]
 8003136:	461a      	mov	r2, r3
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	4413      	add	r3, r2
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
			y_avg+= 	(receiveByteY[1]) ;
 800313e:	7a7b      	ldrb	r3, [r7, #9]
 8003140:	461a      	mov	r2, r3
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	4413      	add	r3, r2
 8003146:	623b      	str	r3, [r7, #32]
			z1_avg+= 	(receiveByteZ1[1]);
 8003148:	797b      	ldrb	r3, [r7, #5]
 800314a:	461a      	mov	r2, r3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	61fb      	str	r3, [r7, #28]
			z2_avg+= 	(receiveByteZ2[1]);
 8003152:	787b      	ldrb	r3, [r7, #1]
 8003154:	461a      	mov	r2, r3
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4413      	add	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < AVERAGE_POINTS; i++)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3301      	adds	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b09      	cmp	r3, #9
 8003166:	f77f af4e 	ble.w	8003006 <xpt2046_update+0x3a>
		}

	}

	ts_CoordinatesRaw.x = x_avg/AVERAGE_POINTS;
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	4a41      	ldr	r2, [pc, #260]	@ (8003274 <xpt2046_update+0x2a8>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	08db      	lsrs	r3, r3, #3
 8003174:	b29a      	uxth	r2, r3
 8003176:	4b40      	ldr	r3, [pc, #256]	@ (8003278 <xpt2046_update+0x2ac>)
 8003178:	801a      	strh	r2, [r3, #0]
	ts_CoordinatesRaw.y = y_avg/AVERAGE_POINTS;
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	4a3d      	ldr	r2, [pc, #244]	@ (8003274 <xpt2046_update+0x2a8>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	08db      	lsrs	r3, r3, #3
 8003184:	b29a      	uxth	r2, r3
 8003186:	4b3c      	ldr	r3, [pc, #240]	@ (8003278 <xpt2046_update+0x2ac>)
 8003188:	805a      	strh	r2, [r3, #2]
	ts_CoordinatesRaw.z1 = z1_avg/AVERAGE_POINTS;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4a39      	ldr	r2, [pc, #228]	@ (8003274 <xpt2046_update+0x2a8>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	08db      	lsrs	r3, r3, #3
 8003194:	b29a      	uxth	r2, r3
 8003196:	4b38      	ldr	r3, [pc, #224]	@ (8003278 <xpt2046_update+0x2ac>)
 8003198:	809a      	strh	r2, [r3, #4]
	ts_CoordinatesRaw.z2 = z2_avg/AVERAGE_POINTS;
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4a35      	ldr	r2, [pc, #212]	@ (8003274 <xpt2046_update+0x2a8>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	08db      	lsrs	r3, r3, #3
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	4b34      	ldr	r3, [pc, #208]	@ (8003278 <xpt2046_update+0x2ac>)
 80031a8:	80da      	strh	r2, [r3, #6]
	uint16_t max = xpt2046_max_measurement();
 80031aa:	f7ff feed 	bl	8002f88 <xpt2046_max_measurement>
 80031ae:	4603      	mov	r3, r0
 80031b0:	827b      	strh	r3, [r7, #18]
	/* Consider (0,0) as the top left point of the screen */
	switch(ts_Orientation)
 80031b2:	4b32      	ldr	r3, [pc, #200]	@ (800327c <xpt2046_update+0x2b0>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	f200 80b0 	bhi.w	800331c <xpt2046_update+0x350>
 80031bc:	a201      	add	r2, pc, #4	@ (adr r2, 80031c4 <xpt2046_update+0x1f8>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	0800321f 	.word	0x0800321f
 80031cc:	08003289 	.word	0x08003289
 80031d0:	080032d3 	.word	0x080032d3
	{
		case XPT2046_ORIENTATION_PORTRAIT:
		{
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 80031d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003280 <xpt2046_update+0x2b4>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	8a7b      	ldrh	r3, [r7, #18]
 80031dc:	4a26      	ldr	r2, [pc, #152]	@ (8003278 <xpt2046_update+0x2ac>)
 80031de:	8812      	ldrh	r2, [r2, #0]
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	fb03 f201 	mul.w	r2, r3, r1
 80031e6:	8a7b      	ldrh	r3, [r7, #18]
 80031e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b0c      	subs	r3, #12
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <xpt2046_update+0x2b8>)
 80031f4:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 80031f6:	4b22      	ldr	r3, [pc, #136]	@ (8003280 <xpt2046_update+0x2b4>)
 80031f8:	885b      	ldrh	r3, [r3, #2]
 80031fa:	461a      	mov	r2, r3
 80031fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003278 <xpt2046_update+0x2ac>)
 80031fe:	885b      	ldrh	r3, [r3, #2]
 8003200:	fb03 f202 	mul.w	r2, r3, r2
 8003204:	8a7b      	ldrh	r3, [r7, #18]
 8003206:	fb92 f3f3 	sdiv	r3, r2, r3
 800320a:	b29b      	uxth	r3, r3
 800320c:	3310      	adds	r3, #16
 800320e:	b29a      	uxth	r2, r3
 8003210:	4b1c      	ldr	r3, [pc, #112]	@ (8003284 <xpt2046_update+0x2b8>)
 8003212:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8003214:	4b18      	ldr	r3, [pc, #96]	@ (8003278 <xpt2046_update+0x2ac>)
 8003216:	889a      	ldrh	r2, [r3, #4]
 8003218:	4b1a      	ldr	r3, [pc, #104]	@ (8003284 <xpt2046_update+0x2b8>)
 800321a:	809a      	strh	r2, [r3, #4]
			break;
 800321c:	e07f      	b.n	800331e <xpt2046_update+0x352>
		}
		case XPT2046_ORIENTATION_LANDSCAPE:
		{
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 800321e:	4b18      	ldr	r3, [pc, #96]	@ (8003280 <xpt2046_update+0x2b4>)
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	8a7b      	ldrh	r3, [r7, #18]
 8003226:	4a14      	ldr	r2, [pc, #80]	@ (8003278 <xpt2046_update+0x2ac>)
 8003228:	8852      	ldrh	r2, [r2, #2]
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	fb03 f201 	mul.w	r2, r3, r1
 8003230:	8a7b      	ldrh	r3, [r7, #18]
 8003232:	fb92 f3f3 	sdiv	r3, r2, r3
 8003236:	b29b      	uxth	r3, r3
 8003238:	3310      	adds	r3, #16
 800323a:	b29a      	uxth	r2, r3
 800323c:	4b11      	ldr	r3, [pc, #68]	@ (8003284 <xpt2046_update+0x2b8>)
 800323e:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003240:	4b0f      	ldr	r3, [pc, #60]	@ (8003280 <xpt2046_update+0x2b4>)
 8003242:	885b      	ldrh	r3, [r3, #2]
 8003244:	461a      	mov	r2, r3
 8003246:	4b0c      	ldr	r3, [pc, #48]	@ (8003278 <xpt2046_update+0x2ac>)
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	fb03 f202 	mul.w	r2, r3, r2
 800324e:	8a7b      	ldrh	r3, [r7, #18]
 8003250:	fb92 f3f3 	sdiv	r3, r2, r3
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b0c      	subs	r3, #12
 8003258:	b29a      	uxth	r2, r3
 800325a:	4b0a      	ldr	r3, [pc, #40]	@ (8003284 <xpt2046_update+0x2b8>)
 800325c:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <xpt2046_update+0x2ac>)
 8003260:	889a      	ldrh	r2, [r3, #4]
 8003262:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <xpt2046_update+0x2b8>)
 8003264:	809a      	strh	r2, [r3, #4]
			break;
 8003266:	e05a      	b.n	800331e <xpt2046_update+0x352>
 8003268:	20009b60 	.word	0x20009b60
 800326c:	20009b48 	.word	0x20009b48
 8003270:	20009b74 	.word	0x20009b74
 8003274:	cccccccd 	.word	0xcccccccd
 8003278:	20009b4c 	.word	0x20009b4c
 800327c:	20009b5a 	.word	0x20009b5a
 8003280:	20009b5c 	.word	0x20009b5c
 8003284:	20009b54 	.word	0x20009b54
		}
		case XPT2046_ORIENTATION_PORTRAIT_MIRROR:
		{
			ts_Coordinates.x = (ts_Size.width * (ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003288:	4b28      	ldr	r3, [pc, #160]	@ (800332c <xpt2046_update+0x360>)
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	4b28      	ldr	r3, [pc, #160]	@ (8003330 <xpt2046_update+0x364>)
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	fb03 f202 	mul.w	r2, r3, r2
 8003296:	8a7b      	ldrh	r3, [r7, #18]
 8003298:	fb92 f3f3 	sdiv	r3, r2, r3
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b0c      	subs	r3, #12
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	4b24      	ldr	r3, [pc, #144]	@ (8003334 <xpt2046_update+0x368>)
 80032a4:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 80032a6:	4b21      	ldr	r3, [pc, #132]	@ (800332c <xpt2046_update+0x360>)
 80032a8:	885b      	ldrh	r3, [r3, #2]
 80032aa:	4619      	mov	r1, r3
 80032ac:	8a7b      	ldrh	r3, [r7, #18]
 80032ae:	4a20      	ldr	r2, [pc, #128]	@ (8003330 <xpt2046_update+0x364>)
 80032b0:	8852      	ldrh	r2, [r2, #2]
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	fb03 f201 	mul.w	r2, r3, r1
 80032b8:	8a7b      	ldrh	r3, [r7, #18]
 80032ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3310      	adds	r3, #16
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003334 <xpt2046_update+0x368>)
 80032c6:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 80032c8:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <xpt2046_update+0x364>)
 80032ca:	889a      	ldrh	r2, [r3, #4]
 80032cc:	4b19      	ldr	r3, [pc, #100]	@ (8003334 <xpt2046_update+0x368>)
 80032ce:	809a      	strh	r2, [r3, #4]
			break;
 80032d0:	e025      	b.n	800331e <xpt2046_update+0x352>
		}
		case XPT2046_ORIENTATION_LANDSCAPE_MIRROR:
		{
			ts_Coordinates.x = (ts_Size.width *  (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 80032d2:	4b16      	ldr	r3, [pc, #88]	@ (800332c <xpt2046_update+0x360>)
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <xpt2046_update+0x364>)
 80032da:	885b      	ldrh	r3, [r3, #2]
 80032dc:	fb03 f202 	mul.w	r2, r3, r2
 80032e0:	8a7b      	ldrh	r3, [r7, #18]
 80032e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3310      	adds	r3, #16
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <xpt2046_update+0x368>)
 80032ee:	801a      	strh	r2, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (max- ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 80032f0:	4b0e      	ldr	r3, [pc, #56]	@ (800332c <xpt2046_update+0x360>)
 80032f2:	885b      	ldrh	r3, [r3, #2]
 80032f4:	4619      	mov	r1, r3
 80032f6:	8a7b      	ldrh	r3, [r7, #18]
 80032f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003330 <xpt2046_update+0x364>)
 80032fa:	8812      	ldrh	r2, [r2, #0]
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	fb03 f201 	mul.w	r2, r3, r1
 8003302:	8a7b      	ldrh	r3, [r7, #18]
 8003304:	fb92 f3f3 	sdiv	r3, r2, r3
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b0c      	subs	r3, #12
 800330c:	b29a      	uxth	r2, r3
 800330e:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <xpt2046_update+0x368>)
 8003310:	805a      	strh	r2, [r3, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8003312:	4b07      	ldr	r3, [pc, #28]	@ (8003330 <xpt2046_update+0x364>)
 8003314:	889a      	ldrh	r2, [r3, #4]
 8003316:	4b07      	ldr	r3, [pc, #28]	@ (8003334 <xpt2046_update+0x368>)
 8003318:	809a      	strh	r2, [r3, #4]
			break;
 800331a:	e000      	b.n	800331e <xpt2046_update+0x352>
		}
		default:
		{
			break;
 800331c:	bf00      	nop
		}
	}


	xpt2046_unselect();
 800331e:	f7ff fdb9 	bl	8002e94 <xpt2046_unselect>
 8003322:	e000      	b.n	8003326 <xpt2046_update+0x35a>
			return;
 8003324:	bf00      	nop
}
 8003326:	3728      	adds	r7, #40	@ 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20009b5c 	.word	0x20009b5c
 8003330:	20009b4c 	.word	0x20009b4c
 8003334:	20009b54 	.word	0x20009b54

08003338 <xpt2046_read_position>:

/* by default return 0,0 if the screen isn't pressed*/
void xpt2046_read_position(uint16_t* x, uint16_t* y)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
	xpt2046_update();
 8003342:	f7ff fe43 	bl	8002fcc <xpt2046_update>
	if(xpt2046_pressed())
 8003346:	f7ff fdcb 	bl	8002ee0 <xpt2046_pressed>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <xpt2046_read_position+0x2a>
	{
		*x = ts_Coordinates.x;
 8003350:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <xpt2046_read_position+0x40>)
 8003352:	881a      	ldrh	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	801a      	strh	r2, [r3, #0]
		*y = ts_Coordinates.y;
 8003358:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <xpt2046_read_position+0x40>)
 800335a:	885a      	ldrh	r2, [r3, #2]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	801a      	strh	r2, [r3, #0]
	}else
	{
		*x = 0;
		*y = 0;
	}
}
 8003360:	e005      	b.n	800336e <xpt2046_read_position+0x36>
		*x = 0;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	801a      	strh	r2, [r3, #0]
		*y = 0;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2200      	movs	r2, #0
 800336c:	801a      	strh	r2, [r3, #0]
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20009b54 	.word	0x20009b54

0800337c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003380:	4b0e      	ldr	r3, [pc, #56]	@ (80033bc <HAL_Init+0x40>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0d      	ldr	r2, [pc, #52]	@ (80033bc <HAL_Init+0x40>)
 8003386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800338a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_Init+0x40>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	@ (80033bc <HAL_Init+0x40>)
 8003392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003398:	4b08      	ldr	r3, [pc, #32]	@ (80033bc <HAL_Init+0x40>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a07      	ldr	r2, [pc, #28]	@ (80033bc <HAL_Init+0x40>)
 800339e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033a4:	2003      	movs	r0, #3
 80033a6:	f000 f94f 	bl	8003648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033aa:	200f      	movs	r0, #15
 80033ac:	f000 f808 	bl	80033c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033b0:	f7ff faea 	bl	8002988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023c00 	.word	0x40023c00

080033c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033c8:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <HAL_InitTick+0x54>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b12      	ldr	r3, [pc, #72]	@ (8003418 <HAL_InitTick+0x58>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	4619      	mov	r1, r3
 80033d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033da:	fbb2 f3f3 	udiv	r3, r2, r3
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f967 	bl	80036b2 <HAL_SYSTICK_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e00e      	b.n	800340c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b0f      	cmp	r3, #15
 80033f2:	d80a      	bhi.n	800340a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033f4:	2200      	movs	r2, #0
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	f000 f92f 	bl	800365e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003400:	4a06      	ldr	r2, [pc, #24]	@ (800341c <HAL_InitTick+0x5c>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000014 	.word	0x20000014
 8003418:	2000001c 	.word	0x2000001c
 800341c:	20000018 	.word	0x20000018

08003420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003424:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <HAL_IncTick+0x20>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_IncTick+0x24>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4413      	add	r3, r2
 8003430:	4a04      	ldr	r2, [pc, #16]	@ (8003444 <HAL_IncTick+0x24>)
 8003432:	6013      	str	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	2000001c 	.word	0x2000001c
 8003444:	20009b78 	.word	0x20009b78

08003448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return uwTick;
 800344c:	4b03      	ldr	r3, [pc, #12]	@ (800345c <HAL_GetTick+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20009b78 	.word	0x20009b78

08003460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003468:	f7ff ffee 	bl	8003448 <HAL_GetTick>
 800346c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003478:	d005      	beq.n	8003486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800347a:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <HAL_Delay+0x44>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003486:	bf00      	nop
 8003488:	f7ff ffde 	bl	8003448 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	429a      	cmp	r2, r3
 8003496:	d8f7      	bhi.n	8003488 <HAL_Delay+0x28>
  {
  }
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	2000001c 	.word	0x2000001c

080034a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b8:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034c4:	4013      	ands	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034da:	4a04      	ldr	r2, [pc, #16]	@ (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	60d3      	str	r3, [r2, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f4:	4b04      	ldr	r3, [pc, #16]	@ (8003508 <__NVIC_GetPriorityGrouping+0x18>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 0307 	and.w	r3, r3, #7
}
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	2b00      	cmp	r3, #0
 800351c:	db0b      	blt.n	8003536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4907      	ldr	r1, [pc, #28]	@ (8003544 <__NVIC_EnableIRQ+0x38>)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2001      	movs	r0, #1
 800352e:	fa00 f202 	lsl.w	r2, r0, r2
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000e100 	.word	0xe000e100

08003548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	db0a      	blt.n	8003572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	490c      	ldr	r1, [pc, #48]	@ (8003594 <__NVIC_SetPriority+0x4c>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	440b      	add	r3, r1
 800356c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003570:	e00a      	b.n	8003588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4908      	ldr	r1, [pc, #32]	@ (8003598 <__NVIC_SetPriority+0x50>)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	3b04      	subs	r3, #4
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	440b      	add	r3, r1
 8003586:	761a      	strb	r2, [r3, #24]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000e100 	.word	0xe000e100
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	@ 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f1c3 0307 	rsb	r3, r3, #7
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf28      	it	cs
 80035ba:	2304      	movcs	r3, #4
 80035bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d902      	bls.n	80035cc <NVIC_EncodePriority+0x30>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3b03      	subs	r3, #3
 80035ca:	e000      	b.n	80035ce <NVIC_EncodePriority+0x32>
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	401a      	ands	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e4:	f04f 31ff 	mov.w	r1, #4294967295
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	43d9      	mvns	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	4313      	orrs	r3, r2
         );
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3724      	adds	r7, #36	@ 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003614:	d301      	bcc.n	800361a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003616:	2301      	movs	r3, #1
 8003618:	e00f      	b.n	800363a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361a:	4a0a      	ldr	r2, [pc, #40]	@ (8003644 <SysTick_Config+0x40>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003622:	210f      	movs	r1, #15
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	f7ff ff8e 	bl	8003548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800362c:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <SysTick_Config+0x40>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003632:	4b04      	ldr	r3, [pc, #16]	@ (8003644 <SysTick_Config+0x40>)
 8003634:	2207      	movs	r2, #7
 8003636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	e000e010 	.word	0xe000e010

08003648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff29 	bl	80034a8 <__NVIC_SetPriorityGrouping>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003670:	f7ff ff3e 	bl	80034f0 <__NVIC_GetPriorityGrouping>
 8003674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7ff ff8e 	bl	800359c <NVIC_EncodePriority>
 8003680:	4602      	mov	r2, r0
 8003682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff5d 	bl	8003548 <__NVIC_SetPriority>
}
 800368e:	bf00      	nop
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ff31 	bl	800350c <__NVIC_EnableIRQ>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ffa2 	bl	8003604 <SysTick_Config>
 80036c0:	4603      	mov	r3, r0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036d8:	f7ff feb6 	bl	8003448 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e099      	b.n	800381c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003708:	e00f      	b.n	800372a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800370a:	f7ff fe9d 	bl	8003448 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b05      	cmp	r3, #5
 8003716:	d908      	bls.n	800372a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2203      	movs	r2, #3
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e078      	b.n	800381c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e8      	bne.n	800370a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4b38      	ldr	r3, [pc, #224]	@ (8003824 <HAL_DMA_Init+0x158>)
 8003744:	4013      	ands	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	2b04      	cmp	r3, #4
 8003782:	d107      	bne.n	8003794 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	4313      	orrs	r3, r2
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f023 0307 	bic.w	r3, r3, #7
 80037aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d117      	bne.n	80037ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00e      	beq.n	80037ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fa6f 	bl	8003cb4 <DMA_CheckFifoParam>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2240      	movs	r2, #64	@ 0x40
 80037e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80037ea:	2301      	movs	r3, #1
 80037ec:	e016      	b.n	800381c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa26 	bl	8003c48 <DMA_CalcBaseAndBitshift>
 80037fc:	4603      	mov	r3, r0
 80037fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003804:	223f      	movs	r2, #63	@ 0x3f
 8003806:	409a      	lsls	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	f010803f 	.word	0xf010803f

08003828 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_DMA_Start_IT+0x26>
 800384a:	2302      	movs	r3, #2
 800384c:	e040      	b.n	80038d0 <HAL_DMA_Start_IT+0xa8>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d12f      	bne.n	80038c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f9b8 	bl	8003bec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	223f      	movs	r2, #63	@ 0x3f
 8003882:	409a      	lsls	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0216 	orr.w	r2, r2, #22
 8003896:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0208 	orr.w	r2, r2, #8
 80038ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	e005      	b.n	80038ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
 80038cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003b20 <HAL_DMA_IRQHandler+0x248>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a8e      	ldr	r2, [pc, #568]	@ (8003b24 <HAL_DMA_IRQHandler+0x24c>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003902:	2208      	movs	r2, #8
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01a      	beq.n	8003944 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0204 	bic.w	r2, r2, #4
 800392a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	2208      	movs	r2, #8
 8003932:	409a      	lsls	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393c:	f043 0201 	orr.w	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003948:	2201      	movs	r2, #1
 800394a:	409a      	lsls	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d012      	beq.n	800397a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003966:	2201      	movs	r2, #1
 8003968:	409a      	lsls	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003972:	f043 0202 	orr.w	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397e:	2204      	movs	r2, #4
 8003980:	409a      	lsls	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d012      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	2204      	movs	r2, #4
 800399e:	409a      	lsls	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b4:	2210      	movs	r2, #16
 80039b6:	409a      	lsls	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d043      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d03c      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	2210      	movs	r2, #16
 80039d4:	409a      	lsls	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d018      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d024      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
 8003a06:	e01f      	b.n	8003a48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
 8003a18:	e016      	b.n	8003a48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0208 	bic.w	r2, r2, #8
 8003a36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 808f 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8087 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6e:	2220      	movs	r2, #32
 8003a70:	409a      	lsls	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d136      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0216 	bic.w	r2, r2, #22
 8003a90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003aa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0x1da>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0208 	bic.w	r2, r2, #8
 8003ac0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac6:	223f      	movs	r2, #63	@ 0x3f
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d07e      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
        }
        return;
 8003aee:	e079      	b.n	8003be4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01d      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10d      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d031      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
 8003b1c:	e02c      	b.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
 8003b1e:	bf00      	nop
 8003b20:	20000014 	.word	0x20000014
 8003b24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d023      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
 8003b38:	e01e      	b.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10f      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0210 	bic.w	r2, r2, #16
 8003b56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d032      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2205      	movs	r2, #5
 8003b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d307      	bcc.n	8003bc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f2      	bne.n	8003ba4 <HAL_DMA_IRQHandler+0x2cc>
 8003bbe:	e000      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
 8003be2:	e000      	b.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003be4:	bf00      	nop
    }
  }
}
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b40      	cmp	r3, #64	@ 0x40
 8003c18:	d108      	bne.n	8003c2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c2a:	e007      	b.n	8003c3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	3b10      	subs	r3, #16
 8003c58:	4a14      	ldr	r2, [pc, #80]	@ (8003cac <DMA_CalcBaseAndBitshift+0x64>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c62:	4a13      	ldr	r2, [pc, #76]	@ (8003cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d909      	bls.n	8003c8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	1d1a      	adds	r2, r3, #4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c88:	e007      	b.n	8003c9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	aaaaaaab 	.word	0xaaaaaaab
 8003cb0:	08016b0c 	.word	0x08016b0c

08003cb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11f      	bne.n	8003d0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d856      	bhi.n	8003d82 <DMA_CheckFifoParam+0xce>
 8003cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cdc <DMA_CheckFifoParam+0x28>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003cff 	.word	0x08003cff
 8003ce4:	08003ced 	.word	0x08003ced
 8003ce8:	08003d83 	.word	0x08003d83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d046      	beq.n	8003d86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfc:	e043      	b.n	8003d86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d06:	d140      	bne.n	8003d8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0c:	e03d      	b.n	8003d8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d16:	d121      	bne.n	8003d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d837      	bhi.n	8003d8e <DMA_CheckFifoParam+0xda>
 8003d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <DMA_CheckFifoParam+0x70>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d3b 	.word	0x08003d3b
 8003d2c:	08003d35 	.word	0x08003d35
 8003d30:	08003d4d 	.word	0x08003d4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
      break;
 8003d38:	e030      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d025      	beq.n	8003d92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d4a:	e022      	b.n	8003d92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d54:	d11f      	bne.n	8003d96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d5a:	e01c      	b.n	8003d96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d903      	bls.n	8003d6a <DMA_CheckFifoParam+0xb6>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d003      	beq.n	8003d70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d68:	e018      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6e:	e015      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d80:	e00b      	b.n	8003d9a <DMA_CheckFifoParam+0xe6>
      break;
 8003d82:	bf00      	nop
 8003d84:	e00a      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d86:	bf00      	nop
 8003d88:	e008      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e006      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e004      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d92:	bf00      	nop
 8003d94:	e002      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d96:	bf00      	nop
 8003d98:	e000      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d9a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop

08003dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	@ 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e159      	b.n	800407c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dc8:	2201      	movs	r2, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f040 8148 	bne.w	8004076 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d005      	beq.n	8003dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d130      	bne.n	8003e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	2203      	movs	r2, #3
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e34:	2201      	movs	r2, #1
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 0201 	and.w	r2, r3, #1
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d017      	beq.n	8003e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	2203      	movs	r2, #3
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d123      	bne.n	8003ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3208      	adds	r2, #8
 8003eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	08da      	lsrs	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3208      	adds	r2, #8
 8003eea:	69b9      	ldr	r1, [r7, #24]
 8003eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0203 	and.w	r2, r3, #3
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a2 	beq.w	8004076 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	4b57      	ldr	r3, [pc, #348]	@ (8004094 <HAL_GPIO_Init+0x2e8>)
 8003f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3a:	4a56      	ldr	r2, [pc, #344]	@ (8004094 <HAL_GPIO_Init+0x2e8>)
 8003f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f42:	4b54      	ldr	r3, [pc, #336]	@ (8004094 <HAL_GPIO_Init+0x2e8>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f4e:	4a52      	ldr	r2, [pc, #328]	@ (8004098 <HAL_GPIO_Init+0x2ec>)
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	3302      	adds	r3, #2
 8003f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	220f      	movs	r2, #15
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a49      	ldr	r2, [pc, #292]	@ (800409c <HAL_GPIO_Init+0x2f0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d019      	beq.n	8003fae <HAL_GPIO_Init+0x202>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a48      	ldr	r2, [pc, #288]	@ (80040a0 <HAL_GPIO_Init+0x2f4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_GPIO_Init+0x1fe>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a47      	ldr	r2, [pc, #284]	@ (80040a4 <HAL_GPIO_Init+0x2f8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00d      	beq.n	8003fa6 <HAL_GPIO_Init+0x1fa>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a46      	ldr	r2, [pc, #280]	@ (80040a8 <HAL_GPIO_Init+0x2fc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <HAL_GPIO_Init+0x1f6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a45      	ldr	r2, [pc, #276]	@ (80040ac <HAL_GPIO_Init+0x300>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_GPIO_Init+0x1f2>
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	e008      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003f9e:	2307      	movs	r3, #7
 8003fa0:	e006      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e004      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e002      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	f002 0203 	and.w	r2, r2, #3
 8003fb6:	0092      	lsls	r2, r2, #2
 8003fb8:	4093      	lsls	r3, r2
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fc0:	4935      	ldr	r1, [pc, #212]	@ (8004098 <HAL_GPIO_Init+0x2ec>)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	3302      	adds	r3, #2
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fce:	4b38      	ldr	r3, [pc, #224]	@ (80040b0 <HAL_GPIO_Init+0x304>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80040b0 <HAL_GPIO_Init+0x304>)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80040b0 <HAL_GPIO_Init+0x304>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800401c:	4a24      	ldr	r2, [pc, #144]	@ (80040b0 <HAL_GPIO_Init+0x304>)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004022:	4b23      	ldr	r3, [pc, #140]	@ (80040b0 <HAL_GPIO_Init+0x304>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004046:	4a1a      	ldr	r2, [pc, #104]	@ (80040b0 <HAL_GPIO_Init+0x304>)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800404c:	4b18      	ldr	r3, [pc, #96]	@ (80040b0 <HAL_GPIO_Init+0x304>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004070:	4a0f      	ldr	r2, [pc, #60]	@ (80040b0 <HAL_GPIO_Init+0x304>)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3301      	adds	r3, #1
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b0f      	cmp	r3, #15
 8004080:	f67f aea2 	bls.w	8003dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	3724      	adds	r7, #36	@ 0x24
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40023800 	.word	0x40023800
 8004098:	40013800 	.word	0x40013800
 800409c:	40020000 	.word	0x40020000
 80040a0:	40020400 	.word	0x40020400
 80040a4:	40020800 	.word	0x40020800
 80040a8:	40020c00 	.word	0x40020c00
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40013c00 	.word	0x40013c00

080040b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	887b      	ldrh	r3, [r7, #2]
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	e001      	b.n	80040d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	807b      	strh	r3, [r7, #2]
 80040f0:	4613      	mov	r3, r2
 80040f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040f4:	787b      	ldrb	r3, [r7, #1]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004100:	e003      	b.n	800410a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004102:	887b      	ldrh	r3, [r7, #2]
 8004104:	041a      	lsls	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	619a      	str	r2, [r3, #24]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e267      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d075      	beq.n	8004222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004136:	4b88      	ldr	r3, [pc, #544]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b04      	cmp	r3, #4
 8004140:	d00c      	beq.n	800415c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004142:	4b85      	ldr	r3, [pc, #532]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800414a:	2b08      	cmp	r3, #8
 800414c:	d112      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414e:	4b82      	ldr	r3, [pc, #520]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800415a:	d10b      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	4b7e      	ldr	r3, [pc, #504]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d05b      	beq.n	8004220 <HAL_RCC_OscConfig+0x108>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d157      	bne.n	8004220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e242      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800417c:	d106      	bne.n	800418c <HAL_RCC_OscConfig+0x74>
 800417e:	4b76      	ldr	r3, [pc, #472]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a75      	ldr	r2, [pc, #468]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e01d      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x98>
 8004196:	4b70      	ldr	r3, [pc, #448]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6f      	ldr	r2, [pc, #444]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800419c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 80041b0:	4b69      	ldr	r3, [pc, #420]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a68      	ldr	r2, [pc, #416]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b66      	ldr	r3, [pc, #408]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a65      	ldr	r2, [pc, #404]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7ff f93a 	bl	8003448 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d8:	f7ff f936 	bl	8003448 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	@ 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e207      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0xc0>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7ff f926 	bl	8003448 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004200:	f7ff f922 	bl	8003448 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	@ 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1f3      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	4b51      	ldr	r3, [pc, #324]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0xe8>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d063      	beq.n	80042f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800422e:	4b4a      	ldr	r3, [pc, #296]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423a:	4b47      	ldr	r3, [pc, #284]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004242:	2b08      	cmp	r3, #8
 8004244:	d11c      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004246:	4b44      	ldr	r3, [pc, #272]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d116      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	4b41      	ldr	r3, [pc, #260]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d001      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e1c7      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426a:	4b3b      	ldr	r3, [pc, #236]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4937      	ldr	r1, [pc, #220]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427e:	e03a      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004288:	4b34      	ldr	r3, [pc, #208]	@ (800435c <HAL_RCC_OscConfig+0x244>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7ff f8db 	bl	8003448 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004296:	f7ff f8d7 	bl	8003448 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e1a8      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b4:	4b28      	ldr	r3, [pc, #160]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4925      	ldr	r1, [pc, #148]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]
 80042c8:	e015      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ca:	4b24      	ldr	r3, [pc, #144]	@ (800435c <HAL_RCC_OscConfig+0x244>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7ff f8ba 	bl	8003448 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d8:	f7ff f8b6 	bl	8003448 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e187      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d036      	beq.n	8004370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d016      	beq.n	8004338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430a:	4b15      	ldr	r3, [pc, #84]	@ (8004360 <HAL_RCC_OscConfig+0x248>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7ff f89a 	bl	8003448 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004318:	f7ff f896 	bl	8003448 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e167      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <HAL_RCC_OscConfig+0x240>)
 800432c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x200>
 8004336:	e01b      	b.n	8004370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004338:	4b09      	ldr	r3, [pc, #36]	@ (8004360 <HAL_RCC_OscConfig+0x248>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433e:	f7ff f883 	bl	8003448 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	e00e      	b.n	8004364 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004346:	f7ff f87f 	bl	8003448 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d907      	bls.n	8004364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e150      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
 8004358:	40023800 	.word	0x40023800
 800435c:	42470000 	.word	0x42470000
 8004360:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004364:	4b88      	ldr	r3, [pc, #544]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ea      	bne.n	8004346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8097 	beq.w	80044ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004382:	4b81      	ldr	r3, [pc, #516]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	4b7d      	ldr	r3, [pc, #500]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	4a7c      	ldr	r2, [pc, #496]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439c:	6413      	str	r3, [r2, #64]	@ 0x40
 800439e:	4b7a      	ldr	r3, [pc, #488]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ae:	4b77      	ldr	r3, [pc, #476]	@ (800458c <HAL_RCC_OscConfig+0x474>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d118      	bne.n	80043ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ba:	4b74      	ldr	r3, [pc, #464]	@ (800458c <HAL_RCC_OscConfig+0x474>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a73      	ldr	r2, [pc, #460]	@ (800458c <HAL_RCC_OscConfig+0x474>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c6:	f7ff f83f 	bl	8003448 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7ff f83b 	bl	8003448 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e10c      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	4b6a      	ldr	r3, [pc, #424]	@ (800458c <HAL_RCC_OscConfig+0x474>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x2ea>
 80043f4:	4b64      	ldr	r3, [pc, #400]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f8:	4a63      	ldr	r2, [pc, #396]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004400:	e01c      	b.n	800443c <HAL_RCC_OscConfig+0x324>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b05      	cmp	r3, #5
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x30c>
 800440a:	4b5f      	ldr	r3, [pc, #380]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440e:	4a5e      	ldr	r2, [pc, #376]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6713      	str	r3, [r2, #112]	@ 0x70
 8004416:	4b5c      	ldr	r3, [pc, #368]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441a:	4a5b      	ldr	r2, [pc, #364]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6713      	str	r3, [r2, #112]	@ 0x70
 8004422:	e00b      	b.n	800443c <HAL_RCC_OscConfig+0x324>
 8004424:	4b58      	ldr	r3, [pc, #352]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004428:	4a57      	ldr	r2, [pc, #348]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004430:	4b55      	ldr	r3, [pc, #340]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004434:	4a54      	ldr	r2, [pc, #336]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004436:	f023 0304 	bic.w	r3, r3, #4
 800443a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d015      	beq.n	8004470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7ff f800 	bl	8003448 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fe fffc 	bl	8003448 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0cb      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004462:	4b49      	ldr	r3, [pc, #292]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0ee      	beq.n	800444c <HAL_RCC_OscConfig+0x334>
 800446e:	e014      	b.n	800449a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004470:	f7fe ffea 	bl	8003448 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004476:	e00a      	b.n	800448e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fe ffe6 	bl	8003448 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e0b5      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448e:	4b3e      	ldr	r3, [pc, #248]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1ee      	bne.n	8004478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800449a:	7dfb      	ldrb	r3, [r7, #23]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a0:	4b39      	ldr	r3, [pc, #228]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	4a38      	ldr	r2, [pc, #224]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a1 	beq.w	80045f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044b6:	4b34      	ldr	r3, [pc, #208]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d05c      	beq.n	800457c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d141      	bne.n	800454e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b31      	ldr	r3, [pc, #196]	@ (8004590 <HAL_RCC_OscConfig+0x478>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fe ffba 	bl	8003448 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fe ffb6 	bl	8003448 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e087      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ea:	4b27      	ldr	r3, [pc, #156]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	3b01      	subs	r3, #1
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	491b      	ldr	r1, [pc, #108]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 800451c:	4313      	orrs	r3, r2
 800451e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004520:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <HAL_RCC_OscConfig+0x478>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fe ff8f 	bl	8003448 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452e:	f7fe ff8b 	bl	8003448 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e05c      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004540:	4b11      	ldr	r3, [pc, #68]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x416>
 800454c:	e054      	b.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454e:	4b10      	ldr	r3, [pc, #64]	@ (8004590 <HAL_RCC_OscConfig+0x478>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fe ff78 	bl	8003448 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7fe ff74 	bl	8003448 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e045      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <HAL_RCC_OscConfig+0x470>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x444>
 800457a:	e03d      	b.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e038      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
 8004588:	40023800 	.word	0x40023800
 800458c:	40007000 	.word	0x40007000
 8004590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004594:	4b1b      	ldr	r3, [pc, #108]	@ (8004604 <HAL_RCC_OscConfig+0x4ec>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d028      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d121      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d11a      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045c4:	4013      	ands	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	3b01      	subs	r3, #1
 80045de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800

08004608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0cc      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800461c:	4b68      	ldr	r3, [pc, #416]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d90c      	bls.n	8004644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b65      	ldr	r3, [pc, #404]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b63      	ldr	r3, [pc, #396]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0b8      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d020      	beq.n	8004692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800465c:	4b59      	ldr	r3, [pc, #356]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a58      	ldr	r2, [pc, #352]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004666:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004674:	4b53      	ldr	r3, [pc, #332]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a52      	ldr	r2, [pc, #328]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800467e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b50      	ldr	r3, [pc, #320]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	494d      	ldr	r1, [pc, #308]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d044      	beq.n	8004728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4b47      	ldr	r3, [pc, #284]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d119      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e07f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b3f      	ldr	r3, [pc, #252]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e06f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d6:	4b3b      	ldr	r3, [pc, #236]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e067      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e6:	4b37      	ldr	r3, [pc, #220]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4934      	ldr	r1, [pc, #208]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f8:	f7fe fea6 	bl	8003448 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fe fea2 	bl	8003448 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e04f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	4b2b      	ldr	r3, [pc, #172]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 020c 	and.w	r2, r3, #12
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d1eb      	bne.n	8004700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004728:	4b25      	ldr	r3, [pc, #148]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d20c      	bcs.n	8004750 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b22      	ldr	r3, [pc, #136]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b20      	ldr	r3, [pc, #128]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e032      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800475c:	4b19      	ldr	r3, [pc, #100]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4916      	ldr	r1, [pc, #88]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477a:	4b12      	ldr	r3, [pc, #72]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	490e      	ldr	r1, [pc, #56]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800478e:	f000 f821 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 8004792:	4602      	mov	r2, r0
 8004794:	4b0b      	ldr	r3, [pc, #44]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	490a      	ldr	r1, [pc, #40]	@ (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	5ccb      	ldrb	r3, [r1, r3]
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	4a09      	ldr	r2, [pc, #36]	@ (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047aa:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fe06 	bl	80033c0 <HAL_InitTick>

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40023c00 	.word	0x40023c00
 80047c4:	40023800 	.word	0x40023800
 80047c8:	08016afc 	.word	0x08016afc
 80047cc:	20000014 	.word	0x20000014
 80047d0:	20000018 	.word	0x20000018

080047d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b090      	sub	sp, #64	@ 0x40
 80047da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ec:	4b59      	ldr	r3, [pc, #356]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d00d      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x40>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	f200 80a1 	bhi.w	8004940 <HAL_RCC_GetSysClockFreq+0x16c>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x34>
 8004802:	2b04      	cmp	r3, #4
 8004804:	d003      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x3a>
 8004806:	e09b      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4b53      	ldr	r3, [pc, #332]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x184>)
 800480a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800480c:	e09b      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480e:	4b53      	ldr	r3, [pc, #332]	@ (800495c <HAL_RCC_GetSysClockFreq+0x188>)
 8004810:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004812:	e098      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004814:	4b4f      	ldr	r3, [pc, #316]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800481c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481e:	4b4d      	ldr	r3, [pc, #308]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d028      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482a:	4b4a      	ldr	r3, [pc, #296]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	2200      	movs	r2, #0
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	627a      	str	r2, [r7, #36]	@ 0x24
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800483c:	2100      	movs	r1, #0
 800483e:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_RCC_GetSysClockFreq+0x188>)
 8004840:	fb03 f201 	mul.w	r2, r3, r1
 8004844:	2300      	movs	r3, #0
 8004846:	fb00 f303 	mul.w	r3, r0, r3
 800484a:	4413      	add	r3, r2
 800484c:	4a43      	ldr	r2, [pc, #268]	@ (800495c <HAL_RCC_GetSysClockFreq+0x188>)
 800484e:	fba0 1202 	umull	r1, r2, r0, r2
 8004852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004854:	460a      	mov	r2, r1
 8004856:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485a:	4413      	add	r3, r2
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800485e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004860:	2200      	movs	r2, #0
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	61fa      	str	r2, [r7, #28]
 8004866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800486a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800486e:	f7fc f9f3 	bl	8000c58 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4613      	mov	r3, r2
 8004878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800487a:	e053      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487c:	4b35      	ldr	r3, [pc, #212]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	099b      	lsrs	r3, r3, #6
 8004882:	2200      	movs	r2, #0
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	617a      	str	r2, [r7, #20]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800488e:	f04f 0b00 	mov.w	fp, #0
 8004892:	4652      	mov	r2, sl
 8004894:	465b      	mov	r3, fp
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	0159      	lsls	r1, r3, #5
 80048a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a4:	0150      	lsls	r0, r2, #5
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	ebb2 080a 	subs.w	r8, r2, sl
 80048ae:	eb63 090b 	sbc.w	r9, r3, fp
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048c6:	ebb2 0408 	subs.w	r4, r2, r8
 80048ca:	eb63 0509 	sbc.w	r5, r3, r9
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	00eb      	lsls	r3, r5, #3
 80048d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048dc:	00e2      	lsls	r2, r4, #3
 80048de:	4614      	mov	r4, r2
 80048e0:	461d      	mov	r5, r3
 80048e2:	eb14 030a 	adds.w	r3, r4, sl
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	eb45 030b 	adc.w	r3, r5, fp
 80048ec:	607b      	str	r3, [r7, #4]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048fa:	4629      	mov	r1, r5
 80048fc:	028b      	lsls	r3, r1, #10
 80048fe:	4621      	mov	r1, r4
 8004900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004904:	4621      	mov	r1, r4
 8004906:	028a      	lsls	r2, r1, #10
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490e:	2200      	movs	r2, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	60fa      	str	r2, [r7, #12]
 8004914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004918:	f7fc f99e 	bl	8000c58 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4613      	mov	r3, r2
 8004922:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	3301      	adds	r3, #1
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004934:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800493e:	e002      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004940:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x184>)
 8004942:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004948:	4618      	mov	r0, r3
 800494a:	3740      	adds	r7, #64	@ 0x40
 800494c:	46bd      	mov	sp, r7
 800494e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	00f42400 	.word	0x00f42400
 800495c:	017d7840 	.word	0x017d7840

08004960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e07b      	b.n	8004a6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	2b00      	cmp	r3, #0
 8004978:	d108      	bne.n	800498c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004982:	d009      	beq.n	8004998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	61da      	str	r2, [r3, #28]
 800498a:	e005      	b.n	8004998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fe f810 	bl	80029d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1c:	ea42 0103 	orr.w	r1, r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	f003 0104 	and.w	r1, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	f003 0210 	and.w	r2, r3, #16
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b088      	sub	sp, #32
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	603b      	str	r3, [r7, #0]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a82:	f7fe fce1 	bl	8003448 <HAL_GetTick>
 8004a86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004a88:	88fb      	ldrh	r3, [r7, #6]
 8004a8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d001      	beq.n	8004a9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e12a      	b.n	8004cf2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_SPI_Transmit+0x36>
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e122      	b.n	8004cf2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_SPI_Transmit+0x48>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e11b      	b.n	8004cf2 <HAL_SPI_Transmit+0x280>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	88fa      	ldrh	r2, [r7, #6]
 8004ada:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b08:	d10f      	bne.n	8004b2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b34:	2b40      	cmp	r3, #64	@ 0x40
 8004b36:	d007      	beq.n	8004b48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b50:	d152      	bne.n	8004bf8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_SPI_Transmit+0xee>
 8004b5a:	8b7b      	ldrh	r3, [r7, #26]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d145      	bne.n	8004bec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b64:	881a      	ldrh	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b70:	1c9a      	adds	r2, r3, #2
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b84:	e032      	b.n	8004bec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d112      	bne.n	8004bba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b98:	881a      	ldrh	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba4:	1c9a      	adds	r2, r3, #2
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004bb8:	e018      	b.n	8004bec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bba:	f7fe fc45 	bl	8003448 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d803      	bhi.n	8004bd2 <HAL_SPI_Transmit+0x160>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d102      	bne.n	8004bd8 <HAL_SPI_Transmit+0x166>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e082      	b.n	8004cf2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1c7      	bne.n	8004b86 <HAL_SPI_Transmit+0x114>
 8004bf6:	e053      	b.n	8004ca0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_SPI_Transmit+0x194>
 8004c00:	8b7b      	ldrh	r3, [r7, #26]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d147      	bne.n	8004c96 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	7812      	ldrb	r2, [r2, #0]
 8004c12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c2c:	e033      	b.n	8004c96 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d113      	bne.n	8004c64 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	7812      	ldrb	r2, [r2, #0]
 8004c48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c62:	e018      	b.n	8004c96 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c64:	f7fe fbf0 	bl	8003448 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d803      	bhi.n	8004c7c <HAL_SPI_Transmit+0x20a>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d102      	bne.n	8004c82 <HAL_SPI_Transmit+0x210>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e02d      	b.n	8004cf2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1c6      	bne.n	8004c2e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	6839      	ldr	r1, [r7, #0]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fbab 	bl	8005400 <SPI_EndRxTxTransaction>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
  }
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b08a      	sub	sp, #40	@ 0x28
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d0c:	f7fe fb9c 	bl	8003448 <HAL_GetTick>
 8004d10:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d18:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d20:	887b      	ldrh	r3, [r7, #2]
 8004d22:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d24:	7ffb      	ldrb	r3, [r7, #31]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d00c      	beq.n	8004d44 <HAL_SPI_TransmitReceive+0x4a>
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d30:	d106      	bne.n	8004d40 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <HAL_SPI_TransmitReceive+0x46>
 8004d3a:	7ffb      	ldrb	r3, [r7, #31]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d001      	beq.n	8004d44 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004d40:	2302      	movs	r3, #2
 8004d42:	e17f      	b.n	8005044 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_SPI_TransmitReceive+0x5c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_SPI_TransmitReceive+0x5c>
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e174      	b.n	8005044 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x6e>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e16d      	b.n	8005044 <HAL_SPI_TransmitReceive+0x34a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d003      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	887a      	ldrh	r2, [r7, #2]
 8004d9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	887a      	ldrh	r2, [r7, #2]
 8004da6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	887a      	ldrh	r2, [r7, #2]
 8004dac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc4:	2b40      	cmp	r3, #64	@ 0x40
 8004dc6:	d007      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004de0:	d17e      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_SPI_TransmitReceive+0xf6>
 8004dea:	8afb      	ldrh	r3, [r7, #22]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d16c      	bne.n	8004eca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df4:	881a      	ldrh	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e14:	e059      	b.n	8004eca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d11b      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x162>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x162>
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d113      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e38:	881a      	ldrh	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d119      	bne.n	8004e9e <HAL_SPI_TransmitReceive+0x1a4>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d014      	beq.n	8004e9e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e86:	1c9a      	adds	r2, r3, #2
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e9e:	f7fe fad3 	bl	8003448 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d80d      	bhi.n	8004eca <HAL_SPI_TransmitReceive+0x1d0>
 8004eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d009      	beq.n	8004eca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e0bc      	b.n	8005044 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1a0      	bne.n	8004e16 <HAL_SPI_TransmitReceive+0x11c>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d19b      	bne.n	8004e16 <HAL_SPI_TransmitReceive+0x11c>
 8004ede:	e082      	b.n	8004fe6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <HAL_SPI_TransmitReceive+0x1f4>
 8004ee8:	8afb      	ldrh	r3, [r7, #22]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d171      	bne.n	8004fd2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f14:	e05d      	b.n	8004fd2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d11c      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x264>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d017      	beq.n	8004f5e <HAL_SPI_TransmitReceive+0x264>
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d114      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	7812      	ldrb	r2, [r2, #0]
 8004f40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d119      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x2a6>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d014      	beq.n	8004fa0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fa0:	f7fe fa52 	bl	8003448 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d803      	bhi.n	8004fb8 <HAL_SPI_TransmitReceive+0x2be>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d102      	bne.n	8004fbe <HAL_SPI_TransmitReceive+0x2c4>
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e038      	b.n	8005044 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d19c      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x21c>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d197      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fe6:	6a3a      	ldr	r2, [r7, #32]
 8004fe8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fa08 	bl	8005400 <SPI_EndRxTxTransaction>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d008      	beq.n	8005008 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e01d      	b.n	8005044 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005042:	2300      	movs	r3, #0
  }
}
 8005044:	4618      	mov	r0, r3
 8005046:	3728      	adds	r7, #40	@ 0x28
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b01      	cmp	r3, #1
 8005064:	d001      	beq.n	800506a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005066:	2302      	movs	r3, #2
 8005068:	e097      	b.n	800519a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_SPI_Transmit_DMA+0x2a>
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e08f      	b.n	800519a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_SPI_Transmit_DMA+0x3c>
 8005084:	2302      	movs	r3, #2
 8005086:	e088      	b.n	800519a <HAL_SPI_Transmit_DMA+0x14e>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2203      	movs	r2, #3
 8005094:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d6:	d10f      	bne.n	80050f8 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050fc:	4a29      	ldr	r2, [pc, #164]	@ (80051a4 <HAL_SPI_Transmit_DMA+0x158>)
 80050fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005104:	4a28      	ldr	r2, [pc, #160]	@ (80051a8 <HAL_SPI_Transmit_DMA+0x15c>)
 8005106:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800510c:	4a27      	ldr	r2, [pc, #156]	@ (80051ac <HAL_SPI_Transmit_DMA+0x160>)
 800510e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005114:	2200      	movs	r2, #0
 8005116:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005120:	4619      	mov	r1, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800512e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005130:	f7fe fb7a 	bl	8003828 <HAL_DMA_Start_IT>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513e:	f043 0210 	orr.w	r2, r3, #16
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e023      	b.n	800519a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515c:	2b40      	cmp	r3, #64	@ 0x40
 800515e:	d007      	beq.n	8005170 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0220 	orr.w	r2, r2, #32
 8005186:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0202 	orr.w	r2, r2, #2
 8005196:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	08005295 	.word	0x08005295
 80051a8:	080051ed 	.word	0x080051ed
 80051ac:	080052b1 	.word	0x080052b1

080051b0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051fa:	f7fe f925 	bl	8003448 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800520e:	d03b      	beq.n	8005288 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0220 	bic.w	r2, r2, #32
 800521e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0202 	bic.w	r2, r2, #2
 800522e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	2164      	movs	r1, #100	@ 0x64
 8005234:	6978      	ldr	r0, [r7, #20]
 8005236:	f000 f8e3 	bl	8005400 <SPI_EndRxTxTransaction>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005244:	f043 0220 	orr.w	r2, r3, #32
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2200      	movs	r2, #0
 800526e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005280:	6978      	ldr	r0, [r7, #20]
 8005282:	f7ff ffa9 	bl	80051d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005286:	e002      	b.n	800528e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005288:	6978      	ldr	r0, [r7, #20]
 800528a:	f7ff ff91 	bl	80051b0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff ff8e 	bl	80051c4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052a8:	bf00      	nop
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0203 	bic.w	r2, r2, #3
 80052cc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d2:	f043 0210 	orr.w	r2, r3, #16
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7ff ff78 	bl	80051d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005300:	f7fe f8a2 	bl	8003448 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	4413      	add	r3, r2
 800530e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005310:	f7fe f89a 	bl	8003448 <HAL_GetTick>
 8005314:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005316:	4b39      	ldr	r3, [pc, #228]	@ (80053fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	015b      	lsls	r3, r3, #5
 800531c:	0d1b      	lsrs	r3, r3, #20
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	fb02 f303 	mul.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005326:	e054      	b.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532e:	d050      	beq.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005330:	f7fe f88a 	bl	8003448 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	429a      	cmp	r2, r3
 800533e:	d902      	bls.n	8005346 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d13d      	bne.n	80053c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800535e:	d111      	bne.n	8005384 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005368:	d004      	beq.n	8005374 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005372:	d107      	bne.n	8005384 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538c:	d10f      	bne.n	80053ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e017      	b.n	80053f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4013      	ands	r3, r2
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	429a      	cmp	r2, r3
 80053e0:	bf0c      	ite	eq
 80053e2:	2301      	moveq	r3, #1
 80053e4:	2300      	movne	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d19b      	bne.n	8005328 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000014 	.word	0x20000014

08005400 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2201      	movs	r2, #1
 8005414:	2102      	movs	r1, #2
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f7ff ff6a 	bl	80052f0 <SPI_WaitFlagStateUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005426:	f043 0220 	orr.w	r2, r3, #32
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e032      	b.n	8005498 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005432:	4b1b      	ldr	r3, [pc, #108]	@ (80054a0 <SPI_EndRxTxTransaction+0xa0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1b      	ldr	r2, [pc, #108]	@ (80054a4 <SPI_EndRxTxTransaction+0xa4>)
 8005438:	fba2 2303 	umull	r2, r3, r2, r3
 800543c:	0d5b      	lsrs	r3, r3, #21
 800543e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005450:	d112      	bne.n	8005478 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2200      	movs	r2, #0
 800545a:	2180      	movs	r1, #128	@ 0x80
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff ff47 	bl	80052f0 <SPI_WaitFlagStateUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d016      	beq.n	8005496 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546c:	f043 0220 	orr.w	r2, r3, #32
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e00f      	b.n	8005498 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	3b01      	subs	r3, #1
 8005482:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548e:	2b80      	cmp	r3, #128	@ 0x80
 8005490:	d0f2      	beq.n	8005478 <SPI_EndRxTxTransaction+0x78>
 8005492:	e000      	b.n	8005496 <SPI_EndRxTxTransaction+0x96>
        break;
 8005494:	bf00      	nop
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20000014 	.word	0x20000014
 80054a4:	165e9f81 	.word	0x165e9f81

080054a8 <__cvt>:
 80054a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054ac:	ec57 6b10 	vmov	r6, r7, d0
 80054b0:	2f00      	cmp	r7, #0
 80054b2:	460c      	mov	r4, r1
 80054b4:	4619      	mov	r1, r3
 80054b6:	463b      	mov	r3, r7
 80054b8:	bfbb      	ittet	lt
 80054ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80054be:	461f      	movlt	r7, r3
 80054c0:	2300      	movge	r3, #0
 80054c2:	232d      	movlt	r3, #45	@ 0x2d
 80054c4:	700b      	strb	r3, [r1, #0]
 80054c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80054cc:	4691      	mov	r9, r2
 80054ce:	f023 0820 	bic.w	r8, r3, #32
 80054d2:	bfbc      	itt	lt
 80054d4:	4632      	movlt	r2, r6
 80054d6:	4616      	movlt	r6, r2
 80054d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054dc:	d005      	beq.n	80054ea <__cvt+0x42>
 80054de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80054e2:	d100      	bne.n	80054e6 <__cvt+0x3e>
 80054e4:	3401      	adds	r4, #1
 80054e6:	2102      	movs	r1, #2
 80054e8:	e000      	b.n	80054ec <__cvt+0x44>
 80054ea:	2103      	movs	r1, #3
 80054ec:	ab03      	add	r3, sp, #12
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	ab02      	add	r3, sp, #8
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	ec47 6b10 	vmov	d0, r6, r7
 80054f8:	4653      	mov	r3, sl
 80054fa:	4622      	mov	r2, r4
 80054fc:	f000 fef0 	bl	80062e0 <_dtoa_r>
 8005500:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005504:	4605      	mov	r5, r0
 8005506:	d119      	bne.n	800553c <__cvt+0x94>
 8005508:	f019 0f01 	tst.w	r9, #1
 800550c:	d00e      	beq.n	800552c <__cvt+0x84>
 800550e:	eb00 0904 	add.w	r9, r0, r4
 8005512:	2200      	movs	r2, #0
 8005514:	2300      	movs	r3, #0
 8005516:	4630      	mov	r0, r6
 8005518:	4639      	mov	r1, r7
 800551a:	f7fb fadd 	bl	8000ad8 <__aeabi_dcmpeq>
 800551e:	b108      	cbz	r0, 8005524 <__cvt+0x7c>
 8005520:	f8cd 900c 	str.w	r9, [sp, #12]
 8005524:	2230      	movs	r2, #48	@ 0x30
 8005526:	9b03      	ldr	r3, [sp, #12]
 8005528:	454b      	cmp	r3, r9
 800552a:	d31e      	bcc.n	800556a <__cvt+0xc2>
 800552c:	9b03      	ldr	r3, [sp, #12]
 800552e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005530:	1b5b      	subs	r3, r3, r5
 8005532:	4628      	mov	r0, r5
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	b004      	add	sp, #16
 8005538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005540:	eb00 0904 	add.w	r9, r0, r4
 8005544:	d1e5      	bne.n	8005512 <__cvt+0x6a>
 8005546:	7803      	ldrb	r3, [r0, #0]
 8005548:	2b30      	cmp	r3, #48	@ 0x30
 800554a:	d10a      	bne.n	8005562 <__cvt+0xba>
 800554c:	2200      	movs	r2, #0
 800554e:	2300      	movs	r3, #0
 8005550:	4630      	mov	r0, r6
 8005552:	4639      	mov	r1, r7
 8005554:	f7fb fac0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005558:	b918      	cbnz	r0, 8005562 <__cvt+0xba>
 800555a:	f1c4 0401 	rsb	r4, r4, #1
 800555e:	f8ca 4000 	str.w	r4, [sl]
 8005562:	f8da 3000 	ldr.w	r3, [sl]
 8005566:	4499      	add	r9, r3
 8005568:	e7d3      	b.n	8005512 <__cvt+0x6a>
 800556a:	1c59      	adds	r1, r3, #1
 800556c:	9103      	str	r1, [sp, #12]
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e7d9      	b.n	8005526 <__cvt+0x7e>

08005572 <__exponent>:
 8005572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005574:	2900      	cmp	r1, #0
 8005576:	bfba      	itte	lt
 8005578:	4249      	neglt	r1, r1
 800557a:	232d      	movlt	r3, #45	@ 0x2d
 800557c:	232b      	movge	r3, #43	@ 0x2b
 800557e:	2909      	cmp	r1, #9
 8005580:	7002      	strb	r2, [r0, #0]
 8005582:	7043      	strb	r3, [r0, #1]
 8005584:	dd29      	ble.n	80055da <__exponent+0x68>
 8005586:	f10d 0307 	add.w	r3, sp, #7
 800558a:	461d      	mov	r5, r3
 800558c:	270a      	movs	r7, #10
 800558e:	461a      	mov	r2, r3
 8005590:	fbb1 f6f7 	udiv	r6, r1, r7
 8005594:	fb07 1416 	mls	r4, r7, r6, r1
 8005598:	3430      	adds	r4, #48	@ 0x30
 800559a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800559e:	460c      	mov	r4, r1
 80055a0:	2c63      	cmp	r4, #99	@ 0x63
 80055a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80055a6:	4631      	mov	r1, r6
 80055a8:	dcf1      	bgt.n	800558e <__exponent+0x1c>
 80055aa:	3130      	adds	r1, #48	@ 0x30
 80055ac:	1e94      	subs	r4, r2, #2
 80055ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80055b2:	1c41      	adds	r1, r0, #1
 80055b4:	4623      	mov	r3, r4
 80055b6:	42ab      	cmp	r3, r5
 80055b8:	d30a      	bcc.n	80055d0 <__exponent+0x5e>
 80055ba:	f10d 0309 	add.w	r3, sp, #9
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	42ac      	cmp	r4, r5
 80055c2:	bf88      	it	hi
 80055c4:	2300      	movhi	r3, #0
 80055c6:	3302      	adds	r3, #2
 80055c8:	4403      	add	r3, r0
 80055ca:	1a18      	subs	r0, r3, r0
 80055cc:	b003      	add	sp, #12
 80055ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80055d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80055d8:	e7ed      	b.n	80055b6 <__exponent+0x44>
 80055da:	2330      	movs	r3, #48	@ 0x30
 80055dc:	3130      	adds	r1, #48	@ 0x30
 80055de:	7083      	strb	r3, [r0, #2]
 80055e0:	70c1      	strb	r1, [r0, #3]
 80055e2:	1d03      	adds	r3, r0, #4
 80055e4:	e7f1      	b.n	80055ca <__exponent+0x58>
	...

080055e8 <_printf_float>:
 80055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	b08d      	sub	sp, #52	@ 0x34
 80055ee:	460c      	mov	r4, r1
 80055f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80055f4:	4616      	mov	r6, r2
 80055f6:	461f      	mov	r7, r3
 80055f8:	4605      	mov	r5, r0
 80055fa:	f000 fd6f 	bl	80060dc <_localeconv_r>
 80055fe:	6803      	ldr	r3, [r0, #0]
 8005600:	9304      	str	r3, [sp, #16]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fa fe3c 	bl	8000280 <strlen>
 8005608:	2300      	movs	r3, #0
 800560a:	930a      	str	r3, [sp, #40]	@ 0x28
 800560c:	f8d8 3000 	ldr.w	r3, [r8]
 8005610:	9005      	str	r0, [sp, #20]
 8005612:	3307      	adds	r3, #7
 8005614:	f023 0307 	bic.w	r3, r3, #7
 8005618:	f103 0208 	add.w	r2, r3, #8
 800561c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005620:	f8d4 b000 	ldr.w	fp, [r4]
 8005624:	f8c8 2000 	str.w	r2, [r8]
 8005628:	e9d3 8900 	ldrd	r8, r9, [r3]
 800562c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005630:	9307      	str	r3, [sp, #28]
 8005632:	f8cd 8018 	str.w	r8, [sp, #24]
 8005636:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800563a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800563e:	4b9c      	ldr	r3, [pc, #624]	@ (80058b0 <_printf_float+0x2c8>)
 8005640:	f04f 32ff 	mov.w	r2, #4294967295
 8005644:	f7fb fa7a 	bl	8000b3c <__aeabi_dcmpun>
 8005648:	bb70      	cbnz	r0, 80056a8 <_printf_float+0xc0>
 800564a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800564e:	4b98      	ldr	r3, [pc, #608]	@ (80058b0 <_printf_float+0x2c8>)
 8005650:	f04f 32ff 	mov.w	r2, #4294967295
 8005654:	f7fb fa54 	bl	8000b00 <__aeabi_dcmple>
 8005658:	bb30      	cbnz	r0, 80056a8 <_printf_float+0xc0>
 800565a:	2200      	movs	r2, #0
 800565c:	2300      	movs	r3, #0
 800565e:	4640      	mov	r0, r8
 8005660:	4649      	mov	r1, r9
 8005662:	f7fb fa43 	bl	8000aec <__aeabi_dcmplt>
 8005666:	b110      	cbz	r0, 800566e <_printf_float+0x86>
 8005668:	232d      	movs	r3, #45	@ 0x2d
 800566a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800566e:	4a91      	ldr	r2, [pc, #580]	@ (80058b4 <_printf_float+0x2cc>)
 8005670:	4b91      	ldr	r3, [pc, #580]	@ (80058b8 <_printf_float+0x2d0>)
 8005672:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005676:	bf94      	ite	ls
 8005678:	4690      	movls	r8, r2
 800567a:	4698      	movhi	r8, r3
 800567c:	2303      	movs	r3, #3
 800567e:	6123      	str	r3, [r4, #16]
 8005680:	f02b 0304 	bic.w	r3, fp, #4
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	f04f 0900 	mov.w	r9, #0
 800568a:	9700      	str	r7, [sp, #0]
 800568c:	4633      	mov	r3, r6
 800568e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005690:	4621      	mov	r1, r4
 8005692:	4628      	mov	r0, r5
 8005694:	f000 f9d2 	bl	8005a3c <_printf_common>
 8005698:	3001      	adds	r0, #1
 800569a:	f040 808d 	bne.w	80057b8 <_printf_float+0x1d0>
 800569e:	f04f 30ff 	mov.w	r0, #4294967295
 80056a2:	b00d      	add	sp, #52	@ 0x34
 80056a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a8:	4642      	mov	r2, r8
 80056aa:	464b      	mov	r3, r9
 80056ac:	4640      	mov	r0, r8
 80056ae:	4649      	mov	r1, r9
 80056b0:	f7fb fa44 	bl	8000b3c <__aeabi_dcmpun>
 80056b4:	b140      	cbz	r0, 80056c8 <_printf_float+0xe0>
 80056b6:	464b      	mov	r3, r9
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bfbc      	itt	lt
 80056bc:	232d      	movlt	r3, #45	@ 0x2d
 80056be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80056c2:	4a7e      	ldr	r2, [pc, #504]	@ (80058bc <_printf_float+0x2d4>)
 80056c4:	4b7e      	ldr	r3, [pc, #504]	@ (80058c0 <_printf_float+0x2d8>)
 80056c6:	e7d4      	b.n	8005672 <_printf_float+0x8a>
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80056ce:	9206      	str	r2, [sp, #24]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	d13b      	bne.n	800574c <_printf_float+0x164>
 80056d4:	2306      	movs	r3, #6
 80056d6:	6063      	str	r3, [r4, #4]
 80056d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80056dc:	2300      	movs	r3, #0
 80056de:	6022      	str	r2, [r4, #0]
 80056e0:	9303      	str	r3, [sp, #12]
 80056e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80056e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80056e8:	ab09      	add	r3, sp, #36	@ 0x24
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	6861      	ldr	r1, [r4, #4]
 80056ee:	ec49 8b10 	vmov	d0, r8, r9
 80056f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80056f6:	4628      	mov	r0, r5
 80056f8:	f7ff fed6 	bl	80054a8 <__cvt>
 80056fc:	9b06      	ldr	r3, [sp, #24]
 80056fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005700:	2b47      	cmp	r3, #71	@ 0x47
 8005702:	4680      	mov	r8, r0
 8005704:	d129      	bne.n	800575a <_printf_float+0x172>
 8005706:	1cc8      	adds	r0, r1, #3
 8005708:	db02      	blt.n	8005710 <_printf_float+0x128>
 800570a:	6863      	ldr	r3, [r4, #4]
 800570c:	4299      	cmp	r1, r3
 800570e:	dd41      	ble.n	8005794 <_printf_float+0x1ac>
 8005710:	f1aa 0a02 	sub.w	sl, sl, #2
 8005714:	fa5f fa8a 	uxtb.w	sl, sl
 8005718:	3901      	subs	r1, #1
 800571a:	4652      	mov	r2, sl
 800571c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005720:	9109      	str	r1, [sp, #36]	@ 0x24
 8005722:	f7ff ff26 	bl	8005572 <__exponent>
 8005726:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005728:	1813      	adds	r3, r2, r0
 800572a:	2a01      	cmp	r2, #1
 800572c:	4681      	mov	r9, r0
 800572e:	6123      	str	r3, [r4, #16]
 8005730:	dc02      	bgt.n	8005738 <_printf_float+0x150>
 8005732:	6822      	ldr	r2, [r4, #0]
 8005734:	07d2      	lsls	r2, r2, #31
 8005736:	d501      	bpl.n	800573c <_printf_float+0x154>
 8005738:	3301      	adds	r3, #1
 800573a:	6123      	str	r3, [r4, #16]
 800573c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0a2      	beq.n	800568a <_printf_float+0xa2>
 8005744:	232d      	movs	r3, #45	@ 0x2d
 8005746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800574a:	e79e      	b.n	800568a <_printf_float+0xa2>
 800574c:	9a06      	ldr	r2, [sp, #24]
 800574e:	2a47      	cmp	r2, #71	@ 0x47
 8005750:	d1c2      	bne.n	80056d8 <_printf_float+0xf0>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1c0      	bne.n	80056d8 <_printf_float+0xf0>
 8005756:	2301      	movs	r3, #1
 8005758:	e7bd      	b.n	80056d6 <_printf_float+0xee>
 800575a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800575e:	d9db      	bls.n	8005718 <_printf_float+0x130>
 8005760:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005764:	d118      	bne.n	8005798 <_printf_float+0x1b0>
 8005766:	2900      	cmp	r1, #0
 8005768:	6863      	ldr	r3, [r4, #4]
 800576a:	dd0b      	ble.n	8005784 <_printf_float+0x19c>
 800576c:	6121      	str	r1, [r4, #16]
 800576e:	b913      	cbnz	r3, 8005776 <_printf_float+0x18e>
 8005770:	6822      	ldr	r2, [r4, #0]
 8005772:	07d0      	lsls	r0, r2, #31
 8005774:	d502      	bpl.n	800577c <_printf_float+0x194>
 8005776:	3301      	adds	r3, #1
 8005778:	440b      	add	r3, r1
 800577a:	6123      	str	r3, [r4, #16]
 800577c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800577e:	f04f 0900 	mov.w	r9, #0
 8005782:	e7db      	b.n	800573c <_printf_float+0x154>
 8005784:	b913      	cbnz	r3, 800578c <_printf_float+0x1a4>
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	07d2      	lsls	r2, r2, #31
 800578a:	d501      	bpl.n	8005790 <_printf_float+0x1a8>
 800578c:	3302      	adds	r3, #2
 800578e:	e7f4      	b.n	800577a <_printf_float+0x192>
 8005790:	2301      	movs	r3, #1
 8005792:	e7f2      	b.n	800577a <_printf_float+0x192>
 8005794:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800579a:	4299      	cmp	r1, r3
 800579c:	db05      	blt.n	80057aa <_printf_float+0x1c2>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	6121      	str	r1, [r4, #16]
 80057a2:	07d8      	lsls	r0, r3, #31
 80057a4:	d5ea      	bpl.n	800577c <_printf_float+0x194>
 80057a6:	1c4b      	adds	r3, r1, #1
 80057a8:	e7e7      	b.n	800577a <_printf_float+0x192>
 80057aa:	2900      	cmp	r1, #0
 80057ac:	bfd4      	ite	le
 80057ae:	f1c1 0202 	rsble	r2, r1, #2
 80057b2:	2201      	movgt	r2, #1
 80057b4:	4413      	add	r3, r2
 80057b6:	e7e0      	b.n	800577a <_printf_float+0x192>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	055a      	lsls	r2, r3, #21
 80057bc:	d407      	bmi.n	80057ce <_printf_float+0x1e6>
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	4642      	mov	r2, r8
 80057c2:	4631      	mov	r1, r6
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b8      	blx	r7
 80057c8:	3001      	adds	r0, #1
 80057ca:	d12b      	bne.n	8005824 <_printf_float+0x23c>
 80057cc:	e767      	b.n	800569e <_printf_float+0xb6>
 80057ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057d2:	f240 80dd 	bls.w	8005990 <_printf_float+0x3a8>
 80057d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057da:	2200      	movs	r2, #0
 80057dc:	2300      	movs	r3, #0
 80057de:	f7fb f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	d033      	beq.n	800584e <_printf_float+0x266>
 80057e6:	4a37      	ldr	r2, [pc, #220]	@ (80058c4 <_printf_float+0x2dc>)
 80057e8:	2301      	movs	r3, #1
 80057ea:	4631      	mov	r1, r6
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b8      	blx	r7
 80057f0:	3001      	adds	r0, #1
 80057f2:	f43f af54 	beq.w	800569e <_printf_float+0xb6>
 80057f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80057fa:	4543      	cmp	r3, r8
 80057fc:	db02      	blt.n	8005804 <_printf_float+0x21c>
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	07d8      	lsls	r0, r3, #31
 8005802:	d50f      	bpl.n	8005824 <_printf_float+0x23c>
 8005804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005808:	4631      	mov	r1, r6
 800580a:	4628      	mov	r0, r5
 800580c:	47b8      	blx	r7
 800580e:	3001      	adds	r0, #1
 8005810:	f43f af45 	beq.w	800569e <_printf_float+0xb6>
 8005814:	f04f 0900 	mov.w	r9, #0
 8005818:	f108 38ff 	add.w	r8, r8, #4294967295
 800581c:	f104 0a1a 	add.w	sl, r4, #26
 8005820:	45c8      	cmp	r8, r9
 8005822:	dc09      	bgt.n	8005838 <_printf_float+0x250>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	079b      	lsls	r3, r3, #30
 8005828:	f100 8103 	bmi.w	8005a32 <_printf_float+0x44a>
 800582c:	68e0      	ldr	r0, [r4, #12]
 800582e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005830:	4298      	cmp	r0, r3
 8005832:	bfb8      	it	lt
 8005834:	4618      	movlt	r0, r3
 8005836:	e734      	b.n	80056a2 <_printf_float+0xba>
 8005838:	2301      	movs	r3, #1
 800583a:	4652      	mov	r2, sl
 800583c:	4631      	mov	r1, r6
 800583e:	4628      	mov	r0, r5
 8005840:	47b8      	blx	r7
 8005842:	3001      	adds	r0, #1
 8005844:	f43f af2b 	beq.w	800569e <_printf_float+0xb6>
 8005848:	f109 0901 	add.w	r9, r9, #1
 800584c:	e7e8      	b.n	8005820 <_printf_float+0x238>
 800584e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005850:	2b00      	cmp	r3, #0
 8005852:	dc39      	bgt.n	80058c8 <_printf_float+0x2e0>
 8005854:	4a1b      	ldr	r2, [pc, #108]	@ (80058c4 <_printf_float+0x2dc>)
 8005856:	2301      	movs	r3, #1
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	47b8      	blx	r7
 800585e:	3001      	adds	r0, #1
 8005860:	f43f af1d 	beq.w	800569e <_printf_float+0xb6>
 8005864:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005868:	ea59 0303 	orrs.w	r3, r9, r3
 800586c:	d102      	bne.n	8005874 <_printf_float+0x28c>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	07d9      	lsls	r1, r3, #31
 8005872:	d5d7      	bpl.n	8005824 <_printf_float+0x23c>
 8005874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005878:	4631      	mov	r1, r6
 800587a:	4628      	mov	r0, r5
 800587c:	47b8      	blx	r7
 800587e:	3001      	adds	r0, #1
 8005880:	f43f af0d 	beq.w	800569e <_printf_float+0xb6>
 8005884:	f04f 0a00 	mov.w	sl, #0
 8005888:	f104 0b1a 	add.w	fp, r4, #26
 800588c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800588e:	425b      	negs	r3, r3
 8005890:	4553      	cmp	r3, sl
 8005892:	dc01      	bgt.n	8005898 <_printf_float+0x2b0>
 8005894:	464b      	mov	r3, r9
 8005896:	e793      	b.n	80057c0 <_printf_float+0x1d8>
 8005898:	2301      	movs	r3, #1
 800589a:	465a      	mov	r2, fp
 800589c:	4631      	mov	r1, r6
 800589e:	4628      	mov	r0, r5
 80058a0:	47b8      	blx	r7
 80058a2:	3001      	adds	r0, #1
 80058a4:	f43f aefb 	beq.w	800569e <_printf_float+0xb6>
 80058a8:	f10a 0a01 	add.w	sl, sl, #1
 80058ac:	e7ee      	b.n	800588c <_printf_float+0x2a4>
 80058ae:	bf00      	nop
 80058b0:	7fefffff 	.word	0x7fefffff
 80058b4:	08016b14 	.word	0x08016b14
 80058b8:	08016b18 	.word	0x08016b18
 80058bc:	08016b1c 	.word	0x08016b1c
 80058c0:	08016b20 	.word	0x08016b20
 80058c4:	08016b24 	.word	0x08016b24
 80058c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80058ce:	4553      	cmp	r3, sl
 80058d0:	bfa8      	it	ge
 80058d2:	4653      	movge	r3, sl
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	4699      	mov	r9, r3
 80058d8:	dc36      	bgt.n	8005948 <_printf_float+0x360>
 80058da:	f04f 0b00 	mov.w	fp, #0
 80058de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058e2:	f104 021a 	add.w	r2, r4, #26
 80058e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058e8:	9306      	str	r3, [sp, #24]
 80058ea:	eba3 0309 	sub.w	r3, r3, r9
 80058ee:	455b      	cmp	r3, fp
 80058f0:	dc31      	bgt.n	8005956 <_printf_float+0x36e>
 80058f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f4:	459a      	cmp	sl, r3
 80058f6:	dc3a      	bgt.n	800596e <_printf_float+0x386>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	07da      	lsls	r2, r3, #31
 80058fc:	d437      	bmi.n	800596e <_printf_float+0x386>
 80058fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005900:	ebaa 0903 	sub.w	r9, sl, r3
 8005904:	9b06      	ldr	r3, [sp, #24]
 8005906:	ebaa 0303 	sub.w	r3, sl, r3
 800590a:	4599      	cmp	r9, r3
 800590c:	bfa8      	it	ge
 800590e:	4699      	movge	r9, r3
 8005910:	f1b9 0f00 	cmp.w	r9, #0
 8005914:	dc33      	bgt.n	800597e <_printf_float+0x396>
 8005916:	f04f 0800 	mov.w	r8, #0
 800591a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800591e:	f104 0b1a 	add.w	fp, r4, #26
 8005922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005924:	ebaa 0303 	sub.w	r3, sl, r3
 8005928:	eba3 0309 	sub.w	r3, r3, r9
 800592c:	4543      	cmp	r3, r8
 800592e:	f77f af79 	ble.w	8005824 <_printf_float+0x23c>
 8005932:	2301      	movs	r3, #1
 8005934:	465a      	mov	r2, fp
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	f43f aeae 	beq.w	800569e <_printf_float+0xb6>
 8005942:	f108 0801 	add.w	r8, r8, #1
 8005946:	e7ec      	b.n	8005922 <_printf_float+0x33a>
 8005948:	4642      	mov	r2, r8
 800594a:	4631      	mov	r1, r6
 800594c:	4628      	mov	r0, r5
 800594e:	47b8      	blx	r7
 8005950:	3001      	adds	r0, #1
 8005952:	d1c2      	bne.n	80058da <_printf_float+0x2f2>
 8005954:	e6a3      	b.n	800569e <_printf_float+0xb6>
 8005956:	2301      	movs	r3, #1
 8005958:	4631      	mov	r1, r6
 800595a:	4628      	mov	r0, r5
 800595c:	9206      	str	r2, [sp, #24]
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	f43f ae9c 	beq.w	800569e <_printf_float+0xb6>
 8005966:	9a06      	ldr	r2, [sp, #24]
 8005968:	f10b 0b01 	add.w	fp, fp, #1
 800596c:	e7bb      	b.n	80058e6 <_printf_float+0x2fe>
 800596e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	d1c0      	bne.n	80058fe <_printf_float+0x316>
 800597c:	e68f      	b.n	800569e <_printf_float+0xb6>
 800597e:	9a06      	ldr	r2, [sp, #24]
 8005980:	464b      	mov	r3, r9
 8005982:	4442      	add	r2, r8
 8005984:	4631      	mov	r1, r6
 8005986:	4628      	mov	r0, r5
 8005988:	47b8      	blx	r7
 800598a:	3001      	adds	r0, #1
 800598c:	d1c3      	bne.n	8005916 <_printf_float+0x32e>
 800598e:	e686      	b.n	800569e <_printf_float+0xb6>
 8005990:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005994:	f1ba 0f01 	cmp.w	sl, #1
 8005998:	dc01      	bgt.n	800599e <_printf_float+0x3b6>
 800599a:	07db      	lsls	r3, r3, #31
 800599c:	d536      	bpl.n	8005a0c <_printf_float+0x424>
 800599e:	2301      	movs	r3, #1
 80059a0:	4642      	mov	r2, r8
 80059a2:	4631      	mov	r1, r6
 80059a4:	4628      	mov	r0, r5
 80059a6:	47b8      	blx	r7
 80059a8:	3001      	adds	r0, #1
 80059aa:	f43f ae78 	beq.w	800569e <_printf_float+0xb6>
 80059ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059b2:	4631      	mov	r1, r6
 80059b4:	4628      	mov	r0, r5
 80059b6:	47b8      	blx	r7
 80059b8:	3001      	adds	r0, #1
 80059ba:	f43f ae70 	beq.w	800569e <_printf_float+0xb6>
 80059be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059c2:	2200      	movs	r2, #0
 80059c4:	2300      	movs	r3, #0
 80059c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059ca:	f7fb f885 	bl	8000ad8 <__aeabi_dcmpeq>
 80059ce:	b9c0      	cbnz	r0, 8005a02 <_printf_float+0x41a>
 80059d0:	4653      	mov	r3, sl
 80059d2:	f108 0201 	add.w	r2, r8, #1
 80059d6:	4631      	mov	r1, r6
 80059d8:	4628      	mov	r0, r5
 80059da:	47b8      	blx	r7
 80059dc:	3001      	adds	r0, #1
 80059de:	d10c      	bne.n	80059fa <_printf_float+0x412>
 80059e0:	e65d      	b.n	800569e <_printf_float+0xb6>
 80059e2:	2301      	movs	r3, #1
 80059e4:	465a      	mov	r2, fp
 80059e6:	4631      	mov	r1, r6
 80059e8:	4628      	mov	r0, r5
 80059ea:	47b8      	blx	r7
 80059ec:	3001      	adds	r0, #1
 80059ee:	f43f ae56 	beq.w	800569e <_printf_float+0xb6>
 80059f2:	f108 0801 	add.w	r8, r8, #1
 80059f6:	45d0      	cmp	r8, sl
 80059f8:	dbf3      	blt.n	80059e2 <_printf_float+0x3fa>
 80059fa:	464b      	mov	r3, r9
 80059fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005a00:	e6df      	b.n	80057c2 <_printf_float+0x1da>
 8005a02:	f04f 0800 	mov.w	r8, #0
 8005a06:	f104 0b1a 	add.w	fp, r4, #26
 8005a0a:	e7f4      	b.n	80059f6 <_printf_float+0x40e>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4642      	mov	r2, r8
 8005a10:	e7e1      	b.n	80059d6 <_printf_float+0x3ee>
 8005a12:	2301      	movs	r3, #1
 8005a14:	464a      	mov	r2, r9
 8005a16:	4631      	mov	r1, r6
 8005a18:	4628      	mov	r0, r5
 8005a1a:	47b8      	blx	r7
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	f43f ae3e 	beq.w	800569e <_printf_float+0xb6>
 8005a22:	f108 0801 	add.w	r8, r8, #1
 8005a26:	68e3      	ldr	r3, [r4, #12]
 8005a28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a2a:	1a5b      	subs	r3, r3, r1
 8005a2c:	4543      	cmp	r3, r8
 8005a2e:	dcf0      	bgt.n	8005a12 <_printf_float+0x42a>
 8005a30:	e6fc      	b.n	800582c <_printf_float+0x244>
 8005a32:	f04f 0800 	mov.w	r8, #0
 8005a36:	f104 0919 	add.w	r9, r4, #25
 8005a3a:	e7f4      	b.n	8005a26 <_printf_float+0x43e>

08005a3c <_printf_common>:
 8005a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a40:	4616      	mov	r6, r2
 8005a42:	4698      	mov	r8, r3
 8005a44:	688a      	ldr	r2, [r1, #8]
 8005a46:	690b      	ldr	r3, [r1, #16]
 8005a48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	bfb8      	it	lt
 8005a50:	4613      	movlt	r3, r2
 8005a52:	6033      	str	r3, [r6, #0]
 8005a54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a58:	4607      	mov	r7, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	b10a      	cbz	r2, 8005a62 <_printf_common+0x26>
 8005a5e:	3301      	adds	r3, #1
 8005a60:	6033      	str	r3, [r6, #0]
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	0699      	lsls	r1, r3, #26
 8005a66:	bf42      	ittt	mi
 8005a68:	6833      	ldrmi	r3, [r6, #0]
 8005a6a:	3302      	addmi	r3, #2
 8005a6c:	6033      	strmi	r3, [r6, #0]
 8005a6e:	6825      	ldr	r5, [r4, #0]
 8005a70:	f015 0506 	ands.w	r5, r5, #6
 8005a74:	d106      	bne.n	8005a84 <_printf_common+0x48>
 8005a76:	f104 0a19 	add.w	sl, r4, #25
 8005a7a:	68e3      	ldr	r3, [r4, #12]
 8005a7c:	6832      	ldr	r2, [r6, #0]
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	dc26      	bgt.n	8005ad2 <_printf_common+0x96>
 8005a84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a88:	6822      	ldr	r2, [r4, #0]
 8005a8a:	3b00      	subs	r3, #0
 8005a8c:	bf18      	it	ne
 8005a8e:	2301      	movne	r3, #1
 8005a90:	0692      	lsls	r2, r2, #26
 8005a92:	d42b      	bmi.n	8005aec <_printf_common+0xb0>
 8005a94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a98:	4641      	mov	r1, r8
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	47c8      	blx	r9
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d01e      	beq.n	8005ae0 <_printf_common+0xa4>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	6922      	ldr	r2, [r4, #16]
 8005aa6:	f003 0306 	and.w	r3, r3, #6
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	bf02      	ittt	eq
 8005aae:	68e5      	ldreq	r5, [r4, #12]
 8005ab0:	6833      	ldreq	r3, [r6, #0]
 8005ab2:	1aed      	subeq	r5, r5, r3
 8005ab4:	68a3      	ldr	r3, [r4, #8]
 8005ab6:	bf0c      	ite	eq
 8005ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005abc:	2500      	movne	r5, #0
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	bfc4      	itt	gt
 8005ac2:	1a9b      	subgt	r3, r3, r2
 8005ac4:	18ed      	addgt	r5, r5, r3
 8005ac6:	2600      	movs	r6, #0
 8005ac8:	341a      	adds	r4, #26
 8005aca:	42b5      	cmp	r5, r6
 8005acc:	d11a      	bne.n	8005b04 <_printf_common+0xc8>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e008      	b.n	8005ae4 <_printf_common+0xa8>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4652      	mov	r2, sl
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	4638      	mov	r0, r7
 8005ada:	47c8      	blx	r9
 8005adc:	3001      	adds	r0, #1
 8005ade:	d103      	bne.n	8005ae8 <_printf_common+0xac>
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae8:	3501      	adds	r5, #1
 8005aea:	e7c6      	b.n	8005a7a <_printf_common+0x3e>
 8005aec:	18e1      	adds	r1, r4, r3
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	2030      	movs	r0, #48	@ 0x30
 8005af2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005af6:	4422      	add	r2, r4
 8005af8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005afc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b00:	3302      	adds	r3, #2
 8005b02:	e7c7      	b.n	8005a94 <_printf_common+0x58>
 8005b04:	2301      	movs	r3, #1
 8005b06:	4622      	mov	r2, r4
 8005b08:	4641      	mov	r1, r8
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	47c8      	blx	r9
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d0e6      	beq.n	8005ae0 <_printf_common+0xa4>
 8005b12:	3601      	adds	r6, #1
 8005b14:	e7d9      	b.n	8005aca <_printf_common+0x8e>
	...

08005b18 <_printf_i>:
 8005b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b1c:	7e0f      	ldrb	r7, [r1, #24]
 8005b1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b20:	2f78      	cmp	r7, #120	@ 0x78
 8005b22:	4691      	mov	r9, r2
 8005b24:	4680      	mov	r8, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	469a      	mov	sl, r3
 8005b2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b2e:	d807      	bhi.n	8005b40 <_printf_i+0x28>
 8005b30:	2f62      	cmp	r7, #98	@ 0x62
 8005b32:	d80a      	bhi.n	8005b4a <_printf_i+0x32>
 8005b34:	2f00      	cmp	r7, #0
 8005b36:	f000 80d2 	beq.w	8005cde <_printf_i+0x1c6>
 8005b3a:	2f58      	cmp	r7, #88	@ 0x58
 8005b3c:	f000 80b9 	beq.w	8005cb2 <_printf_i+0x19a>
 8005b40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b48:	e03a      	b.n	8005bc0 <_printf_i+0xa8>
 8005b4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b4e:	2b15      	cmp	r3, #21
 8005b50:	d8f6      	bhi.n	8005b40 <_printf_i+0x28>
 8005b52:	a101      	add	r1, pc, #4	@ (adr r1, 8005b58 <_printf_i+0x40>)
 8005b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b58:	08005bb1 	.word	0x08005bb1
 8005b5c:	08005bc5 	.word	0x08005bc5
 8005b60:	08005b41 	.word	0x08005b41
 8005b64:	08005b41 	.word	0x08005b41
 8005b68:	08005b41 	.word	0x08005b41
 8005b6c:	08005b41 	.word	0x08005b41
 8005b70:	08005bc5 	.word	0x08005bc5
 8005b74:	08005b41 	.word	0x08005b41
 8005b78:	08005b41 	.word	0x08005b41
 8005b7c:	08005b41 	.word	0x08005b41
 8005b80:	08005b41 	.word	0x08005b41
 8005b84:	08005cc5 	.word	0x08005cc5
 8005b88:	08005bef 	.word	0x08005bef
 8005b8c:	08005c7f 	.word	0x08005c7f
 8005b90:	08005b41 	.word	0x08005b41
 8005b94:	08005b41 	.word	0x08005b41
 8005b98:	08005ce7 	.word	0x08005ce7
 8005b9c:	08005b41 	.word	0x08005b41
 8005ba0:	08005bef 	.word	0x08005bef
 8005ba4:	08005b41 	.word	0x08005b41
 8005ba8:	08005b41 	.word	0x08005b41
 8005bac:	08005c87 	.word	0x08005c87
 8005bb0:	6833      	ldr	r3, [r6, #0]
 8005bb2:	1d1a      	adds	r2, r3, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6032      	str	r2, [r6, #0]
 8005bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e09d      	b.n	8005d00 <_printf_i+0x1e8>
 8005bc4:	6833      	ldr	r3, [r6, #0]
 8005bc6:	6820      	ldr	r0, [r4, #0]
 8005bc8:	1d19      	adds	r1, r3, #4
 8005bca:	6031      	str	r1, [r6, #0]
 8005bcc:	0606      	lsls	r6, r0, #24
 8005bce:	d501      	bpl.n	8005bd4 <_printf_i+0xbc>
 8005bd0:	681d      	ldr	r5, [r3, #0]
 8005bd2:	e003      	b.n	8005bdc <_printf_i+0xc4>
 8005bd4:	0645      	lsls	r5, r0, #25
 8005bd6:	d5fb      	bpl.n	8005bd0 <_printf_i+0xb8>
 8005bd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bdc:	2d00      	cmp	r5, #0
 8005bde:	da03      	bge.n	8005be8 <_printf_i+0xd0>
 8005be0:	232d      	movs	r3, #45	@ 0x2d
 8005be2:	426d      	negs	r5, r5
 8005be4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005be8:	4859      	ldr	r0, [pc, #356]	@ (8005d50 <_printf_i+0x238>)
 8005bea:	230a      	movs	r3, #10
 8005bec:	e011      	b.n	8005c12 <_printf_i+0xfa>
 8005bee:	6821      	ldr	r1, [r4, #0]
 8005bf0:	6833      	ldr	r3, [r6, #0]
 8005bf2:	0608      	lsls	r0, r1, #24
 8005bf4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bf8:	d402      	bmi.n	8005c00 <_printf_i+0xe8>
 8005bfa:	0649      	lsls	r1, r1, #25
 8005bfc:	bf48      	it	mi
 8005bfe:	b2ad      	uxthmi	r5, r5
 8005c00:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c02:	4853      	ldr	r0, [pc, #332]	@ (8005d50 <_printf_i+0x238>)
 8005c04:	6033      	str	r3, [r6, #0]
 8005c06:	bf14      	ite	ne
 8005c08:	230a      	movne	r3, #10
 8005c0a:	2308      	moveq	r3, #8
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c12:	6866      	ldr	r6, [r4, #4]
 8005c14:	60a6      	str	r6, [r4, #8]
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	bfa2      	ittt	ge
 8005c1a:	6821      	ldrge	r1, [r4, #0]
 8005c1c:	f021 0104 	bicge.w	r1, r1, #4
 8005c20:	6021      	strge	r1, [r4, #0]
 8005c22:	b90d      	cbnz	r5, 8005c28 <_printf_i+0x110>
 8005c24:	2e00      	cmp	r6, #0
 8005c26:	d04b      	beq.n	8005cc0 <_printf_i+0x1a8>
 8005c28:	4616      	mov	r6, r2
 8005c2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c2e:	fb03 5711 	mls	r7, r3, r1, r5
 8005c32:	5dc7      	ldrb	r7, [r0, r7]
 8005c34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c38:	462f      	mov	r7, r5
 8005c3a:	42bb      	cmp	r3, r7
 8005c3c:	460d      	mov	r5, r1
 8005c3e:	d9f4      	bls.n	8005c2a <_printf_i+0x112>
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d10b      	bne.n	8005c5c <_printf_i+0x144>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	07df      	lsls	r7, r3, #31
 8005c48:	d508      	bpl.n	8005c5c <_printf_i+0x144>
 8005c4a:	6923      	ldr	r3, [r4, #16]
 8005c4c:	6861      	ldr	r1, [r4, #4]
 8005c4e:	4299      	cmp	r1, r3
 8005c50:	bfde      	ittt	le
 8005c52:	2330      	movle	r3, #48	@ 0x30
 8005c54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c5c:	1b92      	subs	r2, r2, r6
 8005c5e:	6122      	str	r2, [r4, #16]
 8005c60:	f8cd a000 	str.w	sl, [sp]
 8005c64:	464b      	mov	r3, r9
 8005c66:	aa03      	add	r2, sp, #12
 8005c68:	4621      	mov	r1, r4
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	f7ff fee6 	bl	8005a3c <_printf_common>
 8005c70:	3001      	adds	r0, #1
 8005c72:	d14a      	bne.n	8005d0a <_printf_i+0x1f2>
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295
 8005c78:	b004      	add	sp, #16
 8005c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	f043 0320 	orr.w	r3, r3, #32
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	4833      	ldr	r0, [pc, #204]	@ (8005d54 <_printf_i+0x23c>)
 8005c88:	2778      	movs	r7, #120	@ 0x78
 8005c8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	6831      	ldr	r1, [r6, #0]
 8005c92:	061f      	lsls	r7, r3, #24
 8005c94:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c98:	d402      	bmi.n	8005ca0 <_printf_i+0x188>
 8005c9a:	065f      	lsls	r7, r3, #25
 8005c9c:	bf48      	it	mi
 8005c9e:	b2ad      	uxthmi	r5, r5
 8005ca0:	6031      	str	r1, [r6, #0]
 8005ca2:	07d9      	lsls	r1, r3, #31
 8005ca4:	bf44      	itt	mi
 8005ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8005caa:	6023      	strmi	r3, [r4, #0]
 8005cac:	b11d      	cbz	r5, 8005cb6 <_printf_i+0x19e>
 8005cae:	2310      	movs	r3, #16
 8005cb0:	e7ac      	b.n	8005c0c <_printf_i+0xf4>
 8005cb2:	4827      	ldr	r0, [pc, #156]	@ (8005d50 <_printf_i+0x238>)
 8005cb4:	e7e9      	b.n	8005c8a <_printf_i+0x172>
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	f023 0320 	bic.w	r3, r3, #32
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	e7f6      	b.n	8005cae <_printf_i+0x196>
 8005cc0:	4616      	mov	r6, r2
 8005cc2:	e7bd      	b.n	8005c40 <_printf_i+0x128>
 8005cc4:	6833      	ldr	r3, [r6, #0]
 8005cc6:	6825      	ldr	r5, [r4, #0]
 8005cc8:	6961      	ldr	r1, [r4, #20]
 8005cca:	1d18      	adds	r0, r3, #4
 8005ccc:	6030      	str	r0, [r6, #0]
 8005cce:	062e      	lsls	r6, r5, #24
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	d501      	bpl.n	8005cd8 <_printf_i+0x1c0>
 8005cd4:	6019      	str	r1, [r3, #0]
 8005cd6:	e002      	b.n	8005cde <_printf_i+0x1c6>
 8005cd8:	0668      	lsls	r0, r5, #25
 8005cda:	d5fb      	bpl.n	8005cd4 <_printf_i+0x1bc>
 8005cdc:	8019      	strh	r1, [r3, #0]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	4616      	mov	r6, r2
 8005ce4:	e7bc      	b.n	8005c60 <_printf_i+0x148>
 8005ce6:	6833      	ldr	r3, [r6, #0]
 8005ce8:	1d1a      	adds	r2, r3, #4
 8005cea:	6032      	str	r2, [r6, #0]
 8005cec:	681e      	ldr	r6, [r3, #0]
 8005cee:	6862      	ldr	r2, [r4, #4]
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f7fa fa74 	bl	80001e0 <memchr>
 8005cf8:	b108      	cbz	r0, 8005cfe <_printf_i+0x1e6>
 8005cfa:	1b80      	subs	r0, r0, r6
 8005cfc:	6060      	str	r0, [r4, #4]
 8005cfe:	6863      	ldr	r3, [r4, #4]
 8005d00:	6123      	str	r3, [r4, #16]
 8005d02:	2300      	movs	r3, #0
 8005d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d08:	e7aa      	b.n	8005c60 <_printf_i+0x148>
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	4649      	mov	r1, r9
 8005d10:	4640      	mov	r0, r8
 8005d12:	47d0      	blx	sl
 8005d14:	3001      	adds	r0, #1
 8005d16:	d0ad      	beq.n	8005c74 <_printf_i+0x15c>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	079b      	lsls	r3, r3, #30
 8005d1c:	d413      	bmi.n	8005d46 <_printf_i+0x22e>
 8005d1e:	68e0      	ldr	r0, [r4, #12]
 8005d20:	9b03      	ldr	r3, [sp, #12]
 8005d22:	4298      	cmp	r0, r3
 8005d24:	bfb8      	it	lt
 8005d26:	4618      	movlt	r0, r3
 8005d28:	e7a6      	b.n	8005c78 <_printf_i+0x160>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	4632      	mov	r2, r6
 8005d2e:	4649      	mov	r1, r9
 8005d30:	4640      	mov	r0, r8
 8005d32:	47d0      	blx	sl
 8005d34:	3001      	adds	r0, #1
 8005d36:	d09d      	beq.n	8005c74 <_printf_i+0x15c>
 8005d38:	3501      	adds	r5, #1
 8005d3a:	68e3      	ldr	r3, [r4, #12]
 8005d3c:	9903      	ldr	r1, [sp, #12]
 8005d3e:	1a5b      	subs	r3, r3, r1
 8005d40:	42ab      	cmp	r3, r5
 8005d42:	dcf2      	bgt.n	8005d2a <_printf_i+0x212>
 8005d44:	e7eb      	b.n	8005d1e <_printf_i+0x206>
 8005d46:	2500      	movs	r5, #0
 8005d48:	f104 0619 	add.w	r6, r4, #25
 8005d4c:	e7f5      	b.n	8005d3a <_printf_i+0x222>
 8005d4e:	bf00      	nop
 8005d50:	08016b26 	.word	0x08016b26
 8005d54:	08016b37 	.word	0x08016b37

08005d58 <std>:
 8005d58:	2300      	movs	r3, #0
 8005d5a:	b510      	push	{r4, lr}
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d66:	6083      	str	r3, [r0, #8]
 8005d68:	8181      	strh	r1, [r0, #12]
 8005d6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d6c:	81c2      	strh	r2, [r0, #14]
 8005d6e:	6183      	str	r3, [r0, #24]
 8005d70:	4619      	mov	r1, r3
 8005d72:	2208      	movs	r2, #8
 8005d74:	305c      	adds	r0, #92	@ 0x5c
 8005d76:	f000 f9a9 	bl	80060cc <memset>
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <std+0x58>)
 8005d7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <std+0x5c>)
 8005d80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d82:	4b0d      	ldr	r3, [pc, #52]	@ (8005db8 <std+0x60>)
 8005d84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d86:	4b0d      	ldr	r3, [pc, #52]	@ (8005dbc <std+0x64>)
 8005d88:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <std+0x68>)
 8005d8c:	6224      	str	r4, [r4, #32]
 8005d8e:	429c      	cmp	r4, r3
 8005d90:	d006      	beq.n	8005da0 <std+0x48>
 8005d92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d96:	4294      	cmp	r4, r2
 8005d98:	d002      	beq.n	8005da0 <std+0x48>
 8005d9a:	33d0      	adds	r3, #208	@ 0xd0
 8005d9c:	429c      	cmp	r4, r3
 8005d9e:	d105      	bne.n	8005dac <std+0x54>
 8005da0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da8:	f000 ba0c 	b.w	80061c4 <__retarget_lock_init_recursive>
 8005dac:	bd10      	pop	{r4, pc}
 8005dae:	bf00      	nop
 8005db0:	08005f1d 	.word	0x08005f1d
 8005db4:	08005f3f 	.word	0x08005f3f
 8005db8:	08005f77 	.word	0x08005f77
 8005dbc:	08005f9b 	.word	0x08005f9b
 8005dc0:	20009b7c 	.word	0x20009b7c

08005dc4 <stdio_exit_handler>:
 8005dc4:	4a02      	ldr	r2, [pc, #8]	@ (8005dd0 <stdio_exit_handler+0xc>)
 8005dc6:	4903      	ldr	r1, [pc, #12]	@ (8005dd4 <stdio_exit_handler+0x10>)
 8005dc8:	4803      	ldr	r0, [pc, #12]	@ (8005dd8 <stdio_exit_handler+0x14>)
 8005dca:	f000 b869 	b.w	8005ea0 <_fwalk_sglue>
 8005dce:	bf00      	nop
 8005dd0:	20000020 	.word	0x20000020
 8005dd4:	08007da9 	.word	0x08007da9
 8005dd8:	20000030 	.word	0x20000030

08005ddc <cleanup_stdio>:
 8005ddc:	6841      	ldr	r1, [r0, #4]
 8005dde:	4b0c      	ldr	r3, [pc, #48]	@ (8005e10 <cleanup_stdio+0x34>)
 8005de0:	4299      	cmp	r1, r3
 8005de2:	b510      	push	{r4, lr}
 8005de4:	4604      	mov	r4, r0
 8005de6:	d001      	beq.n	8005dec <cleanup_stdio+0x10>
 8005de8:	f001 ffde 	bl	8007da8 <_fflush_r>
 8005dec:	68a1      	ldr	r1, [r4, #8]
 8005dee:	4b09      	ldr	r3, [pc, #36]	@ (8005e14 <cleanup_stdio+0x38>)
 8005df0:	4299      	cmp	r1, r3
 8005df2:	d002      	beq.n	8005dfa <cleanup_stdio+0x1e>
 8005df4:	4620      	mov	r0, r4
 8005df6:	f001 ffd7 	bl	8007da8 <_fflush_r>
 8005dfa:	68e1      	ldr	r1, [r4, #12]
 8005dfc:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <cleanup_stdio+0x3c>)
 8005dfe:	4299      	cmp	r1, r3
 8005e00:	d004      	beq.n	8005e0c <cleanup_stdio+0x30>
 8005e02:	4620      	mov	r0, r4
 8005e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e08:	f001 bfce 	b.w	8007da8 <_fflush_r>
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	bf00      	nop
 8005e10:	20009b7c 	.word	0x20009b7c
 8005e14:	20009be4 	.word	0x20009be4
 8005e18:	20009c4c 	.word	0x20009c4c

08005e1c <global_stdio_init.part.0>:
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <global_stdio_init.part.0+0x30>)
 8005e20:	4c0b      	ldr	r4, [pc, #44]	@ (8005e50 <global_stdio_init.part.0+0x34>)
 8005e22:	4a0c      	ldr	r2, [pc, #48]	@ (8005e54 <global_stdio_init.part.0+0x38>)
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	4620      	mov	r0, r4
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2104      	movs	r1, #4
 8005e2c:	f7ff ff94 	bl	8005d58 <std>
 8005e30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e34:	2201      	movs	r2, #1
 8005e36:	2109      	movs	r1, #9
 8005e38:	f7ff ff8e 	bl	8005d58 <std>
 8005e3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e40:	2202      	movs	r2, #2
 8005e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e46:	2112      	movs	r1, #18
 8005e48:	f7ff bf86 	b.w	8005d58 <std>
 8005e4c:	20009cb4 	.word	0x20009cb4
 8005e50:	20009b7c 	.word	0x20009b7c
 8005e54:	08005dc5 	.word	0x08005dc5

08005e58 <__sfp_lock_acquire>:
 8005e58:	4801      	ldr	r0, [pc, #4]	@ (8005e60 <__sfp_lock_acquire+0x8>)
 8005e5a:	f000 b9b4 	b.w	80061c6 <__retarget_lock_acquire_recursive>
 8005e5e:	bf00      	nop
 8005e60:	20009cbd 	.word	0x20009cbd

08005e64 <__sfp_lock_release>:
 8005e64:	4801      	ldr	r0, [pc, #4]	@ (8005e6c <__sfp_lock_release+0x8>)
 8005e66:	f000 b9af 	b.w	80061c8 <__retarget_lock_release_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	20009cbd 	.word	0x20009cbd

08005e70 <__sinit>:
 8005e70:	b510      	push	{r4, lr}
 8005e72:	4604      	mov	r4, r0
 8005e74:	f7ff fff0 	bl	8005e58 <__sfp_lock_acquire>
 8005e78:	6a23      	ldr	r3, [r4, #32]
 8005e7a:	b11b      	cbz	r3, 8005e84 <__sinit+0x14>
 8005e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e80:	f7ff bff0 	b.w	8005e64 <__sfp_lock_release>
 8005e84:	4b04      	ldr	r3, [pc, #16]	@ (8005e98 <__sinit+0x28>)
 8005e86:	6223      	str	r3, [r4, #32]
 8005e88:	4b04      	ldr	r3, [pc, #16]	@ (8005e9c <__sinit+0x2c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f5      	bne.n	8005e7c <__sinit+0xc>
 8005e90:	f7ff ffc4 	bl	8005e1c <global_stdio_init.part.0>
 8005e94:	e7f2      	b.n	8005e7c <__sinit+0xc>
 8005e96:	bf00      	nop
 8005e98:	08005ddd 	.word	0x08005ddd
 8005e9c:	20009cb4 	.word	0x20009cb4

08005ea0 <_fwalk_sglue>:
 8005ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	4688      	mov	r8, r1
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	2600      	movs	r6, #0
 8005eac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eb0:	f1b9 0901 	subs.w	r9, r9, #1
 8005eb4:	d505      	bpl.n	8005ec2 <_fwalk_sglue+0x22>
 8005eb6:	6824      	ldr	r4, [r4, #0]
 8005eb8:	2c00      	cmp	r4, #0
 8005eba:	d1f7      	bne.n	8005eac <_fwalk_sglue+0xc>
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ec2:	89ab      	ldrh	r3, [r5, #12]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d907      	bls.n	8005ed8 <_fwalk_sglue+0x38>
 8005ec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	d003      	beq.n	8005ed8 <_fwalk_sglue+0x38>
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	47c0      	blx	r8
 8005ed6:	4306      	orrs	r6, r0
 8005ed8:	3568      	adds	r5, #104	@ 0x68
 8005eda:	e7e9      	b.n	8005eb0 <_fwalk_sglue+0x10>

08005edc <siprintf>:
 8005edc:	b40e      	push	{r1, r2, r3}
 8005ede:	b500      	push	{lr}
 8005ee0:	b09c      	sub	sp, #112	@ 0x70
 8005ee2:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ee4:	9002      	str	r0, [sp, #8]
 8005ee6:	9006      	str	r0, [sp, #24]
 8005ee8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005eec:	4809      	ldr	r0, [pc, #36]	@ (8005f14 <siprintf+0x38>)
 8005eee:	9107      	str	r1, [sp, #28]
 8005ef0:	9104      	str	r1, [sp, #16]
 8005ef2:	4909      	ldr	r1, [pc, #36]	@ (8005f18 <siprintf+0x3c>)
 8005ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef8:	9105      	str	r1, [sp, #20]
 8005efa:	6800      	ldr	r0, [r0, #0]
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	a902      	add	r1, sp, #8
 8005f00:	f001 fc90 	bl	8007824 <_svfiprintf_r>
 8005f04:	9b02      	ldr	r3, [sp, #8]
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	b01c      	add	sp, #112	@ 0x70
 8005f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f10:	b003      	add	sp, #12
 8005f12:	4770      	bx	lr
 8005f14:	2000002c 	.word	0x2000002c
 8005f18:	ffff0208 	.word	0xffff0208

08005f1c <__sread>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	460c      	mov	r4, r1
 8005f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f24:	f000 f900 	bl	8006128 <_read_r>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	bfab      	itete	ge
 8005f2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f30:	181b      	addge	r3, r3, r0
 8005f32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f36:	bfac      	ite	ge
 8005f38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f3a:	81a3      	strhlt	r3, [r4, #12]
 8005f3c:	bd10      	pop	{r4, pc}

08005f3e <__swrite>:
 8005f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f42:	461f      	mov	r7, r3
 8005f44:	898b      	ldrh	r3, [r1, #12]
 8005f46:	05db      	lsls	r3, r3, #23
 8005f48:	4605      	mov	r5, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	4616      	mov	r6, r2
 8005f4e:	d505      	bpl.n	8005f5c <__swrite+0x1e>
 8005f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f54:	2302      	movs	r3, #2
 8005f56:	2200      	movs	r2, #0
 8005f58:	f000 f8d4 	bl	8006104 <_lseek_r>
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f66:	81a3      	strh	r3, [r4, #12]
 8005f68:	4632      	mov	r2, r6
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f72:	f000 b8eb 	b.w	800614c <_write_r>

08005f76 <__sseek>:
 8005f76:	b510      	push	{r4, lr}
 8005f78:	460c      	mov	r4, r1
 8005f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7e:	f000 f8c1 	bl	8006104 <_lseek_r>
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	bf15      	itete	ne
 8005f88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f92:	81a3      	strheq	r3, [r4, #12]
 8005f94:	bf18      	it	ne
 8005f96:	81a3      	strhne	r3, [r4, #12]
 8005f98:	bd10      	pop	{r4, pc}

08005f9a <__sclose>:
 8005f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9e:	f000 b8a1 	b.w	80060e4 <_close_r>

08005fa2 <__swbuf_r>:
 8005fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa4:	460e      	mov	r6, r1
 8005fa6:	4614      	mov	r4, r2
 8005fa8:	4605      	mov	r5, r0
 8005faa:	b118      	cbz	r0, 8005fb4 <__swbuf_r+0x12>
 8005fac:	6a03      	ldr	r3, [r0, #32]
 8005fae:	b90b      	cbnz	r3, 8005fb4 <__swbuf_r+0x12>
 8005fb0:	f7ff ff5e 	bl	8005e70 <__sinit>
 8005fb4:	69a3      	ldr	r3, [r4, #24]
 8005fb6:	60a3      	str	r3, [r4, #8]
 8005fb8:	89a3      	ldrh	r3, [r4, #12]
 8005fba:	071a      	lsls	r2, r3, #28
 8005fbc:	d501      	bpl.n	8005fc2 <__swbuf_r+0x20>
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	b943      	cbnz	r3, 8005fd4 <__swbuf_r+0x32>
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 f82b 	bl	8006020 <__swsetup_r>
 8005fca:	b118      	cbz	r0, 8005fd4 <__swbuf_r+0x32>
 8005fcc:	f04f 37ff 	mov.w	r7, #4294967295
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	6922      	ldr	r2, [r4, #16]
 8005fd8:	1a98      	subs	r0, r3, r2
 8005fda:	6963      	ldr	r3, [r4, #20]
 8005fdc:	b2f6      	uxtb	r6, r6
 8005fde:	4283      	cmp	r3, r0
 8005fe0:	4637      	mov	r7, r6
 8005fe2:	dc05      	bgt.n	8005ff0 <__swbuf_r+0x4e>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f001 fede 	bl	8007da8 <_fflush_r>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d1ed      	bne.n	8005fcc <__swbuf_r+0x2a>
 8005ff0:	68a3      	ldr	r3, [r4, #8]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	60a3      	str	r3, [r4, #8]
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	6022      	str	r2, [r4, #0]
 8005ffc:	701e      	strb	r6, [r3, #0]
 8005ffe:	6962      	ldr	r2, [r4, #20]
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	429a      	cmp	r2, r3
 8006004:	d004      	beq.n	8006010 <__swbuf_r+0x6e>
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	07db      	lsls	r3, r3, #31
 800600a:	d5e1      	bpl.n	8005fd0 <__swbuf_r+0x2e>
 800600c:	2e0a      	cmp	r6, #10
 800600e:	d1df      	bne.n	8005fd0 <__swbuf_r+0x2e>
 8006010:	4621      	mov	r1, r4
 8006012:	4628      	mov	r0, r5
 8006014:	f001 fec8 	bl	8007da8 <_fflush_r>
 8006018:	2800      	cmp	r0, #0
 800601a:	d0d9      	beq.n	8005fd0 <__swbuf_r+0x2e>
 800601c:	e7d6      	b.n	8005fcc <__swbuf_r+0x2a>
	...

08006020 <__swsetup_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4b29      	ldr	r3, [pc, #164]	@ (80060c8 <__swsetup_r+0xa8>)
 8006024:	4605      	mov	r5, r0
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	460c      	mov	r4, r1
 800602a:	b118      	cbz	r0, 8006034 <__swsetup_r+0x14>
 800602c:	6a03      	ldr	r3, [r0, #32]
 800602e:	b90b      	cbnz	r3, 8006034 <__swsetup_r+0x14>
 8006030:	f7ff ff1e 	bl	8005e70 <__sinit>
 8006034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006038:	0719      	lsls	r1, r3, #28
 800603a:	d422      	bmi.n	8006082 <__swsetup_r+0x62>
 800603c:	06da      	lsls	r2, r3, #27
 800603e:	d407      	bmi.n	8006050 <__swsetup_r+0x30>
 8006040:	2209      	movs	r2, #9
 8006042:	602a      	str	r2, [r5, #0]
 8006044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006048:	81a3      	strh	r3, [r4, #12]
 800604a:	f04f 30ff 	mov.w	r0, #4294967295
 800604e:	e033      	b.n	80060b8 <__swsetup_r+0x98>
 8006050:	0758      	lsls	r0, r3, #29
 8006052:	d512      	bpl.n	800607a <__swsetup_r+0x5a>
 8006054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006056:	b141      	cbz	r1, 800606a <__swsetup_r+0x4a>
 8006058:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800605c:	4299      	cmp	r1, r3
 800605e:	d002      	beq.n	8006066 <__swsetup_r+0x46>
 8006060:	4628      	mov	r0, r5
 8006062:	f000 ff01 	bl	8006e68 <_free_r>
 8006066:	2300      	movs	r3, #0
 8006068:	6363      	str	r3, [r4, #52]	@ 0x34
 800606a:	89a3      	ldrh	r3, [r4, #12]
 800606c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006070:	81a3      	strh	r3, [r4, #12]
 8006072:	2300      	movs	r3, #0
 8006074:	6063      	str	r3, [r4, #4]
 8006076:	6923      	ldr	r3, [r4, #16]
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	f043 0308 	orr.w	r3, r3, #8
 8006080:	81a3      	strh	r3, [r4, #12]
 8006082:	6923      	ldr	r3, [r4, #16]
 8006084:	b94b      	cbnz	r3, 800609a <__swsetup_r+0x7a>
 8006086:	89a3      	ldrh	r3, [r4, #12]
 8006088:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800608c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006090:	d003      	beq.n	800609a <__swsetup_r+0x7a>
 8006092:	4621      	mov	r1, r4
 8006094:	4628      	mov	r0, r5
 8006096:	f001 fed5 	bl	8007e44 <__smakebuf_r>
 800609a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609e:	f013 0201 	ands.w	r2, r3, #1
 80060a2:	d00a      	beq.n	80060ba <__swsetup_r+0x9a>
 80060a4:	2200      	movs	r2, #0
 80060a6:	60a2      	str	r2, [r4, #8]
 80060a8:	6962      	ldr	r2, [r4, #20]
 80060aa:	4252      	negs	r2, r2
 80060ac:	61a2      	str	r2, [r4, #24]
 80060ae:	6922      	ldr	r2, [r4, #16]
 80060b0:	b942      	cbnz	r2, 80060c4 <__swsetup_r+0xa4>
 80060b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060b6:	d1c5      	bne.n	8006044 <__swsetup_r+0x24>
 80060b8:	bd38      	pop	{r3, r4, r5, pc}
 80060ba:	0799      	lsls	r1, r3, #30
 80060bc:	bf58      	it	pl
 80060be:	6962      	ldrpl	r2, [r4, #20]
 80060c0:	60a2      	str	r2, [r4, #8]
 80060c2:	e7f4      	b.n	80060ae <__swsetup_r+0x8e>
 80060c4:	2000      	movs	r0, #0
 80060c6:	e7f7      	b.n	80060b8 <__swsetup_r+0x98>
 80060c8:	2000002c 	.word	0x2000002c

080060cc <memset>:
 80060cc:	4402      	add	r2, r0
 80060ce:	4603      	mov	r3, r0
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d100      	bne.n	80060d6 <memset+0xa>
 80060d4:	4770      	bx	lr
 80060d6:	f803 1b01 	strb.w	r1, [r3], #1
 80060da:	e7f9      	b.n	80060d0 <memset+0x4>

080060dc <_localeconv_r>:
 80060dc:	4800      	ldr	r0, [pc, #0]	@ (80060e0 <_localeconv_r+0x4>)
 80060de:	4770      	bx	lr
 80060e0:	2000016c 	.word	0x2000016c

080060e4 <_close_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4d06      	ldr	r5, [pc, #24]	@ (8006100 <_close_r+0x1c>)
 80060e8:	2300      	movs	r3, #0
 80060ea:	4604      	mov	r4, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	602b      	str	r3, [r5, #0]
 80060f0:	f7fc fdb8 	bl	8002c64 <_close>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d102      	bne.n	80060fe <_close_r+0x1a>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	b103      	cbz	r3, 80060fe <_close_r+0x1a>
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	20009cb8 	.word	0x20009cb8

08006104 <_lseek_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	4d07      	ldr	r5, [pc, #28]	@ (8006124 <_lseek_r+0x20>)
 8006108:	4604      	mov	r4, r0
 800610a:	4608      	mov	r0, r1
 800610c:	4611      	mov	r1, r2
 800610e:	2200      	movs	r2, #0
 8006110:	602a      	str	r2, [r5, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	f7fc fdcd 	bl	8002cb2 <_lseek>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_lseek_r+0x1e>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	b103      	cbz	r3, 8006122 <_lseek_r+0x1e>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	20009cb8 	.word	0x20009cb8

08006128 <_read_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4d07      	ldr	r5, [pc, #28]	@ (8006148 <_read_r+0x20>)
 800612c:	4604      	mov	r4, r0
 800612e:	4608      	mov	r0, r1
 8006130:	4611      	mov	r1, r2
 8006132:	2200      	movs	r2, #0
 8006134:	602a      	str	r2, [r5, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	f7fc fd5b 	bl	8002bf2 <_read>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_read_r+0x1e>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_read_r+0x1e>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	20009cb8 	.word	0x20009cb8

0800614c <_write_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	4d07      	ldr	r5, [pc, #28]	@ (800616c <_write_r+0x20>)
 8006150:	4604      	mov	r4, r0
 8006152:	4608      	mov	r0, r1
 8006154:	4611      	mov	r1, r2
 8006156:	2200      	movs	r2, #0
 8006158:	602a      	str	r2, [r5, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	f7fc fd66 	bl	8002c2c <_write>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_write_r+0x1e>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_write_r+0x1e>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	20009cb8 	.word	0x20009cb8

08006170 <__errno>:
 8006170:	4b01      	ldr	r3, [pc, #4]	@ (8006178 <__errno+0x8>)
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	2000002c 	.word	0x2000002c

0800617c <__libc_init_array>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	4d0d      	ldr	r5, [pc, #52]	@ (80061b4 <__libc_init_array+0x38>)
 8006180:	4c0d      	ldr	r4, [pc, #52]	@ (80061b8 <__libc_init_array+0x3c>)
 8006182:	1b64      	subs	r4, r4, r5
 8006184:	10a4      	asrs	r4, r4, #2
 8006186:	2600      	movs	r6, #0
 8006188:	42a6      	cmp	r6, r4
 800618a:	d109      	bne.n	80061a0 <__libc_init_array+0x24>
 800618c:	4d0b      	ldr	r5, [pc, #44]	@ (80061bc <__libc_init_array+0x40>)
 800618e:	4c0c      	ldr	r4, [pc, #48]	@ (80061c0 <__libc_init_array+0x44>)
 8006190:	f002 f9e2 	bl	8008558 <_init>
 8006194:	1b64      	subs	r4, r4, r5
 8006196:	10a4      	asrs	r4, r4, #2
 8006198:	2600      	movs	r6, #0
 800619a:	42a6      	cmp	r6, r4
 800619c:	d105      	bne.n	80061aa <__libc_init_array+0x2e>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a4:	4798      	blx	r3
 80061a6:	3601      	adds	r6, #1
 80061a8:	e7ee      	b.n	8006188 <__libc_init_array+0xc>
 80061aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ae:	4798      	blx	r3
 80061b0:	3601      	adds	r6, #1
 80061b2:	e7f2      	b.n	800619a <__libc_init_array+0x1e>
 80061b4:	08016ec0 	.word	0x08016ec0
 80061b8:	08016ec0 	.word	0x08016ec0
 80061bc:	08016ec0 	.word	0x08016ec0
 80061c0:	08016ec4 	.word	0x08016ec4

080061c4 <__retarget_lock_init_recursive>:
 80061c4:	4770      	bx	lr

080061c6 <__retarget_lock_acquire_recursive>:
 80061c6:	4770      	bx	lr

080061c8 <__retarget_lock_release_recursive>:
 80061c8:	4770      	bx	lr

080061ca <quorem>:
 80061ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ce:	6903      	ldr	r3, [r0, #16]
 80061d0:	690c      	ldr	r4, [r1, #16]
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	4607      	mov	r7, r0
 80061d6:	db7e      	blt.n	80062d6 <quorem+0x10c>
 80061d8:	3c01      	subs	r4, #1
 80061da:	f101 0814 	add.w	r8, r1, #20
 80061de:	00a3      	lsls	r3, r4, #2
 80061e0:	f100 0514 	add.w	r5, r0, #20
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061f4:	3301      	adds	r3, #1
 80061f6:	429a      	cmp	r2, r3
 80061f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006200:	d32e      	bcc.n	8006260 <quorem+0x96>
 8006202:	f04f 0a00 	mov.w	sl, #0
 8006206:	46c4      	mov	ip, r8
 8006208:	46ae      	mov	lr, r5
 800620a:	46d3      	mov	fp, sl
 800620c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006210:	b298      	uxth	r0, r3
 8006212:	fb06 a000 	mla	r0, r6, r0, sl
 8006216:	0c02      	lsrs	r2, r0, #16
 8006218:	0c1b      	lsrs	r3, r3, #16
 800621a:	fb06 2303 	mla	r3, r6, r3, r2
 800621e:	f8de 2000 	ldr.w	r2, [lr]
 8006222:	b280      	uxth	r0, r0
 8006224:	b292      	uxth	r2, r2
 8006226:	1a12      	subs	r2, r2, r0
 8006228:	445a      	add	r2, fp
 800622a:	f8de 0000 	ldr.w	r0, [lr]
 800622e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006232:	b29b      	uxth	r3, r3
 8006234:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006238:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800623c:	b292      	uxth	r2, r2
 800623e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006242:	45e1      	cmp	r9, ip
 8006244:	f84e 2b04 	str.w	r2, [lr], #4
 8006248:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800624c:	d2de      	bcs.n	800620c <quorem+0x42>
 800624e:	9b00      	ldr	r3, [sp, #0]
 8006250:	58eb      	ldr	r3, [r5, r3]
 8006252:	b92b      	cbnz	r3, 8006260 <quorem+0x96>
 8006254:	9b01      	ldr	r3, [sp, #4]
 8006256:	3b04      	subs	r3, #4
 8006258:	429d      	cmp	r5, r3
 800625a:	461a      	mov	r2, r3
 800625c:	d32f      	bcc.n	80062be <quorem+0xf4>
 800625e:	613c      	str	r4, [r7, #16]
 8006260:	4638      	mov	r0, r7
 8006262:	f001 f97b 	bl	800755c <__mcmp>
 8006266:	2800      	cmp	r0, #0
 8006268:	db25      	blt.n	80062b6 <quorem+0xec>
 800626a:	4629      	mov	r1, r5
 800626c:	2000      	movs	r0, #0
 800626e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006272:	f8d1 c000 	ldr.w	ip, [r1]
 8006276:	fa1f fe82 	uxth.w	lr, r2
 800627a:	fa1f f38c 	uxth.w	r3, ip
 800627e:	eba3 030e 	sub.w	r3, r3, lr
 8006282:	4403      	add	r3, r0
 8006284:	0c12      	lsrs	r2, r2, #16
 8006286:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800628a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800628e:	b29b      	uxth	r3, r3
 8006290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006294:	45c1      	cmp	r9, r8
 8006296:	f841 3b04 	str.w	r3, [r1], #4
 800629a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800629e:	d2e6      	bcs.n	800626e <quorem+0xa4>
 80062a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062a8:	b922      	cbnz	r2, 80062b4 <quorem+0xea>
 80062aa:	3b04      	subs	r3, #4
 80062ac:	429d      	cmp	r5, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	d30b      	bcc.n	80062ca <quorem+0x100>
 80062b2:	613c      	str	r4, [r7, #16]
 80062b4:	3601      	adds	r6, #1
 80062b6:	4630      	mov	r0, r6
 80062b8:	b003      	add	sp, #12
 80062ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	3b04      	subs	r3, #4
 80062c2:	2a00      	cmp	r2, #0
 80062c4:	d1cb      	bne.n	800625e <quorem+0x94>
 80062c6:	3c01      	subs	r4, #1
 80062c8:	e7c6      	b.n	8006258 <quorem+0x8e>
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	3b04      	subs	r3, #4
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	d1ef      	bne.n	80062b2 <quorem+0xe8>
 80062d2:	3c01      	subs	r4, #1
 80062d4:	e7ea      	b.n	80062ac <quorem+0xe2>
 80062d6:	2000      	movs	r0, #0
 80062d8:	e7ee      	b.n	80062b8 <quorem+0xee>
 80062da:	0000      	movs	r0, r0
 80062dc:	0000      	movs	r0, r0
	...

080062e0 <_dtoa_r>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	69c7      	ldr	r7, [r0, #28]
 80062e6:	b099      	sub	sp, #100	@ 0x64
 80062e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80062ec:	ec55 4b10 	vmov	r4, r5, d0
 80062f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80062f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80062f4:	4683      	mov	fp, r0
 80062f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80062f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80062fa:	b97f      	cbnz	r7, 800631c <_dtoa_r+0x3c>
 80062fc:	2010      	movs	r0, #16
 80062fe:	f000 fdfd 	bl	8006efc <malloc>
 8006302:	4602      	mov	r2, r0
 8006304:	f8cb 001c 	str.w	r0, [fp, #28]
 8006308:	b920      	cbnz	r0, 8006314 <_dtoa_r+0x34>
 800630a:	4ba7      	ldr	r3, [pc, #668]	@ (80065a8 <_dtoa_r+0x2c8>)
 800630c:	21ef      	movs	r1, #239	@ 0xef
 800630e:	48a7      	ldr	r0, [pc, #668]	@ (80065ac <_dtoa_r+0x2cc>)
 8006310:	f001 fe2e 	bl	8007f70 <__assert_func>
 8006314:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006318:	6007      	str	r7, [r0, #0]
 800631a:	60c7      	str	r7, [r0, #12]
 800631c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006320:	6819      	ldr	r1, [r3, #0]
 8006322:	b159      	cbz	r1, 800633c <_dtoa_r+0x5c>
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	604a      	str	r2, [r1, #4]
 8006328:	2301      	movs	r3, #1
 800632a:	4093      	lsls	r3, r2
 800632c:	608b      	str	r3, [r1, #8]
 800632e:	4658      	mov	r0, fp
 8006330:	f000 feda 	bl	80070e8 <_Bfree>
 8006334:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	1e2b      	subs	r3, r5, #0
 800633e:	bfb9      	ittee	lt
 8006340:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006344:	9303      	strlt	r3, [sp, #12]
 8006346:	2300      	movge	r3, #0
 8006348:	6033      	strge	r3, [r6, #0]
 800634a:	9f03      	ldr	r7, [sp, #12]
 800634c:	4b98      	ldr	r3, [pc, #608]	@ (80065b0 <_dtoa_r+0x2d0>)
 800634e:	bfbc      	itt	lt
 8006350:	2201      	movlt	r2, #1
 8006352:	6032      	strlt	r2, [r6, #0]
 8006354:	43bb      	bics	r3, r7
 8006356:	d112      	bne.n	800637e <_dtoa_r+0x9e>
 8006358:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800635a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006364:	4323      	orrs	r3, r4
 8006366:	f000 854d 	beq.w	8006e04 <_dtoa_r+0xb24>
 800636a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800636c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80065c4 <_dtoa_r+0x2e4>
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 854f 	beq.w	8006e14 <_dtoa_r+0xb34>
 8006376:	f10a 0303 	add.w	r3, sl, #3
 800637a:	f000 bd49 	b.w	8006e10 <_dtoa_r+0xb30>
 800637e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006382:	2200      	movs	r2, #0
 8006384:	ec51 0b17 	vmov	r0, r1, d7
 8006388:	2300      	movs	r3, #0
 800638a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800638e:	f7fa fba3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006392:	4680      	mov	r8, r0
 8006394:	b158      	cbz	r0, 80063ae <_dtoa_r+0xce>
 8006396:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006398:	2301      	movs	r3, #1
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800639e:	b113      	cbz	r3, 80063a6 <_dtoa_r+0xc6>
 80063a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80063a2:	4b84      	ldr	r3, [pc, #528]	@ (80065b4 <_dtoa_r+0x2d4>)
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80065c8 <_dtoa_r+0x2e8>
 80063aa:	f000 bd33 	b.w	8006e14 <_dtoa_r+0xb34>
 80063ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80063b2:	aa16      	add	r2, sp, #88	@ 0x58
 80063b4:	a917      	add	r1, sp, #92	@ 0x5c
 80063b6:	4658      	mov	r0, fp
 80063b8:	f001 f980 	bl	80076bc <__d2b>
 80063bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80063c0:	4681      	mov	r9, r0
 80063c2:	2e00      	cmp	r6, #0
 80063c4:	d077      	beq.n	80064b6 <_dtoa_r+0x1d6>
 80063c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80063cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80063d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80063dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80063e0:	4619      	mov	r1, r3
 80063e2:	2200      	movs	r2, #0
 80063e4:	4b74      	ldr	r3, [pc, #464]	@ (80065b8 <_dtoa_r+0x2d8>)
 80063e6:	f7f9 ff57 	bl	8000298 <__aeabi_dsub>
 80063ea:	a369      	add	r3, pc, #420	@ (adr r3, 8006590 <_dtoa_r+0x2b0>)
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f7fa f90a 	bl	8000608 <__aeabi_dmul>
 80063f4:	a368      	add	r3, pc, #416	@ (adr r3, 8006598 <_dtoa_r+0x2b8>)
 80063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fa:	f7f9 ff4f 	bl	800029c <__adddf3>
 80063fe:	4604      	mov	r4, r0
 8006400:	4630      	mov	r0, r6
 8006402:	460d      	mov	r5, r1
 8006404:	f7fa f896 	bl	8000534 <__aeabi_i2d>
 8006408:	a365      	add	r3, pc, #404	@ (adr r3, 80065a0 <_dtoa_r+0x2c0>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7fa f8fb 	bl	8000608 <__aeabi_dmul>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	f7f9 ff3f 	bl	800029c <__adddf3>
 800641e:	4604      	mov	r4, r0
 8006420:	460d      	mov	r5, r1
 8006422:	f7fa fba1 	bl	8000b68 <__aeabi_d2iz>
 8006426:	2200      	movs	r2, #0
 8006428:	4607      	mov	r7, r0
 800642a:	2300      	movs	r3, #0
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	f7fa fb5c 	bl	8000aec <__aeabi_dcmplt>
 8006434:	b140      	cbz	r0, 8006448 <_dtoa_r+0x168>
 8006436:	4638      	mov	r0, r7
 8006438:	f7fa f87c 	bl	8000534 <__aeabi_i2d>
 800643c:	4622      	mov	r2, r4
 800643e:	462b      	mov	r3, r5
 8006440:	f7fa fb4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006444:	b900      	cbnz	r0, 8006448 <_dtoa_r+0x168>
 8006446:	3f01      	subs	r7, #1
 8006448:	2f16      	cmp	r7, #22
 800644a:	d851      	bhi.n	80064f0 <_dtoa_r+0x210>
 800644c:	4b5b      	ldr	r3, [pc, #364]	@ (80065bc <_dtoa_r+0x2dc>)
 800644e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800645a:	f7fa fb47 	bl	8000aec <__aeabi_dcmplt>
 800645e:	2800      	cmp	r0, #0
 8006460:	d048      	beq.n	80064f4 <_dtoa_r+0x214>
 8006462:	3f01      	subs	r7, #1
 8006464:	2300      	movs	r3, #0
 8006466:	9312      	str	r3, [sp, #72]	@ 0x48
 8006468:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800646a:	1b9b      	subs	r3, r3, r6
 800646c:	1e5a      	subs	r2, r3, #1
 800646e:	bf44      	itt	mi
 8006470:	f1c3 0801 	rsbmi	r8, r3, #1
 8006474:	2300      	movmi	r3, #0
 8006476:	9208      	str	r2, [sp, #32]
 8006478:	bf54      	ite	pl
 800647a:	f04f 0800 	movpl.w	r8, #0
 800647e:	9308      	strmi	r3, [sp, #32]
 8006480:	2f00      	cmp	r7, #0
 8006482:	db39      	blt.n	80064f8 <_dtoa_r+0x218>
 8006484:	9b08      	ldr	r3, [sp, #32]
 8006486:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006488:	443b      	add	r3, r7
 800648a:	9308      	str	r3, [sp, #32]
 800648c:	2300      	movs	r3, #0
 800648e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006492:	2b09      	cmp	r3, #9
 8006494:	d864      	bhi.n	8006560 <_dtoa_r+0x280>
 8006496:	2b05      	cmp	r3, #5
 8006498:	bfc4      	itt	gt
 800649a:	3b04      	subgt	r3, #4
 800649c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800649e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a0:	f1a3 0302 	sub.w	r3, r3, #2
 80064a4:	bfcc      	ite	gt
 80064a6:	2400      	movgt	r4, #0
 80064a8:	2401      	movle	r4, #1
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d863      	bhi.n	8006576 <_dtoa_r+0x296>
 80064ae:	e8df f003 	tbb	[pc, r3]
 80064b2:	372a      	.short	0x372a
 80064b4:	5535      	.short	0x5535
 80064b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80064ba:	441e      	add	r6, r3
 80064bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	bfc1      	itttt	gt
 80064c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80064c8:	409f      	lslgt	r7, r3
 80064ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80064ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80064d2:	bfd6      	itet	le
 80064d4:	f1c3 0320 	rsble	r3, r3, #32
 80064d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80064dc:	fa04 f003 	lslle.w	r0, r4, r3
 80064e0:	f7fa f818 	bl	8000514 <__aeabi_ui2d>
 80064e4:	2201      	movs	r2, #1
 80064e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80064ea:	3e01      	subs	r6, #1
 80064ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80064ee:	e777      	b.n	80063e0 <_dtoa_r+0x100>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e7b8      	b.n	8006466 <_dtoa_r+0x186>
 80064f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80064f6:	e7b7      	b.n	8006468 <_dtoa_r+0x188>
 80064f8:	427b      	negs	r3, r7
 80064fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80064fc:	2300      	movs	r3, #0
 80064fe:	eba8 0807 	sub.w	r8, r8, r7
 8006502:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006504:	e7c4      	b.n	8006490 <_dtoa_r+0x1b0>
 8006506:	2300      	movs	r3, #0
 8006508:	930b      	str	r3, [sp, #44]	@ 0x2c
 800650a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800650c:	2b00      	cmp	r3, #0
 800650e:	dc35      	bgt.n	800657c <_dtoa_r+0x29c>
 8006510:	2301      	movs	r3, #1
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	9307      	str	r3, [sp, #28]
 8006516:	461a      	mov	r2, r3
 8006518:	920e      	str	r2, [sp, #56]	@ 0x38
 800651a:	e00b      	b.n	8006534 <_dtoa_r+0x254>
 800651c:	2301      	movs	r3, #1
 800651e:	e7f3      	b.n	8006508 <_dtoa_r+0x228>
 8006520:	2300      	movs	r3, #0
 8006522:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	2b01      	cmp	r3, #1
 800652e:	9307      	str	r3, [sp, #28]
 8006530:	bfb8      	it	lt
 8006532:	2301      	movlt	r3, #1
 8006534:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006538:	2100      	movs	r1, #0
 800653a:	2204      	movs	r2, #4
 800653c:	f102 0514 	add.w	r5, r2, #20
 8006540:	429d      	cmp	r5, r3
 8006542:	d91f      	bls.n	8006584 <_dtoa_r+0x2a4>
 8006544:	6041      	str	r1, [r0, #4]
 8006546:	4658      	mov	r0, fp
 8006548:	f000 fd8e 	bl	8007068 <_Balloc>
 800654c:	4682      	mov	sl, r0
 800654e:	2800      	cmp	r0, #0
 8006550:	d13c      	bne.n	80065cc <_dtoa_r+0x2ec>
 8006552:	4b1b      	ldr	r3, [pc, #108]	@ (80065c0 <_dtoa_r+0x2e0>)
 8006554:	4602      	mov	r2, r0
 8006556:	f240 11af 	movw	r1, #431	@ 0x1af
 800655a:	e6d8      	b.n	800630e <_dtoa_r+0x2e>
 800655c:	2301      	movs	r3, #1
 800655e:	e7e0      	b.n	8006522 <_dtoa_r+0x242>
 8006560:	2401      	movs	r4, #1
 8006562:	2300      	movs	r3, #0
 8006564:	9309      	str	r3, [sp, #36]	@ 0x24
 8006566:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006568:	f04f 33ff 	mov.w	r3, #4294967295
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	2200      	movs	r2, #0
 8006572:	2312      	movs	r3, #18
 8006574:	e7d0      	b.n	8006518 <_dtoa_r+0x238>
 8006576:	2301      	movs	r3, #1
 8006578:	930b      	str	r3, [sp, #44]	@ 0x2c
 800657a:	e7f5      	b.n	8006568 <_dtoa_r+0x288>
 800657c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	9307      	str	r3, [sp, #28]
 8006582:	e7d7      	b.n	8006534 <_dtoa_r+0x254>
 8006584:	3101      	adds	r1, #1
 8006586:	0052      	lsls	r2, r2, #1
 8006588:	e7d8      	b.n	800653c <_dtoa_r+0x25c>
 800658a:	bf00      	nop
 800658c:	f3af 8000 	nop.w
 8006590:	636f4361 	.word	0x636f4361
 8006594:	3fd287a7 	.word	0x3fd287a7
 8006598:	8b60c8b3 	.word	0x8b60c8b3
 800659c:	3fc68a28 	.word	0x3fc68a28
 80065a0:	509f79fb 	.word	0x509f79fb
 80065a4:	3fd34413 	.word	0x3fd34413
 80065a8:	08016b55 	.word	0x08016b55
 80065ac:	08016b6c 	.word	0x08016b6c
 80065b0:	7ff00000 	.word	0x7ff00000
 80065b4:	08016b25 	.word	0x08016b25
 80065b8:	3ff80000 	.word	0x3ff80000
 80065bc:	08016c68 	.word	0x08016c68
 80065c0:	08016bc4 	.word	0x08016bc4
 80065c4:	08016b51 	.word	0x08016b51
 80065c8:	08016b24 	.word	0x08016b24
 80065cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80065d0:	6018      	str	r0, [r3, #0]
 80065d2:	9b07      	ldr	r3, [sp, #28]
 80065d4:	2b0e      	cmp	r3, #14
 80065d6:	f200 80a4 	bhi.w	8006722 <_dtoa_r+0x442>
 80065da:	2c00      	cmp	r4, #0
 80065dc:	f000 80a1 	beq.w	8006722 <_dtoa_r+0x442>
 80065e0:	2f00      	cmp	r7, #0
 80065e2:	dd33      	ble.n	800664c <_dtoa_r+0x36c>
 80065e4:	4bad      	ldr	r3, [pc, #692]	@ (800689c <_dtoa_r+0x5bc>)
 80065e6:	f007 020f 	and.w	r2, r7, #15
 80065ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065ee:	ed93 7b00 	vldr	d7, [r3]
 80065f2:	05f8      	lsls	r0, r7, #23
 80065f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80065f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80065fc:	d516      	bpl.n	800662c <_dtoa_r+0x34c>
 80065fe:	4ba8      	ldr	r3, [pc, #672]	@ (80068a0 <_dtoa_r+0x5c0>)
 8006600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006608:	f7fa f928 	bl	800085c <__aeabi_ddiv>
 800660c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006610:	f004 040f 	and.w	r4, r4, #15
 8006614:	2603      	movs	r6, #3
 8006616:	4da2      	ldr	r5, [pc, #648]	@ (80068a0 <_dtoa_r+0x5c0>)
 8006618:	b954      	cbnz	r4, 8006630 <_dtoa_r+0x350>
 800661a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800661e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006622:	f7fa f91b 	bl	800085c <__aeabi_ddiv>
 8006626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800662a:	e028      	b.n	800667e <_dtoa_r+0x39e>
 800662c:	2602      	movs	r6, #2
 800662e:	e7f2      	b.n	8006616 <_dtoa_r+0x336>
 8006630:	07e1      	lsls	r1, r4, #31
 8006632:	d508      	bpl.n	8006646 <_dtoa_r+0x366>
 8006634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006638:	e9d5 2300 	ldrd	r2, r3, [r5]
 800663c:	f7f9 ffe4 	bl	8000608 <__aeabi_dmul>
 8006640:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006644:	3601      	adds	r6, #1
 8006646:	1064      	asrs	r4, r4, #1
 8006648:	3508      	adds	r5, #8
 800664a:	e7e5      	b.n	8006618 <_dtoa_r+0x338>
 800664c:	f000 80d2 	beq.w	80067f4 <_dtoa_r+0x514>
 8006650:	427c      	negs	r4, r7
 8006652:	4b92      	ldr	r3, [pc, #584]	@ (800689c <_dtoa_r+0x5bc>)
 8006654:	4d92      	ldr	r5, [pc, #584]	@ (80068a0 <_dtoa_r+0x5c0>)
 8006656:	f004 020f 	and.w	r2, r4, #15
 800665a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006666:	f7f9 ffcf 	bl	8000608 <__aeabi_dmul>
 800666a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800666e:	1124      	asrs	r4, r4, #4
 8006670:	2300      	movs	r3, #0
 8006672:	2602      	movs	r6, #2
 8006674:	2c00      	cmp	r4, #0
 8006676:	f040 80b2 	bne.w	80067de <_dtoa_r+0x4fe>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1d3      	bne.n	8006626 <_dtoa_r+0x346>
 800667e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006680:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80b7 	beq.w	80067f8 <_dtoa_r+0x518>
 800668a:	4b86      	ldr	r3, [pc, #536]	@ (80068a4 <_dtoa_r+0x5c4>)
 800668c:	2200      	movs	r2, #0
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f7fa fa2b 	bl	8000aec <__aeabi_dcmplt>
 8006696:	2800      	cmp	r0, #0
 8006698:	f000 80ae 	beq.w	80067f8 <_dtoa_r+0x518>
 800669c:	9b07      	ldr	r3, [sp, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 80aa 	beq.w	80067f8 <_dtoa_r+0x518>
 80066a4:	9b00      	ldr	r3, [sp, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dd37      	ble.n	800671a <_dtoa_r+0x43a>
 80066aa:	1e7b      	subs	r3, r7, #1
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	4620      	mov	r0, r4
 80066b0:	4b7d      	ldr	r3, [pc, #500]	@ (80068a8 <_dtoa_r+0x5c8>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	4629      	mov	r1, r5
 80066b6:	f7f9 ffa7 	bl	8000608 <__aeabi_dmul>
 80066ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066be:	9c00      	ldr	r4, [sp, #0]
 80066c0:	3601      	adds	r6, #1
 80066c2:	4630      	mov	r0, r6
 80066c4:	f7f9 ff36 	bl	8000534 <__aeabi_i2d>
 80066c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066cc:	f7f9 ff9c 	bl	8000608 <__aeabi_dmul>
 80066d0:	4b76      	ldr	r3, [pc, #472]	@ (80068ac <_dtoa_r+0x5cc>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	f7f9 fde2 	bl	800029c <__adddf3>
 80066d8:	4605      	mov	r5, r0
 80066da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80066de:	2c00      	cmp	r4, #0
 80066e0:	f040 808d 	bne.w	80067fe <_dtoa_r+0x51e>
 80066e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066e8:	4b71      	ldr	r3, [pc, #452]	@ (80068b0 <_dtoa_r+0x5d0>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	f7f9 fdd4 	bl	8000298 <__aeabi_dsub>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066f8:	462a      	mov	r2, r5
 80066fa:	4633      	mov	r3, r6
 80066fc:	f7fa fa14 	bl	8000b28 <__aeabi_dcmpgt>
 8006700:	2800      	cmp	r0, #0
 8006702:	f040 828b 	bne.w	8006c1c <_dtoa_r+0x93c>
 8006706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800670a:	462a      	mov	r2, r5
 800670c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006710:	f7fa f9ec 	bl	8000aec <__aeabi_dcmplt>
 8006714:	2800      	cmp	r0, #0
 8006716:	f040 8128 	bne.w	800696a <_dtoa_r+0x68a>
 800671a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800671e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006722:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006724:	2b00      	cmp	r3, #0
 8006726:	f2c0 815a 	blt.w	80069de <_dtoa_r+0x6fe>
 800672a:	2f0e      	cmp	r7, #14
 800672c:	f300 8157 	bgt.w	80069de <_dtoa_r+0x6fe>
 8006730:	4b5a      	ldr	r3, [pc, #360]	@ (800689c <_dtoa_r+0x5bc>)
 8006732:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006736:	ed93 7b00 	vldr	d7, [r3]
 800673a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	ed8d 7b00 	vstr	d7, [sp]
 8006742:	da03      	bge.n	800674c <_dtoa_r+0x46c>
 8006744:	9b07      	ldr	r3, [sp, #28]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f340 8101 	ble.w	800694e <_dtoa_r+0x66e>
 800674c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006750:	4656      	mov	r6, sl
 8006752:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006756:	4620      	mov	r0, r4
 8006758:	4629      	mov	r1, r5
 800675a:	f7fa f87f 	bl	800085c <__aeabi_ddiv>
 800675e:	f7fa fa03 	bl	8000b68 <__aeabi_d2iz>
 8006762:	4680      	mov	r8, r0
 8006764:	f7f9 fee6 	bl	8000534 <__aeabi_i2d>
 8006768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800676c:	f7f9 ff4c 	bl	8000608 <__aeabi_dmul>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4620      	mov	r0, r4
 8006776:	4629      	mov	r1, r5
 8006778:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800677c:	f7f9 fd8c 	bl	8000298 <__aeabi_dsub>
 8006780:	f806 4b01 	strb.w	r4, [r6], #1
 8006784:	9d07      	ldr	r5, [sp, #28]
 8006786:	eba6 040a 	sub.w	r4, r6, sl
 800678a:	42a5      	cmp	r5, r4
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	f040 8117 	bne.w	80069c2 <_dtoa_r+0x6e2>
 8006794:	f7f9 fd82 	bl	800029c <__adddf3>
 8006798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	f7fa f9c2 	bl	8000b28 <__aeabi_dcmpgt>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	f040 80f9 	bne.w	800699c <_dtoa_r+0x6bc>
 80067aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067ae:	4620      	mov	r0, r4
 80067b0:	4629      	mov	r1, r5
 80067b2:	f7fa f991 	bl	8000ad8 <__aeabi_dcmpeq>
 80067b6:	b118      	cbz	r0, 80067c0 <_dtoa_r+0x4e0>
 80067b8:	f018 0f01 	tst.w	r8, #1
 80067bc:	f040 80ee 	bne.w	800699c <_dtoa_r+0x6bc>
 80067c0:	4649      	mov	r1, r9
 80067c2:	4658      	mov	r0, fp
 80067c4:	f000 fc90 	bl	80070e8 <_Bfree>
 80067c8:	2300      	movs	r3, #0
 80067ca:	7033      	strb	r3, [r6, #0]
 80067cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067ce:	3701      	adds	r7, #1
 80067d0:	601f      	str	r7, [r3, #0]
 80067d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 831d 	beq.w	8006e14 <_dtoa_r+0xb34>
 80067da:	601e      	str	r6, [r3, #0]
 80067dc:	e31a      	b.n	8006e14 <_dtoa_r+0xb34>
 80067de:	07e2      	lsls	r2, r4, #31
 80067e0:	d505      	bpl.n	80067ee <_dtoa_r+0x50e>
 80067e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067e6:	f7f9 ff0f 	bl	8000608 <__aeabi_dmul>
 80067ea:	3601      	adds	r6, #1
 80067ec:	2301      	movs	r3, #1
 80067ee:	1064      	asrs	r4, r4, #1
 80067f0:	3508      	adds	r5, #8
 80067f2:	e73f      	b.n	8006674 <_dtoa_r+0x394>
 80067f4:	2602      	movs	r6, #2
 80067f6:	e742      	b.n	800667e <_dtoa_r+0x39e>
 80067f8:	9c07      	ldr	r4, [sp, #28]
 80067fa:	9704      	str	r7, [sp, #16]
 80067fc:	e761      	b.n	80066c2 <_dtoa_r+0x3e2>
 80067fe:	4b27      	ldr	r3, [pc, #156]	@ (800689c <_dtoa_r+0x5bc>)
 8006800:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006802:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006806:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800680a:	4454      	add	r4, sl
 800680c:	2900      	cmp	r1, #0
 800680e:	d053      	beq.n	80068b8 <_dtoa_r+0x5d8>
 8006810:	4928      	ldr	r1, [pc, #160]	@ (80068b4 <_dtoa_r+0x5d4>)
 8006812:	2000      	movs	r0, #0
 8006814:	f7fa f822 	bl	800085c <__aeabi_ddiv>
 8006818:	4633      	mov	r3, r6
 800681a:	462a      	mov	r2, r5
 800681c:	f7f9 fd3c 	bl	8000298 <__aeabi_dsub>
 8006820:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006824:	4656      	mov	r6, sl
 8006826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800682a:	f7fa f99d 	bl	8000b68 <__aeabi_d2iz>
 800682e:	4605      	mov	r5, r0
 8006830:	f7f9 fe80 	bl	8000534 <__aeabi_i2d>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800683c:	f7f9 fd2c 	bl	8000298 <__aeabi_dsub>
 8006840:	3530      	adds	r5, #48	@ 0x30
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800684a:	f806 5b01 	strb.w	r5, [r6], #1
 800684e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006852:	f7fa f94b 	bl	8000aec <__aeabi_dcmplt>
 8006856:	2800      	cmp	r0, #0
 8006858:	d171      	bne.n	800693e <_dtoa_r+0x65e>
 800685a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800685e:	4911      	ldr	r1, [pc, #68]	@ (80068a4 <_dtoa_r+0x5c4>)
 8006860:	2000      	movs	r0, #0
 8006862:	f7f9 fd19 	bl	8000298 <__aeabi_dsub>
 8006866:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800686a:	f7fa f93f 	bl	8000aec <__aeabi_dcmplt>
 800686e:	2800      	cmp	r0, #0
 8006870:	f040 8095 	bne.w	800699e <_dtoa_r+0x6be>
 8006874:	42a6      	cmp	r6, r4
 8006876:	f43f af50 	beq.w	800671a <_dtoa_r+0x43a>
 800687a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800687e:	4b0a      	ldr	r3, [pc, #40]	@ (80068a8 <_dtoa_r+0x5c8>)
 8006880:	2200      	movs	r2, #0
 8006882:	f7f9 fec1 	bl	8000608 <__aeabi_dmul>
 8006886:	4b08      	ldr	r3, [pc, #32]	@ (80068a8 <_dtoa_r+0x5c8>)
 8006888:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800688c:	2200      	movs	r2, #0
 800688e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006892:	f7f9 feb9 	bl	8000608 <__aeabi_dmul>
 8006896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800689a:	e7c4      	b.n	8006826 <_dtoa_r+0x546>
 800689c:	08016c68 	.word	0x08016c68
 80068a0:	08016c40 	.word	0x08016c40
 80068a4:	3ff00000 	.word	0x3ff00000
 80068a8:	40240000 	.word	0x40240000
 80068ac:	401c0000 	.word	0x401c0000
 80068b0:	40140000 	.word	0x40140000
 80068b4:	3fe00000 	.word	0x3fe00000
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	f7f9 fea4 	bl	8000608 <__aeabi_dmul>
 80068c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80068c6:	4656      	mov	r6, sl
 80068c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068cc:	f7fa f94c 	bl	8000b68 <__aeabi_d2iz>
 80068d0:	4605      	mov	r5, r0
 80068d2:	f7f9 fe2f 	bl	8000534 <__aeabi_i2d>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068de:	f7f9 fcdb 	bl	8000298 <__aeabi_dsub>
 80068e2:	3530      	adds	r5, #48	@ 0x30
 80068e4:	f806 5b01 	strb.w	r5, [r6], #1
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	42a6      	cmp	r6, r4
 80068ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	d124      	bne.n	8006942 <_dtoa_r+0x662>
 80068f8:	4bac      	ldr	r3, [pc, #688]	@ (8006bac <_dtoa_r+0x8cc>)
 80068fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80068fe:	f7f9 fccd 	bl	800029c <__adddf3>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800690a:	f7fa f90d 	bl	8000b28 <__aeabi_dcmpgt>
 800690e:	2800      	cmp	r0, #0
 8006910:	d145      	bne.n	800699e <_dtoa_r+0x6be>
 8006912:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006916:	49a5      	ldr	r1, [pc, #660]	@ (8006bac <_dtoa_r+0x8cc>)
 8006918:	2000      	movs	r0, #0
 800691a:	f7f9 fcbd 	bl	8000298 <__aeabi_dsub>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006926:	f7fa f8e1 	bl	8000aec <__aeabi_dcmplt>
 800692a:	2800      	cmp	r0, #0
 800692c:	f43f aef5 	beq.w	800671a <_dtoa_r+0x43a>
 8006930:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006932:	1e73      	subs	r3, r6, #1
 8006934:	9315      	str	r3, [sp, #84]	@ 0x54
 8006936:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800693a:	2b30      	cmp	r3, #48	@ 0x30
 800693c:	d0f8      	beq.n	8006930 <_dtoa_r+0x650>
 800693e:	9f04      	ldr	r7, [sp, #16]
 8006940:	e73e      	b.n	80067c0 <_dtoa_r+0x4e0>
 8006942:	4b9b      	ldr	r3, [pc, #620]	@ (8006bb0 <_dtoa_r+0x8d0>)
 8006944:	f7f9 fe60 	bl	8000608 <__aeabi_dmul>
 8006948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800694c:	e7bc      	b.n	80068c8 <_dtoa_r+0x5e8>
 800694e:	d10c      	bne.n	800696a <_dtoa_r+0x68a>
 8006950:	4b98      	ldr	r3, [pc, #608]	@ (8006bb4 <_dtoa_r+0x8d4>)
 8006952:	2200      	movs	r2, #0
 8006954:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006958:	f7f9 fe56 	bl	8000608 <__aeabi_dmul>
 800695c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006960:	f7fa f8d8 	bl	8000b14 <__aeabi_dcmpge>
 8006964:	2800      	cmp	r0, #0
 8006966:	f000 8157 	beq.w	8006c18 <_dtoa_r+0x938>
 800696a:	2400      	movs	r4, #0
 800696c:	4625      	mov	r5, r4
 800696e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006970:	43db      	mvns	r3, r3
 8006972:	9304      	str	r3, [sp, #16]
 8006974:	4656      	mov	r6, sl
 8006976:	2700      	movs	r7, #0
 8006978:	4621      	mov	r1, r4
 800697a:	4658      	mov	r0, fp
 800697c:	f000 fbb4 	bl	80070e8 <_Bfree>
 8006980:	2d00      	cmp	r5, #0
 8006982:	d0dc      	beq.n	800693e <_dtoa_r+0x65e>
 8006984:	b12f      	cbz	r7, 8006992 <_dtoa_r+0x6b2>
 8006986:	42af      	cmp	r7, r5
 8006988:	d003      	beq.n	8006992 <_dtoa_r+0x6b2>
 800698a:	4639      	mov	r1, r7
 800698c:	4658      	mov	r0, fp
 800698e:	f000 fbab 	bl	80070e8 <_Bfree>
 8006992:	4629      	mov	r1, r5
 8006994:	4658      	mov	r0, fp
 8006996:	f000 fba7 	bl	80070e8 <_Bfree>
 800699a:	e7d0      	b.n	800693e <_dtoa_r+0x65e>
 800699c:	9704      	str	r7, [sp, #16]
 800699e:	4633      	mov	r3, r6
 80069a0:	461e      	mov	r6, r3
 80069a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069a6:	2a39      	cmp	r2, #57	@ 0x39
 80069a8:	d107      	bne.n	80069ba <_dtoa_r+0x6da>
 80069aa:	459a      	cmp	sl, r3
 80069ac:	d1f8      	bne.n	80069a0 <_dtoa_r+0x6c0>
 80069ae:	9a04      	ldr	r2, [sp, #16]
 80069b0:	3201      	adds	r2, #1
 80069b2:	9204      	str	r2, [sp, #16]
 80069b4:	2230      	movs	r2, #48	@ 0x30
 80069b6:	f88a 2000 	strb.w	r2, [sl]
 80069ba:	781a      	ldrb	r2, [r3, #0]
 80069bc:	3201      	adds	r2, #1
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	e7bd      	b.n	800693e <_dtoa_r+0x65e>
 80069c2:	4b7b      	ldr	r3, [pc, #492]	@ (8006bb0 <_dtoa_r+0x8d0>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	f7f9 fe1f 	bl	8000608 <__aeabi_dmul>
 80069ca:	2200      	movs	r2, #0
 80069cc:	2300      	movs	r3, #0
 80069ce:	4604      	mov	r4, r0
 80069d0:	460d      	mov	r5, r1
 80069d2:	f7fa f881 	bl	8000ad8 <__aeabi_dcmpeq>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f43f aebb 	beq.w	8006752 <_dtoa_r+0x472>
 80069dc:	e6f0      	b.n	80067c0 <_dtoa_r+0x4e0>
 80069de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80069e0:	2a00      	cmp	r2, #0
 80069e2:	f000 80db 	beq.w	8006b9c <_dtoa_r+0x8bc>
 80069e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069e8:	2a01      	cmp	r2, #1
 80069ea:	f300 80bf 	bgt.w	8006b6c <_dtoa_r+0x88c>
 80069ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80069f0:	2a00      	cmp	r2, #0
 80069f2:	f000 80b7 	beq.w	8006b64 <_dtoa_r+0x884>
 80069f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80069fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80069fc:	4646      	mov	r6, r8
 80069fe:	9a08      	ldr	r2, [sp, #32]
 8006a00:	2101      	movs	r1, #1
 8006a02:	441a      	add	r2, r3
 8006a04:	4658      	mov	r0, fp
 8006a06:	4498      	add	r8, r3
 8006a08:	9208      	str	r2, [sp, #32]
 8006a0a:	f000 fc21 	bl	8007250 <__i2b>
 8006a0e:	4605      	mov	r5, r0
 8006a10:	b15e      	cbz	r6, 8006a2a <_dtoa_r+0x74a>
 8006a12:	9b08      	ldr	r3, [sp, #32]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dd08      	ble.n	8006a2a <_dtoa_r+0x74a>
 8006a18:	42b3      	cmp	r3, r6
 8006a1a:	9a08      	ldr	r2, [sp, #32]
 8006a1c:	bfa8      	it	ge
 8006a1e:	4633      	movge	r3, r6
 8006a20:	eba8 0803 	sub.w	r8, r8, r3
 8006a24:	1af6      	subs	r6, r6, r3
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	9308      	str	r3, [sp, #32]
 8006a2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a2c:	b1f3      	cbz	r3, 8006a6c <_dtoa_r+0x78c>
 8006a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80b7 	beq.w	8006ba4 <_dtoa_r+0x8c4>
 8006a36:	b18c      	cbz	r4, 8006a5c <_dtoa_r+0x77c>
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	4658      	mov	r0, fp
 8006a3e:	f000 fcc7 	bl	80073d0 <__pow5mult>
 8006a42:	464a      	mov	r2, r9
 8006a44:	4601      	mov	r1, r0
 8006a46:	4605      	mov	r5, r0
 8006a48:	4658      	mov	r0, fp
 8006a4a:	f000 fc17 	bl	800727c <__multiply>
 8006a4e:	4649      	mov	r1, r9
 8006a50:	9004      	str	r0, [sp, #16]
 8006a52:	4658      	mov	r0, fp
 8006a54:	f000 fb48 	bl	80070e8 <_Bfree>
 8006a58:	9b04      	ldr	r3, [sp, #16]
 8006a5a:	4699      	mov	r9, r3
 8006a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a5e:	1b1a      	subs	r2, r3, r4
 8006a60:	d004      	beq.n	8006a6c <_dtoa_r+0x78c>
 8006a62:	4649      	mov	r1, r9
 8006a64:	4658      	mov	r0, fp
 8006a66:	f000 fcb3 	bl	80073d0 <__pow5mult>
 8006a6a:	4681      	mov	r9, r0
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	4658      	mov	r0, fp
 8006a70:	f000 fbee 	bl	8007250 <__i2b>
 8006a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a76:	4604      	mov	r4, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 81cf 	beq.w	8006e1c <_dtoa_r+0xb3c>
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4601      	mov	r1, r0
 8006a82:	4658      	mov	r0, fp
 8006a84:	f000 fca4 	bl	80073d0 <__pow5mult>
 8006a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	f300 8095 	bgt.w	8006bbc <_dtoa_r+0x8dc>
 8006a92:	9b02      	ldr	r3, [sp, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 8087 	bne.w	8006ba8 <_dtoa_r+0x8c8>
 8006a9a:	9b03      	ldr	r3, [sp, #12]
 8006a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f040 8089 	bne.w	8006bb8 <_dtoa_r+0x8d8>
 8006aa6:	9b03      	ldr	r3, [sp, #12]
 8006aa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006aac:	0d1b      	lsrs	r3, r3, #20
 8006aae:	051b      	lsls	r3, r3, #20
 8006ab0:	b12b      	cbz	r3, 8006abe <_dtoa_r+0x7de>
 8006ab2:	9b08      	ldr	r3, [sp, #32]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	9308      	str	r3, [sp, #32]
 8006ab8:	f108 0801 	add.w	r8, r8, #1
 8006abc:	2301      	movs	r3, #1
 8006abe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 81b0 	beq.w	8006e28 <_dtoa_r+0xb48>
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ace:	6918      	ldr	r0, [r3, #16]
 8006ad0:	f000 fb72 	bl	80071b8 <__hi0bits>
 8006ad4:	f1c0 0020 	rsb	r0, r0, #32
 8006ad8:	9b08      	ldr	r3, [sp, #32]
 8006ada:	4418      	add	r0, r3
 8006adc:	f010 001f 	ands.w	r0, r0, #31
 8006ae0:	d077      	beq.n	8006bd2 <_dtoa_r+0x8f2>
 8006ae2:	f1c0 0320 	rsb	r3, r0, #32
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	dd6b      	ble.n	8006bc2 <_dtoa_r+0x8e2>
 8006aea:	9b08      	ldr	r3, [sp, #32]
 8006aec:	f1c0 001c 	rsb	r0, r0, #28
 8006af0:	4403      	add	r3, r0
 8006af2:	4480      	add	r8, r0
 8006af4:	4406      	add	r6, r0
 8006af6:	9308      	str	r3, [sp, #32]
 8006af8:	f1b8 0f00 	cmp.w	r8, #0
 8006afc:	dd05      	ble.n	8006b0a <_dtoa_r+0x82a>
 8006afe:	4649      	mov	r1, r9
 8006b00:	4642      	mov	r2, r8
 8006b02:	4658      	mov	r0, fp
 8006b04:	f000 fcbe 	bl	8007484 <__lshift>
 8006b08:	4681      	mov	r9, r0
 8006b0a:	9b08      	ldr	r3, [sp, #32]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dd05      	ble.n	8006b1c <_dtoa_r+0x83c>
 8006b10:	4621      	mov	r1, r4
 8006b12:	461a      	mov	r2, r3
 8006b14:	4658      	mov	r0, fp
 8006b16:	f000 fcb5 	bl	8007484 <__lshift>
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d059      	beq.n	8006bd6 <_dtoa_r+0x8f6>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4648      	mov	r0, r9
 8006b26:	f000 fd19 	bl	800755c <__mcmp>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	da53      	bge.n	8006bd6 <_dtoa_r+0x8f6>
 8006b2e:	1e7b      	subs	r3, r7, #1
 8006b30:	9304      	str	r3, [sp, #16]
 8006b32:	4649      	mov	r1, r9
 8006b34:	2300      	movs	r3, #0
 8006b36:	220a      	movs	r2, #10
 8006b38:	4658      	mov	r0, fp
 8006b3a:	f000 faf7 	bl	800712c <__multadd>
 8006b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b40:	4681      	mov	r9, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 8172 	beq.w	8006e2c <_dtoa_r+0xb4c>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	220a      	movs	r2, #10
 8006b4e:	4658      	mov	r0, fp
 8006b50:	f000 faec 	bl	800712c <__multadd>
 8006b54:	9b00      	ldr	r3, [sp, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	4605      	mov	r5, r0
 8006b5a:	dc67      	bgt.n	8006c2c <_dtoa_r+0x94c>
 8006b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	dc41      	bgt.n	8006be6 <_dtoa_r+0x906>
 8006b62:	e063      	b.n	8006c2c <_dtoa_r+0x94c>
 8006b64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006b6a:	e746      	b.n	80069fa <_dtoa_r+0x71a>
 8006b6c:	9b07      	ldr	r3, [sp, #28]
 8006b6e:	1e5c      	subs	r4, r3, #1
 8006b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	bfbf      	itttt	lt
 8006b76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006b78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006b7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006b7c:	1ae3      	sublt	r3, r4, r3
 8006b7e:	bfb4      	ite	lt
 8006b80:	18d2      	addlt	r2, r2, r3
 8006b82:	1b1c      	subge	r4, r3, r4
 8006b84:	9b07      	ldr	r3, [sp, #28]
 8006b86:	bfbc      	itt	lt
 8006b88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006b8a:	2400      	movlt	r4, #0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	bfb5      	itete	lt
 8006b90:	eba8 0603 	sublt.w	r6, r8, r3
 8006b94:	9b07      	ldrge	r3, [sp, #28]
 8006b96:	2300      	movlt	r3, #0
 8006b98:	4646      	movge	r6, r8
 8006b9a:	e730      	b.n	80069fe <_dtoa_r+0x71e>
 8006b9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006ba0:	4646      	mov	r6, r8
 8006ba2:	e735      	b.n	8006a10 <_dtoa_r+0x730>
 8006ba4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ba6:	e75c      	b.n	8006a62 <_dtoa_r+0x782>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e788      	b.n	8006abe <_dtoa_r+0x7de>
 8006bac:	3fe00000 	.word	0x3fe00000
 8006bb0:	40240000 	.word	0x40240000
 8006bb4:	40140000 	.word	0x40140000
 8006bb8:	9b02      	ldr	r3, [sp, #8]
 8006bba:	e780      	b.n	8006abe <_dtoa_r+0x7de>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bc0:	e782      	b.n	8006ac8 <_dtoa_r+0x7e8>
 8006bc2:	d099      	beq.n	8006af8 <_dtoa_r+0x818>
 8006bc4:	9a08      	ldr	r2, [sp, #32]
 8006bc6:	331c      	adds	r3, #28
 8006bc8:	441a      	add	r2, r3
 8006bca:	4498      	add	r8, r3
 8006bcc:	441e      	add	r6, r3
 8006bce:	9208      	str	r2, [sp, #32]
 8006bd0:	e792      	b.n	8006af8 <_dtoa_r+0x818>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	e7f6      	b.n	8006bc4 <_dtoa_r+0x8e4>
 8006bd6:	9b07      	ldr	r3, [sp, #28]
 8006bd8:	9704      	str	r7, [sp, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dc20      	bgt.n	8006c20 <_dtoa_r+0x940>
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	dd1e      	ble.n	8006c24 <_dtoa_r+0x944>
 8006be6:	9b00      	ldr	r3, [sp, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f47f aec0 	bne.w	800696e <_dtoa_r+0x68e>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	2205      	movs	r2, #5
 8006bf2:	4658      	mov	r0, fp
 8006bf4:	f000 fa9a 	bl	800712c <__multadd>
 8006bf8:	4601      	mov	r1, r0
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4648      	mov	r0, r9
 8006bfe:	f000 fcad 	bl	800755c <__mcmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f77f aeb3 	ble.w	800696e <_dtoa_r+0x68e>
 8006c08:	4656      	mov	r6, sl
 8006c0a:	2331      	movs	r3, #49	@ 0x31
 8006c0c:	f806 3b01 	strb.w	r3, [r6], #1
 8006c10:	9b04      	ldr	r3, [sp, #16]
 8006c12:	3301      	adds	r3, #1
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	e6ae      	b.n	8006976 <_dtoa_r+0x696>
 8006c18:	9c07      	ldr	r4, [sp, #28]
 8006c1a:	9704      	str	r7, [sp, #16]
 8006c1c:	4625      	mov	r5, r4
 8006c1e:	e7f3      	b.n	8006c08 <_dtoa_r+0x928>
 8006c20:	9b07      	ldr	r3, [sp, #28]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 8104 	beq.w	8006e34 <_dtoa_r+0xb54>
 8006c2c:	2e00      	cmp	r6, #0
 8006c2e:	dd05      	ble.n	8006c3c <_dtoa_r+0x95c>
 8006c30:	4629      	mov	r1, r5
 8006c32:	4632      	mov	r2, r6
 8006c34:	4658      	mov	r0, fp
 8006c36:	f000 fc25 	bl	8007484 <__lshift>
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d05a      	beq.n	8006cf8 <_dtoa_r+0xa18>
 8006c42:	6869      	ldr	r1, [r5, #4]
 8006c44:	4658      	mov	r0, fp
 8006c46:	f000 fa0f 	bl	8007068 <_Balloc>
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	b928      	cbnz	r0, 8006c5a <_dtoa_r+0x97a>
 8006c4e:	4b84      	ldr	r3, [pc, #528]	@ (8006e60 <_dtoa_r+0xb80>)
 8006c50:	4602      	mov	r2, r0
 8006c52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006c56:	f7ff bb5a 	b.w	800630e <_dtoa_r+0x2e>
 8006c5a:	692a      	ldr	r2, [r5, #16]
 8006c5c:	3202      	adds	r2, #2
 8006c5e:	0092      	lsls	r2, r2, #2
 8006c60:	f105 010c 	add.w	r1, r5, #12
 8006c64:	300c      	adds	r0, #12
 8006c66:	f001 f975 	bl	8007f54 <memcpy>
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4658      	mov	r0, fp
 8006c70:	f000 fc08 	bl	8007484 <__lshift>
 8006c74:	f10a 0301 	add.w	r3, sl, #1
 8006c78:	9307      	str	r3, [sp, #28]
 8006c7a:	9b00      	ldr	r3, [sp, #0]
 8006c7c:	4453      	add	r3, sl
 8006c7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c80:	9b02      	ldr	r3, [sp, #8]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	462f      	mov	r7, r5
 8006c88:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	9b07      	ldr	r3, [sp, #28]
 8006c8e:	4621      	mov	r1, r4
 8006c90:	3b01      	subs	r3, #1
 8006c92:	4648      	mov	r0, r9
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	f7ff fa98 	bl	80061ca <quorem>
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	9002      	str	r0, [sp, #8]
 8006c9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ca2:	4648      	mov	r0, r9
 8006ca4:	f000 fc5a 	bl	800755c <__mcmp>
 8006ca8:	462a      	mov	r2, r5
 8006caa:	9008      	str	r0, [sp, #32]
 8006cac:	4621      	mov	r1, r4
 8006cae:	4658      	mov	r0, fp
 8006cb0:	f000 fc70 	bl	8007594 <__mdiff>
 8006cb4:	68c2      	ldr	r2, [r0, #12]
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	bb02      	cbnz	r2, 8006cfc <_dtoa_r+0xa1c>
 8006cba:	4601      	mov	r1, r0
 8006cbc:	4648      	mov	r0, r9
 8006cbe:	f000 fc4d 	bl	800755c <__mcmp>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4658      	mov	r0, fp
 8006cc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cca:	f000 fa0d 	bl	80070e8 <_Bfree>
 8006cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cd2:	9e07      	ldr	r6, [sp, #28]
 8006cd4:	ea43 0102 	orr.w	r1, r3, r2
 8006cd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cda:	4319      	orrs	r1, r3
 8006cdc:	d110      	bne.n	8006d00 <_dtoa_r+0xa20>
 8006cde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ce2:	d029      	beq.n	8006d38 <_dtoa_r+0xa58>
 8006ce4:	9b08      	ldr	r3, [sp, #32]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	dd02      	ble.n	8006cf0 <_dtoa_r+0xa10>
 8006cea:	9b02      	ldr	r3, [sp, #8]
 8006cec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006cf0:	9b00      	ldr	r3, [sp, #0]
 8006cf2:	f883 8000 	strb.w	r8, [r3]
 8006cf6:	e63f      	b.n	8006978 <_dtoa_r+0x698>
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	e7bb      	b.n	8006c74 <_dtoa_r+0x994>
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	e7e1      	b.n	8006cc4 <_dtoa_r+0x9e4>
 8006d00:	9b08      	ldr	r3, [sp, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	db04      	blt.n	8006d10 <_dtoa_r+0xa30>
 8006d06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	d120      	bne.n	8006d52 <_dtoa_r+0xa72>
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	dded      	ble.n	8006cf0 <_dtoa_r+0xa10>
 8006d14:	4649      	mov	r1, r9
 8006d16:	2201      	movs	r2, #1
 8006d18:	4658      	mov	r0, fp
 8006d1a:	f000 fbb3 	bl	8007484 <__lshift>
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4681      	mov	r9, r0
 8006d22:	f000 fc1b 	bl	800755c <__mcmp>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	dc03      	bgt.n	8006d32 <_dtoa_r+0xa52>
 8006d2a:	d1e1      	bne.n	8006cf0 <_dtoa_r+0xa10>
 8006d2c:	f018 0f01 	tst.w	r8, #1
 8006d30:	d0de      	beq.n	8006cf0 <_dtoa_r+0xa10>
 8006d32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d36:	d1d8      	bne.n	8006cea <_dtoa_r+0xa0a>
 8006d38:	9a00      	ldr	r2, [sp, #0]
 8006d3a:	2339      	movs	r3, #57	@ 0x39
 8006d3c:	7013      	strb	r3, [r2, #0]
 8006d3e:	4633      	mov	r3, r6
 8006d40:	461e      	mov	r6, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006d48:	2a39      	cmp	r2, #57	@ 0x39
 8006d4a:	d052      	beq.n	8006df2 <_dtoa_r+0xb12>
 8006d4c:	3201      	adds	r2, #1
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	e612      	b.n	8006978 <_dtoa_r+0x698>
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	dd07      	ble.n	8006d66 <_dtoa_r+0xa86>
 8006d56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d5a:	d0ed      	beq.n	8006d38 <_dtoa_r+0xa58>
 8006d5c:	9a00      	ldr	r2, [sp, #0]
 8006d5e:	f108 0301 	add.w	r3, r8, #1
 8006d62:	7013      	strb	r3, [r2, #0]
 8006d64:	e608      	b.n	8006978 <_dtoa_r+0x698>
 8006d66:	9b07      	ldr	r3, [sp, #28]
 8006d68:	9a07      	ldr	r2, [sp, #28]
 8006d6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d028      	beq.n	8006dc6 <_dtoa_r+0xae6>
 8006d74:	4649      	mov	r1, r9
 8006d76:	2300      	movs	r3, #0
 8006d78:	220a      	movs	r2, #10
 8006d7a:	4658      	mov	r0, fp
 8006d7c:	f000 f9d6 	bl	800712c <__multadd>
 8006d80:	42af      	cmp	r7, r5
 8006d82:	4681      	mov	r9, r0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	f04f 020a 	mov.w	r2, #10
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	4658      	mov	r0, fp
 8006d90:	d107      	bne.n	8006da2 <_dtoa_r+0xac2>
 8006d92:	f000 f9cb 	bl	800712c <__multadd>
 8006d96:	4607      	mov	r7, r0
 8006d98:	4605      	mov	r5, r0
 8006d9a:	9b07      	ldr	r3, [sp, #28]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	9307      	str	r3, [sp, #28]
 8006da0:	e774      	b.n	8006c8c <_dtoa_r+0x9ac>
 8006da2:	f000 f9c3 	bl	800712c <__multadd>
 8006da6:	4629      	mov	r1, r5
 8006da8:	4607      	mov	r7, r0
 8006daa:	2300      	movs	r3, #0
 8006dac:	220a      	movs	r2, #10
 8006dae:	4658      	mov	r0, fp
 8006db0:	f000 f9bc 	bl	800712c <__multadd>
 8006db4:	4605      	mov	r5, r0
 8006db6:	e7f0      	b.n	8006d9a <_dtoa_r+0xaba>
 8006db8:	9b00      	ldr	r3, [sp, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bfcc      	ite	gt
 8006dbe:	461e      	movgt	r6, r3
 8006dc0:	2601      	movle	r6, #1
 8006dc2:	4456      	add	r6, sl
 8006dc4:	2700      	movs	r7, #0
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	2201      	movs	r2, #1
 8006dca:	4658      	mov	r0, fp
 8006dcc:	f000 fb5a 	bl	8007484 <__lshift>
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4681      	mov	r9, r0
 8006dd4:	f000 fbc2 	bl	800755c <__mcmp>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	dcb0      	bgt.n	8006d3e <_dtoa_r+0xa5e>
 8006ddc:	d102      	bne.n	8006de4 <_dtoa_r+0xb04>
 8006dde:	f018 0f01 	tst.w	r8, #1
 8006de2:	d1ac      	bne.n	8006d3e <_dtoa_r+0xa5e>
 8006de4:	4633      	mov	r3, r6
 8006de6:	461e      	mov	r6, r3
 8006de8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dec:	2a30      	cmp	r2, #48	@ 0x30
 8006dee:	d0fa      	beq.n	8006de6 <_dtoa_r+0xb06>
 8006df0:	e5c2      	b.n	8006978 <_dtoa_r+0x698>
 8006df2:	459a      	cmp	sl, r3
 8006df4:	d1a4      	bne.n	8006d40 <_dtoa_r+0xa60>
 8006df6:	9b04      	ldr	r3, [sp, #16]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	9304      	str	r3, [sp, #16]
 8006dfc:	2331      	movs	r3, #49	@ 0x31
 8006dfe:	f88a 3000 	strb.w	r3, [sl]
 8006e02:	e5b9      	b.n	8006978 <_dtoa_r+0x698>
 8006e04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006e64 <_dtoa_r+0xb84>
 8006e0a:	b11b      	cbz	r3, 8006e14 <_dtoa_r+0xb34>
 8006e0c:	f10a 0308 	add.w	r3, sl, #8
 8006e10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	4650      	mov	r0, sl
 8006e16:	b019      	add	sp, #100	@ 0x64
 8006e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	f77f ae37 	ble.w	8006a92 <_dtoa_r+0x7b2>
 8006e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e26:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e28:	2001      	movs	r0, #1
 8006e2a:	e655      	b.n	8006ad8 <_dtoa_r+0x7f8>
 8006e2c:	9b00      	ldr	r3, [sp, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f77f aed6 	ble.w	8006be0 <_dtoa_r+0x900>
 8006e34:	4656      	mov	r6, sl
 8006e36:	4621      	mov	r1, r4
 8006e38:	4648      	mov	r0, r9
 8006e3a:	f7ff f9c6 	bl	80061ca <quorem>
 8006e3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e42:	f806 8b01 	strb.w	r8, [r6], #1
 8006e46:	9b00      	ldr	r3, [sp, #0]
 8006e48:	eba6 020a 	sub.w	r2, r6, sl
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	ddb3      	ble.n	8006db8 <_dtoa_r+0xad8>
 8006e50:	4649      	mov	r1, r9
 8006e52:	2300      	movs	r3, #0
 8006e54:	220a      	movs	r2, #10
 8006e56:	4658      	mov	r0, fp
 8006e58:	f000 f968 	bl	800712c <__multadd>
 8006e5c:	4681      	mov	r9, r0
 8006e5e:	e7ea      	b.n	8006e36 <_dtoa_r+0xb56>
 8006e60:	08016bc4 	.word	0x08016bc4
 8006e64:	08016b48 	.word	0x08016b48

08006e68 <_free_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	d041      	beq.n	8006ef4 <_free_r+0x8c>
 8006e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e74:	1f0c      	subs	r4, r1, #4
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	bfb8      	it	lt
 8006e7a:	18e4      	addlt	r4, r4, r3
 8006e7c:	f000 f8e8 	bl	8007050 <__malloc_lock>
 8006e80:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef8 <_free_r+0x90>)
 8006e82:	6813      	ldr	r3, [r2, #0]
 8006e84:	b933      	cbnz	r3, 8006e94 <_free_r+0x2c>
 8006e86:	6063      	str	r3, [r4, #4]
 8006e88:	6014      	str	r4, [r2, #0]
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e90:	f000 b8e4 	b.w	800705c <__malloc_unlock>
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	d908      	bls.n	8006eaa <_free_r+0x42>
 8006e98:	6820      	ldr	r0, [r4, #0]
 8006e9a:	1821      	adds	r1, r4, r0
 8006e9c:	428b      	cmp	r3, r1
 8006e9e:	bf01      	itttt	eq
 8006ea0:	6819      	ldreq	r1, [r3, #0]
 8006ea2:	685b      	ldreq	r3, [r3, #4]
 8006ea4:	1809      	addeq	r1, r1, r0
 8006ea6:	6021      	streq	r1, [r4, #0]
 8006ea8:	e7ed      	b.n	8006e86 <_free_r+0x1e>
 8006eaa:	461a      	mov	r2, r3
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	b10b      	cbz	r3, 8006eb4 <_free_r+0x4c>
 8006eb0:	42a3      	cmp	r3, r4
 8006eb2:	d9fa      	bls.n	8006eaa <_free_r+0x42>
 8006eb4:	6811      	ldr	r1, [r2, #0]
 8006eb6:	1850      	adds	r0, r2, r1
 8006eb8:	42a0      	cmp	r0, r4
 8006eba:	d10b      	bne.n	8006ed4 <_free_r+0x6c>
 8006ebc:	6820      	ldr	r0, [r4, #0]
 8006ebe:	4401      	add	r1, r0
 8006ec0:	1850      	adds	r0, r2, r1
 8006ec2:	4283      	cmp	r3, r0
 8006ec4:	6011      	str	r1, [r2, #0]
 8006ec6:	d1e0      	bne.n	8006e8a <_free_r+0x22>
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	6053      	str	r3, [r2, #4]
 8006ece:	4408      	add	r0, r1
 8006ed0:	6010      	str	r0, [r2, #0]
 8006ed2:	e7da      	b.n	8006e8a <_free_r+0x22>
 8006ed4:	d902      	bls.n	8006edc <_free_r+0x74>
 8006ed6:	230c      	movs	r3, #12
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	e7d6      	b.n	8006e8a <_free_r+0x22>
 8006edc:	6820      	ldr	r0, [r4, #0]
 8006ede:	1821      	adds	r1, r4, r0
 8006ee0:	428b      	cmp	r3, r1
 8006ee2:	bf04      	itt	eq
 8006ee4:	6819      	ldreq	r1, [r3, #0]
 8006ee6:	685b      	ldreq	r3, [r3, #4]
 8006ee8:	6063      	str	r3, [r4, #4]
 8006eea:	bf04      	itt	eq
 8006eec:	1809      	addeq	r1, r1, r0
 8006eee:	6021      	streq	r1, [r4, #0]
 8006ef0:	6054      	str	r4, [r2, #4]
 8006ef2:	e7ca      	b.n	8006e8a <_free_r+0x22>
 8006ef4:	bd38      	pop	{r3, r4, r5, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20009cc4 	.word	0x20009cc4

08006efc <malloc>:
 8006efc:	4b02      	ldr	r3, [pc, #8]	@ (8006f08 <malloc+0xc>)
 8006efe:	4601      	mov	r1, r0
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	f000 b825 	b.w	8006f50 <_malloc_r>
 8006f06:	bf00      	nop
 8006f08:	2000002c 	.word	0x2000002c

08006f0c <sbrk_aligned>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8006f4c <sbrk_aligned+0x40>)
 8006f10:	460c      	mov	r4, r1
 8006f12:	6831      	ldr	r1, [r6, #0]
 8006f14:	4605      	mov	r5, r0
 8006f16:	b911      	cbnz	r1, 8006f1e <sbrk_aligned+0x12>
 8006f18:	f001 f80c 	bl	8007f34 <_sbrk_r>
 8006f1c:	6030      	str	r0, [r6, #0]
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4628      	mov	r0, r5
 8006f22:	f001 f807 	bl	8007f34 <_sbrk_r>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d103      	bne.n	8006f32 <sbrk_aligned+0x26>
 8006f2a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f2e:	4620      	mov	r0, r4
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
 8006f32:	1cc4      	adds	r4, r0, #3
 8006f34:	f024 0403 	bic.w	r4, r4, #3
 8006f38:	42a0      	cmp	r0, r4
 8006f3a:	d0f8      	beq.n	8006f2e <sbrk_aligned+0x22>
 8006f3c:	1a21      	subs	r1, r4, r0
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f000 fff8 	bl	8007f34 <_sbrk_r>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d1f2      	bne.n	8006f2e <sbrk_aligned+0x22>
 8006f48:	e7ef      	b.n	8006f2a <sbrk_aligned+0x1e>
 8006f4a:	bf00      	nop
 8006f4c:	20009cc0 	.word	0x20009cc0

08006f50 <_malloc_r>:
 8006f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f54:	1ccd      	adds	r5, r1, #3
 8006f56:	f025 0503 	bic.w	r5, r5, #3
 8006f5a:	3508      	adds	r5, #8
 8006f5c:	2d0c      	cmp	r5, #12
 8006f5e:	bf38      	it	cc
 8006f60:	250c      	movcc	r5, #12
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	4606      	mov	r6, r0
 8006f66:	db01      	blt.n	8006f6c <_malloc_r+0x1c>
 8006f68:	42a9      	cmp	r1, r5
 8006f6a:	d904      	bls.n	8006f76 <_malloc_r+0x26>
 8006f6c:	230c      	movs	r3, #12
 8006f6e:	6033      	str	r3, [r6, #0]
 8006f70:	2000      	movs	r0, #0
 8006f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800704c <_malloc_r+0xfc>
 8006f7a:	f000 f869 	bl	8007050 <__malloc_lock>
 8006f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f82:	461c      	mov	r4, r3
 8006f84:	bb44      	cbnz	r4, 8006fd8 <_malloc_r+0x88>
 8006f86:	4629      	mov	r1, r5
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f7ff ffbf 	bl	8006f0c <sbrk_aligned>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	4604      	mov	r4, r0
 8006f92:	d158      	bne.n	8007046 <_malloc_r+0xf6>
 8006f94:	f8d8 4000 	ldr.w	r4, [r8]
 8006f98:	4627      	mov	r7, r4
 8006f9a:	2f00      	cmp	r7, #0
 8006f9c:	d143      	bne.n	8007026 <_malloc_r+0xd6>
 8006f9e:	2c00      	cmp	r4, #0
 8006fa0:	d04b      	beq.n	800703a <_malloc_r+0xea>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	eb04 0903 	add.w	r9, r4, r3
 8006fac:	f000 ffc2 	bl	8007f34 <_sbrk_r>
 8006fb0:	4581      	cmp	r9, r0
 8006fb2:	d142      	bne.n	800703a <_malloc_r+0xea>
 8006fb4:	6821      	ldr	r1, [r4, #0]
 8006fb6:	1a6d      	subs	r5, r5, r1
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7ff ffa6 	bl	8006f0c <sbrk_aligned>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d03a      	beq.n	800703a <_malloc_r+0xea>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	442b      	add	r3, r5
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	f8d8 3000 	ldr.w	r3, [r8]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	bb62      	cbnz	r2, 800702c <_malloc_r+0xdc>
 8006fd2:	f8c8 7000 	str.w	r7, [r8]
 8006fd6:	e00f      	b.n	8006ff8 <_malloc_r+0xa8>
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	1b52      	subs	r2, r2, r5
 8006fdc:	d420      	bmi.n	8007020 <_malloc_r+0xd0>
 8006fde:	2a0b      	cmp	r2, #11
 8006fe0:	d917      	bls.n	8007012 <_malloc_r+0xc2>
 8006fe2:	1961      	adds	r1, r4, r5
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	6025      	str	r5, [r4, #0]
 8006fe8:	bf18      	it	ne
 8006fea:	6059      	strne	r1, [r3, #4]
 8006fec:	6863      	ldr	r3, [r4, #4]
 8006fee:	bf08      	it	eq
 8006ff0:	f8c8 1000 	streq.w	r1, [r8]
 8006ff4:	5162      	str	r2, [r4, r5]
 8006ff6:	604b      	str	r3, [r1, #4]
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f000 f82f 	bl	800705c <__malloc_unlock>
 8006ffe:	f104 000b 	add.w	r0, r4, #11
 8007002:	1d23      	adds	r3, r4, #4
 8007004:	f020 0007 	bic.w	r0, r0, #7
 8007008:	1ac2      	subs	r2, r0, r3
 800700a:	bf1c      	itt	ne
 800700c:	1a1b      	subne	r3, r3, r0
 800700e:	50a3      	strne	r3, [r4, r2]
 8007010:	e7af      	b.n	8006f72 <_malloc_r+0x22>
 8007012:	6862      	ldr	r2, [r4, #4]
 8007014:	42a3      	cmp	r3, r4
 8007016:	bf0c      	ite	eq
 8007018:	f8c8 2000 	streq.w	r2, [r8]
 800701c:	605a      	strne	r2, [r3, #4]
 800701e:	e7eb      	b.n	8006ff8 <_malloc_r+0xa8>
 8007020:	4623      	mov	r3, r4
 8007022:	6864      	ldr	r4, [r4, #4]
 8007024:	e7ae      	b.n	8006f84 <_malloc_r+0x34>
 8007026:	463c      	mov	r4, r7
 8007028:	687f      	ldr	r7, [r7, #4]
 800702a:	e7b6      	b.n	8006f9a <_malloc_r+0x4a>
 800702c:	461a      	mov	r2, r3
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	42a3      	cmp	r3, r4
 8007032:	d1fb      	bne.n	800702c <_malloc_r+0xdc>
 8007034:	2300      	movs	r3, #0
 8007036:	6053      	str	r3, [r2, #4]
 8007038:	e7de      	b.n	8006ff8 <_malloc_r+0xa8>
 800703a:	230c      	movs	r3, #12
 800703c:	6033      	str	r3, [r6, #0]
 800703e:	4630      	mov	r0, r6
 8007040:	f000 f80c 	bl	800705c <__malloc_unlock>
 8007044:	e794      	b.n	8006f70 <_malloc_r+0x20>
 8007046:	6005      	str	r5, [r0, #0]
 8007048:	e7d6      	b.n	8006ff8 <_malloc_r+0xa8>
 800704a:	bf00      	nop
 800704c:	20009cc4 	.word	0x20009cc4

08007050 <__malloc_lock>:
 8007050:	4801      	ldr	r0, [pc, #4]	@ (8007058 <__malloc_lock+0x8>)
 8007052:	f7ff b8b8 	b.w	80061c6 <__retarget_lock_acquire_recursive>
 8007056:	bf00      	nop
 8007058:	20009cbc 	.word	0x20009cbc

0800705c <__malloc_unlock>:
 800705c:	4801      	ldr	r0, [pc, #4]	@ (8007064 <__malloc_unlock+0x8>)
 800705e:	f7ff b8b3 	b.w	80061c8 <__retarget_lock_release_recursive>
 8007062:	bf00      	nop
 8007064:	20009cbc 	.word	0x20009cbc

08007068 <_Balloc>:
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	69c6      	ldr	r6, [r0, #28]
 800706c:	4604      	mov	r4, r0
 800706e:	460d      	mov	r5, r1
 8007070:	b976      	cbnz	r6, 8007090 <_Balloc+0x28>
 8007072:	2010      	movs	r0, #16
 8007074:	f7ff ff42 	bl	8006efc <malloc>
 8007078:	4602      	mov	r2, r0
 800707a:	61e0      	str	r0, [r4, #28]
 800707c:	b920      	cbnz	r0, 8007088 <_Balloc+0x20>
 800707e:	4b18      	ldr	r3, [pc, #96]	@ (80070e0 <_Balloc+0x78>)
 8007080:	4818      	ldr	r0, [pc, #96]	@ (80070e4 <_Balloc+0x7c>)
 8007082:	216b      	movs	r1, #107	@ 0x6b
 8007084:	f000 ff74 	bl	8007f70 <__assert_func>
 8007088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800708c:	6006      	str	r6, [r0, #0]
 800708e:	60c6      	str	r6, [r0, #12]
 8007090:	69e6      	ldr	r6, [r4, #28]
 8007092:	68f3      	ldr	r3, [r6, #12]
 8007094:	b183      	cbz	r3, 80070b8 <_Balloc+0x50>
 8007096:	69e3      	ldr	r3, [r4, #28]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800709e:	b9b8      	cbnz	r0, 80070d0 <_Balloc+0x68>
 80070a0:	2101      	movs	r1, #1
 80070a2:	fa01 f605 	lsl.w	r6, r1, r5
 80070a6:	1d72      	adds	r2, r6, #5
 80070a8:	0092      	lsls	r2, r2, #2
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 ff7e 	bl	8007fac <_calloc_r>
 80070b0:	b160      	cbz	r0, 80070cc <_Balloc+0x64>
 80070b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070b6:	e00e      	b.n	80070d6 <_Balloc+0x6e>
 80070b8:	2221      	movs	r2, #33	@ 0x21
 80070ba:	2104      	movs	r1, #4
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 ff75 	bl	8007fac <_calloc_r>
 80070c2:	69e3      	ldr	r3, [r4, #28]
 80070c4:	60f0      	str	r0, [r6, #12]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e4      	bne.n	8007096 <_Balloc+0x2e>
 80070cc:	2000      	movs	r0, #0
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	6802      	ldr	r2, [r0, #0]
 80070d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070d6:	2300      	movs	r3, #0
 80070d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070dc:	e7f7      	b.n	80070ce <_Balloc+0x66>
 80070de:	bf00      	nop
 80070e0:	08016b55 	.word	0x08016b55
 80070e4:	08016bd5 	.word	0x08016bd5

080070e8 <_Bfree>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	69c6      	ldr	r6, [r0, #28]
 80070ec:	4605      	mov	r5, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	b976      	cbnz	r6, 8007110 <_Bfree+0x28>
 80070f2:	2010      	movs	r0, #16
 80070f4:	f7ff ff02 	bl	8006efc <malloc>
 80070f8:	4602      	mov	r2, r0
 80070fa:	61e8      	str	r0, [r5, #28]
 80070fc:	b920      	cbnz	r0, 8007108 <_Bfree+0x20>
 80070fe:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <_Bfree+0x3c>)
 8007100:	4809      	ldr	r0, [pc, #36]	@ (8007128 <_Bfree+0x40>)
 8007102:	218f      	movs	r1, #143	@ 0x8f
 8007104:	f000 ff34 	bl	8007f70 <__assert_func>
 8007108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800710c:	6006      	str	r6, [r0, #0]
 800710e:	60c6      	str	r6, [r0, #12]
 8007110:	b13c      	cbz	r4, 8007122 <_Bfree+0x3a>
 8007112:	69eb      	ldr	r3, [r5, #28]
 8007114:	6862      	ldr	r2, [r4, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800711c:	6021      	str	r1, [r4, #0]
 800711e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	08016b55 	.word	0x08016b55
 8007128:	08016bd5 	.word	0x08016bd5

0800712c <__multadd>:
 800712c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007130:	690d      	ldr	r5, [r1, #16]
 8007132:	4607      	mov	r7, r0
 8007134:	460c      	mov	r4, r1
 8007136:	461e      	mov	r6, r3
 8007138:	f101 0c14 	add.w	ip, r1, #20
 800713c:	2000      	movs	r0, #0
 800713e:	f8dc 3000 	ldr.w	r3, [ip]
 8007142:	b299      	uxth	r1, r3
 8007144:	fb02 6101 	mla	r1, r2, r1, r6
 8007148:	0c1e      	lsrs	r6, r3, #16
 800714a:	0c0b      	lsrs	r3, r1, #16
 800714c:	fb02 3306 	mla	r3, r2, r6, r3
 8007150:	b289      	uxth	r1, r1
 8007152:	3001      	adds	r0, #1
 8007154:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007158:	4285      	cmp	r5, r0
 800715a:	f84c 1b04 	str.w	r1, [ip], #4
 800715e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007162:	dcec      	bgt.n	800713e <__multadd+0x12>
 8007164:	b30e      	cbz	r6, 80071aa <__multadd+0x7e>
 8007166:	68a3      	ldr	r3, [r4, #8]
 8007168:	42ab      	cmp	r3, r5
 800716a:	dc19      	bgt.n	80071a0 <__multadd+0x74>
 800716c:	6861      	ldr	r1, [r4, #4]
 800716e:	4638      	mov	r0, r7
 8007170:	3101      	adds	r1, #1
 8007172:	f7ff ff79 	bl	8007068 <_Balloc>
 8007176:	4680      	mov	r8, r0
 8007178:	b928      	cbnz	r0, 8007186 <__multadd+0x5a>
 800717a:	4602      	mov	r2, r0
 800717c:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <__multadd+0x84>)
 800717e:	480d      	ldr	r0, [pc, #52]	@ (80071b4 <__multadd+0x88>)
 8007180:	21ba      	movs	r1, #186	@ 0xba
 8007182:	f000 fef5 	bl	8007f70 <__assert_func>
 8007186:	6922      	ldr	r2, [r4, #16]
 8007188:	3202      	adds	r2, #2
 800718a:	f104 010c 	add.w	r1, r4, #12
 800718e:	0092      	lsls	r2, r2, #2
 8007190:	300c      	adds	r0, #12
 8007192:	f000 fedf 	bl	8007f54 <memcpy>
 8007196:	4621      	mov	r1, r4
 8007198:	4638      	mov	r0, r7
 800719a:	f7ff ffa5 	bl	80070e8 <_Bfree>
 800719e:	4644      	mov	r4, r8
 80071a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071a4:	3501      	adds	r5, #1
 80071a6:	615e      	str	r6, [r3, #20]
 80071a8:	6125      	str	r5, [r4, #16]
 80071aa:	4620      	mov	r0, r4
 80071ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b0:	08016bc4 	.word	0x08016bc4
 80071b4:	08016bd5 	.word	0x08016bd5

080071b8 <__hi0bits>:
 80071b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80071bc:	4603      	mov	r3, r0
 80071be:	bf36      	itet	cc
 80071c0:	0403      	lslcc	r3, r0, #16
 80071c2:	2000      	movcs	r0, #0
 80071c4:	2010      	movcc	r0, #16
 80071c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071ca:	bf3c      	itt	cc
 80071cc:	021b      	lslcc	r3, r3, #8
 80071ce:	3008      	addcc	r0, #8
 80071d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071d4:	bf3c      	itt	cc
 80071d6:	011b      	lslcc	r3, r3, #4
 80071d8:	3004      	addcc	r0, #4
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071de:	bf3c      	itt	cc
 80071e0:	009b      	lslcc	r3, r3, #2
 80071e2:	3002      	addcc	r0, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	db05      	blt.n	80071f4 <__hi0bits+0x3c>
 80071e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80071ec:	f100 0001 	add.w	r0, r0, #1
 80071f0:	bf08      	it	eq
 80071f2:	2020      	moveq	r0, #32
 80071f4:	4770      	bx	lr

080071f6 <__lo0bits>:
 80071f6:	6803      	ldr	r3, [r0, #0]
 80071f8:	4602      	mov	r2, r0
 80071fa:	f013 0007 	ands.w	r0, r3, #7
 80071fe:	d00b      	beq.n	8007218 <__lo0bits+0x22>
 8007200:	07d9      	lsls	r1, r3, #31
 8007202:	d421      	bmi.n	8007248 <__lo0bits+0x52>
 8007204:	0798      	lsls	r0, r3, #30
 8007206:	bf49      	itett	mi
 8007208:	085b      	lsrmi	r3, r3, #1
 800720a:	089b      	lsrpl	r3, r3, #2
 800720c:	2001      	movmi	r0, #1
 800720e:	6013      	strmi	r3, [r2, #0]
 8007210:	bf5c      	itt	pl
 8007212:	6013      	strpl	r3, [r2, #0]
 8007214:	2002      	movpl	r0, #2
 8007216:	4770      	bx	lr
 8007218:	b299      	uxth	r1, r3
 800721a:	b909      	cbnz	r1, 8007220 <__lo0bits+0x2a>
 800721c:	0c1b      	lsrs	r3, r3, #16
 800721e:	2010      	movs	r0, #16
 8007220:	b2d9      	uxtb	r1, r3
 8007222:	b909      	cbnz	r1, 8007228 <__lo0bits+0x32>
 8007224:	3008      	adds	r0, #8
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	0719      	lsls	r1, r3, #28
 800722a:	bf04      	itt	eq
 800722c:	091b      	lsreq	r3, r3, #4
 800722e:	3004      	addeq	r0, #4
 8007230:	0799      	lsls	r1, r3, #30
 8007232:	bf04      	itt	eq
 8007234:	089b      	lsreq	r3, r3, #2
 8007236:	3002      	addeq	r0, #2
 8007238:	07d9      	lsls	r1, r3, #31
 800723a:	d403      	bmi.n	8007244 <__lo0bits+0x4e>
 800723c:	085b      	lsrs	r3, r3, #1
 800723e:	f100 0001 	add.w	r0, r0, #1
 8007242:	d003      	beq.n	800724c <__lo0bits+0x56>
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	4770      	bx	lr
 8007248:	2000      	movs	r0, #0
 800724a:	4770      	bx	lr
 800724c:	2020      	movs	r0, #32
 800724e:	4770      	bx	lr

08007250 <__i2b>:
 8007250:	b510      	push	{r4, lr}
 8007252:	460c      	mov	r4, r1
 8007254:	2101      	movs	r1, #1
 8007256:	f7ff ff07 	bl	8007068 <_Balloc>
 800725a:	4602      	mov	r2, r0
 800725c:	b928      	cbnz	r0, 800726a <__i2b+0x1a>
 800725e:	4b05      	ldr	r3, [pc, #20]	@ (8007274 <__i2b+0x24>)
 8007260:	4805      	ldr	r0, [pc, #20]	@ (8007278 <__i2b+0x28>)
 8007262:	f240 1145 	movw	r1, #325	@ 0x145
 8007266:	f000 fe83 	bl	8007f70 <__assert_func>
 800726a:	2301      	movs	r3, #1
 800726c:	6144      	str	r4, [r0, #20]
 800726e:	6103      	str	r3, [r0, #16]
 8007270:	bd10      	pop	{r4, pc}
 8007272:	bf00      	nop
 8007274:	08016bc4 	.word	0x08016bc4
 8007278:	08016bd5 	.word	0x08016bd5

0800727c <__multiply>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	4614      	mov	r4, r2
 8007282:	690a      	ldr	r2, [r1, #16]
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	429a      	cmp	r2, r3
 8007288:	bfa8      	it	ge
 800728a:	4623      	movge	r3, r4
 800728c:	460f      	mov	r7, r1
 800728e:	bfa4      	itt	ge
 8007290:	460c      	movge	r4, r1
 8007292:	461f      	movge	r7, r3
 8007294:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007298:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	6861      	ldr	r1, [r4, #4]
 80072a0:	eb0a 0609 	add.w	r6, sl, r9
 80072a4:	42b3      	cmp	r3, r6
 80072a6:	b085      	sub	sp, #20
 80072a8:	bfb8      	it	lt
 80072aa:	3101      	addlt	r1, #1
 80072ac:	f7ff fedc 	bl	8007068 <_Balloc>
 80072b0:	b930      	cbnz	r0, 80072c0 <__multiply+0x44>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b44      	ldr	r3, [pc, #272]	@ (80073c8 <__multiply+0x14c>)
 80072b6:	4845      	ldr	r0, [pc, #276]	@ (80073cc <__multiply+0x150>)
 80072b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80072bc:	f000 fe58 	bl	8007f70 <__assert_func>
 80072c0:	f100 0514 	add.w	r5, r0, #20
 80072c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072c8:	462b      	mov	r3, r5
 80072ca:	2200      	movs	r2, #0
 80072cc:	4543      	cmp	r3, r8
 80072ce:	d321      	bcc.n	8007314 <__multiply+0x98>
 80072d0:	f107 0114 	add.w	r1, r7, #20
 80072d4:	f104 0214 	add.w	r2, r4, #20
 80072d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80072dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80072e0:	9302      	str	r3, [sp, #8]
 80072e2:	1b13      	subs	r3, r2, r4
 80072e4:	3b15      	subs	r3, #21
 80072e6:	f023 0303 	bic.w	r3, r3, #3
 80072ea:	3304      	adds	r3, #4
 80072ec:	f104 0715 	add.w	r7, r4, #21
 80072f0:	42ba      	cmp	r2, r7
 80072f2:	bf38      	it	cc
 80072f4:	2304      	movcc	r3, #4
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	9b02      	ldr	r3, [sp, #8]
 80072fa:	9103      	str	r1, [sp, #12]
 80072fc:	428b      	cmp	r3, r1
 80072fe:	d80c      	bhi.n	800731a <__multiply+0x9e>
 8007300:	2e00      	cmp	r6, #0
 8007302:	dd03      	ble.n	800730c <__multiply+0x90>
 8007304:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007308:	2b00      	cmp	r3, #0
 800730a:	d05b      	beq.n	80073c4 <__multiply+0x148>
 800730c:	6106      	str	r6, [r0, #16]
 800730e:	b005      	add	sp, #20
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007314:	f843 2b04 	str.w	r2, [r3], #4
 8007318:	e7d8      	b.n	80072cc <__multiply+0x50>
 800731a:	f8b1 a000 	ldrh.w	sl, [r1]
 800731e:	f1ba 0f00 	cmp.w	sl, #0
 8007322:	d024      	beq.n	800736e <__multiply+0xf2>
 8007324:	f104 0e14 	add.w	lr, r4, #20
 8007328:	46a9      	mov	r9, r5
 800732a:	f04f 0c00 	mov.w	ip, #0
 800732e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007332:	f8d9 3000 	ldr.w	r3, [r9]
 8007336:	fa1f fb87 	uxth.w	fp, r7
 800733a:	b29b      	uxth	r3, r3
 800733c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007340:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007344:	f8d9 7000 	ldr.w	r7, [r9]
 8007348:	4463      	add	r3, ip
 800734a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800734e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007352:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007356:	b29b      	uxth	r3, r3
 8007358:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800735c:	4572      	cmp	r2, lr
 800735e:	f849 3b04 	str.w	r3, [r9], #4
 8007362:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007366:	d8e2      	bhi.n	800732e <__multiply+0xb2>
 8007368:	9b01      	ldr	r3, [sp, #4]
 800736a:	f845 c003 	str.w	ip, [r5, r3]
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007374:	3104      	adds	r1, #4
 8007376:	f1b9 0f00 	cmp.w	r9, #0
 800737a:	d021      	beq.n	80073c0 <__multiply+0x144>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	f104 0c14 	add.w	ip, r4, #20
 8007382:	46ae      	mov	lr, r5
 8007384:	f04f 0a00 	mov.w	sl, #0
 8007388:	f8bc b000 	ldrh.w	fp, [ip]
 800738c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007390:	fb09 770b 	mla	r7, r9, fp, r7
 8007394:	4457      	add	r7, sl
 8007396:	b29b      	uxth	r3, r3
 8007398:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800739c:	f84e 3b04 	str.w	r3, [lr], #4
 80073a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80073a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073a8:	f8be 3000 	ldrh.w	r3, [lr]
 80073ac:	fb09 330a 	mla	r3, r9, sl, r3
 80073b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80073b4:	4562      	cmp	r2, ip
 80073b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073ba:	d8e5      	bhi.n	8007388 <__multiply+0x10c>
 80073bc:	9f01      	ldr	r7, [sp, #4]
 80073be:	51eb      	str	r3, [r5, r7]
 80073c0:	3504      	adds	r5, #4
 80073c2:	e799      	b.n	80072f8 <__multiply+0x7c>
 80073c4:	3e01      	subs	r6, #1
 80073c6:	e79b      	b.n	8007300 <__multiply+0x84>
 80073c8:	08016bc4 	.word	0x08016bc4
 80073cc:	08016bd5 	.word	0x08016bd5

080073d0 <__pow5mult>:
 80073d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d4:	4615      	mov	r5, r2
 80073d6:	f012 0203 	ands.w	r2, r2, #3
 80073da:	4607      	mov	r7, r0
 80073dc:	460e      	mov	r6, r1
 80073de:	d007      	beq.n	80073f0 <__pow5mult+0x20>
 80073e0:	4c25      	ldr	r4, [pc, #148]	@ (8007478 <__pow5mult+0xa8>)
 80073e2:	3a01      	subs	r2, #1
 80073e4:	2300      	movs	r3, #0
 80073e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073ea:	f7ff fe9f 	bl	800712c <__multadd>
 80073ee:	4606      	mov	r6, r0
 80073f0:	10ad      	asrs	r5, r5, #2
 80073f2:	d03d      	beq.n	8007470 <__pow5mult+0xa0>
 80073f4:	69fc      	ldr	r4, [r7, #28]
 80073f6:	b97c      	cbnz	r4, 8007418 <__pow5mult+0x48>
 80073f8:	2010      	movs	r0, #16
 80073fa:	f7ff fd7f 	bl	8006efc <malloc>
 80073fe:	4602      	mov	r2, r0
 8007400:	61f8      	str	r0, [r7, #28]
 8007402:	b928      	cbnz	r0, 8007410 <__pow5mult+0x40>
 8007404:	4b1d      	ldr	r3, [pc, #116]	@ (800747c <__pow5mult+0xac>)
 8007406:	481e      	ldr	r0, [pc, #120]	@ (8007480 <__pow5mult+0xb0>)
 8007408:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800740c:	f000 fdb0 	bl	8007f70 <__assert_func>
 8007410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007414:	6004      	str	r4, [r0, #0]
 8007416:	60c4      	str	r4, [r0, #12]
 8007418:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800741c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007420:	b94c      	cbnz	r4, 8007436 <__pow5mult+0x66>
 8007422:	f240 2171 	movw	r1, #625	@ 0x271
 8007426:	4638      	mov	r0, r7
 8007428:	f7ff ff12 	bl	8007250 <__i2b>
 800742c:	2300      	movs	r3, #0
 800742e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007432:	4604      	mov	r4, r0
 8007434:	6003      	str	r3, [r0, #0]
 8007436:	f04f 0900 	mov.w	r9, #0
 800743a:	07eb      	lsls	r3, r5, #31
 800743c:	d50a      	bpl.n	8007454 <__pow5mult+0x84>
 800743e:	4631      	mov	r1, r6
 8007440:	4622      	mov	r2, r4
 8007442:	4638      	mov	r0, r7
 8007444:	f7ff ff1a 	bl	800727c <__multiply>
 8007448:	4631      	mov	r1, r6
 800744a:	4680      	mov	r8, r0
 800744c:	4638      	mov	r0, r7
 800744e:	f7ff fe4b 	bl	80070e8 <_Bfree>
 8007452:	4646      	mov	r6, r8
 8007454:	106d      	asrs	r5, r5, #1
 8007456:	d00b      	beq.n	8007470 <__pow5mult+0xa0>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	b938      	cbnz	r0, 800746c <__pow5mult+0x9c>
 800745c:	4622      	mov	r2, r4
 800745e:	4621      	mov	r1, r4
 8007460:	4638      	mov	r0, r7
 8007462:	f7ff ff0b 	bl	800727c <__multiply>
 8007466:	6020      	str	r0, [r4, #0]
 8007468:	f8c0 9000 	str.w	r9, [r0]
 800746c:	4604      	mov	r4, r0
 800746e:	e7e4      	b.n	800743a <__pow5mult+0x6a>
 8007470:	4630      	mov	r0, r6
 8007472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007476:	bf00      	nop
 8007478:	08016c30 	.word	0x08016c30
 800747c:	08016b55 	.word	0x08016b55
 8007480:	08016bd5 	.word	0x08016bd5

08007484 <__lshift>:
 8007484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	6849      	ldr	r1, [r1, #4]
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	4607      	mov	r7, r0
 8007496:	4691      	mov	r9, r2
 8007498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800749c:	f108 0601 	add.w	r6, r8, #1
 80074a0:	42b3      	cmp	r3, r6
 80074a2:	db0b      	blt.n	80074bc <__lshift+0x38>
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff fddf 	bl	8007068 <_Balloc>
 80074aa:	4605      	mov	r5, r0
 80074ac:	b948      	cbnz	r0, 80074c2 <__lshift+0x3e>
 80074ae:	4602      	mov	r2, r0
 80074b0:	4b28      	ldr	r3, [pc, #160]	@ (8007554 <__lshift+0xd0>)
 80074b2:	4829      	ldr	r0, [pc, #164]	@ (8007558 <__lshift+0xd4>)
 80074b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80074b8:	f000 fd5a 	bl	8007f70 <__assert_func>
 80074bc:	3101      	adds	r1, #1
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	e7ee      	b.n	80074a0 <__lshift+0x1c>
 80074c2:	2300      	movs	r3, #0
 80074c4:	f100 0114 	add.w	r1, r0, #20
 80074c8:	f100 0210 	add.w	r2, r0, #16
 80074cc:	4618      	mov	r0, r3
 80074ce:	4553      	cmp	r3, sl
 80074d0:	db33      	blt.n	800753a <__lshift+0xb6>
 80074d2:	6920      	ldr	r0, [r4, #16]
 80074d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074d8:	f104 0314 	add.w	r3, r4, #20
 80074dc:	f019 091f 	ands.w	r9, r9, #31
 80074e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074e8:	d02b      	beq.n	8007542 <__lshift+0xbe>
 80074ea:	f1c9 0e20 	rsb	lr, r9, #32
 80074ee:	468a      	mov	sl, r1
 80074f0:	2200      	movs	r2, #0
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	fa00 f009 	lsl.w	r0, r0, r9
 80074f8:	4310      	orrs	r0, r2
 80074fa:	f84a 0b04 	str.w	r0, [sl], #4
 80074fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007502:	459c      	cmp	ip, r3
 8007504:	fa22 f20e 	lsr.w	r2, r2, lr
 8007508:	d8f3      	bhi.n	80074f2 <__lshift+0x6e>
 800750a:	ebac 0304 	sub.w	r3, ip, r4
 800750e:	3b15      	subs	r3, #21
 8007510:	f023 0303 	bic.w	r3, r3, #3
 8007514:	3304      	adds	r3, #4
 8007516:	f104 0015 	add.w	r0, r4, #21
 800751a:	4584      	cmp	ip, r0
 800751c:	bf38      	it	cc
 800751e:	2304      	movcc	r3, #4
 8007520:	50ca      	str	r2, [r1, r3]
 8007522:	b10a      	cbz	r2, 8007528 <__lshift+0xa4>
 8007524:	f108 0602 	add.w	r6, r8, #2
 8007528:	3e01      	subs	r6, #1
 800752a:	4638      	mov	r0, r7
 800752c:	612e      	str	r6, [r5, #16]
 800752e:	4621      	mov	r1, r4
 8007530:	f7ff fdda 	bl	80070e8 <_Bfree>
 8007534:	4628      	mov	r0, r5
 8007536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753a:	f842 0f04 	str.w	r0, [r2, #4]!
 800753e:	3301      	adds	r3, #1
 8007540:	e7c5      	b.n	80074ce <__lshift+0x4a>
 8007542:	3904      	subs	r1, #4
 8007544:	f853 2b04 	ldr.w	r2, [r3], #4
 8007548:	f841 2f04 	str.w	r2, [r1, #4]!
 800754c:	459c      	cmp	ip, r3
 800754e:	d8f9      	bhi.n	8007544 <__lshift+0xc0>
 8007550:	e7ea      	b.n	8007528 <__lshift+0xa4>
 8007552:	bf00      	nop
 8007554:	08016bc4 	.word	0x08016bc4
 8007558:	08016bd5 	.word	0x08016bd5

0800755c <__mcmp>:
 800755c:	690a      	ldr	r2, [r1, #16]
 800755e:	4603      	mov	r3, r0
 8007560:	6900      	ldr	r0, [r0, #16]
 8007562:	1a80      	subs	r0, r0, r2
 8007564:	b530      	push	{r4, r5, lr}
 8007566:	d10e      	bne.n	8007586 <__mcmp+0x2a>
 8007568:	3314      	adds	r3, #20
 800756a:	3114      	adds	r1, #20
 800756c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007570:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007574:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007578:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800757c:	4295      	cmp	r5, r2
 800757e:	d003      	beq.n	8007588 <__mcmp+0x2c>
 8007580:	d205      	bcs.n	800758e <__mcmp+0x32>
 8007582:	f04f 30ff 	mov.w	r0, #4294967295
 8007586:	bd30      	pop	{r4, r5, pc}
 8007588:	42a3      	cmp	r3, r4
 800758a:	d3f3      	bcc.n	8007574 <__mcmp+0x18>
 800758c:	e7fb      	b.n	8007586 <__mcmp+0x2a>
 800758e:	2001      	movs	r0, #1
 8007590:	e7f9      	b.n	8007586 <__mcmp+0x2a>
	...

08007594 <__mdiff>:
 8007594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	4689      	mov	r9, r1
 800759a:	4606      	mov	r6, r0
 800759c:	4611      	mov	r1, r2
 800759e:	4648      	mov	r0, r9
 80075a0:	4614      	mov	r4, r2
 80075a2:	f7ff ffdb 	bl	800755c <__mcmp>
 80075a6:	1e05      	subs	r5, r0, #0
 80075a8:	d112      	bne.n	80075d0 <__mdiff+0x3c>
 80075aa:	4629      	mov	r1, r5
 80075ac:	4630      	mov	r0, r6
 80075ae:	f7ff fd5b 	bl	8007068 <_Balloc>
 80075b2:	4602      	mov	r2, r0
 80075b4:	b928      	cbnz	r0, 80075c2 <__mdiff+0x2e>
 80075b6:	4b3f      	ldr	r3, [pc, #252]	@ (80076b4 <__mdiff+0x120>)
 80075b8:	f240 2137 	movw	r1, #567	@ 0x237
 80075bc:	483e      	ldr	r0, [pc, #248]	@ (80076b8 <__mdiff+0x124>)
 80075be:	f000 fcd7 	bl	8007f70 <__assert_func>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075c8:	4610      	mov	r0, r2
 80075ca:	b003      	add	sp, #12
 80075cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d0:	bfbc      	itt	lt
 80075d2:	464b      	movlt	r3, r9
 80075d4:	46a1      	movlt	r9, r4
 80075d6:	4630      	mov	r0, r6
 80075d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80075dc:	bfba      	itte	lt
 80075de:	461c      	movlt	r4, r3
 80075e0:	2501      	movlt	r5, #1
 80075e2:	2500      	movge	r5, #0
 80075e4:	f7ff fd40 	bl	8007068 <_Balloc>
 80075e8:	4602      	mov	r2, r0
 80075ea:	b918      	cbnz	r0, 80075f4 <__mdiff+0x60>
 80075ec:	4b31      	ldr	r3, [pc, #196]	@ (80076b4 <__mdiff+0x120>)
 80075ee:	f240 2145 	movw	r1, #581	@ 0x245
 80075f2:	e7e3      	b.n	80075bc <__mdiff+0x28>
 80075f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80075f8:	6926      	ldr	r6, [r4, #16]
 80075fa:	60c5      	str	r5, [r0, #12]
 80075fc:	f109 0310 	add.w	r3, r9, #16
 8007600:	f109 0514 	add.w	r5, r9, #20
 8007604:	f104 0e14 	add.w	lr, r4, #20
 8007608:	f100 0b14 	add.w	fp, r0, #20
 800760c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007610:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	46d9      	mov	r9, fp
 8007618:	f04f 0c00 	mov.w	ip, #0
 800761c:	9b01      	ldr	r3, [sp, #4]
 800761e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007622:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	fa1f f38a 	uxth.w	r3, sl
 800762c:	4619      	mov	r1, r3
 800762e:	b283      	uxth	r3, r0
 8007630:	1acb      	subs	r3, r1, r3
 8007632:	0c00      	lsrs	r0, r0, #16
 8007634:	4463      	add	r3, ip
 8007636:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800763a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800763e:	b29b      	uxth	r3, r3
 8007640:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007644:	4576      	cmp	r6, lr
 8007646:	f849 3b04 	str.w	r3, [r9], #4
 800764a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800764e:	d8e5      	bhi.n	800761c <__mdiff+0x88>
 8007650:	1b33      	subs	r3, r6, r4
 8007652:	3b15      	subs	r3, #21
 8007654:	f023 0303 	bic.w	r3, r3, #3
 8007658:	3415      	adds	r4, #21
 800765a:	3304      	adds	r3, #4
 800765c:	42a6      	cmp	r6, r4
 800765e:	bf38      	it	cc
 8007660:	2304      	movcc	r3, #4
 8007662:	441d      	add	r5, r3
 8007664:	445b      	add	r3, fp
 8007666:	461e      	mov	r6, r3
 8007668:	462c      	mov	r4, r5
 800766a:	4544      	cmp	r4, r8
 800766c:	d30e      	bcc.n	800768c <__mdiff+0xf8>
 800766e:	f108 0103 	add.w	r1, r8, #3
 8007672:	1b49      	subs	r1, r1, r5
 8007674:	f021 0103 	bic.w	r1, r1, #3
 8007678:	3d03      	subs	r5, #3
 800767a:	45a8      	cmp	r8, r5
 800767c:	bf38      	it	cc
 800767e:	2100      	movcc	r1, #0
 8007680:	440b      	add	r3, r1
 8007682:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007686:	b191      	cbz	r1, 80076ae <__mdiff+0x11a>
 8007688:	6117      	str	r7, [r2, #16]
 800768a:	e79d      	b.n	80075c8 <__mdiff+0x34>
 800768c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007690:	46e6      	mov	lr, ip
 8007692:	0c08      	lsrs	r0, r1, #16
 8007694:	fa1c fc81 	uxtah	ip, ip, r1
 8007698:	4471      	add	r1, lr
 800769a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800769e:	b289      	uxth	r1, r1
 80076a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80076a4:	f846 1b04 	str.w	r1, [r6], #4
 80076a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076ac:	e7dd      	b.n	800766a <__mdiff+0xd6>
 80076ae:	3f01      	subs	r7, #1
 80076b0:	e7e7      	b.n	8007682 <__mdiff+0xee>
 80076b2:	bf00      	nop
 80076b4:	08016bc4 	.word	0x08016bc4
 80076b8:	08016bd5 	.word	0x08016bd5

080076bc <__d2b>:
 80076bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076c0:	460f      	mov	r7, r1
 80076c2:	2101      	movs	r1, #1
 80076c4:	ec59 8b10 	vmov	r8, r9, d0
 80076c8:	4616      	mov	r6, r2
 80076ca:	f7ff fccd 	bl	8007068 <_Balloc>
 80076ce:	4604      	mov	r4, r0
 80076d0:	b930      	cbnz	r0, 80076e0 <__d2b+0x24>
 80076d2:	4602      	mov	r2, r0
 80076d4:	4b23      	ldr	r3, [pc, #140]	@ (8007764 <__d2b+0xa8>)
 80076d6:	4824      	ldr	r0, [pc, #144]	@ (8007768 <__d2b+0xac>)
 80076d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80076dc:	f000 fc48 	bl	8007f70 <__assert_func>
 80076e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076e8:	b10d      	cbz	r5, 80076ee <__d2b+0x32>
 80076ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	f1b8 0300 	subs.w	r3, r8, #0
 80076f4:	d023      	beq.n	800773e <__d2b+0x82>
 80076f6:	4668      	mov	r0, sp
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	f7ff fd7c 	bl	80071f6 <__lo0bits>
 80076fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007702:	b1d0      	cbz	r0, 800773a <__d2b+0x7e>
 8007704:	f1c0 0320 	rsb	r3, r0, #32
 8007708:	fa02 f303 	lsl.w	r3, r2, r3
 800770c:	430b      	orrs	r3, r1
 800770e:	40c2      	lsrs	r2, r0
 8007710:	6163      	str	r3, [r4, #20]
 8007712:	9201      	str	r2, [sp, #4]
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	61a3      	str	r3, [r4, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	bf0c      	ite	eq
 800771c:	2201      	moveq	r2, #1
 800771e:	2202      	movne	r2, #2
 8007720:	6122      	str	r2, [r4, #16]
 8007722:	b1a5      	cbz	r5, 800774e <__d2b+0x92>
 8007724:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007728:	4405      	add	r5, r0
 800772a:	603d      	str	r5, [r7, #0]
 800772c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007730:	6030      	str	r0, [r6, #0]
 8007732:	4620      	mov	r0, r4
 8007734:	b003      	add	sp, #12
 8007736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800773a:	6161      	str	r1, [r4, #20]
 800773c:	e7ea      	b.n	8007714 <__d2b+0x58>
 800773e:	a801      	add	r0, sp, #4
 8007740:	f7ff fd59 	bl	80071f6 <__lo0bits>
 8007744:	9b01      	ldr	r3, [sp, #4]
 8007746:	6163      	str	r3, [r4, #20]
 8007748:	3020      	adds	r0, #32
 800774a:	2201      	movs	r2, #1
 800774c:	e7e8      	b.n	8007720 <__d2b+0x64>
 800774e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007752:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007756:	6038      	str	r0, [r7, #0]
 8007758:	6918      	ldr	r0, [r3, #16]
 800775a:	f7ff fd2d 	bl	80071b8 <__hi0bits>
 800775e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007762:	e7e5      	b.n	8007730 <__d2b+0x74>
 8007764:	08016bc4 	.word	0x08016bc4
 8007768:	08016bd5 	.word	0x08016bd5

0800776c <__ssputs_r>:
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	688e      	ldr	r6, [r1, #8]
 8007772:	461f      	mov	r7, r3
 8007774:	42be      	cmp	r6, r7
 8007776:	680b      	ldr	r3, [r1, #0]
 8007778:	4682      	mov	sl, r0
 800777a:	460c      	mov	r4, r1
 800777c:	4690      	mov	r8, r2
 800777e:	d82d      	bhi.n	80077dc <__ssputs_r+0x70>
 8007780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007788:	d026      	beq.n	80077d8 <__ssputs_r+0x6c>
 800778a:	6965      	ldr	r5, [r4, #20]
 800778c:	6909      	ldr	r1, [r1, #16]
 800778e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007792:	eba3 0901 	sub.w	r9, r3, r1
 8007796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800779a:	1c7b      	adds	r3, r7, #1
 800779c:	444b      	add	r3, r9
 800779e:	106d      	asrs	r5, r5, #1
 80077a0:	429d      	cmp	r5, r3
 80077a2:	bf38      	it	cc
 80077a4:	461d      	movcc	r5, r3
 80077a6:	0553      	lsls	r3, r2, #21
 80077a8:	d527      	bpl.n	80077fa <__ssputs_r+0x8e>
 80077aa:	4629      	mov	r1, r5
 80077ac:	f7ff fbd0 	bl	8006f50 <_malloc_r>
 80077b0:	4606      	mov	r6, r0
 80077b2:	b360      	cbz	r0, 800780e <__ssputs_r+0xa2>
 80077b4:	6921      	ldr	r1, [r4, #16]
 80077b6:	464a      	mov	r2, r9
 80077b8:	f000 fbcc 	bl	8007f54 <memcpy>
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077c6:	81a3      	strh	r3, [r4, #12]
 80077c8:	6126      	str	r6, [r4, #16]
 80077ca:	6165      	str	r5, [r4, #20]
 80077cc:	444e      	add	r6, r9
 80077ce:	eba5 0509 	sub.w	r5, r5, r9
 80077d2:	6026      	str	r6, [r4, #0]
 80077d4:	60a5      	str	r5, [r4, #8]
 80077d6:	463e      	mov	r6, r7
 80077d8:	42be      	cmp	r6, r7
 80077da:	d900      	bls.n	80077de <__ssputs_r+0x72>
 80077dc:	463e      	mov	r6, r7
 80077de:	6820      	ldr	r0, [r4, #0]
 80077e0:	4632      	mov	r2, r6
 80077e2:	4641      	mov	r1, r8
 80077e4:	f000 fb6a 	bl	8007ebc <memmove>
 80077e8:	68a3      	ldr	r3, [r4, #8]
 80077ea:	1b9b      	subs	r3, r3, r6
 80077ec:	60a3      	str	r3, [r4, #8]
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	4433      	add	r3, r6
 80077f2:	6023      	str	r3, [r4, #0]
 80077f4:	2000      	movs	r0, #0
 80077f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fa:	462a      	mov	r2, r5
 80077fc:	f000 fbfc 	bl	8007ff8 <_realloc_r>
 8007800:	4606      	mov	r6, r0
 8007802:	2800      	cmp	r0, #0
 8007804:	d1e0      	bne.n	80077c8 <__ssputs_r+0x5c>
 8007806:	6921      	ldr	r1, [r4, #16]
 8007808:	4650      	mov	r0, sl
 800780a:	f7ff fb2d 	bl	8006e68 <_free_r>
 800780e:	230c      	movs	r3, #12
 8007810:	f8ca 3000 	str.w	r3, [sl]
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e7e9      	b.n	80077f6 <__ssputs_r+0x8a>
	...

08007824 <_svfiprintf_r>:
 8007824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	4698      	mov	r8, r3
 800782a:	898b      	ldrh	r3, [r1, #12]
 800782c:	061b      	lsls	r3, r3, #24
 800782e:	b09d      	sub	sp, #116	@ 0x74
 8007830:	4607      	mov	r7, r0
 8007832:	460d      	mov	r5, r1
 8007834:	4614      	mov	r4, r2
 8007836:	d510      	bpl.n	800785a <_svfiprintf_r+0x36>
 8007838:	690b      	ldr	r3, [r1, #16]
 800783a:	b973      	cbnz	r3, 800785a <_svfiprintf_r+0x36>
 800783c:	2140      	movs	r1, #64	@ 0x40
 800783e:	f7ff fb87 	bl	8006f50 <_malloc_r>
 8007842:	6028      	str	r0, [r5, #0]
 8007844:	6128      	str	r0, [r5, #16]
 8007846:	b930      	cbnz	r0, 8007856 <_svfiprintf_r+0x32>
 8007848:	230c      	movs	r3, #12
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	f04f 30ff 	mov.w	r0, #4294967295
 8007850:	b01d      	add	sp, #116	@ 0x74
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007856:	2340      	movs	r3, #64	@ 0x40
 8007858:	616b      	str	r3, [r5, #20]
 800785a:	2300      	movs	r3, #0
 800785c:	9309      	str	r3, [sp, #36]	@ 0x24
 800785e:	2320      	movs	r3, #32
 8007860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007864:	f8cd 800c 	str.w	r8, [sp, #12]
 8007868:	2330      	movs	r3, #48	@ 0x30
 800786a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a08 <_svfiprintf_r+0x1e4>
 800786e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007872:	f04f 0901 	mov.w	r9, #1
 8007876:	4623      	mov	r3, r4
 8007878:	469a      	mov	sl, r3
 800787a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800787e:	b10a      	cbz	r2, 8007884 <_svfiprintf_r+0x60>
 8007880:	2a25      	cmp	r2, #37	@ 0x25
 8007882:	d1f9      	bne.n	8007878 <_svfiprintf_r+0x54>
 8007884:	ebba 0b04 	subs.w	fp, sl, r4
 8007888:	d00b      	beq.n	80078a2 <_svfiprintf_r+0x7e>
 800788a:	465b      	mov	r3, fp
 800788c:	4622      	mov	r2, r4
 800788e:	4629      	mov	r1, r5
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff ff6b 	bl	800776c <__ssputs_r>
 8007896:	3001      	adds	r0, #1
 8007898:	f000 80a7 	beq.w	80079ea <_svfiprintf_r+0x1c6>
 800789c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800789e:	445a      	add	r2, fp
 80078a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80078a2:	f89a 3000 	ldrb.w	r3, [sl]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 809f 	beq.w	80079ea <_svfiprintf_r+0x1c6>
 80078ac:	2300      	movs	r3, #0
 80078ae:	f04f 32ff 	mov.w	r2, #4294967295
 80078b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078b6:	f10a 0a01 	add.w	sl, sl, #1
 80078ba:	9304      	str	r3, [sp, #16]
 80078bc:	9307      	str	r3, [sp, #28]
 80078be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80078c4:	4654      	mov	r4, sl
 80078c6:	2205      	movs	r2, #5
 80078c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078cc:	484e      	ldr	r0, [pc, #312]	@ (8007a08 <_svfiprintf_r+0x1e4>)
 80078ce:	f7f8 fc87 	bl	80001e0 <memchr>
 80078d2:	9a04      	ldr	r2, [sp, #16]
 80078d4:	b9d8      	cbnz	r0, 800790e <_svfiprintf_r+0xea>
 80078d6:	06d0      	lsls	r0, r2, #27
 80078d8:	bf44      	itt	mi
 80078da:	2320      	movmi	r3, #32
 80078dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078e0:	0711      	lsls	r1, r2, #28
 80078e2:	bf44      	itt	mi
 80078e4:	232b      	movmi	r3, #43	@ 0x2b
 80078e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078ea:	f89a 3000 	ldrb.w	r3, [sl]
 80078ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80078f0:	d015      	beq.n	800791e <_svfiprintf_r+0xfa>
 80078f2:	9a07      	ldr	r2, [sp, #28]
 80078f4:	4654      	mov	r4, sl
 80078f6:	2000      	movs	r0, #0
 80078f8:	f04f 0c0a 	mov.w	ip, #10
 80078fc:	4621      	mov	r1, r4
 80078fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007902:	3b30      	subs	r3, #48	@ 0x30
 8007904:	2b09      	cmp	r3, #9
 8007906:	d94b      	bls.n	80079a0 <_svfiprintf_r+0x17c>
 8007908:	b1b0      	cbz	r0, 8007938 <_svfiprintf_r+0x114>
 800790a:	9207      	str	r2, [sp, #28]
 800790c:	e014      	b.n	8007938 <_svfiprintf_r+0x114>
 800790e:	eba0 0308 	sub.w	r3, r0, r8
 8007912:	fa09 f303 	lsl.w	r3, r9, r3
 8007916:	4313      	orrs	r3, r2
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	46a2      	mov	sl, r4
 800791c:	e7d2      	b.n	80078c4 <_svfiprintf_r+0xa0>
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	1d19      	adds	r1, r3, #4
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	9103      	str	r1, [sp, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	bfbb      	ittet	lt
 800792a:	425b      	neglt	r3, r3
 800792c:	f042 0202 	orrlt.w	r2, r2, #2
 8007930:	9307      	strge	r3, [sp, #28]
 8007932:	9307      	strlt	r3, [sp, #28]
 8007934:	bfb8      	it	lt
 8007936:	9204      	strlt	r2, [sp, #16]
 8007938:	7823      	ldrb	r3, [r4, #0]
 800793a:	2b2e      	cmp	r3, #46	@ 0x2e
 800793c:	d10a      	bne.n	8007954 <_svfiprintf_r+0x130>
 800793e:	7863      	ldrb	r3, [r4, #1]
 8007940:	2b2a      	cmp	r3, #42	@ 0x2a
 8007942:	d132      	bne.n	80079aa <_svfiprintf_r+0x186>
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	1d1a      	adds	r2, r3, #4
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	9203      	str	r2, [sp, #12]
 800794c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007950:	3402      	adds	r4, #2
 8007952:	9305      	str	r3, [sp, #20]
 8007954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a18 <_svfiprintf_r+0x1f4>
 8007958:	7821      	ldrb	r1, [r4, #0]
 800795a:	2203      	movs	r2, #3
 800795c:	4650      	mov	r0, sl
 800795e:	f7f8 fc3f 	bl	80001e0 <memchr>
 8007962:	b138      	cbz	r0, 8007974 <_svfiprintf_r+0x150>
 8007964:	9b04      	ldr	r3, [sp, #16]
 8007966:	eba0 000a 	sub.w	r0, r0, sl
 800796a:	2240      	movs	r2, #64	@ 0x40
 800796c:	4082      	lsls	r2, r0
 800796e:	4313      	orrs	r3, r2
 8007970:	3401      	adds	r4, #1
 8007972:	9304      	str	r3, [sp, #16]
 8007974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007978:	4824      	ldr	r0, [pc, #144]	@ (8007a0c <_svfiprintf_r+0x1e8>)
 800797a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800797e:	2206      	movs	r2, #6
 8007980:	f7f8 fc2e 	bl	80001e0 <memchr>
 8007984:	2800      	cmp	r0, #0
 8007986:	d036      	beq.n	80079f6 <_svfiprintf_r+0x1d2>
 8007988:	4b21      	ldr	r3, [pc, #132]	@ (8007a10 <_svfiprintf_r+0x1ec>)
 800798a:	bb1b      	cbnz	r3, 80079d4 <_svfiprintf_r+0x1b0>
 800798c:	9b03      	ldr	r3, [sp, #12]
 800798e:	3307      	adds	r3, #7
 8007990:	f023 0307 	bic.w	r3, r3, #7
 8007994:	3308      	adds	r3, #8
 8007996:	9303      	str	r3, [sp, #12]
 8007998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799a:	4433      	add	r3, r6
 800799c:	9309      	str	r3, [sp, #36]	@ 0x24
 800799e:	e76a      	b.n	8007876 <_svfiprintf_r+0x52>
 80079a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079a4:	460c      	mov	r4, r1
 80079a6:	2001      	movs	r0, #1
 80079a8:	e7a8      	b.n	80078fc <_svfiprintf_r+0xd8>
 80079aa:	2300      	movs	r3, #0
 80079ac:	3401      	adds	r4, #1
 80079ae:	9305      	str	r3, [sp, #20]
 80079b0:	4619      	mov	r1, r3
 80079b2:	f04f 0c0a 	mov.w	ip, #10
 80079b6:	4620      	mov	r0, r4
 80079b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079bc:	3a30      	subs	r2, #48	@ 0x30
 80079be:	2a09      	cmp	r2, #9
 80079c0:	d903      	bls.n	80079ca <_svfiprintf_r+0x1a6>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0c6      	beq.n	8007954 <_svfiprintf_r+0x130>
 80079c6:	9105      	str	r1, [sp, #20]
 80079c8:	e7c4      	b.n	8007954 <_svfiprintf_r+0x130>
 80079ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ce:	4604      	mov	r4, r0
 80079d0:	2301      	movs	r3, #1
 80079d2:	e7f0      	b.n	80079b6 <_svfiprintf_r+0x192>
 80079d4:	ab03      	add	r3, sp, #12
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	462a      	mov	r2, r5
 80079da:	4b0e      	ldr	r3, [pc, #56]	@ (8007a14 <_svfiprintf_r+0x1f0>)
 80079dc:	a904      	add	r1, sp, #16
 80079de:	4638      	mov	r0, r7
 80079e0:	f7fd fe02 	bl	80055e8 <_printf_float>
 80079e4:	1c42      	adds	r2, r0, #1
 80079e6:	4606      	mov	r6, r0
 80079e8:	d1d6      	bne.n	8007998 <_svfiprintf_r+0x174>
 80079ea:	89ab      	ldrh	r3, [r5, #12]
 80079ec:	065b      	lsls	r3, r3, #25
 80079ee:	f53f af2d 	bmi.w	800784c <_svfiprintf_r+0x28>
 80079f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079f4:	e72c      	b.n	8007850 <_svfiprintf_r+0x2c>
 80079f6:	ab03      	add	r3, sp, #12
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	462a      	mov	r2, r5
 80079fc:	4b05      	ldr	r3, [pc, #20]	@ (8007a14 <_svfiprintf_r+0x1f0>)
 80079fe:	a904      	add	r1, sp, #16
 8007a00:	4638      	mov	r0, r7
 8007a02:	f7fe f889 	bl	8005b18 <_printf_i>
 8007a06:	e7ed      	b.n	80079e4 <_svfiprintf_r+0x1c0>
 8007a08:	08016d30 	.word	0x08016d30
 8007a0c:	08016d3a 	.word	0x08016d3a
 8007a10:	080055e9 	.word	0x080055e9
 8007a14:	0800776d 	.word	0x0800776d
 8007a18:	08016d36 	.word	0x08016d36

08007a1c <__sfputc_r>:
 8007a1c:	6893      	ldr	r3, [r2, #8]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	b410      	push	{r4}
 8007a24:	6093      	str	r3, [r2, #8]
 8007a26:	da08      	bge.n	8007a3a <__sfputc_r+0x1e>
 8007a28:	6994      	ldr	r4, [r2, #24]
 8007a2a:	42a3      	cmp	r3, r4
 8007a2c:	db01      	blt.n	8007a32 <__sfputc_r+0x16>
 8007a2e:	290a      	cmp	r1, #10
 8007a30:	d103      	bne.n	8007a3a <__sfputc_r+0x1e>
 8007a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a36:	f7fe bab4 	b.w	8005fa2 <__swbuf_r>
 8007a3a:	6813      	ldr	r3, [r2, #0]
 8007a3c:	1c58      	adds	r0, r3, #1
 8007a3e:	6010      	str	r0, [r2, #0]
 8007a40:	7019      	strb	r1, [r3, #0]
 8007a42:	4608      	mov	r0, r1
 8007a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <__sfputs_r>:
 8007a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	460f      	mov	r7, r1
 8007a50:	4614      	mov	r4, r2
 8007a52:	18d5      	adds	r5, r2, r3
 8007a54:	42ac      	cmp	r4, r5
 8007a56:	d101      	bne.n	8007a5c <__sfputs_r+0x12>
 8007a58:	2000      	movs	r0, #0
 8007a5a:	e007      	b.n	8007a6c <__sfputs_r+0x22>
 8007a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a60:	463a      	mov	r2, r7
 8007a62:	4630      	mov	r0, r6
 8007a64:	f7ff ffda 	bl	8007a1c <__sfputc_r>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	d1f3      	bne.n	8007a54 <__sfputs_r+0xa>
 8007a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a70 <_vfiprintf_r>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	460d      	mov	r5, r1
 8007a76:	b09d      	sub	sp, #116	@ 0x74
 8007a78:	4614      	mov	r4, r2
 8007a7a:	4698      	mov	r8, r3
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	b118      	cbz	r0, 8007a88 <_vfiprintf_r+0x18>
 8007a80:	6a03      	ldr	r3, [r0, #32]
 8007a82:	b90b      	cbnz	r3, 8007a88 <_vfiprintf_r+0x18>
 8007a84:	f7fe f9f4 	bl	8005e70 <__sinit>
 8007a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a8a:	07d9      	lsls	r1, r3, #31
 8007a8c:	d405      	bmi.n	8007a9a <_vfiprintf_r+0x2a>
 8007a8e:	89ab      	ldrh	r3, [r5, #12]
 8007a90:	059a      	lsls	r2, r3, #22
 8007a92:	d402      	bmi.n	8007a9a <_vfiprintf_r+0x2a>
 8007a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a96:	f7fe fb96 	bl	80061c6 <__retarget_lock_acquire_recursive>
 8007a9a:	89ab      	ldrh	r3, [r5, #12]
 8007a9c:	071b      	lsls	r3, r3, #28
 8007a9e:	d501      	bpl.n	8007aa4 <_vfiprintf_r+0x34>
 8007aa0:	692b      	ldr	r3, [r5, #16]
 8007aa2:	b99b      	cbnz	r3, 8007acc <_vfiprintf_r+0x5c>
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f7fe faba 	bl	8006020 <__swsetup_r>
 8007aac:	b170      	cbz	r0, 8007acc <_vfiprintf_r+0x5c>
 8007aae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ab0:	07dc      	lsls	r4, r3, #31
 8007ab2:	d504      	bpl.n	8007abe <_vfiprintf_r+0x4e>
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab8:	b01d      	add	sp, #116	@ 0x74
 8007aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abe:	89ab      	ldrh	r3, [r5, #12]
 8007ac0:	0598      	lsls	r0, r3, #22
 8007ac2:	d4f7      	bmi.n	8007ab4 <_vfiprintf_r+0x44>
 8007ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ac6:	f7fe fb7f 	bl	80061c8 <__retarget_lock_release_recursive>
 8007aca:	e7f3      	b.n	8007ab4 <_vfiprintf_r+0x44>
 8007acc:	2300      	movs	r3, #0
 8007ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ad0:	2320      	movs	r3, #32
 8007ad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ada:	2330      	movs	r3, #48	@ 0x30
 8007adc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c8c <_vfiprintf_r+0x21c>
 8007ae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ae4:	f04f 0901 	mov.w	r9, #1
 8007ae8:	4623      	mov	r3, r4
 8007aea:	469a      	mov	sl, r3
 8007aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007af0:	b10a      	cbz	r2, 8007af6 <_vfiprintf_r+0x86>
 8007af2:	2a25      	cmp	r2, #37	@ 0x25
 8007af4:	d1f9      	bne.n	8007aea <_vfiprintf_r+0x7a>
 8007af6:	ebba 0b04 	subs.w	fp, sl, r4
 8007afa:	d00b      	beq.n	8007b14 <_vfiprintf_r+0xa4>
 8007afc:	465b      	mov	r3, fp
 8007afe:	4622      	mov	r2, r4
 8007b00:	4629      	mov	r1, r5
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7ff ffa1 	bl	8007a4a <__sfputs_r>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	f000 80a7 	beq.w	8007c5c <_vfiprintf_r+0x1ec>
 8007b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b10:	445a      	add	r2, fp
 8007b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b14:	f89a 3000 	ldrb.w	r3, [sl]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 809f 	beq.w	8007c5c <_vfiprintf_r+0x1ec>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f04f 32ff 	mov.w	r2, #4294967295
 8007b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b28:	f10a 0a01 	add.w	sl, sl, #1
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	9307      	str	r3, [sp, #28]
 8007b30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b36:	4654      	mov	r4, sl
 8007b38:	2205      	movs	r2, #5
 8007b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3e:	4853      	ldr	r0, [pc, #332]	@ (8007c8c <_vfiprintf_r+0x21c>)
 8007b40:	f7f8 fb4e 	bl	80001e0 <memchr>
 8007b44:	9a04      	ldr	r2, [sp, #16]
 8007b46:	b9d8      	cbnz	r0, 8007b80 <_vfiprintf_r+0x110>
 8007b48:	06d1      	lsls	r1, r2, #27
 8007b4a:	bf44      	itt	mi
 8007b4c:	2320      	movmi	r3, #32
 8007b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b52:	0713      	lsls	r3, r2, #28
 8007b54:	bf44      	itt	mi
 8007b56:	232b      	movmi	r3, #43	@ 0x2b
 8007b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b62:	d015      	beq.n	8007b90 <_vfiprintf_r+0x120>
 8007b64:	9a07      	ldr	r2, [sp, #28]
 8007b66:	4654      	mov	r4, sl
 8007b68:	2000      	movs	r0, #0
 8007b6a:	f04f 0c0a 	mov.w	ip, #10
 8007b6e:	4621      	mov	r1, r4
 8007b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b74:	3b30      	subs	r3, #48	@ 0x30
 8007b76:	2b09      	cmp	r3, #9
 8007b78:	d94b      	bls.n	8007c12 <_vfiprintf_r+0x1a2>
 8007b7a:	b1b0      	cbz	r0, 8007baa <_vfiprintf_r+0x13a>
 8007b7c:	9207      	str	r2, [sp, #28]
 8007b7e:	e014      	b.n	8007baa <_vfiprintf_r+0x13a>
 8007b80:	eba0 0308 	sub.w	r3, r0, r8
 8007b84:	fa09 f303 	lsl.w	r3, r9, r3
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	9304      	str	r3, [sp, #16]
 8007b8c:	46a2      	mov	sl, r4
 8007b8e:	e7d2      	b.n	8007b36 <_vfiprintf_r+0xc6>
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	1d19      	adds	r1, r3, #4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	9103      	str	r1, [sp, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bfbb      	ittet	lt
 8007b9c:	425b      	neglt	r3, r3
 8007b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8007ba2:	9307      	strge	r3, [sp, #28]
 8007ba4:	9307      	strlt	r3, [sp, #28]
 8007ba6:	bfb8      	it	lt
 8007ba8:	9204      	strlt	r2, [sp, #16]
 8007baa:	7823      	ldrb	r3, [r4, #0]
 8007bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bae:	d10a      	bne.n	8007bc6 <_vfiprintf_r+0x156>
 8007bb0:	7863      	ldrb	r3, [r4, #1]
 8007bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bb4:	d132      	bne.n	8007c1c <_vfiprintf_r+0x1ac>
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	1d1a      	adds	r2, r3, #4
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	9203      	str	r2, [sp, #12]
 8007bbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bc2:	3402      	adds	r4, #2
 8007bc4:	9305      	str	r3, [sp, #20]
 8007bc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c9c <_vfiprintf_r+0x22c>
 8007bca:	7821      	ldrb	r1, [r4, #0]
 8007bcc:	2203      	movs	r2, #3
 8007bce:	4650      	mov	r0, sl
 8007bd0:	f7f8 fb06 	bl	80001e0 <memchr>
 8007bd4:	b138      	cbz	r0, 8007be6 <_vfiprintf_r+0x176>
 8007bd6:	9b04      	ldr	r3, [sp, #16]
 8007bd8:	eba0 000a 	sub.w	r0, r0, sl
 8007bdc:	2240      	movs	r2, #64	@ 0x40
 8007bde:	4082      	lsls	r2, r0
 8007be0:	4313      	orrs	r3, r2
 8007be2:	3401      	adds	r4, #1
 8007be4:	9304      	str	r3, [sp, #16]
 8007be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bea:	4829      	ldr	r0, [pc, #164]	@ (8007c90 <_vfiprintf_r+0x220>)
 8007bec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bf0:	2206      	movs	r2, #6
 8007bf2:	f7f8 faf5 	bl	80001e0 <memchr>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d03f      	beq.n	8007c7a <_vfiprintf_r+0x20a>
 8007bfa:	4b26      	ldr	r3, [pc, #152]	@ (8007c94 <_vfiprintf_r+0x224>)
 8007bfc:	bb1b      	cbnz	r3, 8007c46 <_vfiprintf_r+0x1d6>
 8007bfe:	9b03      	ldr	r3, [sp, #12]
 8007c00:	3307      	adds	r3, #7
 8007c02:	f023 0307 	bic.w	r3, r3, #7
 8007c06:	3308      	adds	r3, #8
 8007c08:	9303      	str	r3, [sp, #12]
 8007c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c0c:	443b      	add	r3, r7
 8007c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c10:	e76a      	b.n	8007ae8 <_vfiprintf_r+0x78>
 8007c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c16:	460c      	mov	r4, r1
 8007c18:	2001      	movs	r0, #1
 8007c1a:	e7a8      	b.n	8007b6e <_vfiprintf_r+0xfe>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	3401      	adds	r4, #1
 8007c20:	9305      	str	r3, [sp, #20]
 8007c22:	4619      	mov	r1, r3
 8007c24:	f04f 0c0a 	mov.w	ip, #10
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c2e:	3a30      	subs	r2, #48	@ 0x30
 8007c30:	2a09      	cmp	r2, #9
 8007c32:	d903      	bls.n	8007c3c <_vfiprintf_r+0x1cc>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0c6      	beq.n	8007bc6 <_vfiprintf_r+0x156>
 8007c38:	9105      	str	r1, [sp, #20]
 8007c3a:	e7c4      	b.n	8007bc6 <_vfiprintf_r+0x156>
 8007c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c40:	4604      	mov	r4, r0
 8007c42:	2301      	movs	r3, #1
 8007c44:	e7f0      	b.n	8007c28 <_vfiprintf_r+0x1b8>
 8007c46:	ab03      	add	r3, sp, #12
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	4b12      	ldr	r3, [pc, #72]	@ (8007c98 <_vfiprintf_r+0x228>)
 8007c4e:	a904      	add	r1, sp, #16
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7fd fcc9 	bl	80055e8 <_printf_float>
 8007c56:	4607      	mov	r7, r0
 8007c58:	1c78      	adds	r0, r7, #1
 8007c5a:	d1d6      	bne.n	8007c0a <_vfiprintf_r+0x19a>
 8007c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c5e:	07d9      	lsls	r1, r3, #31
 8007c60:	d405      	bmi.n	8007c6e <_vfiprintf_r+0x1fe>
 8007c62:	89ab      	ldrh	r3, [r5, #12]
 8007c64:	059a      	lsls	r2, r3, #22
 8007c66:	d402      	bmi.n	8007c6e <_vfiprintf_r+0x1fe>
 8007c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c6a:	f7fe faad 	bl	80061c8 <__retarget_lock_release_recursive>
 8007c6e:	89ab      	ldrh	r3, [r5, #12]
 8007c70:	065b      	lsls	r3, r3, #25
 8007c72:	f53f af1f 	bmi.w	8007ab4 <_vfiprintf_r+0x44>
 8007c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c78:	e71e      	b.n	8007ab8 <_vfiprintf_r+0x48>
 8007c7a:	ab03      	add	r3, sp, #12
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	462a      	mov	r2, r5
 8007c80:	4b05      	ldr	r3, [pc, #20]	@ (8007c98 <_vfiprintf_r+0x228>)
 8007c82:	a904      	add	r1, sp, #16
 8007c84:	4630      	mov	r0, r6
 8007c86:	f7fd ff47 	bl	8005b18 <_printf_i>
 8007c8a:	e7e4      	b.n	8007c56 <_vfiprintf_r+0x1e6>
 8007c8c:	08016d30 	.word	0x08016d30
 8007c90:	08016d3a 	.word	0x08016d3a
 8007c94:	080055e9 	.word	0x080055e9
 8007c98:	08007a4b 	.word	0x08007a4b
 8007c9c:	08016d36 	.word	0x08016d36

08007ca0 <__sflush_r>:
 8007ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca8:	0716      	lsls	r6, r2, #28
 8007caa:	4605      	mov	r5, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	d454      	bmi.n	8007d5a <__sflush_r+0xba>
 8007cb0:	684b      	ldr	r3, [r1, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dc02      	bgt.n	8007cbc <__sflush_r+0x1c>
 8007cb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dd48      	ble.n	8007d4e <__sflush_r+0xae>
 8007cbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cbe:	2e00      	cmp	r6, #0
 8007cc0:	d045      	beq.n	8007d4e <__sflush_r+0xae>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007cc8:	682f      	ldr	r7, [r5, #0]
 8007cca:	6a21      	ldr	r1, [r4, #32]
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	d030      	beq.n	8007d32 <__sflush_r+0x92>
 8007cd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	0759      	lsls	r1, r3, #29
 8007cd6:	d505      	bpl.n	8007ce4 <__sflush_r+0x44>
 8007cd8:	6863      	ldr	r3, [r4, #4]
 8007cda:	1ad2      	subs	r2, r2, r3
 8007cdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cde:	b10b      	cbz	r3, 8007ce4 <__sflush_r+0x44>
 8007ce0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ce2:	1ad2      	subs	r2, r2, r3
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ce8:	6a21      	ldr	r1, [r4, #32]
 8007cea:	4628      	mov	r0, r5
 8007cec:	47b0      	blx	r6
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	d106      	bne.n	8007d02 <__sflush_r+0x62>
 8007cf4:	6829      	ldr	r1, [r5, #0]
 8007cf6:	291d      	cmp	r1, #29
 8007cf8:	d82b      	bhi.n	8007d52 <__sflush_r+0xb2>
 8007cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8007da4 <__sflush_r+0x104>)
 8007cfc:	410a      	asrs	r2, r1
 8007cfe:	07d6      	lsls	r6, r2, #31
 8007d00:	d427      	bmi.n	8007d52 <__sflush_r+0xb2>
 8007d02:	2200      	movs	r2, #0
 8007d04:	6062      	str	r2, [r4, #4]
 8007d06:	04d9      	lsls	r1, r3, #19
 8007d08:	6922      	ldr	r2, [r4, #16]
 8007d0a:	6022      	str	r2, [r4, #0]
 8007d0c:	d504      	bpl.n	8007d18 <__sflush_r+0x78>
 8007d0e:	1c42      	adds	r2, r0, #1
 8007d10:	d101      	bne.n	8007d16 <__sflush_r+0x76>
 8007d12:	682b      	ldr	r3, [r5, #0]
 8007d14:	b903      	cbnz	r3, 8007d18 <__sflush_r+0x78>
 8007d16:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d1a:	602f      	str	r7, [r5, #0]
 8007d1c:	b1b9      	cbz	r1, 8007d4e <__sflush_r+0xae>
 8007d1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d22:	4299      	cmp	r1, r3
 8007d24:	d002      	beq.n	8007d2c <__sflush_r+0x8c>
 8007d26:	4628      	mov	r0, r5
 8007d28:	f7ff f89e 	bl	8006e68 <_free_r>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d30:	e00d      	b.n	8007d4e <__sflush_r+0xae>
 8007d32:	2301      	movs	r3, #1
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b0      	blx	r6
 8007d38:	4602      	mov	r2, r0
 8007d3a:	1c50      	adds	r0, r2, #1
 8007d3c:	d1c9      	bne.n	8007cd2 <__sflush_r+0x32>
 8007d3e:	682b      	ldr	r3, [r5, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0c6      	beq.n	8007cd2 <__sflush_r+0x32>
 8007d44:	2b1d      	cmp	r3, #29
 8007d46:	d001      	beq.n	8007d4c <__sflush_r+0xac>
 8007d48:	2b16      	cmp	r3, #22
 8007d4a:	d11e      	bne.n	8007d8a <__sflush_r+0xea>
 8007d4c:	602f      	str	r7, [r5, #0]
 8007d4e:	2000      	movs	r0, #0
 8007d50:	e022      	b.n	8007d98 <__sflush_r+0xf8>
 8007d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d56:	b21b      	sxth	r3, r3
 8007d58:	e01b      	b.n	8007d92 <__sflush_r+0xf2>
 8007d5a:	690f      	ldr	r7, [r1, #16]
 8007d5c:	2f00      	cmp	r7, #0
 8007d5e:	d0f6      	beq.n	8007d4e <__sflush_r+0xae>
 8007d60:	0793      	lsls	r3, r2, #30
 8007d62:	680e      	ldr	r6, [r1, #0]
 8007d64:	bf08      	it	eq
 8007d66:	694b      	ldreq	r3, [r1, #20]
 8007d68:	600f      	str	r7, [r1, #0]
 8007d6a:	bf18      	it	ne
 8007d6c:	2300      	movne	r3, #0
 8007d6e:	eba6 0807 	sub.w	r8, r6, r7
 8007d72:	608b      	str	r3, [r1, #8]
 8007d74:	f1b8 0f00 	cmp.w	r8, #0
 8007d78:	dde9      	ble.n	8007d4e <__sflush_r+0xae>
 8007d7a:	6a21      	ldr	r1, [r4, #32]
 8007d7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d7e:	4643      	mov	r3, r8
 8007d80:	463a      	mov	r2, r7
 8007d82:	4628      	mov	r0, r5
 8007d84:	47b0      	blx	r6
 8007d86:	2800      	cmp	r0, #0
 8007d88:	dc08      	bgt.n	8007d9c <__sflush_r+0xfc>
 8007d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d92:	81a3      	strh	r3, [r4, #12]
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d9c:	4407      	add	r7, r0
 8007d9e:	eba8 0800 	sub.w	r8, r8, r0
 8007da2:	e7e7      	b.n	8007d74 <__sflush_r+0xd4>
 8007da4:	dfbffffe 	.word	0xdfbffffe

08007da8 <_fflush_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	690b      	ldr	r3, [r1, #16]
 8007dac:	4605      	mov	r5, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	b913      	cbnz	r3, 8007db8 <_fflush_r+0x10>
 8007db2:	2500      	movs	r5, #0
 8007db4:	4628      	mov	r0, r5
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	b118      	cbz	r0, 8007dc2 <_fflush_r+0x1a>
 8007dba:	6a03      	ldr	r3, [r0, #32]
 8007dbc:	b90b      	cbnz	r3, 8007dc2 <_fflush_r+0x1a>
 8007dbe:	f7fe f857 	bl	8005e70 <__sinit>
 8007dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0f3      	beq.n	8007db2 <_fflush_r+0xa>
 8007dca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007dcc:	07d0      	lsls	r0, r2, #31
 8007dce:	d404      	bmi.n	8007dda <_fflush_r+0x32>
 8007dd0:	0599      	lsls	r1, r3, #22
 8007dd2:	d402      	bmi.n	8007dda <_fflush_r+0x32>
 8007dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dd6:	f7fe f9f6 	bl	80061c6 <__retarget_lock_acquire_recursive>
 8007dda:	4628      	mov	r0, r5
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f7ff ff5f 	bl	8007ca0 <__sflush_r>
 8007de2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007de4:	07da      	lsls	r2, r3, #31
 8007de6:	4605      	mov	r5, r0
 8007de8:	d4e4      	bmi.n	8007db4 <_fflush_r+0xc>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	059b      	lsls	r3, r3, #22
 8007dee:	d4e1      	bmi.n	8007db4 <_fflush_r+0xc>
 8007df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007df2:	f7fe f9e9 	bl	80061c8 <__retarget_lock_release_recursive>
 8007df6:	e7dd      	b.n	8007db4 <_fflush_r+0xc>

08007df8 <__swhatbuf_r>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e00:	2900      	cmp	r1, #0
 8007e02:	b096      	sub	sp, #88	@ 0x58
 8007e04:	4615      	mov	r5, r2
 8007e06:	461e      	mov	r6, r3
 8007e08:	da0d      	bge.n	8007e26 <__swhatbuf_r+0x2e>
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e10:	f04f 0100 	mov.w	r1, #0
 8007e14:	bf14      	ite	ne
 8007e16:	2340      	movne	r3, #64	@ 0x40
 8007e18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	6031      	str	r1, [r6, #0]
 8007e20:	602b      	str	r3, [r5, #0]
 8007e22:	b016      	add	sp, #88	@ 0x58
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
 8007e26:	466a      	mov	r2, sp
 8007e28:	f000 f862 	bl	8007ef0 <_fstat_r>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	dbec      	blt.n	8007e0a <__swhatbuf_r+0x12>
 8007e30:	9901      	ldr	r1, [sp, #4]
 8007e32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e3a:	4259      	negs	r1, r3
 8007e3c:	4159      	adcs	r1, r3
 8007e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e42:	e7eb      	b.n	8007e1c <__swhatbuf_r+0x24>

08007e44 <__smakebuf_r>:
 8007e44:	898b      	ldrh	r3, [r1, #12]
 8007e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e48:	079d      	lsls	r5, r3, #30
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	d507      	bpl.n	8007e60 <__smakebuf_r+0x1c>
 8007e50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	6123      	str	r3, [r4, #16]
 8007e58:	2301      	movs	r3, #1
 8007e5a:	6163      	str	r3, [r4, #20]
 8007e5c:	b003      	add	sp, #12
 8007e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e60:	ab01      	add	r3, sp, #4
 8007e62:	466a      	mov	r2, sp
 8007e64:	f7ff ffc8 	bl	8007df8 <__swhatbuf_r>
 8007e68:	9f00      	ldr	r7, [sp, #0]
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7ff f86e 	bl	8006f50 <_malloc_r>
 8007e74:	b948      	cbnz	r0, 8007e8a <__smakebuf_r+0x46>
 8007e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7a:	059a      	lsls	r2, r3, #22
 8007e7c:	d4ee      	bmi.n	8007e5c <__smakebuf_r+0x18>
 8007e7e:	f023 0303 	bic.w	r3, r3, #3
 8007e82:	f043 0302 	orr.w	r3, r3, #2
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	e7e2      	b.n	8007e50 <__smakebuf_r+0xc>
 8007e8a:	89a3      	ldrh	r3, [r4, #12]
 8007e8c:	6020      	str	r0, [r4, #0]
 8007e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e92:	81a3      	strh	r3, [r4, #12]
 8007e94:	9b01      	ldr	r3, [sp, #4]
 8007e96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e9a:	b15b      	cbz	r3, 8007eb4 <__smakebuf_r+0x70>
 8007e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f000 f837 	bl	8007f14 <_isatty_r>
 8007ea6:	b128      	cbz	r0, 8007eb4 <__smakebuf_r+0x70>
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	f023 0303 	bic.w	r3, r3, #3
 8007eae:	f043 0301 	orr.w	r3, r3, #1
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	89a3      	ldrh	r3, [r4, #12]
 8007eb6:	431d      	orrs	r5, r3
 8007eb8:	81a5      	strh	r5, [r4, #12]
 8007eba:	e7cf      	b.n	8007e5c <__smakebuf_r+0x18>

08007ebc <memmove>:
 8007ebc:	4288      	cmp	r0, r1
 8007ebe:	b510      	push	{r4, lr}
 8007ec0:	eb01 0402 	add.w	r4, r1, r2
 8007ec4:	d902      	bls.n	8007ecc <memmove+0x10>
 8007ec6:	4284      	cmp	r4, r0
 8007ec8:	4623      	mov	r3, r4
 8007eca:	d807      	bhi.n	8007edc <memmove+0x20>
 8007ecc:	1e43      	subs	r3, r0, #1
 8007ece:	42a1      	cmp	r1, r4
 8007ed0:	d008      	beq.n	8007ee4 <memmove+0x28>
 8007ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007eda:	e7f8      	b.n	8007ece <memmove+0x12>
 8007edc:	4402      	add	r2, r0
 8007ede:	4601      	mov	r1, r0
 8007ee0:	428a      	cmp	r2, r1
 8007ee2:	d100      	bne.n	8007ee6 <memmove+0x2a>
 8007ee4:	bd10      	pop	{r4, pc}
 8007ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eee:	e7f7      	b.n	8007ee0 <memmove+0x24>

08007ef0 <_fstat_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d07      	ldr	r5, [pc, #28]	@ (8007f10 <_fstat_r+0x20>)
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	4608      	mov	r0, r1
 8007efa:	4611      	mov	r1, r2
 8007efc:	602b      	str	r3, [r5, #0]
 8007efe:	f7fa febd 	bl	8002c7c <_fstat>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	d102      	bne.n	8007f0c <_fstat_r+0x1c>
 8007f06:	682b      	ldr	r3, [r5, #0]
 8007f08:	b103      	cbz	r3, 8007f0c <_fstat_r+0x1c>
 8007f0a:	6023      	str	r3, [r4, #0]
 8007f0c:	bd38      	pop	{r3, r4, r5, pc}
 8007f0e:	bf00      	nop
 8007f10:	20009cb8 	.word	0x20009cb8

08007f14 <_isatty_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d06      	ldr	r5, [pc, #24]	@ (8007f30 <_isatty_r+0x1c>)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	602b      	str	r3, [r5, #0]
 8007f20:	f7fa febc 	bl	8002c9c <_isatty>
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d102      	bne.n	8007f2e <_isatty_r+0x1a>
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	b103      	cbz	r3, 8007f2e <_isatty_r+0x1a>
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	bd38      	pop	{r3, r4, r5, pc}
 8007f30:	20009cb8 	.word	0x20009cb8

08007f34 <_sbrk_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4d06      	ldr	r5, [pc, #24]	@ (8007f50 <_sbrk_r+0x1c>)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	602b      	str	r3, [r5, #0]
 8007f40:	f7fa fec4 	bl	8002ccc <_sbrk>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_sbrk_r+0x1a>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_sbrk_r+0x1a>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	20009cb8 	.word	0x20009cb8

08007f54 <memcpy>:
 8007f54:	440a      	add	r2, r1
 8007f56:	4291      	cmp	r1, r2
 8007f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f5c:	d100      	bne.n	8007f60 <memcpy+0xc>
 8007f5e:	4770      	bx	lr
 8007f60:	b510      	push	{r4, lr}
 8007f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f6a:	4291      	cmp	r1, r2
 8007f6c:	d1f9      	bne.n	8007f62 <memcpy+0xe>
 8007f6e:	bd10      	pop	{r4, pc}

08007f70 <__assert_func>:
 8007f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f72:	4614      	mov	r4, r2
 8007f74:	461a      	mov	r2, r3
 8007f76:	4b09      	ldr	r3, [pc, #36]	@ (8007f9c <__assert_func+0x2c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	68d8      	ldr	r0, [r3, #12]
 8007f7e:	b954      	cbnz	r4, 8007f96 <__assert_func+0x26>
 8007f80:	4b07      	ldr	r3, [pc, #28]	@ (8007fa0 <__assert_func+0x30>)
 8007f82:	461c      	mov	r4, r3
 8007f84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f88:	9100      	str	r1, [sp, #0]
 8007f8a:	462b      	mov	r3, r5
 8007f8c:	4905      	ldr	r1, [pc, #20]	@ (8007fa4 <__assert_func+0x34>)
 8007f8e:	f000 f86f 	bl	8008070 <fiprintf>
 8007f92:	f000 f87f 	bl	8008094 <abort>
 8007f96:	4b04      	ldr	r3, [pc, #16]	@ (8007fa8 <__assert_func+0x38>)
 8007f98:	e7f4      	b.n	8007f84 <__assert_func+0x14>
 8007f9a:	bf00      	nop
 8007f9c:	2000002c 	.word	0x2000002c
 8007fa0:	08016d86 	.word	0x08016d86
 8007fa4:	08016d58 	.word	0x08016d58
 8007fa8:	08016d4b 	.word	0x08016d4b

08007fac <_calloc_r>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	fba1 5402 	umull	r5, r4, r1, r2
 8007fb2:	b93c      	cbnz	r4, 8007fc4 <_calloc_r+0x18>
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	f7fe ffcb 	bl	8006f50 <_malloc_r>
 8007fba:	4606      	mov	r6, r0
 8007fbc:	b928      	cbnz	r0, 8007fca <_calloc_r+0x1e>
 8007fbe:	2600      	movs	r6, #0
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
 8007fc4:	220c      	movs	r2, #12
 8007fc6:	6002      	str	r2, [r0, #0]
 8007fc8:	e7f9      	b.n	8007fbe <_calloc_r+0x12>
 8007fca:	462a      	mov	r2, r5
 8007fcc:	4621      	mov	r1, r4
 8007fce:	f7fe f87d 	bl	80060cc <memset>
 8007fd2:	e7f5      	b.n	8007fc0 <_calloc_r+0x14>

08007fd4 <__ascii_mbtowc>:
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	b901      	cbnz	r1, 8007fda <__ascii_mbtowc+0x6>
 8007fd8:	a901      	add	r1, sp, #4
 8007fda:	b142      	cbz	r2, 8007fee <__ascii_mbtowc+0x1a>
 8007fdc:	b14b      	cbz	r3, 8007ff2 <__ascii_mbtowc+0x1e>
 8007fde:	7813      	ldrb	r3, [r2, #0]
 8007fe0:	600b      	str	r3, [r1, #0]
 8007fe2:	7812      	ldrb	r2, [r2, #0]
 8007fe4:	1e10      	subs	r0, r2, #0
 8007fe6:	bf18      	it	ne
 8007fe8:	2001      	movne	r0, #1
 8007fea:	b002      	add	sp, #8
 8007fec:	4770      	bx	lr
 8007fee:	4610      	mov	r0, r2
 8007ff0:	e7fb      	b.n	8007fea <__ascii_mbtowc+0x16>
 8007ff2:	f06f 0001 	mvn.w	r0, #1
 8007ff6:	e7f8      	b.n	8007fea <__ascii_mbtowc+0x16>

08007ff8 <_realloc_r>:
 8007ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	4615      	mov	r5, r2
 8008000:	460c      	mov	r4, r1
 8008002:	b921      	cbnz	r1, 800800e <_realloc_r+0x16>
 8008004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008008:	4611      	mov	r1, r2
 800800a:	f7fe bfa1 	b.w	8006f50 <_malloc_r>
 800800e:	b92a      	cbnz	r2, 800801c <_realloc_r+0x24>
 8008010:	f7fe ff2a 	bl	8006e68 <_free_r>
 8008014:	2400      	movs	r4, #0
 8008016:	4620      	mov	r0, r4
 8008018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800801c:	f000 f841 	bl	80080a2 <_malloc_usable_size_r>
 8008020:	4285      	cmp	r5, r0
 8008022:	4606      	mov	r6, r0
 8008024:	d802      	bhi.n	800802c <_realloc_r+0x34>
 8008026:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800802a:	d8f4      	bhi.n	8008016 <_realloc_r+0x1e>
 800802c:	4629      	mov	r1, r5
 800802e:	4640      	mov	r0, r8
 8008030:	f7fe ff8e 	bl	8006f50 <_malloc_r>
 8008034:	4607      	mov	r7, r0
 8008036:	2800      	cmp	r0, #0
 8008038:	d0ec      	beq.n	8008014 <_realloc_r+0x1c>
 800803a:	42b5      	cmp	r5, r6
 800803c:	462a      	mov	r2, r5
 800803e:	4621      	mov	r1, r4
 8008040:	bf28      	it	cs
 8008042:	4632      	movcs	r2, r6
 8008044:	f7ff ff86 	bl	8007f54 <memcpy>
 8008048:	4621      	mov	r1, r4
 800804a:	4640      	mov	r0, r8
 800804c:	f7fe ff0c 	bl	8006e68 <_free_r>
 8008050:	463c      	mov	r4, r7
 8008052:	e7e0      	b.n	8008016 <_realloc_r+0x1e>

08008054 <__ascii_wctomb>:
 8008054:	4603      	mov	r3, r0
 8008056:	4608      	mov	r0, r1
 8008058:	b141      	cbz	r1, 800806c <__ascii_wctomb+0x18>
 800805a:	2aff      	cmp	r2, #255	@ 0xff
 800805c:	d904      	bls.n	8008068 <__ascii_wctomb+0x14>
 800805e:	228a      	movs	r2, #138	@ 0x8a
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	f04f 30ff 	mov.w	r0, #4294967295
 8008066:	4770      	bx	lr
 8008068:	700a      	strb	r2, [r1, #0]
 800806a:	2001      	movs	r0, #1
 800806c:	4770      	bx	lr
	...

08008070 <fiprintf>:
 8008070:	b40e      	push	{r1, r2, r3}
 8008072:	b503      	push	{r0, r1, lr}
 8008074:	4601      	mov	r1, r0
 8008076:	ab03      	add	r3, sp, #12
 8008078:	4805      	ldr	r0, [pc, #20]	@ (8008090 <fiprintf+0x20>)
 800807a:	f853 2b04 	ldr.w	r2, [r3], #4
 800807e:	6800      	ldr	r0, [r0, #0]
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	f7ff fcf5 	bl	8007a70 <_vfiprintf_r>
 8008086:	b002      	add	sp, #8
 8008088:	f85d eb04 	ldr.w	lr, [sp], #4
 800808c:	b003      	add	sp, #12
 800808e:	4770      	bx	lr
 8008090:	2000002c 	.word	0x2000002c

08008094 <abort>:
 8008094:	b508      	push	{r3, lr}
 8008096:	2006      	movs	r0, #6
 8008098:	f000 f834 	bl	8008104 <raise>
 800809c:	2001      	movs	r0, #1
 800809e:	f7fa fd9d 	bl	8002bdc <_exit>

080080a2 <_malloc_usable_size_r>:
 80080a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a6:	1f18      	subs	r0, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bfbc      	itt	lt
 80080ac:	580b      	ldrlt	r3, [r1, r0]
 80080ae:	18c0      	addlt	r0, r0, r3
 80080b0:	4770      	bx	lr

080080b2 <_raise_r>:
 80080b2:	291f      	cmp	r1, #31
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4605      	mov	r5, r0
 80080b8:	460c      	mov	r4, r1
 80080ba:	d904      	bls.n	80080c6 <_raise_r+0x14>
 80080bc:	2316      	movs	r3, #22
 80080be:	6003      	str	r3, [r0, #0]
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	bd38      	pop	{r3, r4, r5, pc}
 80080c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80080c8:	b112      	cbz	r2, 80080d0 <_raise_r+0x1e>
 80080ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080ce:	b94b      	cbnz	r3, 80080e4 <_raise_r+0x32>
 80080d0:	4628      	mov	r0, r5
 80080d2:	f000 f831 	bl	8008138 <_getpid_r>
 80080d6:	4622      	mov	r2, r4
 80080d8:	4601      	mov	r1, r0
 80080da:	4628      	mov	r0, r5
 80080dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080e0:	f000 b818 	b.w	8008114 <_kill_r>
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d00a      	beq.n	80080fe <_raise_r+0x4c>
 80080e8:	1c59      	adds	r1, r3, #1
 80080ea:	d103      	bne.n	80080f4 <_raise_r+0x42>
 80080ec:	2316      	movs	r3, #22
 80080ee:	6003      	str	r3, [r0, #0]
 80080f0:	2001      	movs	r0, #1
 80080f2:	e7e7      	b.n	80080c4 <_raise_r+0x12>
 80080f4:	2100      	movs	r1, #0
 80080f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80080fa:	4620      	mov	r0, r4
 80080fc:	4798      	blx	r3
 80080fe:	2000      	movs	r0, #0
 8008100:	e7e0      	b.n	80080c4 <_raise_r+0x12>
	...

08008104 <raise>:
 8008104:	4b02      	ldr	r3, [pc, #8]	@ (8008110 <raise+0xc>)
 8008106:	4601      	mov	r1, r0
 8008108:	6818      	ldr	r0, [r3, #0]
 800810a:	f7ff bfd2 	b.w	80080b2 <_raise_r>
 800810e:	bf00      	nop
 8008110:	2000002c 	.word	0x2000002c

08008114 <_kill_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d07      	ldr	r5, [pc, #28]	@ (8008134 <_kill_r+0x20>)
 8008118:	2300      	movs	r3, #0
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	4611      	mov	r1, r2
 8008120:	602b      	str	r3, [r5, #0]
 8008122:	f7fa fd4b 	bl	8002bbc <_kill>
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	d102      	bne.n	8008130 <_kill_r+0x1c>
 800812a:	682b      	ldr	r3, [r5, #0]
 800812c:	b103      	cbz	r3, 8008130 <_kill_r+0x1c>
 800812e:	6023      	str	r3, [r4, #0]
 8008130:	bd38      	pop	{r3, r4, r5, pc}
 8008132:	bf00      	nop
 8008134:	20009cb8 	.word	0x20009cb8

08008138 <_getpid_r>:
 8008138:	f7fa bd38 	b.w	8002bac <_getpid>
 800813c:	0000      	movs	r0, r0
	...

08008140 <exp>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	ed2d 8b02 	vpush	{d8}
 8008146:	ec55 4b10 	vmov	r4, r5, d0
 800814a:	f000 f84d 	bl	80081e8 <__ieee754_exp>
 800814e:	eeb0 8a40 	vmov.f32	s16, s0
 8008152:	eef0 8a60 	vmov.f32	s17, s1
 8008156:	ec45 4b10 	vmov	d0, r4, r5
 800815a:	f000 f839 	bl	80081d0 <finite>
 800815e:	b168      	cbz	r0, 800817c <exp+0x3c>
 8008160:	a317      	add	r3, pc, #92	@ (adr r3, 80081c0 <exp+0x80>)
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 fcdd 	bl	8000b28 <__aeabi_dcmpgt>
 800816e:	b160      	cbz	r0, 800818a <exp+0x4a>
 8008170:	f7fd fffe 	bl	8006170 <__errno>
 8008174:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 80081b0 <exp+0x70>
 8008178:	2322      	movs	r3, #34	@ 0x22
 800817a:	6003      	str	r3, [r0, #0]
 800817c:	eeb0 0a48 	vmov.f32	s0, s16
 8008180:	eef0 0a68 	vmov.f32	s1, s17
 8008184:	ecbd 8b02 	vpop	{d8}
 8008188:	bd38      	pop	{r3, r4, r5, pc}
 800818a:	a30f      	add	r3, pc, #60	@ (adr r3, 80081c8 <exp+0x88>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	4620      	mov	r0, r4
 8008192:	4629      	mov	r1, r5
 8008194:	f7f8 fcaa 	bl	8000aec <__aeabi_dcmplt>
 8008198:	2800      	cmp	r0, #0
 800819a:	d0ef      	beq.n	800817c <exp+0x3c>
 800819c:	f7fd ffe8 	bl	8006170 <__errno>
 80081a0:	2322      	movs	r3, #34	@ 0x22
 80081a2:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 80081b8 <exp+0x78>
 80081a6:	6003      	str	r3, [r0, #0]
 80081a8:	e7e8      	b.n	800817c <exp+0x3c>
 80081aa:	bf00      	nop
 80081ac:	f3af 8000 	nop.w
 80081b0:	00000000 	.word	0x00000000
 80081b4:	7ff00000 	.word	0x7ff00000
	...
 80081c0:	fefa39ef 	.word	0xfefa39ef
 80081c4:	40862e42 	.word	0x40862e42
 80081c8:	d52d3051 	.word	0xd52d3051
 80081cc:	c0874910 	.word	0xc0874910

080081d0 <finite>:
 80081d0:	b082      	sub	sp, #8
 80081d2:	ed8d 0b00 	vstr	d0, [sp]
 80081d6:	9801      	ldr	r0, [sp, #4]
 80081d8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80081dc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80081e0:	0fc0      	lsrs	r0, r0, #31
 80081e2:	b002      	add	sp, #8
 80081e4:	4770      	bx	lr
	...

080081e8 <__ieee754_exp>:
 80081e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	ec55 4b10 	vmov	r4, r5, d0
 80081f0:	49b1      	ldr	r1, [pc, #708]	@ (80084b8 <__ieee754_exp+0x2d0>)
 80081f2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80081f6:	428a      	cmp	r2, r1
 80081f8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80081fc:	d936      	bls.n	800826c <__ieee754_exp+0x84>
 80081fe:	49af      	ldr	r1, [pc, #700]	@ (80084bc <__ieee754_exp+0x2d4>)
 8008200:	428a      	cmp	r2, r1
 8008202:	d914      	bls.n	800822e <__ieee754_exp+0x46>
 8008204:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008208:	4323      	orrs	r3, r4
 800820a:	4622      	mov	r2, r4
 800820c:	d007      	beq.n	800821e <__ieee754_exp+0x36>
 800820e:	462b      	mov	r3, r5
 8008210:	4620      	mov	r0, r4
 8008212:	4629      	mov	r1, r5
 8008214:	f7f8 f842 	bl	800029c <__adddf3>
 8008218:	4604      	mov	r4, r0
 800821a:	460d      	mov	r5, r1
 800821c:	e002      	b.n	8008224 <__ieee754_exp+0x3c>
 800821e:	2e00      	cmp	r6, #0
 8008220:	f040 8118 	bne.w	8008454 <__ieee754_exp+0x26c>
 8008224:	ec45 4b10 	vmov	d0, r4, r5
 8008228:	b004      	add	sp, #16
 800822a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822e:	a38c      	add	r3, pc, #560	@ (adr r3, 8008460 <__ieee754_exp+0x278>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f8 fc76 	bl	8000b28 <__aeabi_dcmpgt>
 800823c:	4607      	mov	r7, r0
 800823e:	b128      	cbz	r0, 800824c <__ieee754_exp+0x64>
 8008240:	2000      	movs	r0, #0
 8008242:	b004      	add	sp, #16
 8008244:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008248:	f000 b97e 	b.w	8008548 <__math_oflow>
 800824c:	a386      	add	r3, pc, #536	@ (adr r3, 8008468 <__ieee754_exp+0x280>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	4620      	mov	r0, r4
 8008254:	4629      	mov	r1, r5
 8008256:	f7f8 fc49 	bl	8000aec <__aeabi_dcmplt>
 800825a:	2800      	cmp	r0, #0
 800825c:	f000 8087 	beq.w	800836e <__ieee754_exp+0x186>
 8008260:	4638      	mov	r0, r7
 8008262:	b004      	add	sp, #16
 8008264:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008268:	f000 b966 	b.w	8008538 <__math_uflow>
 800826c:	4b94      	ldr	r3, [pc, #592]	@ (80084c0 <__ieee754_exp+0x2d8>)
 800826e:	429a      	cmp	r2, r3
 8008270:	f240 80a9 	bls.w	80083c6 <__ieee754_exp+0x1de>
 8008274:	4b93      	ldr	r3, [pc, #588]	@ (80084c4 <__ieee754_exp+0x2dc>)
 8008276:	429a      	cmp	r2, r3
 8008278:	d879      	bhi.n	800836e <__ieee754_exp+0x186>
 800827a:	4b93      	ldr	r3, [pc, #588]	@ (80084c8 <__ieee754_exp+0x2e0>)
 800827c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	4620      	mov	r0, r4
 8008286:	4629      	mov	r1, r5
 8008288:	f7f8 f806 	bl	8000298 <__aeabi_dsub>
 800828c:	4b8f      	ldr	r3, [pc, #572]	@ (80084cc <__ieee754_exp+0x2e4>)
 800828e:	00f7      	lsls	r7, r6, #3
 8008290:	443b      	add	r3, r7
 8008292:	ed93 7b00 	vldr	d7, [r3]
 8008296:	ed8d 7b00 	vstr	d7, [sp]
 800829a:	f1c6 0a01 	rsb	sl, r6, #1
 800829e:	4680      	mov	r8, r0
 80082a0:	4689      	mov	r9, r1
 80082a2:	ebaa 0a06 	sub.w	sl, sl, r6
 80082a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082aa:	4640      	mov	r0, r8
 80082ac:	4649      	mov	r1, r9
 80082ae:	f7f7 fff3 	bl	8000298 <__aeabi_dsub>
 80082b2:	4604      	mov	r4, r0
 80082b4:	460d      	mov	r5, r1
 80082b6:	4622      	mov	r2, r4
 80082b8:	462b      	mov	r3, r5
 80082ba:	4620      	mov	r0, r4
 80082bc:	4629      	mov	r1, r5
 80082be:	f7f8 f9a3 	bl	8000608 <__aeabi_dmul>
 80082c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008470 <__ieee754_exp+0x288>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	4606      	mov	r6, r0
 80082ca:	460f      	mov	r7, r1
 80082cc:	f7f8 f99c 	bl	8000608 <__aeabi_dmul>
 80082d0:	a369      	add	r3, pc, #420	@ (adr r3, 8008478 <__ieee754_exp+0x290>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f7f7 ffdf 	bl	8000298 <__aeabi_dsub>
 80082da:	4632      	mov	r2, r6
 80082dc:	463b      	mov	r3, r7
 80082de:	f7f8 f993 	bl	8000608 <__aeabi_dmul>
 80082e2:	a367      	add	r3, pc, #412	@ (adr r3, 8008480 <__ieee754_exp+0x298>)
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	f7f7 ffd8 	bl	800029c <__adddf3>
 80082ec:	4632      	mov	r2, r6
 80082ee:	463b      	mov	r3, r7
 80082f0:	f7f8 f98a 	bl	8000608 <__aeabi_dmul>
 80082f4:	a364      	add	r3, pc, #400	@ (adr r3, 8008488 <__ieee754_exp+0x2a0>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f7 ffcd 	bl	8000298 <__aeabi_dsub>
 80082fe:	4632      	mov	r2, r6
 8008300:	463b      	mov	r3, r7
 8008302:	f7f8 f981 	bl	8000608 <__aeabi_dmul>
 8008306:	a362      	add	r3, pc, #392	@ (adr r3, 8008490 <__ieee754_exp+0x2a8>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	f7f7 ffc6 	bl	800029c <__adddf3>
 8008310:	4632      	mov	r2, r6
 8008312:	463b      	mov	r3, r7
 8008314:	f7f8 f978 	bl	8000608 <__aeabi_dmul>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4620      	mov	r0, r4
 800831e:	4629      	mov	r1, r5
 8008320:	f7f7 ffba 	bl	8000298 <__aeabi_dsub>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4606      	mov	r6, r0
 800832a:	460f      	mov	r7, r1
 800832c:	4620      	mov	r0, r4
 800832e:	4629      	mov	r1, r5
 8008330:	f7f8 f96a 	bl	8000608 <__aeabi_dmul>
 8008334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008338:	f1ba 0f00 	cmp.w	sl, #0
 800833c:	d15c      	bne.n	80083f8 <__ieee754_exp+0x210>
 800833e:	2200      	movs	r2, #0
 8008340:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008344:	4630      	mov	r0, r6
 8008346:	4639      	mov	r1, r7
 8008348:	f7f7 ffa6 	bl	8000298 <__aeabi_dsub>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008354:	f7f8 fa82 	bl	800085c <__aeabi_ddiv>
 8008358:	4622      	mov	r2, r4
 800835a:	462b      	mov	r3, r5
 800835c:	f7f7 ff9c 	bl	8000298 <__aeabi_dsub>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	2000      	movs	r0, #0
 8008366:	495a      	ldr	r1, [pc, #360]	@ (80084d0 <__ieee754_exp+0x2e8>)
 8008368:	f7f7 ff96 	bl	8000298 <__aeabi_dsub>
 800836c:	e754      	b.n	8008218 <__ieee754_exp+0x30>
 800836e:	4b59      	ldr	r3, [pc, #356]	@ (80084d4 <__ieee754_exp+0x2ec>)
 8008370:	4620      	mov	r0, r4
 8008372:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008376:	4629      	mov	r1, r5
 8008378:	a347      	add	r3, pc, #284	@ (adr r3, 8008498 <__ieee754_exp+0x2b0>)
 800837a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837e:	f7f8 f943 	bl	8000608 <__aeabi_dmul>
 8008382:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008386:	f7f7 ff89 	bl	800029c <__adddf3>
 800838a:	f7f8 fbed 	bl	8000b68 <__aeabi_d2iz>
 800838e:	4682      	mov	sl, r0
 8008390:	f7f8 f8d0 	bl	8000534 <__aeabi_i2d>
 8008394:	a342      	add	r3, pc, #264	@ (adr r3, 80084a0 <__ieee754_exp+0x2b8>)
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	4606      	mov	r6, r0
 800839c:	460f      	mov	r7, r1
 800839e:	f7f8 f933 	bl	8000608 <__aeabi_dmul>
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	4620      	mov	r0, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	f7f7 ff75 	bl	8000298 <__aeabi_dsub>
 80083ae:	a33e      	add	r3, pc, #248	@ (adr r3, 80084a8 <__ieee754_exp+0x2c0>)
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	4680      	mov	r8, r0
 80083b6:	4689      	mov	r9, r1
 80083b8:	4630      	mov	r0, r6
 80083ba:	4639      	mov	r1, r7
 80083bc:	f7f8 f924 	bl	8000608 <__aeabi_dmul>
 80083c0:	e9cd 0100 	strd	r0, r1, [sp]
 80083c4:	e76f      	b.n	80082a6 <__ieee754_exp+0xbe>
 80083c6:	4b44      	ldr	r3, [pc, #272]	@ (80084d8 <__ieee754_exp+0x2f0>)
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d810      	bhi.n	80083ee <__ieee754_exp+0x206>
 80083cc:	a338      	add	r3, pc, #224	@ (adr r3, 80084b0 <__ieee754_exp+0x2c8>)
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	4620      	mov	r0, r4
 80083d4:	4629      	mov	r1, r5
 80083d6:	f7f7 ff61 	bl	800029c <__adddf3>
 80083da:	4b3d      	ldr	r3, [pc, #244]	@ (80084d0 <__ieee754_exp+0x2e8>)
 80083dc:	2200      	movs	r2, #0
 80083de:	f7f8 fba3 	bl	8000b28 <__aeabi_dcmpgt>
 80083e2:	b138      	cbz	r0, 80083f4 <__ieee754_exp+0x20c>
 80083e4:	4b3a      	ldr	r3, [pc, #232]	@ (80084d0 <__ieee754_exp+0x2e8>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	4620      	mov	r0, r4
 80083ea:	4629      	mov	r1, r5
 80083ec:	e712      	b.n	8008214 <__ieee754_exp+0x2c>
 80083ee:	f04f 0a00 	mov.w	sl, #0
 80083f2:	e760      	b.n	80082b6 <__ieee754_exp+0xce>
 80083f4:	4682      	mov	sl, r0
 80083f6:	e75e      	b.n	80082b6 <__ieee754_exp+0xce>
 80083f8:	4632      	mov	r2, r6
 80083fa:	463b      	mov	r3, r7
 80083fc:	2000      	movs	r0, #0
 80083fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008402:	f7f7 ff49 	bl	8000298 <__aeabi_dsub>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800840e:	f7f8 fa25 	bl	800085c <__aeabi_ddiv>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	e9dd 0100 	ldrd	r0, r1, [sp]
 800841a:	f7f7 ff3d 	bl	8000298 <__aeabi_dsub>
 800841e:	4642      	mov	r2, r8
 8008420:	464b      	mov	r3, r9
 8008422:	f7f7 ff39 	bl	8000298 <__aeabi_dsub>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	2000      	movs	r0, #0
 800842c:	4928      	ldr	r1, [pc, #160]	@ (80084d0 <__ieee754_exp+0x2e8>)
 800842e:	f7f7 ff33 	bl	8000298 <__aeabi_dsub>
 8008432:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8008436:	4592      	cmp	sl, r2
 8008438:	db02      	blt.n	8008440 <__ieee754_exp+0x258>
 800843a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800843e:	e6eb      	b.n	8008218 <__ieee754_exp+0x30>
 8008440:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8008444:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008448:	2200      	movs	r2, #0
 800844a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800844e:	f7f8 f8db 	bl	8000608 <__aeabi_dmul>
 8008452:	e6e1      	b.n	8008218 <__ieee754_exp+0x30>
 8008454:	2400      	movs	r4, #0
 8008456:	2500      	movs	r5, #0
 8008458:	e6e4      	b.n	8008224 <__ieee754_exp+0x3c>
 800845a:	bf00      	nop
 800845c:	f3af 8000 	nop.w
 8008460:	fefa39ef 	.word	0xfefa39ef
 8008464:	40862e42 	.word	0x40862e42
 8008468:	d52d3051 	.word	0xd52d3051
 800846c:	c0874910 	.word	0xc0874910
 8008470:	72bea4d0 	.word	0x72bea4d0
 8008474:	3e663769 	.word	0x3e663769
 8008478:	c5d26bf1 	.word	0xc5d26bf1
 800847c:	3ebbbd41 	.word	0x3ebbbd41
 8008480:	af25de2c 	.word	0xaf25de2c
 8008484:	3f11566a 	.word	0x3f11566a
 8008488:	16bebd93 	.word	0x16bebd93
 800848c:	3f66c16c 	.word	0x3f66c16c
 8008490:	5555553e 	.word	0x5555553e
 8008494:	3fc55555 	.word	0x3fc55555
 8008498:	652b82fe 	.word	0x652b82fe
 800849c:	3ff71547 	.word	0x3ff71547
 80084a0:	fee00000 	.word	0xfee00000
 80084a4:	3fe62e42 	.word	0x3fe62e42
 80084a8:	35793c76 	.word	0x35793c76
 80084ac:	3dea39ef 	.word	0x3dea39ef
 80084b0:	8800759c 	.word	0x8800759c
 80084b4:	7e37e43c 	.word	0x7e37e43c
 80084b8:	40862e41 	.word	0x40862e41
 80084bc:	7fefffff 	.word	0x7fefffff
 80084c0:	3fd62e42 	.word	0x3fd62e42
 80084c4:	3ff0a2b1 	.word	0x3ff0a2b1
 80084c8:	08016e98 	.word	0x08016e98
 80084cc:	08016e88 	.word	0x08016e88
 80084d0:	3ff00000 	.word	0x3ff00000
 80084d4:	08016ea8 	.word	0x08016ea8
 80084d8:	3defffff 	.word	0x3defffff

080084dc <with_errno>:
 80084dc:	b510      	push	{r4, lr}
 80084de:	ed2d 8b02 	vpush	{d8}
 80084e2:	eeb0 8a40 	vmov.f32	s16, s0
 80084e6:	eef0 8a60 	vmov.f32	s17, s1
 80084ea:	4604      	mov	r4, r0
 80084ec:	f7fd fe40 	bl	8006170 <__errno>
 80084f0:	eeb0 0a48 	vmov.f32	s0, s16
 80084f4:	eef0 0a68 	vmov.f32	s1, s17
 80084f8:	ecbd 8b02 	vpop	{d8}
 80084fc:	6004      	str	r4, [r0, #0]
 80084fe:	bd10      	pop	{r4, pc}

08008500 <xflow>:
 8008500:	4603      	mov	r3, r0
 8008502:	b507      	push	{r0, r1, r2, lr}
 8008504:	ec51 0b10 	vmov	r0, r1, d0
 8008508:	b183      	cbz	r3, 800852c <xflow+0x2c>
 800850a:	4602      	mov	r2, r0
 800850c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008510:	e9cd 2300 	strd	r2, r3, [sp]
 8008514:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008518:	f7f8 f876 	bl	8000608 <__aeabi_dmul>
 800851c:	ec41 0b10 	vmov	d0, r0, r1
 8008520:	2022      	movs	r0, #34	@ 0x22
 8008522:	b003      	add	sp, #12
 8008524:	f85d eb04 	ldr.w	lr, [sp], #4
 8008528:	f7ff bfd8 	b.w	80084dc <with_errno>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	e7ee      	b.n	8008510 <xflow+0x10>
 8008532:	0000      	movs	r0, r0
 8008534:	0000      	movs	r0, r0
	...

08008538 <__math_uflow>:
 8008538:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008540 <__math_uflow+0x8>
 800853c:	f7ff bfe0 	b.w	8008500 <xflow>
 8008540:	00000000 	.word	0x00000000
 8008544:	10000000 	.word	0x10000000

08008548 <__math_oflow>:
 8008548:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008550 <__math_oflow+0x8>
 800854c:	f7ff bfd8 	b.w	8008500 <xflow>
 8008550:	00000000 	.word	0x00000000
 8008554:	70000000 	.word	0x70000000

08008558 <_init>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr

08008564 <_fini>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr

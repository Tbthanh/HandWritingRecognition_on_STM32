
Floyd-Fish_ST7789_BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a8c4  08003930  08003930  00004930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1f4  0800e1f4  00010028  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1f4  0800e1f4  0000f1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1fc  0800e1fc  00010028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1fc  0800e1fc  0000f1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e200  0800e200  0000f200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800e204  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a38  20000028  0800e22c  00010028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  0800e22c  00010a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077ff  00000000  00000000  00010058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001926  00000000  00000000  00017857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  00019180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00015573  00000000  00000000  000198f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000902a  00000000  00000000  0002ee6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000846a9  00000000  00000000  00037e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000bc53e  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000587  00000000  00000000  000bc581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d38  00000000  00000000  000bcb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bb  00000000  00000000  000be840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003918 	.word	0x08003918

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	08003918 	.word	0x08003918

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80004ce:	2200      	movs	r2, #0
 80004d0:	2110      	movs	r1, #16
 80004d2:	480c      	ldr	r0, [pc, #48]	@ (8000504 <ST7789_WriteCommand+0x40>)
 80004d4:	f002 f9ba 	bl	800284c <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 80004d8:	2200      	movs	r2, #0
 80004da:	2102      	movs	r1, #2
 80004dc:	4809      	ldr	r0, [pc, #36]	@ (8000504 <ST7789_WriteCommand+0x40>)
 80004de:	f002 f9b5 	bl	800284c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80004e2:	1df9      	adds	r1, r7, #7
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
 80004e8:	2201      	movs	r2, #1
 80004ea:	4807      	ldr	r0, [pc, #28]	@ (8000508 <ST7789_WriteCommand+0x44>)
 80004ec:	f002 fe75 	bl	80031da <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80004f0:	2201      	movs	r2, #1
 80004f2:	2110      	movs	r1, #16
 80004f4:	4803      	ldr	r0, [pc, #12]	@ (8000504 <ST7789_WriteCommand+0x40>)
 80004f6:	f002 f9a9 	bl	800284c <HAL_GPIO_WritePin>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40020000 	.word	0x40020000
 8000508:	200009a4 	.word	0x200009a4

0800050c <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000516:	2200      	movs	r2, #0
 8000518:	2110      	movs	r1, #16
 800051a:	4820      	ldr	r0, [pc, #128]	@ (800059c <ST7789_WriteData+0x90>)
 800051c:	f002 f996 	bl	800284c <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000520:	2201      	movs	r2, #1
 8000522:	2102      	movs	r1, #2
 8000524:	481d      	ldr	r0, [pc, #116]	@ (800059c <ST7789_WriteData+0x90>)
 8000526:	f002 f991 	bl	800284c <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800052a:	e02a      	b.n	8000582 <ST7789_WriteData+0x76>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000532:	4293      	cmp	r3, r2
 8000534:	bf28      	it	cs
 8000536:	4613      	movcs	r3, r2
 8000538:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 800053a:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <ST7789_WriteData+0x94>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	461a      	mov	r2, r3
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	4293      	cmp	r3, r2
 8000544:	d30e      	bcc.n	8000564 <ST7789_WriteData+0x58>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8000546:	89fb      	ldrh	r3, [r7, #14]
 8000548:	461a      	mov	r2, r3
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	4815      	ldr	r0, [pc, #84]	@ (80005a4 <ST7789_WriteData+0x98>)
 800054e:	f002 ff89 	bl	8003464 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8000552:	bf00      	nop
 8000554:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <ST7789_WriteData+0x98>)
 8000556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b01      	cmp	r3, #1
 8000560:	d1f8      	bne.n	8000554 <ST7789_WriteData+0x48>
 8000562:	e006      	b.n	8000572 <ST7789_WriteData+0x66>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000564:	89fa      	ldrh	r2, [r7, #14]
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	480d      	ldr	r0, [pc, #52]	@ (80005a4 <ST7789_WriteData+0x98>)
 800056e:	f002 fe34 	bl	80031da <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8000572:	89fb      	ldrh	r3, [r7, #14]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800057a:	89fb      	ldrh	r3, [r7, #14]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	1ad3      	subs	r3, r2, r3
 8000580:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1d1      	bne.n	800052c <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 8000588:	2201      	movs	r2, #1
 800058a:	2110      	movs	r1, #16
 800058c:	4803      	ldr	r0, [pc, #12]	@ (800059c <ST7789_WriteData+0x90>)
 800058e:	f002 f95d 	bl	800284c <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40020000 	.word	0x40020000
 80005a0:	20000018 	.word	0x20000018
 80005a4:	200009a4 	.word	0x200009a4

080005a8 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80005b2:	2200      	movs	r2, #0
 80005b4:	2110      	movs	r1, #16
 80005b6:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <ST7789_WriteSmallData+0x40>)
 80005b8:	f002 f948 	bl	800284c <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80005bc:	2201      	movs	r2, #1
 80005be:	2102      	movs	r1, #2
 80005c0:	4809      	ldr	r0, [pc, #36]	@ (80005e8 <ST7789_WriteSmallData+0x40>)
 80005c2:	f002 f943 	bl	800284c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 80005c6:	1df9      	adds	r1, r7, #7
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	2201      	movs	r2, #1
 80005ce:	4807      	ldr	r0, [pc, #28]	@ (80005ec <ST7789_WriteSmallData+0x44>)
 80005d0:	f002 fe03 	bl	80031da <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80005d4:	2201      	movs	r2, #1
 80005d6:	2110      	movs	r1, #16
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <ST7789_WriteSmallData+0x40>)
 80005da:	f002 f937 	bl	800284c <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40020000 	.word	0x40020000
 80005ec:	200009a4 	.word	0x200009a4

080005f0 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80005fa:	2036      	movs	r0, #54	@ 0x36
 80005fc:	f7ff ff62 	bl	80004c4 <ST7789_WriteCommand>
	switch (m) {
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	2b03      	cmp	r3, #3
 8000604:	d81a      	bhi.n	800063c <ST7789_SetRotation+0x4c>
 8000606:	a201      	add	r2, pc, #4	@ (adr r2, 800060c <ST7789_SetRotation+0x1c>)
 8000608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060c:	0800061d 	.word	0x0800061d
 8000610:	08000625 	.word	0x08000625
 8000614:	0800062d 	.word	0x0800062d
 8000618:	08000635 	.word	0x08000635
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 800061c:	20c0      	movs	r0, #192	@ 0xc0
 800061e:	f7ff ffc3 	bl	80005a8 <ST7789_WriteSmallData>
		break;
 8000622:	e00c      	b.n	800063e <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000624:	20a0      	movs	r0, #160	@ 0xa0
 8000626:	f7ff ffbf 	bl	80005a8 <ST7789_WriteSmallData>
		break;
 800062a:	e008      	b.n	800063e <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ffbb 	bl	80005a8 <ST7789_WriteSmallData>
		break;
 8000632:	e004      	b.n	800063e <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000634:	2060      	movs	r0, #96	@ 0x60
 8000636:	f7ff ffb7 	bl	80005a8 <ST7789_WriteSmallData>
		break;
 800063a:	e000      	b.n	800063e <ST7789_SetRotation+0x4e>
	default:
		break;
 800063c:	bf00      	nop
	}
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop

08000648 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b087      	sub	sp, #28
 800064c:	af00      	add	r7, sp, #0
 800064e:	4604      	mov	r4, r0
 8000650:	4608      	mov	r0, r1
 8000652:	4611      	mov	r1, r2
 8000654:	461a      	mov	r2, r3
 8000656:	4623      	mov	r3, r4
 8000658:	80fb      	strh	r3, [r7, #6]
 800065a:	4603      	mov	r3, r0
 800065c:	80bb      	strh	r3, [r7, #4]
 800065e:	460b      	mov	r3, r1
 8000660:	807b      	strh	r3, [r7, #2]
 8000662:	4613      	mov	r3, r2
 8000664:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000666:	2200      	movs	r2, #0
 8000668:	2110      	movs	r1, #16
 800066a:	4824      	ldr	r0, [pc, #144]	@ (80006fc <ST7789_SetAddressWindow+0xb4>)
 800066c:	f002 f8ee 	bl	800284c <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	82fb      	strh	r3, [r7, #22]
 8000674:	887b      	ldrh	r3, [r7, #2]
 8000676:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000678:	88bb      	ldrh	r3, [r7, #4]
 800067a:	827b      	strh	r3, [r7, #18]
 800067c:	883b      	ldrh	r3, [r7, #0]
 800067e:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000680:	202a      	movs	r0, #42	@ 0x2a
 8000682:	f7ff ff1f 	bl	80004c4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000686:	8afb      	ldrh	r3, [r7, #22]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29b      	uxth	r3, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	733b      	strb	r3, [r7, #12]
 8000690:	8afb      	ldrh	r3, [r7, #22]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	737b      	strb	r3, [r7, #13]
 8000696:	8abb      	ldrh	r3, [r7, #20]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	b29b      	uxth	r3, r3
 800069c:	b2db      	uxtb	r3, r3
 800069e:	73bb      	strb	r3, [r7, #14]
 80006a0:	8abb      	ldrh	r3, [r7, #20]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2104      	movs	r1, #4
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff2d 	bl	800050c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80006b2:	202b      	movs	r0, #43	@ 0x2b
 80006b4:	f7ff ff06 	bl	80004c4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80006b8:	8a7b      	ldrh	r3, [r7, #18]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
 80006c2:	8a7b      	ldrh	r3, [r7, #18]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	727b      	strb	r3, [r7, #9]
 80006c8:	8a3b      	ldrh	r3, [r7, #16]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	72bb      	strb	r3, [r7, #10]
 80006d2:	8a3b      	ldrh	r3, [r7, #16]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2104      	movs	r1, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff14 	bl	800050c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80006e4:	202c      	movs	r0, #44	@ 0x2c
 80006e6:	f7ff feed 	bl	80004c4 <ST7789_WriteCommand>
	ST7789_UnSelect();
 80006ea:	2201      	movs	r2, #1
 80006ec:	2110      	movs	r1, #16
 80006ee:	4803      	ldr	r0, [pc, #12]	@ (80006fc <ST7789_SetAddressWindow+0xb4>)
 80006f0:	f002 f8ac 	bl	800284c <HAL_GPIO_WritePin>
}
 80006f4:	bf00      	nop
 80006f6:	371c      	adds	r7, #28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	40020000 	.word	0x40020000

08000700 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b08b      	sub	sp, #44	@ 0x2c
 8000704:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8000706:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800070a:	2100      	movs	r1, #0
 800070c:	484a      	ldr	r0, [pc, #296]	@ (8000838 <ST7789_Init+0x138>)
 800070e:	f003 f8d7 	bl	80038c0 <memset>
	#endif
	HAL_Delay(10);
 8000712:	200a      	movs	r0, #10
 8000714:	f001 fa70 	bl	8001bf8 <HAL_Delay>
    ST7789_RST_Clr();
 8000718:	2200      	movs	r2, #0
 800071a:	2108      	movs	r1, #8
 800071c:	4847      	ldr	r0, [pc, #284]	@ (800083c <ST7789_Init+0x13c>)
 800071e:	f002 f895 	bl	800284c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000722:	200a      	movs	r0, #10
 8000724:	f001 fa68 	bl	8001bf8 <HAL_Delay>
    ST7789_RST_Set();
 8000728:	2201      	movs	r2, #1
 800072a:	2108      	movs	r1, #8
 800072c:	4843      	ldr	r0, [pc, #268]	@ (800083c <ST7789_Init+0x13c>)
 800072e:	f002 f88d 	bl	800284c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000732:	2014      	movs	r0, #20
 8000734:	f001 fa60 	bl	8001bf8 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000738:	203a      	movs	r0, #58	@ 0x3a
 800073a:	f7ff fec3 	bl	80004c4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800073e:	2055      	movs	r0, #85	@ 0x55
 8000740:	f7ff ff32 	bl	80005a8 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8000744:	20b2      	movs	r0, #178	@ 0xb2
 8000746:	f7ff febd 	bl	80004c4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800074a:	4a3d      	ldr	r2, [pc, #244]	@ (8000840 <ST7789_Init+0x140>)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000754:	6018      	str	r0, [r3, #0]
 8000756:	3304      	adds	r3, #4
 8000758:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2105      	movs	r1, #5
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fed3 	bl	800050c <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff42 	bl	80005f0 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 800076c:	20b7      	movs	r0, #183	@ 0xb7
 800076e:	f7ff fea9 	bl	80004c4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8000772:	2035      	movs	r0, #53	@ 0x35
 8000774:	f7ff ff18 	bl	80005a8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000778:	20bb      	movs	r0, #187	@ 0xbb
 800077a:	f7ff fea3 	bl	80004c4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800077e:	2019      	movs	r0, #25
 8000780:	f7ff ff12 	bl	80005a8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8000784:	20c0      	movs	r0, #192	@ 0xc0
 8000786:	f7ff fe9d 	bl	80004c4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800078a:	202c      	movs	r0, #44	@ 0x2c
 800078c:	f7ff ff0c 	bl	80005a8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000790:	20c2      	movs	r0, #194	@ 0xc2
 8000792:	f7ff fe97 	bl	80004c4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff ff06 	bl	80005a8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 800079c:	20c3      	movs	r0, #195	@ 0xc3
 800079e:	f7ff fe91 	bl	80004c4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80007a2:	2012      	movs	r0, #18
 80007a4:	f7ff ff00 	bl	80005a8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80007a8:	20c4      	movs	r0, #196	@ 0xc4
 80007aa:	f7ff fe8b 	bl	80004c4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80007ae:	2020      	movs	r0, #32
 80007b0:	f7ff fefa 	bl	80005a8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80007b4:	20c6      	movs	r0, #198	@ 0xc6
 80007b6:	f7ff fe85 	bl	80004c4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80007ba:	200f      	movs	r0, #15
 80007bc:	f7ff fef4 	bl	80005a8 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80007c0:	20d0      	movs	r0, #208	@ 0xd0
 80007c2:	f7ff fe7f 	bl	80004c4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80007c6:	20a4      	movs	r0, #164	@ 0xa4
 80007c8:	f7ff feee 	bl	80005a8 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80007cc:	20a1      	movs	r0, #161	@ 0xa1
 80007ce:	f7ff feeb 	bl	80005a8 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80007d2:	20e0      	movs	r0, #224	@ 0xe0
 80007d4:	f7ff fe76 	bl	80004c4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <ST7789_Init+0x144>)
 80007da:	f107 0410 	add.w	r4, r7, #16
 80007de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e0:	c407      	stmia	r4!, {r0, r1, r2}
 80007e2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	210e      	movs	r1, #14
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fe8e 	bl	800050c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80007f0:	20e1      	movs	r0, #225	@ 0xe1
 80007f2:	f7ff fe67 	bl	80004c4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <ST7789_Init+0x148>)
 80007f8:	463c      	mov	r4, r7
 80007fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007fc:	c407      	stmia	r4!, {r0, r1, r2}
 80007fe:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000800:	463b      	mov	r3, r7
 8000802:	210e      	movs	r1, #14
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fe81 	bl	800050c <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800080a:	2021      	movs	r0, #33	@ 0x21
 800080c:	f7ff fe5a 	bl	80004c4 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000810:	2011      	movs	r0, #17
 8000812:	f7ff fe57 	bl	80004c4 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000816:	2013      	movs	r0, #19
 8000818:	f7ff fe54 	bl	80004c4 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 800081c:	2029      	movs	r0, #41	@ 0x29
 800081e:	f7ff fe51 	bl	80004c4 <ST7789_WriteCommand>

	HAL_Delay(50);
 8000822:	2032      	movs	r0, #50	@ 0x32
 8000824:	f001 f9e8 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000828:	2000      	movs	r0, #0
 800082a:	f000 f80f 	bl	800084c <ST7789_Fill_Color>
}
 800082e:	bf00      	nop
 8000830:	372c      	adds	r7, #44	@ 0x2c
 8000832:	46bd      	mov	sp, r7
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	bf00      	nop
 8000838:	20000044 	.word	0x20000044
 800083c:	40020000 	.word	0x40020000
 8000840:	08003930 	.word	0x08003930
 8000844:	08003938 	.word	0x08003938
 8000848:	08003948 	.word	0x08003948

0800084c <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8000856:	f240 133f 	movw	r3, #319	@ 0x13f
 800085a:	22ef      	movs	r2, #239	@ 0xef
 800085c:	2100      	movs	r1, #0
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff fef2 	bl	8000648 <ST7789_SetAddressWindow>
	ST7789_Select();
 8000864:	2200      	movs	r2, #0
 8000866:	2110      	movs	r1, #16
 8000868:	4810      	ldr	r0, [pc, #64]	@ (80008ac <ST7789_Fill_Color+0x60>)
 800086a:	f001 ffef 	bl	800284c <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	81fb      	strh	r3, [r7, #14]
 8000872:	e00e      	b.n	8000892 <ST7789_Fill_Color+0x46>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8000874:	88fb      	ldrh	r3, [r7, #6]
 8000876:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <ST7789_Fill_Color+0x64>)
 800087e:	f003 f81f 	bl	80038c0 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8000882:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8000886:	480a      	ldr	r0, [pc, #40]	@ (80008b0 <ST7789_Fill_Color+0x64>)
 8000888:	f7ff fe40 	bl	800050c <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	3301      	adds	r3, #1
 8000890:	81fb      	strh	r3, [r7, #14]
 8000892:	89fb      	ldrh	r3, [r7, #14]
 8000894:	2b3f      	cmp	r3, #63	@ 0x3f
 8000896:	d9ed      	bls.n	8000874 <ST7789_Fill_Color+0x28>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8000898:	2201      	movs	r2, #1
 800089a:	2110      	movs	r1, #16
 800089c:	4803      	ldr	r0, [pc, #12]	@ (80008ac <ST7789_Fill_Color+0x60>)
 800089e:	f001 ffd5 	bl	800284c <HAL_GPIO_WritePin>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40020000 	.word	0x40020000
 80008b0:	20000044 	.word	0x20000044

080008b4 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]
 80008be:	460b      	mov	r3, r1
 80008c0:	80bb      	strh	r3, [r7, #4]
 80008c2:	4613      	mov	r3, r2
 80008c4:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	2bef      	cmp	r3, #239	@ 0xef
 80008ca:	d822      	bhi.n	8000912 <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80008cc:	88bb      	ldrh	r3, [r7, #4]
 80008ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80008d2:	d21e      	bcs.n	8000912 <ST7789_DrawPixel+0x5e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 80008d4:	88bb      	ldrh	r3, [r7, #4]
 80008d6:	88fa      	ldrh	r2, [r7, #6]
 80008d8:	88b9      	ldrh	r1, [r7, #4]
 80008da:	88f8      	ldrh	r0, [r7, #6]
 80008dc:	f7ff feb4 	bl	8000648 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 80008e0:	887b      	ldrh	r3, [r7, #2]
 80008e2:	0a1b      	lsrs	r3, r3, #8
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	733b      	strb	r3, [r7, #12]
 80008ea:	887b      	ldrh	r3, [r7, #2]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80008f0:	2200      	movs	r2, #0
 80008f2:	2110      	movs	r1, #16
 80008f4:	4809      	ldr	r0, [pc, #36]	@ (800091c <ST7789_DrawPixel+0x68>)
 80008f6:	f001 ffa9 	bl	800284c <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2102      	movs	r1, #2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fe03 	bl	800050c <ST7789_WriteData>
	ST7789_UnSelect();
 8000906:	2201      	movs	r2, #1
 8000908:	2110      	movs	r1, #16
 800090a:	4804      	ldr	r0, [pc, #16]	@ (800091c <ST7789_DrawPixel+0x68>)
 800090c:	f001 ff9e 	bl	800284c <HAL_GPIO_WritePin>
 8000910:	e000      	b.n	8000914 <ST7789_DrawPixel+0x60>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000912:	bf00      	nop
}
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40020000 	.word	0x40020000

08000920 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	4604      	mov	r4, r0
 8000928:	4608      	mov	r0, r1
 800092a:	4611      	mov	r1, r2
 800092c:	461a      	mov	r2, r3
 800092e:	4623      	mov	r3, r4
 8000930:	80fb      	strh	r3, [r7, #6]
 8000932:	4603      	mov	r3, r0
 8000934:	80bb      	strh	r3, [r7, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	807b      	strh	r3, [r7, #2]
 800093a:	4613      	mov	r3, r2
 800093c:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 800093e:	883a      	ldrh	r2, [r7, #0]
 8000940:	88bb      	ldrh	r3, [r7, #4]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000948:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800094c:	8879      	ldrh	r1, [r7, #2]
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	1acb      	subs	r3, r1, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	bfb8      	it	lt
 8000956:	425b      	neglt	r3, r3
 8000958:	429a      	cmp	r2, r3
 800095a:	bfcc      	ite	gt
 800095c:	2301      	movgt	r3, #1
 800095e:	2300      	movle	r3, #0
 8000960:	b2db      	uxtb	r3, r3
 8000962:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8000964:	8a7b      	ldrh	r3, [r7, #18]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00b      	beq.n	8000982 <ST7789_DrawLine+0x62>
		swap = x0;
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 800096e:	88bb      	ldrh	r3, [r7, #4]
 8000970:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 8000972:	8a3b      	ldrh	r3, [r7, #16]
 8000974:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8000976:	887b      	ldrh	r3, [r7, #2]
 8000978:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 800097a:	883b      	ldrh	r3, [r7, #0]
 800097c:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 800097e:	8a3b      	ldrh	r3, [r7, #16]
 8000980:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8000982:	88fa      	ldrh	r2, [r7, #6]
 8000984:	887b      	ldrh	r3, [r7, #2]
 8000986:	429a      	cmp	r2, r3
 8000988:	d90b      	bls.n	80009a2 <ST7789_DrawLine+0x82>
		swap = x0;
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 800098e:	887b      	ldrh	r3, [r7, #2]
 8000990:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 8000992:	8a3b      	ldrh	r3, [r7, #16]
 8000994:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8000996:	88bb      	ldrh	r3, [r7, #4]
 8000998:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 800099a:	883b      	ldrh	r3, [r7, #0]
 800099c:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 800099e:	8a3b      	ldrh	r3, [r7, #16]
 80009a0:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80009a2:	887a      	ldrh	r2, [r7, #2]
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 80009ac:	883a      	ldrh	r2, [r7, #0]
 80009ae:	88bb      	ldrh	r3, [r7, #4]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bfb8      	it	lt
 80009b6:	425b      	neglt	r3, r3
 80009b8:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 80009ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009be:	0fda      	lsrs	r2, r3, #31
 80009c0:	4413      	add	r3, r2
 80009c2:	105b      	asrs	r3, r3, #1
 80009c4:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 80009c6:	88ba      	ldrh	r2, [r7, #4]
 80009c8:	883b      	ldrh	r3, [r7, #0]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d202      	bcs.n	80009d4 <ST7789_DrawLine+0xb4>
        ystep = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	82bb      	strh	r3, [r7, #20]
 80009d2:	e028      	b.n	8000a26 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 80009d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009d8:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 80009da:	e024      	b.n	8000a26 <ST7789_DrawLine+0x106>
        if (steep) {
 80009dc:	8a7b      	ldrh	r3, [r7, #18]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 80009e2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80009e4:	88f9      	ldrh	r1, [r7, #6]
 80009e6:	88bb      	ldrh	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff63 	bl	80008b4 <ST7789_DrawPixel>
 80009ee:	e005      	b.n	80009fc <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 80009f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80009f2:	88b9      	ldrh	r1, [r7, #4]
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff5c 	bl	80008b4 <ST7789_DrawPixel>
        }
        err -= dy;
 80009fc:	8afa      	ldrh	r2, [r7, #22]
 80009fe:	89bb      	ldrh	r3, [r7, #12]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8000a06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da08      	bge.n	8000a20 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8000a0e:	8aba      	ldrh	r2, [r7, #20]
 8000a10:	88bb      	ldrh	r3, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000a16:	8afa      	ldrh	r2, [r7, #22]
 8000a18:	89fb      	ldrh	r3, [r7, #14]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	3301      	adds	r3, #1
 8000a24:	80fb      	strh	r3, [r7, #6]
 8000a26:	88fa      	ldrh	r2, [r7, #6]
 8000a28:	887b      	ldrh	r3, [r7, #2]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d9d6      	bls.n	80009dc <ST7789_DrawLine+0xbc>
        }
    }
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}

08000a38 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	4604      	mov	r4, r0
 8000a40:	4608      	mov	r0, r1
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	4623      	mov	r3, r4
 8000a48:	80fb      	strh	r3, [r7, #6]
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80bb      	strh	r3, [r7, #4]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	807b      	strh	r3, [r7, #2]
 8000a52:	4613      	mov	r3, r2
 8000a54:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000a56:	2200      	movs	r2, #0
 8000a58:	2110      	movs	r1, #16
 8000a5a:	4818      	ldr	r0, [pc, #96]	@ (8000abc <ST7789_DrawRectangle+0x84>)
 8000a5c:	f001 fef6 	bl	800284c <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8000a60:	88bc      	ldrh	r4, [r7, #4]
 8000a62:	887a      	ldrh	r2, [r7, #2]
 8000a64:	88b9      	ldrh	r1, [r7, #4]
 8000a66:	88f8      	ldrh	r0, [r7, #6]
 8000a68:	8b3b      	ldrh	r3, [r7, #24]
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	4623      	mov	r3, r4
 8000a6e:	f7ff ff57 	bl	8000920 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 8000a72:	883c      	ldrh	r4, [r7, #0]
 8000a74:	88fa      	ldrh	r2, [r7, #6]
 8000a76:	88b9      	ldrh	r1, [r7, #4]
 8000a78:	88f8      	ldrh	r0, [r7, #6]
 8000a7a:	8b3b      	ldrh	r3, [r7, #24]
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	4623      	mov	r3, r4
 8000a80:	f7ff ff4e 	bl	8000920 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 8000a84:	883c      	ldrh	r4, [r7, #0]
 8000a86:	887a      	ldrh	r2, [r7, #2]
 8000a88:	8839      	ldrh	r1, [r7, #0]
 8000a8a:	88f8      	ldrh	r0, [r7, #6]
 8000a8c:	8b3b      	ldrh	r3, [r7, #24]
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	4623      	mov	r3, r4
 8000a92:	f7ff ff45 	bl	8000920 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 8000a96:	883c      	ldrh	r4, [r7, #0]
 8000a98:	887a      	ldrh	r2, [r7, #2]
 8000a9a:	88b9      	ldrh	r1, [r7, #4]
 8000a9c:	8878      	ldrh	r0, [r7, #2]
 8000a9e:	8b3b      	ldrh	r3, [r7, #24]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	4623      	mov	r3, r4
 8000aa4:	f7ff ff3c 	bl	8000920 <ST7789_DrawLine>
	ST7789_UnSelect();
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2110      	movs	r1, #16
 8000aac:	4803      	ldr	r0, [pc, #12]	@ (8000abc <ST7789_DrawRectangle+0x84>)
 8000aae:	f001 fecd 	bl	800284c <HAL_GPIO_WritePin>
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40020000 	.word	0x40020000

08000ac0 <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	4608      	mov	r0, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	461a      	mov	r2, r3
 8000ace:	4623      	mov	r3, r4
 8000ad0:	80fb      	strh	r3, [r7, #6]
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80bb      	strh	r3, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	70fb      	strb	r3, [r7, #3]
 8000ada:	4613      	mov	r3, r2
 8000adc:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8000ade:	78fb      	ldrb	r3, [r7, #3]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	f1c3 0301 	rsb	r3, r3, #1
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	03d2      	lsls	r2, r2, #15
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 8000b06:	2200      	movs	r2, #0
 8000b08:	2110      	movs	r1, #16
 8000b0a:	485f      	ldr	r0, [pc, #380]	@ (8000c88 <ST7789_DrawCircle+0x1c8>)
 8000b0c:	f001 fe9e 	bl	800284c <HAL_GPIO_WritePin>
	ST7789_DrawPixel(x0, y0 + r, color);
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	88bb      	ldrh	r3, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	b299      	uxth	r1, r3
 8000b1a:	883a      	ldrh	r2, [r7, #0]
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fec8 	bl	80008b4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	88ba      	ldrh	r2, [r7, #4]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	883a      	ldrh	r2, [r7, #0]
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff febe 	bl	80008b4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	4413      	add	r3, r2
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	883a      	ldrh	r2, [r7, #0]
 8000b44:	88b9      	ldrh	r1, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff feb4 	bl	80008b4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	88fa      	ldrh	r2, [r7, #6]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	883a      	ldrh	r2, [r7, #0]
 8000b58:	88b9      	ldrh	r1, [r7, #4]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff feaa 	bl	80008b4 <ST7789_DrawPixel>

	while (x < y) {
 8000b60:	e081      	b.n	8000c66 <ST7789_DrawCircle+0x1a6>
		if (f >= 0) {
 8000b62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0e      	blt.n	8000b88 <ST7789_DrawCircle+0xc8>
			y--;
 8000b6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	3b01      	subs	r3, #1
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	3302      	adds	r3, #2
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000b7e:	8afa      	ldrh	r2, [r7, #22]
 8000b80:	8a7b      	ldrh	r3, [r7, #18]
 8000b82:	4413      	add	r3, r2
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000b88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000b94:	8abb      	ldrh	r3, [r7, #20]
 8000b96:	3302      	adds	r3, #2
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000b9c:	8afa      	ldrh	r2, [r7, #22]
 8000b9e:	8abb      	ldrh	r3, [r7, #20]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8000ba6:	8a3a      	ldrh	r2, [r7, #16]
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	4413      	add	r3, r2
 8000bac:	b298      	uxth	r0, r3
 8000bae:	89fa      	ldrh	r2, [r7, #14]
 8000bb0:	88bb      	ldrh	r3, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	883a      	ldrh	r2, [r7, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f7ff fe7b 	bl	80008b4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8000bbe:	8a3b      	ldrh	r3, [r7, #16]
 8000bc0:	88fa      	ldrh	r2, [r7, #6]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b298      	uxth	r0, r3
 8000bc6:	89fa      	ldrh	r2, [r7, #14]
 8000bc8:	88bb      	ldrh	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	883a      	ldrh	r2, [r7, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f7ff fe6f 	bl	80008b4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 8000bd6:	8a3a      	ldrh	r2, [r7, #16]
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b298      	uxth	r0, r3
 8000bde:	89fb      	ldrh	r3, [r7, #14]
 8000be0:	88ba      	ldrh	r2, [r7, #4]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	883a      	ldrh	r2, [r7, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f7ff fe63 	bl	80008b4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 8000bee:	8a3b      	ldrh	r3, [r7, #16]
 8000bf0:	88fa      	ldrh	r2, [r7, #6]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	b298      	uxth	r0, r3
 8000bf6:	89fb      	ldrh	r3, [r7, #14]
 8000bf8:	88ba      	ldrh	r2, [r7, #4]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	883a      	ldrh	r2, [r7, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f7ff fe57 	bl	80008b4 <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 8000c06:	89fa      	ldrh	r2, [r7, #14]
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b298      	uxth	r0, r3
 8000c0e:	8a3a      	ldrh	r2, [r7, #16]
 8000c10:	88bb      	ldrh	r3, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	883a      	ldrh	r2, [r7, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f7ff fe4b 	bl	80008b4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8000c1e:	89fb      	ldrh	r3, [r7, #14]
 8000c20:	88fa      	ldrh	r2, [r7, #6]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	b298      	uxth	r0, r3
 8000c26:	8a3a      	ldrh	r2, [r7, #16]
 8000c28:	88bb      	ldrh	r3, [r7, #4]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	883a      	ldrh	r2, [r7, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f7ff fe3f 	bl	80008b4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 8000c36:	89fa      	ldrh	r2, [r7, #14]
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b298      	uxth	r0, r3
 8000c3e:	8a3b      	ldrh	r3, [r7, #16]
 8000c40:	88ba      	ldrh	r2, [r7, #4]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	883a      	ldrh	r2, [r7, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f7ff fe33 	bl	80008b4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8000c4e:	89fb      	ldrh	r3, [r7, #14]
 8000c50:	88fa      	ldrh	r2, [r7, #6]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	b298      	uxth	r0, r3
 8000c56:	8a3b      	ldrh	r3, [r7, #16]
 8000c58:	88ba      	ldrh	r2, [r7, #4]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	883a      	ldrh	r2, [r7, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f7ff fe27 	bl	80008b4 <ST7789_DrawPixel>
	while (x < y) {
 8000c66:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	f6ff af77 	blt.w	8000b62 <ST7789_DrawCircle+0xa2>
	}
	ST7789_UnSelect();
 8000c74:	2201      	movs	r2, #1
 8000c76:	2110      	movs	r1, #16
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <ST7789_DrawCircle+0x1c8>)
 8000c7a:	f001 fde7 	bl	800284c <HAL_GPIO_WritePin>
}
 8000c7e:	bf00      	nop
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd90      	pop	{r4, r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40020000 	.word	0x40020000

08000c8c <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	807b      	strh	r3, [r7, #2]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	2bef      	cmp	r3, #239	@ 0xef
 8000cae:	d833      	bhi.n	8000d18 <ST7789_DrawImage+0x8c>
 8000cb0:	88bb      	ldrh	r3, [r7, #4]
 8000cb2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000cb6:	d22f      	bcs.n	8000d18 <ST7789_DrawImage+0x8c>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8000cb8:	88fa      	ldrh	r2, [r7, #6]
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	2bf0      	cmp	r3, #240	@ 0xf0
 8000cc0:	dc2c      	bgt.n	8000d1c <ST7789_DrawImage+0x90>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 8000cc2:	88ba      	ldrh	r2, [r7, #4]
 8000cc4:	883b      	ldrh	r3, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ccc:	dc28      	bgt.n	8000d20 <ST7789_DrawImage+0x94>
		return;

	ST7789_Select();
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2110      	movs	r1, #16
 8000cd2:	4815      	ldr	r0, [pc, #84]	@ (8000d28 <ST7789_DrawImage+0x9c>)
 8000cd4:	f001 fdba 	bl	800284c <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000cd8:	88fa      	ldrh	r2, [r7, #6]
 8000cda:	887b      	ldrh	r3, [r7, #2]
 8000cdc:	4413      	add	r3, r2
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	b29c      	uxth	r4, r3
 8000ce4:	88ba      	ldrh	r2, [r7, #4]
 8000ce6:	883b      	ldrh	r3, [r7, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	3b01      	subs	r3, #1
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	88b9      	ldrh	r1, [r7, #4]
 8000cf2:	88f8      	ldrh	r0, [r7, #6]
 8000cf4:	4622      	mov	r2, r4
 8000cf6:	f7ff fca7 	bl	8000648 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8000cfa:	887b      	ldrh	r3, [r7, #2]
 8000cfc:	883a      	ldrh	r2, [r7, #0]
 8000cfe:	fb02 f303 	mul.w	r3, r2, r3
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4619      	mov	r1, r3
 8000d06:	69b8      	ldr	r0, [r7, #24]
 8000d08:	f7ff fc00 	bl	800050c <ST7789_WriteData>
	ST7789_UnSelect();
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2110      	movs	r1, #16
 8000d10:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <ST7789_DrawImage+0x9c>)
 8000d12:	f001 fd9b 	bl	800284c <HAL_GPIO_WritePin>
 8000d16:	e004      	b.n	8000d22 <ST7789_DrawImage+0x96>
		return;
 8000d18:	bf00      	nop
 8000d1a:	e002      	b.n	8000d22 <ST7789_DrawImage+0x96>
		return;
 8000d1c:	bf00      	nop
 8000d1e:	e000      	b.n	8000d22 <ST7789_DrawImage+0x96>
		return;
 8000d20:	bf00      	nop
}
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd90      	pop	{r4, r7, pc}
 8000d28:	40020000 	.word	0x40020000

08000d2c <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b088      	sub	sp, #32
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000d42:	2200      	movs	r2, #0
 8000d44:	2110      	movs	r1, #16
 8000d46:	4837      	ldr	r0, [pc, #220]	@ (8000e24 <ST7789_WriteChar+0xf8>)
 8000d48:	f001 fd80 	bl	800284c <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000d4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d50:	461a      	mov	r2, r3
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	4413      	add	r3, r2
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000d60:	4619      	mov	r1, r3
 8000d62:	88bb      	ldrh	r3, [r7, #4]
 8000d64:	440b      	add	r3, r1
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	88b9      	ldrh	r1, [r7, #4]
 8000d6e:	88f8      	ldrh	r0, [r7, #6]
 8000d70:	f7ff fc6a 	bl	8000648 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	e041      	b.n	8000dfe <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8000d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	3b20      	subs	r3, #32
 8000d80:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000d84:	fb01 f303 	mul.w	r3, r1, r3
 8000d88:	4619      	mov	r1, r3
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	440b      	add	r3, r1
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	e027      	b.n	8000dec <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00e      	beq.n	8000dca <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000dac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000dae:	0a1b      	lsrs	r3, r3, #8
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	743b      	strb	r3, [r7, #16]
 8000db6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fba2 	bl	800050c <ST7789_WriteData>
 8000dc8:	e00d      	b.n	8000de6 <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000dca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	733b      	strb	r3, [r7, #12]
 8000dd4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	2102      	movs	r1, #2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fb93 	bl	800050c <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	3301      	adds	r3, #1
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000df0:	461a      	mov	r2, r3
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d3d1      	bcc.n	8000d9c <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e02:	461a      	mov	r2, r3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d3b7      	bcc.n	8000d7a <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <ST7789_WriteChar+0xf8>)
 8000e10:	f001 fd1c 	bl	800284c <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e1e:	b002      	add	sp, #8
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40020000 	.word	0x40020000

08000e28 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000e28:	b082      	sub	sp, #8
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af04      	add	r7, sp, #16
 8000e30:	603a      	str	r2, [r7, #0]
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	4603      	mov	r3, r0
 8000e36:	80fb      	strh	r3, [r7, #6]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4822      	ldr	r0, [pc, #136]	@ (8000ecc <ST7789_WriteString+0xa4>)
 8000e42:	f001 fd03 	bl	800284c <HAL_GPIO_WritePin>
	while (*str) {
 8000e46:	e02e      	b.n	8000ea6 <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	7d3a      	ldrb	r2, [r7, #20]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	2bef      	cmp	r3, #239	@ 0xef
 8000e50:	dd14      	ble.n	8000e7c <ST7789_WriteString+0x54>
			x = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8000e56:	7d7b      	ldrb	r3, [r7, #21]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	7d7a      	ldrb	r2, [r7, #21]
 8000e64:	4413      	add	r3, r2
 8000e66:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e6a:	da21      	bge.n	8000eb0 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b20      	cmp	r3, #32
 8000e72:	d103      	bne.n	8000e7c <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	603b      	str	r3, [r7, #0]
				continue;
 8000e7a:	e014      	b.n	8000ea6 <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	88f8      	ldrh	r0, [r7, #6]
 8000e84:	8c3b      	ldrh	r3, [r7, #32]
 8000e86:	9302      	str	r3, [sp, #8]
 8000e88:	8bbb      	ldrh	r3, [r7, #28]
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f7ff ff4b 	bl	8000d2c <ST7789_WriteChar>
		x += font.width;
 8000e96:	7d3b      	ldrb	r3, [r7, #20]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	80fb      	strh	r3, [r7, #6]
		str++;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1cc      	bne.n	8000e48 <ST7789_WriteString+0x20>
 8000eae:	e000      	b.n	8000eb2 <ST7789_WriteString+0x8a>
				break;
 8000eb0:	bf00      	nop
	}
	ST7789_UnSelect();
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <ST7789_WriteString+0xa4>)
 8000eb8:	f001 fcc8 	bl	800284c <HAL_GPIO_WritePin>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec6:	b002      	add	sp, #8
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	4623      	mov	r3, r4
 8000ee0:	80fb      	strh	r3, [r7, #6]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80bb      	strh	r3, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	807b      	strh	r3, [r7, #2]
 8000eea:	4613      	mov	r3, r2
 8000eec:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4823      	ldr	r0, [pc, #140]	@ (8000f80 <ST7789_DrawFilledRectangle+0xb0>)
 8000ef4:	f001 fcaa 	bl	800284c <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	2bef      	cmp	r3, #239	@ 0xef
 8000efc:	d83c      	bhi.n	8000f78 <ST7789_DrawFilledRectangle+0xa8>
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f04:	d238      	bcs.n	8000f78 <ST7789_DrawFilledRectangle+0xa8>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8000f06:	88fa      	ldrh	r2, [r7, #6]
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	2bef      	cmp	r3, #239	@ 0xef
 8000f0e:	dd03      	ble.n	8000f18 <ST7789_DrawFilledRectangle+0x48>
		w = ST7789_WIDTH - x;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000f16:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8000f18:	88ba      	ldrh	r2, [r7, #4]
 8000f1a:	883b      	ldrh	r3, [r7, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f22:	db03      	blt.n	8000f2c <ST7789_DrawFilledRectangle+0x5c>
		h = ST7789_HEIGHT - y;
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000f2a:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e017      	b.n	8000f62 <ST7789_DrawFilledRectangle+0x92>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	b299      	uxth	r1, r3
 8000f3c:	88fa      	ldrh	r2, [r7, #6]
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	4413      	add	r3, r2
 8000f42:	b29c      	uxth	r4, r3
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	88f8      	ldrh	r0, [r7, #6]
 8000f50:	8c3b      	ldrh	r3, [r7, #32]
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	4613      	mov	r3, r2
 8000f56:	4622      	mov	r2, r4
 8000f58:	f7ff fce2 	bl	8000920 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	883a      	ldrh	r2, [r7, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d2e2      	bcs.n	8000f32 <ST7789_DrawFilledRectangle+0x62>
	}
	ST7789_UnSelect();
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <ST7789_DrawFilledRectangle+0xb0>)
 8000f72:	f001 fc6b 	bl	800284c <HAL_GPIO_WritePin>
 8000f76:	e000      	b.n	8000f7a <ST7789_DrawFilledRectangle+0xaa>
		return;
 8000f78:	bf00      	nop
}
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd90      	pop	{r4, r7, pc}
 8000f80:	40020000 	.word	0x40020000

08000f84 <ST7789_DrawTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the lines
 * @return  none
 */
void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	4611      	mov	r1, r2
 8000f90:	461a      	mov	r2, r3
 8000f92:	4623      	mov	r3, r4
 8000f94:	80fb      	strh	r3, [r7, #6]
 8000f96:	4603      	mov	r3, r0
 8000f98:	80bb      	strh	r3, [r7, #4]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	807b      	strh	r3, [r7, #2]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	4813      	ldr	r0, [pc, #76]	@ (8000ff4 <ST7789_DrawTriangle+0x70>)
 8000fa8:	f001 fc50 	bl	800284c <HAL_GPIO_WritePin>
	/* Draw lines */
	ST7789_DrawLine(x1, y1, x2, y2, color);
 8000fac:	883c      	ldrh	r4, [r7, #0]
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	88b9      	ldrh	r1, [r7, #4]
 8000fb2:	88f8      	ldrh	r0, [r7, #6]
 8000fb4:	8c3b      	ldrh	r3, [r7, #32]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4623      	mov	r3, r4
 8000fba:	f7ff fcb1 	bl	8000920 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y2, x3, y3, color);
 8000fbe:	8bbc      	ldrh	r4, [r7, #28]
 8000fc0:	8b3a      	ldrh	r2, [r7, #24]
 8000fc2:	8839      	ldrh	r1, [r7, #0]
 8000fc4:	8878      	ldrh	r0, [r7, #2]
 8000fc6:	8c3b      	ldrh	r3, [r7, #32]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	4623      	mov	r3, r4
 8000fcc:	f7ff fca8 	bl	8000920 <ST7789_DrawLine>
	ST7789_DrawLine(x3, y3, x1, y1, color);
 8000fd0:	88bc      	ldrh	r4, [r7, #4]
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	8bb9      	ldrh	r1, [r7, #28]
 8000fd6:	8b38      	ldrh	r0, [r7, #24]
 8000fd8:	8c3b      	ldrh	r3, [r7, #32]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4623      	mov	r3, r4
 8000fde:	f7ff fc9f 	bl	8000920 <ST7789_DrawLine>
	ST7789_UnSelect();
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <ST7789_DrawTriangle+0x70>)
 8000fe8:	f001 fc30 	bl	800284c <HAL_GPIO_WritePin>
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd90      	pop	{r4, r7, pc}
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b08d      	sub	sp, #52	@ 0x34
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4604      	mov	r4, r0
 8001000:	4608      	mov	r0, r1
 8001002:	4611      	mov	r1, r2
 8001004:	461a      	mov	r2, r3
 8001006:	4623      	mov	r3, r4
 8001008:	80fb      	strh	r3, [r7, #6]
 800100a:	4603      	mov	r3, r0
 800100c:	80bb      	strh	r3, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	807b      	strh	r3, [r7, #2]
 8001012:	4613      	mov	r3, r2
 8001014:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001016:	2200      	movs	r2, #0
 8001018:	2110      	movs	r1, #16
 800101a:	485d      	ldr	r0, [pc, #372]	@ (8001190 <ST7789_DrawFilledTriangle+0x198>)
 800101c:	f001 fc16 	bl	800284c <HAL_GPIO_WritePin>
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8001020:	2300      	movs	r3, #0
 8001022:	823b      	strh	r3, [r7, #16]
 8001024:	2300      	movs	r3, #0
 8001026:	81fb      	strh	r3, [r7, #14]
 8001028:	2300      	movs	r3, #0
 800102a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800102c:	2300      	movs	r3, #0
 800102e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001030:	2300      	movs	r3, #0
 8001032:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001034:	2300      	movs	r3, #0
 8001036:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8001038:	2300      	movs	r3, #0
 800103a:	83fb      	strh	r3, [r7, #30]
 800103c:	2300      	movs	r3, #0
 800103e:	83bb      	strh	r3, [r7, #28]
 8001040:	2300      	movs	r3, #0
 8001042:	837b      	strh	r3, [r7, #26]
 8001044:	2300      	movs	r3, #0
 8001046:	833b      	strh	r3, [r7, #24]
 8001048:	2300      	movs	r3, #0
 800104a:	82fb      	strh	r3, [r7, #22]
 800104c:	2300      	movs	r3, #0
 800104e:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);
 8001054:	887a      	ldrh	r2, [r7, #2]
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	bfb8      	it	lt
 800105e:	425b      	neglt	r3, r3
 8001060:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8001062:	883a      	ldrh	r2, [r7, #0]
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	bfb8      	it	lt
 800106c:	425b      	neglt	r3, r3
 800106e:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	84fb      	strh	r3, [r7, #38]	@ 0x26
	y = y1;
 8001074:	88bb      	ldrh	r3, [r7, #4]
 8001076:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if (x2 >= x1) {
 8001078:	887a      	ldrh	r2, [r7, #2]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	429a      	cmp	r2, r3
 800107e:	d304      	bcc.n	800108a <ST7789_DrawFilledTriangle+0x92>
		xinc1 = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	843b      	strh	r3, [r7, #32]
 8001088:	e005      	b.n	8001096 <ST7789_DrawFilledTriangle+0x9e>
	}
	else {
		xinc1 = -1;
 800108a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800108e:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = -1;
 8001090:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001094:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8001096:	883a      	ldrh	r2, [r7, #0]
 8001098:	88bb      	ldrh	r3, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	d304      	bcc.n	80010a8 <ST7789_DrawFilledTriangle+0xb0>
		yinc1 = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	83bb      	strh	r3, [r7, #28]
 80010a6:	e005      	b.n	80010b4 <ST7789_DrawFilledTriangle+0xbc>
	}
	else {
		yinc1 = -1;
 80010a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ac:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 80010ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010b2:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) {
 80010b4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80010b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010bc:	429a      	cmp	r2, r3
 80010be:	db10      	blt.n	80010e2 <ST7789_DrawFilledTriangle+0xea>
		xinc1 = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	847b      	strh	r3, [r7, #34]	@ 0x22
		yinc2 = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 80010c8:	8a3b      	ldrh	r3, [r7, #16]
 80010ca:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 80010cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010d0:	0fda      	lsrs	r2, r3, #31
 80010d2:	4413      	add	r3, r2
 80010d4:	105b      	asrs	r3, r3, #1
 80010d6:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 80010dc:	8a3b      	ldrh	r3, [r7, #16]
 80010de:	82bb      	strh	r3, [r7, #20]
 80010e0:	e00f      	b.n	8001102 <ST7789_DrawFilledTriangle+0x10a>
	}
	else {
		xinc2 = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 80010ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010f2:	0fda      	lsrs	r2, r3, #31
 80010f4:	4413      	add	r3, r2
 80010f6:	105b      	asrs	r3, r3, #1
 80010f8:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 80010fa:	8a3b      	ldrh	r3, [r7, #16]
 80010fc:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001102:	2300      	movs	r3, #0
 8001104:	827b      	strh	r3, [r7, #18]
 8001106:	e033      	b.n	8001170 <ST7789_DrawFilledTriangle+0x178>
		ST7789_DrawLine(x, y, x3, y3, color);
 8001108:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800110a:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800110c:	8fbc      	ldrh	r4, [r7, #60]	@ 0x3c
 800110e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001110:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4623      	mov	r3, r4
 8001118:	f7ff fc02 	bl	8000920 <ST7789_DrawLine>

		num += numadd;
 800111c:	8b3a      	ldrh	r2, [r7, #24]
 800111e:	8afb      	ldrh	r3, [r7, #22]
 8001120:	4413      	add	r3, r2
 8001122:	b29b      	uxth	r3, r3
 8001124:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 8001126:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800112a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800112e:	429a      	cmp	r2, r3
 8001130:	db0e      	blt.n	8001150 <ST7789_DrawFilledTriangle+0x158>
			num -= den;
 8001132:	8b3a      	ldrh	r2, [r7, #24]
 8001134:	8b7b      	ldrh	r3, [r7, #26]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 800113c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800113e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001140:	4413      	add	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	84fb      	strh	r3, [r7, #38]	@ 0x26
			y += yinc1;
 8001146:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001148:	8bfb      	ldrh	r3, [r7, #30]
 800114a:	4413      	add	r3, r2
 800114c:	b29b      	uxth	r3, r3
 800114e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}
		x += xinc2;
 8001150:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001152:	8c3b      	ldrh	r3, [r7, #32]
 8001154:	4413      	add	r3, r2
 8001156:	b29b      	uxth	r3, r3
 8001158:	84fb      	strh	r3, [r7, #38]	@ 0x26
		y += yinc2;
 800115a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800115c:	8bbb      	ldrh	r3, [r7, #28]
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8001164:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001168:	b29b      	uxth	r3, r3
 800116a:	3301      	adds	r3, #1
 800116c:	b29b      	uxth	r3, r3
 800116e:	827b      	strh	r3, [r7, #18]
 8001170:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001174:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001178:	429a      	cmp	r2, r3
 800117a:	ddc5      	ble.n	8001108 <ST7789_DrawFilledTriangle+0x110>
	}
	ST7789_UnSelect();
 800117c:	2201      	movs	r2, #1
 800117e:	2110      	movs	r1, #16
 8001180:	4803      	ldr	r0, [pc, #12]	@ (8001190 <ST7789_DrawFilledTriangle+0x198>)
 8001182:	f001 fb63 	bl	800284c <HAL_GPIO_WritePin>
}
 8001186:	bf00      	nop
 8001188:	372c      	adds	r7, #44	@ 0x2c
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000

08001194 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af02      	add	r7, sp, #8
 800119a:	4604      	mov	r4, r0
 800119c:	4608      	mov	r0, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4623      	mov	r3, r4
 80011a4:	80fb      	strh	r3, [r7, #6]
 80011a6:	4603      	mov	r3, r0
 80011a8:	80bb      	strh	r3, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	807b      	strh	r3, [r7, #2]
 80011ae:	4613      	mov	r3, r2
 80011b0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80011b2:	2200      	movs	r2, #0
 80011b4:	2110      	movs	r1, #16
 80011b6:	4869      	ldr	r0, [pc, #420]	@ (800135c <ST7789_DrawFilledCircle+0x1c8>)
 80011b8:	f001 fb48 	bl	800284c <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	f1c3 0301 	rsb	r3, r3, #1
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	461a      	mov	r2, r3
 80011ce:	03d2      	lsls	r2, r2, #15
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 80011e0:	88f8      	ldrh	r0, [r7, #6]
 80011e2:	88ba      	ldrh	r2, [r7, #4]
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	4413      	add	r3, r2
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	883a      	ldrh	r2, [r7, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fb61 	bl	80008b4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 80011f2:	88f8      	ldrh	r0, [r7, #6]
 80011f4:	88ba      	ldrh	r2, [r7, #4]
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	883a      	ldrh	r2, [r7, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fb58 	bl	80008b4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8001204:	88fa      	ldrh	r2, [r7, #6]
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	4413      	add	r3, r2
 800120a:	b29b      	uxth	r3, r3
 800120c:	88b9      	ldrh	r1, [r7, #4]
 800120e:	883a      	ldrh	r2, [r7, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fb4f 	bl	80008b4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8001216:	88fa      	ldrh	r2, [r7, #6]
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	88b9      	ldrh	r1, [r7, #4]
 8001220:	883a      	ldrh	r2, [r7, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fb46 	bl	80008b4 <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8001228:	88fa      	ldrh	r2, [r7, #6]
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	b298      	uxth	r0, r3
 8001230:	88b9      	ldrh	r1, [r7, #4]
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4413      	add	r3, r2
 8001238:	b29a      	uxth	r2, r3
 800123a:	88bc      	ldrh	r4, [r7, #4]
 800123c:	883b      	ldrh	r3, [r7, #0]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	4623      	mov	r3, r4
 8001242:	f7ff fb6d 	bl	8000920 <ST7789_DrawLine>

	while (x < y) {
 8001246:	e079      	b.n	800133c <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 8001248:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0e      	blt.n	800126e <ST7789_DrawFilledCircle+0xda>
			y--;
 8001250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001254:	b29b      	uxth	r3, r3
 8001256:	3b01      	subs	r3, #1
 8001258:	b29b      	uxth	r3, r3
 800125a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800125c:	8a7b      	ldrh	r3, [r7, #18]
 800125e:	3302      	adds	r3, #2
 8001260:	b29b      	uxth	r3, r3
 8001262:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001264:	8afa      	ldrh	r2, [r7, #22]
 8001266:	8a7b      	ldrh	r3, [r7, #18]
 8001268:	4413      	add	r3, r2
 800126a:	b29b      	uxth	r3, r3
 800126c:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800126e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001272:	b29b      	uxth	r3, r3
 8001274:	3301      	adds	r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800127a:	8abb      	ldrh	r3, [r7, #20]
 800127c:	3302      	adds	r3, #2
 800127e:	b29b      	uxth	r3, r3
 8001280:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001282:	8afa      	ldrh	r2, [r7, #22]
 8001284:	8abb      	ldrh	r3, [r7, #20]
 8001286:	4413      	add	r3, r2
 8001288:	b29b      	uxth	r3, r3
 800128a:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 800128c:	88fa      	ldrh	r2, [r7, #6]
 800128e:	8a3b      	ldrh	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	b298      	uxth	r0, r3
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4413      	add	r3, r2
 800129a:	b299      	uxth	r1, r3
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	8a3b      	ldrh	r3, [r7, #16]
 80012a0:	4413      	add	r3, r2
 80012a2:	b29c      	uxth	r4, r3
 80012a4:	88ba      	ldrh	r2, [r7, #4]
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	4413      	add	r3, r2
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	883b      	ldrh	r3, [r7, #0]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4613      	mov	r3, r2
 80012b2:	4622      	mov	r2, r4
 80012b4:	f7ff fb34 	bl	8000920 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 80012b8:	88fa      	ldrh	r2, [r7, #6]
 80012ba:	8a3b      	ldrh	r3, [r7, #16]
 80012bc:	4413      	add	r3, r2
 80012be:	b298      	uxth	r0, r3
 80012c0:	88ba      	ldrh	r2, [r7, #4]
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	b299      	uxth	r1, r3
 80012c8:	88fa      	ldrh	r2, [r7, #6]
 80012ca:	8a3b      	ldrh	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b29c      	uxth	r4, r3
 80012d0:	88ba      	ldrh	r2, [r7, #4]
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	883b      	ldrh	r3, [r7, #0]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4613      	mov	r3, r2
 80012de:	4622      	mov	r2, r4
 80012e0:	f7ff fb1e 	bl	8000920 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 80012e4:	88fa      	ldrh	r2, [r7, #6]
 80012e6:	89fb      	ldrh	r3, [r7, #14]
 80012e8:	4413      	add	r3, r2
 80012ea:	b298      	uxth	r0, r3
 80012ec:	88ba      	ldrh	r2, [r7, #4]
 80012ee:	8a3b      	ldrh	r3, [r7, #16]
 80012f0:	4413      	add	r3, r2
 80012f2:	b299      	uxth	r1, r3
 80012f4:	88fa      	ldrh	r2, [r7, #6]
 80012f6:	89fb      	ldrh	r3, [r7, #14]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	b29c      	uxth	r4, r3
 80012fc:	88ba      	ldrh	r2, [r7, #4]
 80012fe:	8a3b      	ldrh	r3, [r7, #16]
 8001300:	4413      	add	r3, r2
 8001302:	b29a      	uxth	r2, r3
 8001304:	883b      	ldrh	r3, [r7, #0]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	4622      	mov	r2, r4
 800130c:	f7ff fb08 	bl	8000920 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	89fb      	ldrh	r3, [r7, #14]
 8001314:	4413      	add	r3, r2
 8001316:	b298      	uxth	r0, r3
 8001318:	88ba      	ldrh	r2, [r7, #4]
 800131a:	8a3b      	ldrh	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	b299      	uxth	r1, r3
 8001320:	88fa      	ldrh	r2, [r7, #6]
 8001322:	89fb      	ldrh	r3, [r7, #14]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	b29c      	uxth	r4, r3
 8001328:	88ba      	ldrh	r2, [r7, #4]
 800132a:	8a3b      	ldrh	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b29a      	uxth	r2, r3
 8001330:	883b      	ldrh	r3, [r7, #0]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	4613      	mov	r3, r2
 8001336:	4622      	mov	r2, r4
 8001338:	f7ff faf2 	bl	8000920 <ST7789_DrawLine>
	while (x < y) {
 800133c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001340:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001344:	429a      	cmp	r2, r3
 8001346:	f6ff af7f 	blt.w	8001248 <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 800134a:	2201      	movs	r2, #1
 800134c:	2110      	movs	r1, #16
 800134e:	4803      	ldr	r0, [pc, #12]	@ (800135c <ST7789_DrawFilledCircle+0x1c8>)
 8001350:	f001 fa7c 	bl	800284c <HAL_GPIO_WritePin>
}
 8001354:	bf00      	nop
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	40020000 	.word	0x40020000

08001360 <ST7789_Test>:
 * @brief A Simple test function for ST7789
 * @param  none
 * @return  none
 */
void ST7789_Test(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(WHITE);
 8001366:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800136a:	f7ff fa6f 	bl	800084c <ST7789_Fill_Color>
	HAL_Delay(1000);
 800136e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001372:	f000 fc41 	bl	8001bf8 <HAL_Delay>
	ST7789_WriteString(10, 20, "Speed Test", Font_11x18, RED, WHITE);
 8001376:	4bc1      	ldr	r3, [pc, #772]	@ (800167c <ST7789_Test+0x31c>)
 8001378:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800137c:	9202      	str	r2, [sp, #8]
 800137e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001382:	9201      	str	r2, [sp, #4]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	9200      	str	r2, [sp, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4abd      	ldr	r2, [pc, #756]	@ (8001680 <ST7789_Test+0x320>)
 800138c:	2114      	movs	r1, #20
 800138e:	200a      	movs	r0, #10
 8001390:	f7ff fd4a 	bl	8000e28 <ST7789_WriteString>
	HAL_Delay(1000);
 8001394:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001398:	f000 fc2e 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(CYAN);
 800139c:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 80013a0:	f7ff fa54 	bl	800084c <ST7789_Fill_Color>
    HAL_Delay(500);
 80013a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013a8:	f000 fc26 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(RED);
 80013ac:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80013b0:	f7ff fa4c 	bl	800084c <ST7789_Fill_Color>
    HAL_Delay(500);
 80013b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013b8:	f000 fc1e 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(BLUE);
 80013bc:	201f      	movs	r0, #31
 80013be:	f7ff fa45 	bl	800084c <ST7789_Fill_Color>
    HAL_Delay(500);
 80013c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013c6:	f000 fc17 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(GREEN);
 80013ca:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80013ce:	f7ff fa3d 	bl	800084c <ST7789_Fill_Color>
    HAL_Delay(500);
 80013d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013d6:	f000 fc0f 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(YELLOW);
 80013da:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80013de:	f7ff fa35 	bl	800084c <ST7789_Fill_Color>
    HAL_Delay(500);
 80013e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013e6:	f000 fc07 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(BROWN);
 80013ea:	f64b 4040 	movw	r0, #48192	@ 0xbc40
 80013ee:	f7ff fa2d 	bl	800084c <ST7789_Fill_Color>
    HAL_Delay(500);
 80013f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013f6:	f000 fbff 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(DARKBLUE);
 80013fa:	f240 10cf 	movw	r0, #463	@ 0x1cf
 80013fe:	f7ff fa25 	bl	800084c <ST7789_Fill_Color>
    HAL_Delay(500);
 8001402:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001406:	f000 fbf7 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(MAGENTA);
 800140a:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 800140e:	f7ff fa1d 	bl	800084c <ST7789_Fill_Color>
    HAL_Delay(500);
 8001412:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001416:	f000 fbef 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(LIGHTGREEN);
 800141a:	f248 401f 	movw	r0, #33823	@ 0x841f
 800141e:	f7ff fa15 	bl	800084c <ST7789_Fill_Color>
    HAL_Delay(500);
 8001422:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001426:	f000 fbe7 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(LGRAY);
 800142a:	f24c 6018 	movw	r0, #50712	@ 0xc618
 800142e:	f7ff fa0d 	bl	800084c <ST7789_Fill_Color>
    HAL_Delay(500);
 8001432:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001436:	f000 fbdf 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(LBBLUE);
 800143a:	f642 3012 	movw	r0, #11026	@ 0x2b12
 800143e:	f7ff fa05 	bl	800084c <ST7789_Fill_Color>
    HAL_Delay(500);
 8001442:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001446:	f000 fbd7 	bl	8001bf8 <HAL_Delay>
	ST7789_Fill_Color(WHITE);
 800144a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800144e:	f7ff f9fd 	bl	800084c <ST7789_Fill_Color>
	HAL_Delay(500);
 8001452:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001456:	f000 fbcf 	bl	8001bf8 <HAL_Delay>

	ST7789_WriteString(10, 10, "Font test.", Font_16x26, GBLUE, WHITE);
 800145a:	4b8a      	ldr	r3, [pc, #552]	@ (8001684 <ST7789_Test+0x324>)
 800145c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001460:	9202      	str	r2, [sp, #8]
 8001462:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001466:	9201      	str	r2, [sp, #4]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	9200      	str	r2, [sp, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a86      	ldr	r2, [pc, #536]	@ (8001688 <ST7789_Test+0x328>)
 8001470:	210a      	movs	r1, #10
 8001472:	200a      	movs	r0, #10
 8001474:	f7ff fcd8 	bl	8000e28 <ST7789_WriteString>
	ST7789_WriteString(10, 50, "Hello Steve!", Font_7x10, RED, WHITE);
 8001478:	4b84      	ldr	r3, [pc, #528]	@ (800168c <ST7789_Test+0x32c>)
 800147a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800147e:	9202      	str	r2, [sp, #8]
 8001480:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001484:	9201      	str	r2, [sp, #4]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	9200      	str	r2, [sp, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a80      	ldr	r2, [pc, #512]	@ (8001690 <ST7789_Test+0x330>)
 800148e:	2132      	movs	r1, #50	@ 0x32
 8001490:	200a      	movs	r0, #10
 8001492:	f7ff fcc9 	bl	8000e28 <ST7789_WriteString>
	ST7789_WriteString(10, 75, "Hello Steve!", Font_11x18, YELLOW, WHITE);
 8001496:	4b79      	ldr	r3, [pc, #484]	@ (800167c <ST7789_Test+0x31c>)
 8001498:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800149c:	9202      	str	r2, [sp, #8]
 800149e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80014a2:	9201      	str	r2, [sp, #4]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	9200      	str	r2, [sp, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a79      	ldr	r2, [pc, #484]	@ (8001690 <ST7789_Test+0x330>)
 80014ac:	214b      	movs	r1, #75	@ 0x4b
 80014ae:	200a      	movs	r0, #10
 80014b0:	f7ff fcba 	bl	8000e28 <ST7789_WriteString>
	ST7789_WriteString(10, 100, "Hello Steve!", Font_16x26, MAGENTA, WHITE);
 80014b4:	4b73      	ldr	r3, [pc, #460]	@ (8001684 <ST7789_Test+0x324>)
 80014b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ba:	9202      	str	r2, [sp, #8]
 80014bc:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80014c0:	9201      	str	r2, [sp, #4]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	9200      	str	r2, [sp, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a71      	ldr	r2, [pc, #452]	@ (8001690 <ST7789_Test+0x330>)
 80014ca:	2164      	movs	r1, #100	@ 0x64
 80014cc:	200a      	movs	r0, #10
 80014ce:	f7ff fcab 	bl	8000e28 <ST7789_WriteString>
	HAL_Delay(1000);
 80014d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014d6:	f000 fb8f 	bl	8001bf8 <HAL_Delay>

	ST7789_Fill_Color(RED);
 80014da:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80014de:	f7ff f9b5 	bl	800084c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Rect./Line.", Font_11x18, YELLOW, BLACK);
 80014e2:	4b66      	ldr	r3, [pc, #408]	@ (800167c <ST7789_Test+0x31c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	9202      	str	r2, [sp, #8]
 80014e8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80014ec:	9201      	str	r2, [sp, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	9200      	str	r2, [sp, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a67      	ldr	r2, [pc, #412]	@ (8001694 <ST7789_Test+0x334>)
 80014f6:	210a      	movs	r1, #10
 80014f8:	200a      	movs	r0, #10
 80014fa:	f7ff fc95 	bl	8000e28 <ST7789_WriteString>
	ST7789_DrawRectangle(30, 30, 100, 100, WHITE);
 80014fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2364      	movs	r3, #100	@ 0x64
 8001506:	2264      	movs	r2, #100	@ 0x64
 8001508:	211e      	movs	r1, #30
 800150a:	201e      	movs	r0, #30
 800150c:	f7ff fa94 	bl	8000a38 <ST7789_DrawRectangle>
	HAL_Delay(1000);
 8001510:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001514:	f000 fb70 	bl	8001bf8 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001518:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800151c:	f7ff f996 	bl	800084c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Rect.", Font_11x18, YELLOW, BLACK);
 8001520:	4b56      	ldr	r3, [pc, #344]	@ (800167c <ST7789_Test+0x31c>)
 8001522:	2200      	movs	r2, #0
 8001524:	9202      	str	r2, [sp, #8]
 8001526:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800152a:	9201      	str	r2, [sp, #4]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	9200      	str	r2, [sp, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a59      	ldr	r2, [pc, #356]	@ (8001698 <ST7789_Test+0x338>)
 8001534:	210a      	movs	r1, #10
 8001536:	200a      	movs	r0, #10
 8001538:	f7ff fc76 	bl	8000e28 <ST7789_WriteString>
	ST7789_DrawFilledRectangle(30, 30, 50, 50, WHITE);
 800153c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2332      	movs	r3, #50	@ 0x32
 8001544:	2232      	movs	r2, #50	@ 0x32
 8001546:	211e      	movs	r1, #30
 8001548:	201e      	movs	r0, #30
 800154a:	f7ff fcc1 	bl	8000ed0 <ST7789_DrawFilledRectangle>
	HAL_Delay(1000);
 800154e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001552:	f000 fb51 	bl	8001bf8 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001556:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800155a:	f7ff f977 	bl	800084c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Circle.", Font_11x18, YELLOW, BLACK);
 800155e:	4b47      	ldr	r3, [pc, #284]	@ (800167c <ST7789_Test+0x31c>)
 8001560:	2200      	movs	r2, #0
 8001562:	9202      	str	r2, [sp, #8]
 8001564:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001568:	9201      	str	r2, [sp, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	9200      	str	r2, [sp, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a4a      	ldr	r2, [pc, #296]	@ (800169c <ST7789_Test+0x33c>)
 8001572:	210a      	movs	r1, #10
 8001574:	200a      	movs	r0, #10
 8001576:	f7ff fc57 	bl	8000e28 <ST7789_WriteString>
	ST7789_DrawCircle(60, 60, 25, WHITE);
 800157a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800157e:	2219      	movs	r2, #25
 8001580:	213c      	movs	r1, #60	@ 0x3c
 8001582:	203c      	movs	r0, #60	@ 0x3c
 8001584:	f7ff fa9c 	bl	8000ac0 <ST7789_DrawCircle>
	HAL_Delay(1000);
 8001588:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800158c:	f000 fb34 	bl	8001bf8 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001590:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001594:	f7ff f95a 	bl	800084c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Cir.", Font_11x18, YELLOW, BLACK);
 8001598:	4b38      	ldr	r3, [pc, #224]	@ (800167c <ST7789_Test+0x31c>)
 800159a:	2200      	movs	r2, #0
 800159c:	9202      	str	r2, [sp, #8]
 800159e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80015a2:	9201      	str	r2, [sp, #4]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	9200      	str	r2, [sp, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a3d      	ldr	r2, [pc, #244]	@ (80016a0 <ST7789_Test+0x340>)
 80015ac:	210a      	movs	r1, #10
 80015ae:	200a      	movs	r0, #10
 80015b0:	f7ff fc3a 	bl	8000e28 <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 60, 25, WHITE);
 80015b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015b8:	2219      	movs	r2, #25
 80015ba:	213c      	movs	r1, #60	@ 0x3c
 80015bc:	203c      	movs	r0, #60	@ 0x3c
 80015be:	f7ff fde9 	bl	8001194 <ST7789_DrawFilledCircle>
	HAL_Delay(1000);
 80015c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015c6:	f000 fb17 	bl	8001bf8 <HAL_Delay>

	ST7789_Fill_Color(RED);
 80015ca:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80015ce:	f7ff f93d 	bl	800084c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Triangle", Font_11x18, YELLOW, BLACK);
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <ST7789_Test+0x31c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	9202      	str	r2, [sp, #8]
 80015d8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80015dc:	9201      	str	r2, [sp, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	9200      	str	r2, [sp, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2f      	ldr	r2, [pc, #188]	@ (80016a4 <ST7789_Test+0x344>)
 80015e6:	210a      	movs	r1, #10
 80015e8:	200a      	movs	r0, #10
 80015ea:	f7ff fc1d 	bl	8000e28 <ST7789_WriteString>
	ST7789_DrawTriangle(30, 30, 30, 70, 60, 40, WHITE);
 80015ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2328      	movs	r3, #40	@ 0x28
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	233c      	movs	r3, #60	@ 0x3c
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2346      	movs	r3, #70	@ 0x46
 80015fe:	221e      	movs	r2, #30
 8001600:	211e      	movs	r1, #30
 8001602:	201e      	movs	r0, #30
 8001604:	f7ff fcbe 	bl	8000f84 <ST7789_DrawTriangle>
	HAL_Delay(1000);
 8001608:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800160c:	f000 faf4 	bl	8001bf8 <HAL_Delay>

	ST7789_Fill_Color(RED);
 8001610:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001614:	f7ff f91a 	bl	800084c <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Filled Tri", Font_11x18, YELLOW, BLACK);
 8001618:	4b18      	ldr	r3, [pc, #96]	@ (800167c <ST7789_Test+0x31c>)
 800161a:	2200      	movs	r2, #0
 800161c:	9202      	str	r2, [sp, #8]
 800161e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001622:	9201      	str	r2, [sp, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	9200      	str	r2, [sp, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1f      	ldr	r2, [pc, #124]	@ (80016a8 <ST7789_Test+0x348>)
 800162c:	210a      	movs	r1, #10
 800162e:	200a      	movs	r0, #10
 8001630:	f7ff fbfa 	bl	8000e28 <ST7789_WriteString>
	ST7789_DrawFilledTriangle(30, 30, 30, 70, 60, 40, WHITE);
 8001634:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	2328      	movs	r3, #40	@ 0x28
 800163c:	9301      	str	r3, [sp, #4]
 800163e:	233c      	movs	r3, #60	@ 0x3c
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2346      	movs	r3, #70	@ 0x46
 8001644:	221e      	movs	r2, #30
 8001646:	211e      	movs	r1, #30
 8001648:	201e      	movs	r0, #30
 800164a:	f7ff fcd5 	bl	8000ff8 <ST7789_DrawFilledTriangle>
	HAL_Delay(1000);
 800164e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001652:	f000 fad1 	bl	8001bf8 <HAL_Delay>

	//	If FLASH cannot storage anymore datas, please delete codes below.
	ST7789_Fill_Color(WHITE);
 8001656:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800165a:	f7ff f8f7 	bl	800084c <ST7789_Fill_Color>
	ST7789_DrawImage(0, 0, 128, 128, (uint16_t *)saber);
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <ST7789_Test+0x34c>)
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	2280      	movs	r2, #128	@ 0x80
 8001666:	2100      	movs	r1, #0
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fb0f 	bl	8000c8c <ST7789_DrawImage>
	HAL_Delay(3000);
 800166e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001672:	f000 fac1 	bl	8001bf8 <HAL_Delay>
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000008 	.word	0x20000008
 8001680:	08003958 	.word	0x08003958
 8001684:	20000010 	.word	0x20000010
 8001688:	08003964 	.word	0x08003964
 800168c:	20000000 	.word	0x20000000
 8001690:	08003970 	.word	0x08003970
 8001694:	08003980 	.word	0x08003980
 8001698:	0800398c 	.word	0x0800398c
 800169c:	0800399c 	.word	0x0800399c
 80016a0:	080039a4 	.word	0x080039a4
 80016a4:	080039b0 	.word	0x080039b0
 80016a8:	080039bc 	.word	0x080039bc
 80016ac:	080061dc 	.word	0x080061dc

080016b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b4:	f000 fa2e 	bl	8001b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b8:	f000 f80c 	bl	80016d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016bc:	f000 f8ca 	bl	8001854 <MX_GPIO_Init>
  MX_DMA_Init();
 80016c0:	f000 f8a8 	bl	8001814 <MX_DMA_Init>
  MX_SPI1_Init();
 80016c4:	f000 f870 	bl	80017a8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 80016c8:	f7ff f81a 	bl	8000700 <ST7789_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ST7789_Test();
 80016cc:	f7ff fe48 	bl	8001360 <ST7789_Test>
 80016d0:	e7fc      	b.n	80016cc <main+0x1c>
	...

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	@ 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2230      	movs	r2, #48	@ 0x30
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 f8ec 	bl	80038c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	4b28      	ldr	r3, [pc, #160]	@ (80017a0 <SystemClock_Config+0xcc>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	4a27      	ldr	r2, [pc, #156]	@ (80017a0 <SystemClock_Config+0xcc>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	@ 0x40
 8001708:	4b25      	ldr	r3, [pc, #148]	@ (80017a0 <SystemClock_Config+0xcc>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <SystemClock_Config+0xd0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001720:	4a20      	ldr	r2, [pc, #128]	@ (80017a4 <SystemClock_Config+0xd0>)
 8001722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <SystemClock_Config+0xd0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001734:	2301      	movs	r3, #1
 8001736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001738:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173e:	2302      	movs	r3, #2
 8001740:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001742:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001748:	2319      	movs	r3, #25
 800174a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800174c:	23a8      	movs	r3, #168	@ 0xa8
 800174e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001750:	2302      	movs	r3, #2
 8001752:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001754:	2304      	movs	r3, #4
 8001756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	4618      	mov	r0, r3
 800175e:	f001 f88f 	bl	8002880 <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001768:	f000 f8b6 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176c:	230f      	movs	r3, #15
 800176e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001770:	2302      	movs	r3, #2
 8001772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800177c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	2102      	movs	r1, #2
 8001788:	4618      	mov	r0, r3
 800178a:	f001 faf1 	bl	8002d70 <HAL_RCC_ClockConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001794:	f000 f8a0 	bl	80018d8 <Error_Handler>
  }
}
 8001798:	bf00      	nop
 800179a:	3750      	adds	r7, #80	@ 0x50
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000

080017a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017ac:	4b17      	ldr	r3, [pc, #92]	@ (800180c <MX_SPI1_Init+0x64>)
 80017ae:	4a18      	ldr	r2, [pc, #96]	@ (8001810 <MX_SPI1_Init+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017b2:	4b16      	ldr	r3, [pc, #88]	@ (800180c <MX_SPI1_Init+0x64>)
 80017b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ba:	4b14      	ldr	r3, [pc, #80]	@ (800180c <MX_SPI1_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <MX_SPI1_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <MX_SPI1_Init+0x64>)
 80017c8:	2202      	movs	r2, #2
 80017ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <MX_SPI1_Init+0x64>)
 80017d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017da:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <MX_SPI1_Init+0x64>)
 80017dc:	2208      	movs	r2, #8
 80017de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	@ (800180c <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <MX_SPI1_Init+0x64>)
 80017f4:	220a      	movs	r2, #10
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	@ (800180c <MX_SPI1_Init+0x64>)
 80017fa:	f001 fc65 	bl	80030c8 <HAL_SPI_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001804:	f000 f868 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200009a4 	.word	0x200009a4
 8001810:	40013000 	.word	0x40013000

08001814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <MX_DMA_Init+0x3c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a0b      	ldr	r2, [pc, #44]	@ (8001850 <MX_DMA_Init+0x3c>)
 8001824:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <MX_DMA_Init+0x3c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	203b      	movs	r0, #59	@ 0x3b
 800183c:	f000 fadb 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001840:	203b      	movs	r0, #59	@ 0x3b
 8001842:	f000 faf4 	bl	8001e2e <HAL_NVIC_EnableIRQ>

}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800

08001854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <MX_GPIO_Init+0x7c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a17      	ldr	r2, [pc, #92]	@ (80018d0 <MX_GPIO_Init+0x7c>)
 8001874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <MX_GPIO_Init+0x7c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <MX_GPIO_Init+0x7c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a10      	ldr	r2, [pc, #64]	@ (80018d0 <MX_GPIO_Init+0x7c>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <MX_GPIO_Init+0x7c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	211a      	movs	r1, #26
 80018a6:	480b      	ldr	r0, [pc, #44]	@ (80018d4 <MX_GPIO_Init+0x80>)
 80018a8:	f000 ffd0 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin|ST7789_CS_Pin;
 80018ac:	231a      	movs	r3, #26
 80018ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018b0:	2311      	movs	r3, #17
 80018b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	4619      	mov	r1, r3
 80018c2:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <MX_GPIO_Init+0x80>)
 80018c4:	f000 fe3e 	bl	8002544 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <Error_Handler+0x8>

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <HAL_MspInit+0x4c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001930 <HAL_MspInit+0x4c>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <HAL_MspInit+0x4c>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_MspInit+0x4c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	4a08      	ldr	r2, [pc, #32]	@ (8001930 <HAL_MspInit+0x4c>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001914:	6413      	str	r3, [r2, #64]	@ 0x40
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_MspInit+0x4c>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	@ 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a30      	ldr	r2, [pc, #192]	@ (8001a14 <HAL_SPI_MspInit+0xe0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d159      	bne.n	8001a0a <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a18 <HAL_SPI_MspInit+0xe4>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	4a2e      	ldr	r2, [pc, #184]	@ (8001a18 <HAL_SPI_MspInit+0xe4>)
 8001960:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001964:	6453      	str	r3, [r2, #68]	@ 0x44
 8001966:	4b2c      	ldr	r3, [pc, #176]	@ (8001a18 <HAL_SPI_MspInit+0xe4>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <HAL_SPI_MspInit+0xe4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a27      	ldr	r2, [pc, #156]	@ (8001a18 <HAL_SPI_MspInit+0xe4>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <HAL_SPI_MspInit+0xe4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800198e:	23e0      	movs	r3, #224	@ 0xe0
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800199e:	2305      	movs	r3, #5
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	481c      	ldr	r0, [pc, #112]	@ (8001a1c <HAL_SPI_MspInit+0xe8>)
 80019aa:	f000 fdcb 	bl	8002544 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 80019b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a24 <HAL_SPI_MspInit+0xf0>)
 80019b2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 80019b6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80019ba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019bc:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 80019be:	2240      	movs	r2, #64	@ 0x40
 80019c0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c2:	4b17      	ldr	r3, [pc, #92]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019c8:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 80019ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ce:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019d0:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80019dc:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019ee:	480c      	ldr	r0, [pc, #48]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 80019f0:	f000 fa38 	bl	8001e64 <HAL_DMA_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80019fa:	f7ff ff6d 	bl	80018d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a07      	ldr	r2, [pc, #28]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 8001a02:	649a      	str	r2, [r3, #72]	@ 0x48
 8001a04:	4a06      	ldr	r2, [pc, #24]	@ (8001a20 <HAL_SPI_MspInit+0xec>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	@ 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40013000 	.word	0x40013000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	200009fc 	.word	0x200009fc
 8001a24:	40026458 	.word	0x40026458

08001a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <NMI_Handler+0x4>

08001a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <MemManage_Handler+0x4>

08001a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7e:	f000 f89b 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <DMA2_Stream3_IRQHandler+0x10>)
 8001a8e:	f000 faef 	bl	8002070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200009fc 	.word	0x200009fc

08001a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <SystemInit+0x20>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa6:	4a05      	ldr	r2, [pc, #20]	@ (8001abc <SystemInit+0x20>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ac4:	f7ff ffea 	bl	8001a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aca:	490d      	ldr	r1, [pc, #52]	@ (8001b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001acc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8001b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f001 feef 	bl	80038d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7ff fddd 	bl	80016b0 <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001af8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b00:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001b04:	0800e204 	.word	0x0800e204
  ldr r2, =_sbss
 8001b08:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001b0c:	20000a60 	.word	0x20000a60

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f94f 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fecc 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f967 	bl	8001e4a <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f92f 	bl	8001df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	@ (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000001c 	.word	0x2000001c
 8001bb0:	20000024 	.word	0x20000024
 8001bb4:	20000020 	.word	0x20000020

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000024 	.word	0x20000024
 8001bdc:	20000a5c 	.word	0x20000a5c

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000a5c 	.word	0x20000a5c

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000024 	.word	0x20000024

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	@ (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	@ (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	@ (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	@ 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff3e 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff8e 	bl	8001d34 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5d 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff31 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffa2 	bl	8001d9c <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff feb6 	bl	8001be0 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e099      	b.n	8001fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea0:	e00f      	b.n	8001ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea2:	f7ff fe9d 	bl	8001be0 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d908      	bls.n	8001ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e078      	b.n	8001fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e8      	bne.n	8001ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4b38      	ldr	r3, [pc, #224]	@ (8001fbc <HAL_DMA_Init+0x158>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	4313      	orrs	r3, r2
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 0307 	bic.w	r3, r3, #7
 8001f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d117      	bne.n	8001f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fa6f 	bl	800244c <DMA_CheckFifoParam>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2240      	movs	r2, #64	@ 0x40
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f82:	2301      	movs	r3, #1
 8001f84:	e016      	b.n	8001fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa26 	bl	80023e0 <DMA_CalcBaseAndBitshift>
 8001f94:	4603      	mov	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	223f      	movs	r2, #63	@ 0x3f
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f010803f 	.word	0xf010803f

08001fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_Start_IT+0x26>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e040      	b.n	8002068 <HAL_DMA_Start_IT+0xa8>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d12f      	bne.n	800205a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f9b8 	bl	8002384 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002018:	223f      	movs	r2, #63	@ 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0216 	orr.w	r2, r2, #22
 800202e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800207c:	4b8e      	ldr	r3, [pc, #568]	@ (80022b8 <HAL_DMA_IRQHandler+0x248>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a8e      	ldr	r2, [pc, #568]	@ (80022bc <HAL_DMA_IRQHandler+0x24c>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a9b      	lsrs	r3, r3, #10
 8002088:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209a:	2208      	movs	r2, #8
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01a      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0204 	bic.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c8:	2208      	movs	r2, #8
 80020ca:	409a      	lsls	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e0:	2201      	movs	r2, #1
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d012      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fe:	2201      	movs	r2, #1
 8002100:	409a      	lsls	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210a:	f043 0202 	orr.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002116:	2204      	movs	r2, #4
 8002118:	409a      	lsls	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	2204      	movs	r2, #4
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002140:	f043 0204 	orr.w	r2, r3, #4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214c:	2210      	movs	r2, #16
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d043      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d03c      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216a:	2210      	movs	r2, #16
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d018      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d108      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d024      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	e01f      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
 80021b0:	e016      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0208 	bic.w	r2, r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	2220      	movs	r2, #32
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 808f 	beq.w	8002310 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8087 	beq.w	8002310 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	2220      	movs	r2, #32
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b05      	cmp	r3, #5
 8002218:	d136      	bne.n	8002288 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0216 	bic.w	r2, r2, #22
 8002228:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002238:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <HAL_DMA_IRQHandler+0x1da>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0208 	bic.w	r2, r2, #8
 8002258:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	223f      	movs	r2, #63	@ 0x3f
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800227a:	2b00      	cmp	r3, #0
 800227c:	d07e      	beq.n	800237c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
        }
        return;
 8002286:	e079      	b.n	800237c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01d      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10d      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d031      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
 80022b4:	e02c      	b.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
 80022b6:	bf00      	nop
 80022b8:	2000001c 	.word	0x2000001c
 80022bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d023      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
 80022d0:	e01e      	b.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10f      	bne.n	8002300 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0210 	bic.w	r2, r2, #16
 80022ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002314:	2b00      	cmp	r3, #0
 8002316:	d032      	beq.n	800237e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d022      	beq.n	800236a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2205      	movs	r2, #5
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	3301      	adds	r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	d307      	bcc.n	8002358 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f2      	bne.n	800233c <HAL_DMA_IRQHandler+0x2cc>
 8002356:	e000      	b.n	800235a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002358:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
 800237a:	e000      	b.n	800237e <HAL_DMA_IRQHandler+0x30e>
        return;
 800237c:	bf00      	nop
    }
  }
}
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b40      	cmp	r3, #64	@ 0x40
 80023b0:	d108      	bne.n	80023c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023c2:	e007      	b.n	80023d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3b10      	subs	r3, #16
 80023f0:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <DMA_CalcBaseAndBitshift+0x64>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023fa:	4a13      	ldr	r2, [pc, #76]	@ (8002448 <DMA_CalcBaseAndBitshift+0x68>)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d909      	bls.n	8002422 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	1d1a      	adds	r2, r3, #4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002420:	e007      	b.n	8002432 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	aaaaaaab 	.word	0xaaaaaaab
 8002448:	0800e1ec 	.word	0x0800e1ec

0800244c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11f      	bne.n	80024a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d856      	bhi.n	800251a <DMA_CheckFifoParam+0xce>
 800246c:	a201      	add	r2, pc, #4	@ (adr r2, 8002474 <DMA_CheckFifoParam+0x28>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	08002485 	.word	0x08002485
 8002478:	08002497 	.word	0x08002497
 800247c:	08002485 	.word	0x08002485
 8002480:	0800251b 	.word	0x0800251b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002488:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d046      	beq.n	800251e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e043      	b.n	800251e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800249e:	d140      	bne.n	8002522 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a4:	e03d      	b.n	8002522 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ae:	d121      	bne.n	80024f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d837      	bhi.n	8002526 <DMA_CheckFifoParam+0xda>
 80024b6:	a201      	add	r2, pc, #4	@ (adr r2, 80024bc <DMA_CheckFifoParam+0x70>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024cd 	.word	0x080024cd
 80024c0:	080024d3 	.word	0x080024d3
 80024c4:	080024cd 	.word	0x080024cd
 80024c8:	080024e5 	.word	0x080024e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e030      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d025      	beq.n	800252a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e2:	e022      	b.n	800252a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024ec:	d11f      	bne.n	800252e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024f2:	e01c      	b.n	800252e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d903      	bls.n	8002502 <DMA_CheckFifoParam+0xb6>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d003      	beq.n	8002508 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002500:	e018      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
      break;
 8002506:	e015      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00e      	beq.n	8002532 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
      break;
 8002518:	e00b      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      break;
 800251a:	bf00      	nop
 800251c:	e00a      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 800251e:	bf00      	nop
 8002520:	e008      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002522:	bf00      	nop
 8002524:	e006      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002526:	bf00      	nop
 8002528:	e004      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 800252a:	bf00      	nop
 800252c:	e002      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;   
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
    }
  } 
  
  return status; 
 8002534:	7bfb      	ldrb	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	e159      	b.n	8002814 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	f040 8148 	bne.w	800280e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d005      	beq.n	8002596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002592:	2b02      	cmp	r3, #2
 8002594:	d130      	bne.n	80025f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b03      	cmp	r3, #3
 8002602:	d017      	beq.n	8002634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d123      	bne.n	8002688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80a2 	beq.w	800280e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b57      	ldr	r3, [pc, #348]	@ (800282c <HAL_GPIO_Init+0x2e8>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	4a56      	ldr	r2, [pc, #344]	@ (800282c <HAL_GPIO_Init+0x2e8>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026da:	4b54      	ldr	r3, [pc, #336]	@ (800282c <HAL_GPIO_Init+0x2e8>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e6:	4a52      	ldr	r2, [pc, #328]	@ (8002830 <HAL_GPIO_Init+0x2ec>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a49      	ldr	r2, [pc, #292]	@ (8002834 <HAL_GPIO_Init+0x2f0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d019      	beq.n	8002746 <HAL_GPIO_Init+0x202>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a48      	ldr	r2, [pc, #288]	@ (8002838 <HAL_GPIO_Init+0x2f4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0x1fe>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a47      	ldr	r2, [pc, #284]	@ (800283c <HAL_GPIO_Init+0x2f8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_GPIO_Init+0x1fa>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a46      	ldr	r2, [pc, #280]	@ (8002840 <HAL_GPIO_Init+0x2fc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <HAL_GPIO_Init+0x1f6>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a45      	ldr	r2, [pc, #276]	@ (8002844 <HAL_GPIO_Init+0x300>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_GPIO_Init+0x1f2>
 8002732:	2304      	movs	r3, #4
 8002734:	e008      	b.n	8002748 <HAL_GPIO_Init+0x204>
 8002736:	2307      	movs	r3, #7
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x204>
 800273a:	2303      	movs	r3, #3
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x204>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x204>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x204>
 8002746:	2300      	movs	r3, #0
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002758:	4935      	ldr	r1, [pc, #212]	@ (8002830 <HAL_GPIO_Init+0x2ec>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002766:	4b38      	ldr	r3, [pc, #224]	@ (8002848 <HAL_GPIO_Init+0x304>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278a:	4a2f      	ldr	r2, [pc, #188]	@ (8002848 <HAL_GPIO_Init+0x304>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002790:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <HAL_GPIO_Init+0x304>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b4:	4a24      	ldr	r2, [pc, #144]	@ (8002848 <HAL_GPIO_Init+0x304>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ba:	4b23      	ldr	r3, [pc, #140]	@ (8002848 <HAL_GPIO_Init+0x304>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027de:	4a1a      	ldr	r2, [pc, #104]	@ (8002848 <HAL_GPIO_Init+0x304>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e4:	4b18      	ldr	r3, [pc, #96]	@ (8002848 <HAL_GPIO_Init+0x304>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002808:	4a0f      	ldr	r2, [pc, #60]	@ (8002848 <HAL_GPIO_Init+0x304>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f aea2 	bls.w	8002560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	@ 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40013800 	.word	0x40013800
 8002834:	40020000 	.word	0x40020000
 8002838:	40020400 	.word	0x40020400
 800283c:	40020800 	.word	0x40020800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	40021000 	.word	0x40021000
 8002848:	40013c00 	.word	0x40013c00

0800284c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
 8002858:	4613      	mov	r3, r2
 800285a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002868:	e003      	b.n	8002872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800286a:	887b      	ldrh	r3, [r7, #2]
 800286c:	041a      	lsls	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e267      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d075      	beq.n	800298a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800289e:	4b88      	ldr	r3, [pc, #544]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d00c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b85      	ldr	r3, [pc, #532]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d112      	bne.n	80028dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b6:	4b82      	ldr	r3, [pc, #520]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028c2:	d10b      	bne.n	80028dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d05b      	beq.n	8002988 <HAL_RCC_OscConfig+0x108>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d157      	bne.n	8002988 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e242      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e4:	d106      	bne.n	80028f4 <HAL_RCC_OscConfig+0x74>
 80028e6:	4b76      	ldr	r3, [pc, #472]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a75      	ldr	r2, [pc, #468]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e01d      	b.n	8002930 <HAL_RCC_OscConfig+0xb0>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x98>
 80028fe:	4b70      	ldr	r3, [pc, #448]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6f      	ldr	r2, [pc, #444]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a6c      	ldr	r2, [pc, #432]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0xb0>
 8002918:	4b69      	ldr	r3, [pc, #420]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a68      	ldr	r2, [pc, #416]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b66      	ldr	r3, [pc, #408]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a65      	ldr	r2, [pc, #404]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 800292a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800292e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7ff f952 	bl	8001be0 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7ff f94e 	bl	8001be0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	@ 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e207      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b5b      	ldr	r3, [pc, #364]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0xc0>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7ff f93e 	bl	8001be0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7ff f93a 	bl	8001be0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	@ 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1f3      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	4b51      	ldr	r3, [pc, #324]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0xe8>
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d063      	beq.n	8002a5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002996:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d11c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b44      	ldr	r3, [pc, #272]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d116      	bne.n	80029e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x152>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e1c7      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4937      	ldr	r1, [pc, #220]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	e03a      	b.n	8002a5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	4b34      	ldr	r3, [pc, #208]	@ (8002ac4 <HAL_RCC_OscConfig+0x244>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7ff f8f3 	bl	8001be0 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fe:	f7ff f8ef 	bl	8001be0 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e1a8      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4925      	ldr	r1, [pc, #148]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
 8002a30:	e015      	b.n	8002a5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a32:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <HAL_RCC_OscConfig+0x244>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7ff f8d2 	bl	8001be0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a40:	f7ff f8ce 	bl	8001be0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e187      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d036      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <HAL_RCC_OscConfig+0x248>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7ff f8b2 	bl	8001be0 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7ff f8ae 	bl	8001be0 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e167      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <HAL_RCC_OscConfig+0x240>)
 8002a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x200>
 8002a9e:	e01b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_RCC_OscConfig+0x248>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa6:	f7ff f89b 	bl	8001be0 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	e00e      	b.n	8002acc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aae:	f7ff f897 	bl	8001be0 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d907      	bls.n	8002acc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e150      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	42470000 	.word	0x42470000
 8002ac8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002acc:	4b88      	ldr	r3, [pc, #544]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ea      	bne.n	8002aae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8097 	beq.w	8002c14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aea:	4b81      	ldr	r3, [pc, #516]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b7d      	ldr	r3, [pc, #500]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	4a7c      	ldr	r2, [pc, #496]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b06:	4b7a      	ldr	r3, [pc, #488]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b77      	ldr	r3, [pc, #476]	@ (8002cf4 <HAL_RCC_OscConfig+0x474>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d118      	bne.n	8002b54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b22:	4b74      	ldr	r3, [pc, #464]	@ (8002cf4 <HAL_RCC_OscConfig+0x474>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a73      	ldr	r2, [pc, #460]	@ (8002cf4 <HAL_RCC_OscConfig+0x474>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7ff f857 	bl	8001be0 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7ff f853 	bl	8001be0 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e10c      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf4 <HAL_RCC_OscConfig+0x474>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x2ea>
 8002b5c:	4b64      	ldr	r3, [pc, #400]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b60:	4a63      	ldr	r2, [pc, #396]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b68:	e01c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x324>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x30c>
 8002b72:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	4a5e      	ldr	r2, [pc, #376]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b82:	4a5b      	ldr	r2, [pc, #364]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x324>
 8002b8c:	4b58      	ldr	r3, [pc, #352]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	4a57      	ldr	r2, [pc, #348]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b98:	4b55      	ldr	r3, [pc, #340]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9c:	4a54      	ldr	r2, [pc, #336]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7ff f818 	bl	8001be0 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7ff f814 	bl	8001be0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0cb      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	4b49      	ldr	r3, [pc, #292]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ee      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x334>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd8:	f7ff f802 	bl	8001be0 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe fffe 	bl	8001be0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e0b5      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ee      	bne.n	8002be0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	4b39      	ldr	r3, [pc, #228]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	4a38      	ldr	r2, [pc, #224]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80a1 	beq.w	8002d60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c1e:	4b34      	ldr	r3, [pc, #208]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d05c      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d141      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	4b31      	ldr	r3, [pc, #196]	@ (8002cf8 <HAL_RCC_OscConfig+0x478>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe ffd2 	bl	8001be0 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c40:	f7fe ffce 	bl	8001be0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e087      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	4b27      	ldr	r3, [pc, #156]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	3b01      	subs	r3, #1
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	491b      	ldr	r1, [pc, #108]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c88:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf8 <HAL_RCC_OscConfig+0x478>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fe ffa7 	bl	8001be0 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fe ffa3 	bl	8001be0 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e05c      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x416>
 8002cb4:	e054      	b.n	8002d60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <HAL_RCC_OscConfig+0x478>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fe ff90 	bl	8001be0 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe ff8c 	bl	8001be0 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e045      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x444>
 8002ce2:	e03d      	b.n	8002d60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e038      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d6c <HAL_RCC_OscConfig+0x4ec>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d028      	beq.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d121      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d11a      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d111      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	3b01      	subs	r3, #1
 8002d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d107      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800

08002d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0cc      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d84:	4b68      	ldr	r3, [pc, #416]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d90c      	bls.n	8002dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b65      	ldr	r3, [pc, #404]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b63      	ldr	r3, [pc, #396]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0b8      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d020      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc4:	4b59      	ldr	r3, [pc, #356]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a58      	ldr	r2, [pc, #352]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ddc:	4b53      	ldr	r3, [pc, #332]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a52      	ldr	r2, [pc, #328]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de8:	4b50      	ldr	r3, [pc, #320]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	494d      	ldr	r1, [pc, #308]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d044      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	4b47      	ldr	r3, [pc, #284]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d119      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e07f      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e06f      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e067      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4e:	4b37      	ldr	r3, [pc, #220]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f023 0203 	bic.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4934      	ldr	r1, [pc, #208]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e60:	f7fe febe 	bl	8001be0 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e68:	f7fe feba 	bl	8001be0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e04f      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 020c 	and.w	r2, r3, #12
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d1eb      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d20c      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b20      	ldr	r3, [pc, #128]	@ (8002f28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e032      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4916      	ldr	r1, [pc, #88]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee2:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	490e      	ldr	r1, [pc, #56]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ef6:	f000 f821 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002efa:	4602      	mov	r2, r0
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	490a      	ldr	r1, [pc, #40]	@ (8002f30 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	5ccb      	ldrb	r3, [r1, r3]
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	4a09      	ldr	r2, [pc, #36]	@ (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f12:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fe1e 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40023c00 	.word	0x40023c00
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	0800e1dc 	.word	0x0800e1dc
 8002f34:	2000001c 	.word	0x2000001c
 8002f38:	20000020 	.word	0x20000020

08002f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f40:	b090      	sub	sp, #64	@ 0x40
 8002f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f54:	4b59      	ldr	r3, [pc, #356]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d00d      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x40>
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	f200 80a1 	bhi.w	80030a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x34>
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f6e:	e09b      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4b53      	ldr	r3, [pc, #332]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f74:	e09b      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f76:	4b53      	ldr	r3, [pc, #332]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f7a:	e098      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f86:	4b4d      	ldr	r3, [pc, #308]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d028      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f92:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	2200      	movs	r2, #0
 8002f9a:	623b      	str	r3, [r7, #32]
 8002f9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4b47      	ldr	r3, [pc, #284]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fa8:	fb03 f201 	mul.w	r2, r3, r1
 8002fac:	2300      	movs	r3, #0
 8002fae:	fb00 f303 	mul.w	r3, r0, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a43      	ldr	r2, [pc, #268]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fb6:	fba0 1202 	umull	r1, r2, r0, r2
 8002fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc2:	4413      	add	r3, r2
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	61fa      	str	r2, [r7, #28]
 8002fce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002fd6:	f7fd f8fd 	bl	80001d4 <__aeabi_uldivmod>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4613      	mov	r3, r2
 8002fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe2:	e053      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe4:	4b35      	ldr	r3, [pc, #212]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	2200      	movs	r2, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	617a      	str	r2, [r7, #20]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ff6:	f04f 0b00 	mov.w	fp, #0
 8002ffa:	4652      	mov	r2, sl
 8002ffc:	465b      	mov	r3, fp
 8002ffe:	f04f 0000 	mov.w	r0, #0
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	0159      	lsls	r1, r3, #5
 8003008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300c:	0150      	lsls	r0, r2, #5
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	ebb2 080a 	subs.w	r8, r2, sl
 8003016:	eb63 090b 	sbc.w	r9, r3, fp
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003026:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800302a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800302e:	ebb2 0408 	subs.w	r4, r2, r8
 8003032:	eb63 0509 	sbc.w	r5, r3, r9
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	00eb      	lsls	r3, r5, #3
 8003040:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003044:	00e2      	lsls	r2, r4, #3
 8003046:	4614      	mov	r4, r2
 8003048:	461d      	mov	r5, r3
 800304a:	eb14 030a 	adds.w	r3, r4, sl
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	eb45 030b 	adc.w	r3, r5, fp
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003062:	4629      	mov	r1, r5
 8003064:	028b      	lsls	r3, r1, #10
 8003066:	4621      	mov	r1, r4
 8003068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800306c:	4621      	mov	r1, r4
 800306e:	028a      	lsls	r2, r1, #10
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003076:	2200      	movs	r2, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	60fa      	str	r2, [r7, #12]
 800307c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003080:	f7fd f8a8 	bl	80001d4 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4613      	mov	r3, r2
 800308a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800308c:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x180>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	3301      	adds	r3, #1
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800309c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030a6:	e002      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a8:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80030aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3740      	adds	r7, #64	@ 0x40
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	017d7840 	.word	0x017d7840

080030c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07b      	b.n	80031d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d108      	bne.n	80030f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030ea:	d009      	beq.n	8003100 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
 80030f2:	e005      	b.n	8003100 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe fc0a 	bl	8001934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003136:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003184:	ea42 0103 	orr.w	r1, r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	f003 0104 	and.w	r1, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	f003 0210 	and.w	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b088      	sub	sp, #32
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ea:	f7fe fcf9 	bl	8001be0 <HAL_GetTick>
 80031ee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d001      	beq.n	8003204 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003200:	2302      	movs	r3, #2
 8003202:	e12a      	b.n	800345a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_SPI_Transmit+0x36>
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e122      	b.n	800345a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_SPI_Transmit+0x48>
 800321e:	2302      	movs	r3, #2
 8003220:	e11b      	b.n	800345a <HAL_SPI_Transmit+0x280>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2203      	movs	r2, #3
 800322e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	88fa      	ldrh	r2, [r7, #6]
 8003242:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	88fa      	ldrh	r2, [r7, #6]
 8003248:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003270:	d10f      	bne.n	8003292 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003280:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003290:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329c:	2b40      	cmp	r3, #64	@ 0x40
 800329e:	d007      	beq.n	80032b0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032b8:	d152      	bne.n	8003360 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_SPI_Transmit+0xee>
 80032c2:	8b7b      	ldrh	r3, [r7, #26]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d145      	bne.n	8003354 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032cc:	881a      	ldrh	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	1c9a      	adds	r2, r3, #2
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032ec:	e032      	b.n	8003354 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d112      	bne.n	8003322 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003300:	881a      	ldrh	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	1c9a      	adds	r2, r3, #2
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003320:	e018      	b.n	8003354 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003322:	f7fe fc5d 	bl	8001be0 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d803      	bhi.n	800333a <HAL_SPI_Transmit+0x160>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d102      	bne.n	8003340 <HAL_SPI_Transmit+0x166>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e082      	b.n	800345a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1c7      	bne.n	80032ee <HAL_SPI_Transmit+0x114>
 800335e:	e053      	b.n	8003408 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_SPI_Transmit+0x194>
 8003368:	8b7b      	ldrh	r3, [r7, #26]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d147      	bne.n	80033fe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	7812      	ldrb	r2, [r2, #0]
 800337a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003394:	e033      	b.n	80033fe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d113      	bne.n	80033cc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	7812      	ldrb	r2, [r2, #0]
 80033b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033ca:	e018      	b.n	80033fe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033cc:	f7fe fc08 	bl	8001be0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d803      	bhi.n	80033e4 <HAL_SPI_Transmit+0x20a>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d102      	bne.n	80033ea <HAL_SPI_Transmit+0x210>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e02d      	b.n	800345a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1c6      	bne.n	8003396 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	6839      	ldr	r1, [r7, #0]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fa03 	bl	8003818 <SPI_EndRxTxTransaction>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003458:	2300      	movs	r3, #0
  }
}
 800345a:	4618      	mov	r0, r3
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d001      	beq.n	8003482 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800347e:	2302      	movs	r3, #2
 8003480:	e097      	b.n	80035b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_SPI_Transmit_DMA+0x2a>
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e08f      	b.n	80035b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_SPI_Transmit_DMA+0x3c>
 800349c:	2302      	movs	r3, #2
 800349e:	e088      	b.n	80035b2 <HAL_SPI_Transmit_DMA+0x14e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2203      	movs	r2, #3
 80034ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	88fa      	ldrh	r2, [r7, #6]
 80034c0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ee:	d10f      	bne.n	8003510 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800350e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003514:	4a29      	ldr	r2, [pc, #164]	@ (80035bc <HAL_SPI_Transmit_DMA+0x158>)
 8003516:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800351c:	4a28      	ldr	r2, [pc, #160]	@ (80035c0 <HAL_SPI_Transmit_DMA+0x15c>)
 800351e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003524:	4a27      	ldr	r2, [pc, #156]	@ (80035c4 <HAL_SPI_Transmit_DMA+0x160>)
 8003526:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352c:	2200      	movs	r2, #0
 800352e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	4619      	mov	r1, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	330c      	adds	r3, #12
 8003540:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003546:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003548:	f7fe fd3a 	bl	8001fc0 <HAL_DMA_Start_IT>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	f043 0210 	orr.w	r2, r3, #16
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e023      	b.n	80035b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b40      	cmp	r3, #64	@ 0x40
 8003576:	d007      	beq.n	8003588 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003586:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0220 	orr.w	r2, r2, #32
 800359e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0202 	orr.w	r2, r2, #2
 80035ae:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	080036ad 	.word	0x080036ad
 80035c0:	08003605 	.word	0x08003605
 80035c4:	080036c9 	.word	0x080036c9

080035c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003610:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003612:	f7fe fae5 	bl	8001be0 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003626:	d03b      	beq.n	80036a0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0220 	bic.w	r2, r2, #32
 8003636:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0202 	bic.w	r2, r2, #2
 8003646:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	2164      	movs	r1, #100	@ 0x64
 800364c:	6978      	ldr	r0, [r7, #20]
 800364e:	f000 f8e3 	bl	8003818 <SPI_EndRxTxTransaction>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365c:	f043 0220 	orr.w	r2, r3, #32
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003698:	6978      	ldr	r0, [r7, #20]
 800369a:	f7ff ffa9 	bl	80035f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800369e:	e002      	b.n	80036a6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80036a0:	6978      	ldr	r0, [r7, #20]
 80036a2:	f7ff ff91 	bl	80035c8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff ff8e 	bl	80035dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0203 	bic.w	r2, r2, #3
 80036e4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ea:	f043 0210 	orr.w	r2, r3, #16
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff ff78 	bl	80035f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003718:	f7fe fa62 	bl	8001be0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	4413      	add	r3, r2
 8003726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003728:	f7fe fa5a 	bl	8001be0 <HAL_GetTick>
 800372c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800372e:	4b39      	ldr	r3, [pc, #228]	@ (8003814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	015b      	lsls	r3, r3, #5
 8003734:	0d1b      	lsrs	r3, r3, #20
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	fb02 f303 	mul.w	r3, r2, r3
 800373c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800373e:	e054      	b.n	80037ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d050      	beq.n	80037ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003748:	f7fe fa4a 	bl	8001be0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	429a      	cmp	r2, r3
 8003756:	d902      	bls.n	800375e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d13d      	bne.n	80037da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800376c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003776:	d111      	bne.n	800379c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003780:	d004      	beq.n	800378c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800378a:	d107      	bne.n	800379c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800379a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a4:	d10f      	bne.n	80037c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e017      	b.n	800380a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4013      	ands	r3, r2
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	429a      	cmp	r2, r3
 8003806:	d19b      	bne.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	2000001c 	.word	0x2000001c

08003818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2201      	movs	r2, #1
 800382c:	2102      	movs	r1, #2
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff ff6a 	bl	8003708 <SPI_WaitFlagStateUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e032      	b.n	80038b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800384a:	4b1b      	ldr	r3, [pc, #108]	@ (80038b8 <SPI_EndRxTxTransaction+0xa0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1b      	ldr	r2, [pc, #108]	@ (80038bc <SPI_EndRxTxTransaction+0xa4>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	0d5b      	lsrs	r3, r3, #21
 8003856:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003868:	d112      	bne.n	8003890 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2200      	movs	r2, #0
 8003872:	2180      	movs	r1, #128	@ 0x80
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f7ff ff47 	bl	8003708 <SPI_WaitFlagStateUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d016      	beq.n	80038ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003884:	f043 0220 	orr.w	r2, r3, #32
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e00f      	b.n	80038b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3b01      	subs	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a6:	2b80      	cmp	r3, #128	@ 0x80
 80038a8:	d0f2      	beq.n	8003890 <SPI_EndRxTxTransaction+0x78>
 80038aa:	e000      	b.n	80038ae <SPI_EndRxTxTransaction+0x96>
        break;
 80038ac:	bf00      	nop
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	2000001c 	.word	0x2000001c
 80038bc:	165e9f81 	.word	0x165e9f81

080038c0 <memset>:
 80038c0:	4402      	add	r2, r0
 80038c2:	4603      	mov	r3, r0
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d100      	bne.n	80038ca <memset+0xa>
 80038c8:	4770      	bx	lr
 80038ca:	f803 1b01 	strb.w	r1, [r3], #1
 80038ce:	e7f9      	b.n	80038c4 <memset+0x4>

080038d0 <__libc_init_array>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003908 <__libc_init_array+0x38>)
 80038d4:	4c0d      	ldr	r4, [pc, #52]	@ (800390c <__libc_init_array+0x3c>)
 80038d6:	1b64      	subs	r4, r4, r5
 80038d8:	10a4      	asrs	r4, r4, #2
 80038da:	2600      	movs	r6, #0
 80038dc:	42a6      	cmp	r6, r4
 80038de:	d109      	bne.n	80038f4 <__libc_init_array+0x24>
 80038e0:	4d0b      	ldr	r5, [pc, #44]	@ (8003910 <__libc_init_array+0x40>)
 80038e2:	4c0c      	ldr	r4, [pc, #48]	@ (8003914 <__libc_init_array+0x44>)
 80038e4:	f000 f818 	bl	8003918 <_init>
 80038e8:	1b64      	subs	r4, r4, r5
 80038ea:	10a4      	asrs	r4, r4, #2
 80038ec:	2600      	movs	r6, #0
 80038ee:	42a6      	cmp	r6, r4
 80038f0:	d105      	bne.n	80038fe <__libc_init_array+0x2e>
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f8:	4798      	blx	r3
 80038fa:	3601      	adds	r6, #1
 80038fc:	e7ee      	b.n	80038dc <__libc_init_array+0xc>
 80038fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003902:	4798      	blx	r3
 8003904:	3601      	adds	r6, #1
 8003906:	e7f2      	b.n	80038ee <__libc_init_array+0x1e>
 8003908:	0800e1fc 	.word	0x0800e1fc
 800390c:	0800e1fc 	.word	0x0800e1fc
 8003910:	0800e1fc 	.word	0x0800e1fc
 8003914:	0800e200 	.word	0x0800e200

08003918 <_init>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr

08003924 <_fini>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	bf00      	nop
 8003928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392a:	bc08      	pop	{r3}
 800392c:	469e      	mov	lr, r3
 800392e:	4770      	bx	lr

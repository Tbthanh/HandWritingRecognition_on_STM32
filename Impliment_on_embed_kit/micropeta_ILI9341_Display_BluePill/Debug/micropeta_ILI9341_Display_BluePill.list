
micropeta_ILI9341_Display_BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b18  08003bd4  08003bd4  00004bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ec  080056ec  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  080056ec  080056ec  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056ec  080056ec  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056ec  080056ec  000066ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056f0  080056f0  000066f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080056f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000060  08005754  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08005754  00007288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069de  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abc  00000000  00000000  0000da67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0000f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000583  00000000  00000000  0000fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167cc  00000000  00000000  0001022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094e4  00000000  00000000  000269f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080287  00000000  00000000  0002fedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002290  00000000  00000000  000b01a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c2  00000000  00000000  000b2438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bbc 	.word	0x08003bbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003bbc 	.word	0x08003bbc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__gesf2>:
 8000368:	f04f 3cff 	mov.w	ip, #4294967295
 800036c:	e006      	b.n	800037c <__cmpsf2+0x4>
 800036e:	bf00      	nop

08000370 <__lesf2>:
 8000370:	f04f 0c01 	mov.w	ip, #1
 8000374:	e002      	b.n	800037c <__cmpsf2+0x4>
 8000376:	bf00      	nop

08000378 <__cmpsf2>:
 8000378:	f04f 0c01 	mov.w	ip, #1
 800037c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000380:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000384:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000388:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800038c:	bf18      	it	ne
 800038e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000392:	d011      	beq.n	80003b8 <__cmpsf2+0x40>
 8000394:	b001      	add	sp, #4
 8000396:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800039a:	bf18      	it	ne
 800039c:	ea90 0f01 	teqne	r0, r1
 80003a0:	bf58      	it	pl
 80003a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003a6:	bf88      	it	hi
 80003a8:	17c8      	asrhi	r0, r1, #31
 80003aa:	bf38      	it	cc
 80003ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003b0:	bf18      	it	ne
 80003b2:	f040 0001 	orrne.w	r0, r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	d102      	bne.n	80003c4 <__cmpsf2+0x4c>
 80003be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003c2:	d105      	bne.n	80003d0 <__cmpsf2+0x58>
 80003c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003c8:	d1e4      	bne.n	8000394 <__cmpsf2+0x1c>
 80003ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003ce:	d0e1      	beq.n	8000394 <__cmpsf2+0x1c>
 80003d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop

080003d8 <__aeabi_cfrcmple>:
 80003d8:	4684      	mov	ip, r0
 80003da:	4608      	mov	r0, r1
 80003dc:	4661      	mov	r1, ip
 80003de:	e7ff      	b.n	80003e0 <__aeabi_cfcmpeq>

080003e0 <__aeabi_cfcmpeq>:
 80003e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80003e2:	f7ff ffc9 	bl	8000378 <__cmpsf2>
 80003e6:	2800      	cmp	r0, #0
 80003e8:	bf48      	it	mi
 80003ea:	f110 0f00 	cmnmi.w	r0, #0
 80003ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080003f0 <__aeabi_fcmpeq>:
 80003f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80003f4:	f7ff fff4 	bl	80003e0 <__aeabi_cfcmpeq>
 80003f8:	bf0c      	ite	eq
 80003fa:	2001      	moveq	r0, #1
 80003fc:	2000      	movne	r0, #0
 80003fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000402:	bf00      	nop

08000404 <__aeabi_fcmplt>:
 8000404:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000408:	f7ff ffea 	bl	80003e0 <__aeabi_cfcmpeq>
 800040c:	bf34      	ite	cc
 800040e:	2001      	movcc	r0, #1
 8000410:	2000      	movcs	r0, #0
 8000412:	f85d fb08 	ldr.w	pc, [sp], #8
 8000416:	bf00      	nop

08000418 <__aeabi_fcmple>:
 8000418:	f84d ed08 	str.w	lr, [sp, #-8]!
 800041c:	f7ff ffe0 	bl	80003e0 <__aeabi_cfcmpeq>
 8000420:	bf94      	ite	ls
 8000422:	2001      	movls	r0, #1
 8000424:	2000      	movhi	r0, #0
 8000426:	f85d fb08 	ldr.w	pc, [sp], #8
 800042a:	bf00      	nop

0800042c <__aeabi_fcmpge>:
 800042c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000430:	f7ff ffd2 	bl	80003d8 <__aeabi_cfrcmple>
 8000434:	bf94      	ite	ls
 8000436:	2001      	movls	r0, #1
 8000438:	2000      	movhi	r0, #0
 800043a:	f85d fb08 	ldr.w	pc, [sp], #8
 800043e:	bf00      	nop

08000440 <__aeabi_fcmpgt>:
 8000440:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000444:	f7ff ffc8 	bl	80003d8 <__aeabi_cfrcmple>
 8000448:	bf34      	ite	cc
 800044a:	2001      	movcc	r0, #1
 800044c:	2000      	movcs	r0, #0
 800044e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000452:	bf00      	nop

08000454 <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b089      	sub	sp, #36	@ 0x24
 8000458:	af00      	add	r7, sp, #0
 800045a:	4604      	mov	r4, r0
 800045c:	4608      	mov	r0, r1
 800045e:	4611      	mov	r1, r2
 8000460:	461a      	mov	r2, r3
 8000462:	4623      	mov	r3, r4
 8000464:	80fb      	strh	r3, [r7, #6]
 8000466:	4603      	mov	r3, r0
 8000468:	80bb      	strh	r3, [r7, #4]
 800046a:	460b      	mov	r3, r1
 800046c:	807b      	strh	r3, [r7, #2]
 800046e:	4613      	mov	r3, r2
 8000470:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 8000472:	887b      	ldrh	r3, [r7, #2]
 8000474:	3b01      	subs	r3, #1
 8000476:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 800047c:	2301      	movs	r3, #1
 800047e:	617b      	str	r3, [r7, #20]
	int dy = 1;
 8000480:	2301      	movs	r3, #1
 8000482:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 8000484:	887b      	ldrh	r3, [r7, #2]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 800048e:	e08d      	b.n	80005ac <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	b29a      	uxth	r2, r3
 8000494:	88fb      	ldrh	r3, [r7, #6]
 8000496:	4413      	add	r3, r2
 8000498:	b298      	uxth	r0, r3
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	b29a      	uxth	r2, r3
 800049e:	88bb      	ldrh	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	883a      	ldrh	r2, [r7, #0]
 80004a6:	4619      	mov	r1, r3
 80004a8:	f000 fd82 	bl	8000fb0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 80004ac:	69bb      	ldr	r3, [r7, #24]
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	88fb      	ldrh	r3, [r7, #6]
 80004b2:	4413      	add	r3, r2
 80004b4:	b298      	uxth	r0, r3
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	88bb      	ldrh	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	b29b      	uxth	r3, r3
 80004c0:	883a      	ldrh	r2, [r7, #0]
 80004c2:	4619      	mov	r1, r3
 80004c4:	f000 fd74 	bl	8000fb0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 80004c8:	69bb      	ldr	r3, [r7, #24]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	88fa      	ldrh	r2, [r7, #6]
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	b298      	uxth	r0, r3
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	88bb      	ldrh	r3, [r7, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	b29b      	uxth	r3, r3
 80004dc:	883a      	ldrh	r2, [r7, #0]
 80004de:	4619      	mov	r1, r3
 80004e0:	f000 fd66 	bl	8000fb0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	88fa      	ldrh	r2, [r7, #6]
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	b298      	uxth	r0, r3
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	88bb      	ldrh	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	883a      	ldrh	r2, [r7, #0]
 80004fa:	4619      	mov	r1, r3
 80004fc:	f000 fd58 	bl	8000fb0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	b29b      	uxth	r3, r3
 8000504:	88fa      	ldrh	r2, [r7, #6]
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	b298      	uxth	r0, r3
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	b29b      	uxth	r3, r3
 800050e:	88ba      	ldrh	r2, [r7, #4]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	b29b      	uxth	r3, r3
 8000514:	883a      	ldrh	r2, [r7, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	f000 fd4a 	bl	8000fb0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	b29b      	uxth	r3, r3
 8000520:	88fa      	ldrh	r2, [r7, #6]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	b298      	uxth	r0, r3
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	b29b      	uxth	r3, r3
 800052a:	88ba      	ldrh	r2, [r7, #4]
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	b29b      	uxth	r3, r3
 8000530:	883a      	ldrh	r2, [r7, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	f000 fd3c 	bl	8000fb0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	b29a      	uxth	r2, r3
 800053c:	88fb      	ldrh	r3, [r7, #6]
 800053e:	4413      	add	r3, r2
 8000540:	b298      	uxth	r0, r3
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	b29b      	uxth	r3, r3
 8000546:	88ba      	ldrh	r2, [r7, #4]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	b29b      	uxth	r3, r3
 800054c:	883a      	ldrh	r2, [r7, #0]
 800054e:	4619      	mov	r1, r3
 8000550:	f000 fd2e 	bl	8000fb0 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	b29a      	uxth	r2, r3
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	4413      	add	r3, r2
 800055c:	b298      	uxth	r0, r3
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	b29b      	uxth	r3, r3
 8000562:	88ba      	ldrh	r2, [r7, #4]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	b29b      	uxth	r3, r3
 8000568:	883a      	ldrh	r2, [r7, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	f000 fd20 	bl	8000fb0 <ILI9341_DrawPixel>

		if (err <= 0)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b00      	cmp	r3, #0
 8000574:	dc09      	bgt.n	800058a <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	3301      	adds	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
			err += dy;
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	4413      	add	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]
			dy += 2;
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	3302      	adds	r3, #2
 8000588:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b00      	cmp	r3, #0
 800058e:	dd0d      	ble.n	80005ac <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	3b01      	subs	r3, #1
 8000594:	61fb      	str	r3, [r7, #28]
			dx += 2;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3302      	adds	r3, #2
 800059a:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	425b      	negs	r3, r3
 80005a0:	005a      	lsls	r2, r3, #1
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	4413      	add	r3, r2
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	4413      	add	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 80005ac:	69fa      	ldr	r2, [r7, #28]
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	f6bf af6d 	bge.w	8000490 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3724      	adds	r7, #36	@ 0x24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd90      	pop	{r4, r7, pc}

080005c0 <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08b      	sub	sp, #44	@ 0x2c
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4604      	mov	r4, r0
 80005c8:	4608      	mov	r0, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	4623      	mov	r3, r4
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	4603      	mov	r3, r0
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	807b      	strh	r3, [r7, #2]
 80005da:	4613      	mov	r3, r2
 80005dc:	803b      	strh	r3, [r7, #0]

	int x = radius;
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
	int y = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	f1c3 0301 	rsb	r3, r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]

	while (x >= y)
 80005f8:	e061      	b.n	80006be <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	e018      	b.n	8000636 <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	b298      	uxth	r0, r3
 8000608:	6a3b      	ldr	r3, [r7, #32]
 800060a:	b29a      	uxth	r2, r3
 800060c:	88bb      	ldrh	r3, [r7, #4]
 800060e:	4413      	add	r3, r2
 8000610:	b29b      	uxth	r3, r3
 8000612:	883a      	ldrh	r2, [r7, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f000 fccb 	bl	8000fb0 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	b298      	uxth	r0, r3
 800061e:	6a3b      	ldr	r3, [r7, #32]
 8000620:	b29b      	uxth	r3, r3
 8000622:	88ba      	ldrh	r2, [r7, #4]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	883a      	ldrh	r2, [r7, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	f000 fcc0 	bl	8000fb0 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	3301      	adds	r3, #1
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	88fa      	ldrh	r2, [r7, #6]
 8000638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063a:	4413      	add	r3, r2
 800063c:	693a      	ldr	r2, [r7, #16]
 800063e:	429a      	cmp	r2, r3
 8000640:	dde0      	ble.n	8000604 <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 8000642:	88fa      	ldrh	r2, [r7, #6]
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	e018      	b.n	800067e <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	b298      	uxth	r0, r3
 8000650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000652:	b29a      	uxth	r2, r3
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	b29b      	uxth	r3, r3
 800065a:	883a      	ldrh	r2, [r7, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	f000 fca7 	bl	8000fb0 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	b298      	uxth	r0, r3
 8000666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000668:	b29b      	uxth	r3, r3
 800066a:	88ba      	ldrh	r2, [r7, #4]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	b29b      	uxth	r3, r3
 8000670:	883a      	ldrh	r2, [r7, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	f000 fc9c 	bl	8000fb0 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	88fa      	ldrh	r2, [r7, #6]
 8000680:	6a3b      	ldr	r3, [r7, #32]
 8000682:	4413      	add	r3, r2
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	429a      	cmp	r2, r3
 8000688:	dde0      	ble.n	800064c <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 800068a:	6a3b      	ldr	r3, [r7, #32]
 800068c:	3301      	adds	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	4413      	add	r3, r2
 8000696:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	3302      	adds	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	005a      	lsls	r2, r3, #1
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	4413      	add	r3, r2
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	dd09      	ble.n	80006be <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 80006aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ac:	3b01      	subs	r3, #1
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
			radiusError += xChange;
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	4413      	add	r3, r2
 80006b6:	617b      	str	r3, [r7, #20]
			xChange += 2;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	3302      	adds	r3, #2
 80006bc:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 80006be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006c0:	6a3b      	ldr	r3, [r7, #32]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	da99      	bge.n	80005fa <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	372c      	adds	r7, #44	@ 0x2c
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}

080006d0 <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b087      	sub	sp, #28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4604      	mov	r4, r0
 80006d8:	4608      	mov	r0, r1
 80006da:	4611      	mov	r1, r2
 80006dc:	461a      	mov	r2, r3
 80006de:	4623      	mov	r3, r4
 80006e0:	80fb      	strh	r3, [r7, #6]
 80006e2:	4603      	mov	r3, r0
 80006e4:	80bb      	strh	r3, [r7, #4]
 80006e6:	460b      	mov	r3, r1
 80006e8:	807b      	strh	r3, [r7, #2]
 80006ea:	4613      	mov	r3, r2
 80006ec:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8000704:	887a      	ldrh	r2, [r7, #2]
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fdd8 	bl	80002c0 <__aeabi_i2f>
 8000710:	4603      	mov	r3, r0
 8000712:	60fb      	str	r3, [r7, #12]
	if(negCalc < 0) negX = 1;
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff fe73 	bl	8000404 <__aeabi_fcmplt>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <ILI9341_DrawHollowRectangleCoord+0x58>
 8000724:	2301      	movs	r3, #1
 8000726:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000728:	f04f 0300 	mov.w	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 800072e:	883a      	ldrh	r2, [r7, #0]
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fdc3 	bl	80002c0 <__aeabi_i2f>
 800073a:	4603      	mov	r3, r0
 800073c:	60fb      	str	r3, [r7, #12]
	if(negCalc < 0) negY = 1;
 800073e:	f04f 0100 	mov.w	r1, #0
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f7ff fe5e 	bl	8000404 <__aeabi_fcmplt>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <ILI9341_DrawHollowRectangleCoord+0x82>
 800074e:	2301      	movs	r3, #1
 8000750:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 8000752:	7cfb      	ldrb	r3, [r7, #19]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d104      	bne.n	8000762 <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 8000758:	887a      	ldrh	r2, [r7, #2]
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	82fb      	strh	r3, [r7, #22]
 8000760:	e003      	b.n	800076a <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 800076a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800076c:	8afa      	ldrh	r2, [r7, #22]
 800076e:	88b9      	ldrh	r1, [r7, #4]
 8000770:	88f8      	ldrh	r0, [r7, #6]
 8000772:	f000 fcdf 	bl	8001134 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 8000776:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000778:	8afa      	ldrh	r2, [r7, #22]
 800077a:	8839      	ldrh	r1, [r7, #0]
 800077c:	88f8      	ldrh	r0, [r7, #6]
 800077e:	f000 fcd9 	bl	8001134 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 8000782:	7cbb      	ldrb	r3, [r7, #18]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d104      	bne.n	8000792 <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 8000788:	883a      	ldrh	r2, [r7, #0]
 800078a:	88bb      	ldrh	r3, [r7, #4]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	82bb      	strh	r3, [r7, #20]
 8000790:	e003      	b.n	800079a <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 8000792:	88ba      	ldrh	r2, [r7, #4]
 8000794:	883b      	ldrh	r3, [r7, #0]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 800079a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800079c:	8aba      	ldrh	r2, [r7, #20]
 800079e:	88b9      	ldrh	r1, [r7, #4]
 80007a0:	88f8      	ldrh	r0, [r7, #6]
 80007a2:	f000 fd0b 	bl	80011bc <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 80007a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80007a8:	8aba      	ldrh	r2, [r7, #20]
 80007aa:	88b9      	ldrh	r1, [r7, #4]
 80007ac:	8878      	ldrh	r0, [r7, #2]
 80007ae:	f000 fd05 	bl	80011bc <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 80007b2:	8afb      	ldrh	r3, [r7, #22]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <ILI9341_DrawHollowRectangleCoord+0xee>
 80007b8:	8abb      	ldrh	r3, [r7, #20]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d005      	beq.n	80007ca <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 80007be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007c0:	8839      	ldrh	r1, [r7, #0]
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fbf3 	bl	8000fb0 <ILI9341_DrawPixel>
	}
}
 80007ca:	bf00      	nop
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd90      	pop	{r4, r7, pc}

080007d2 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80007d2:	b590      	push	{r4, r7, lr}
 80007d4:	b08d      	sub	sp, #52	@ 0x34
 80007d6:	af02      	add	r7, sp, #8
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	4611      	mov	r1, r2
 80007dc:	461a      	mov	r2, r3
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	460b      	mov	r3, r1
 80007e4:	81bb      	strh	r3, [r7, #12]
 80007e6:	4613      	mov	r3, r2
 80007e8:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	2b1e      	cmp	r3, #30
 80007ee:	d964      	bls.n	80008ba <ILI9341_DrawChar+0xe8>
 80007f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	db60      	blt.n	80008ba <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	3301      	adds	r3, #1
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	3302      	adds	r3, #2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	3303      	adds	r3, #3
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	3b20      	subs	r3, #32
 800081a:	7ffa      	ldrb	r2, [r7, #31]
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	3304      	adds	r3, #4
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	4413      	add	r3, r2
 8000826:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000828:	7fbb      	ldrb	r3, [r7, #30]
 800082a:	b29a      	uxth	r2, r3
 800082c:	7f7b      	ldrb	r3, [r7, #29]
 800082e:	b29c      	uxth	r4, r3
 8000830:	88f9      	ldrh	r1, [r7, #6]
 8000832:	89b8      	ldrh	r0, [r7, #12]
 8000834:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	4623      	mov	r3, r4
 800083a:	f000 fc1f 	bl	800107c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
 8000842:	e035      	b.n	80008b0 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
 8000848:	e02b      	b.n	80008a2 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800084a:	7f3b      	ldrb	r3, [r7, #28]
 800084c:	6a3a      	ldr	r2, [r7, #32]
 800084e:	fb03 f202 	mul.w	r2, r3, r2
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	10db      	asrs	r3, r3, #3
 8000856:	f003 031f 	and.w	r3, r3, #31
 800085a:	4413      	add	r3, r2
 800085c:	3301      	adds	r3, #1
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	2201      	movs	r2, #1
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000874:	7dfa      	ldrb	r2, [r7, #23]
 8000876:	7dbb      	ldrb	r3, [r7, #22]
 8000878:	4013      	ands	r3, r2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00d      	beq.n	800089c <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	b29a      	uxth	r2, r3
 8000884:	89bb      	ldrh	r3, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	b298      	uxth	r0, r3
 800088a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088c:	b29a      	uxth	r2, r3
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	4413      	add	r3, r2
 8000892:	b29b      	uxth	r3, r3
 8000894:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000896:	4619      	mov	r1, r3
 8000898:	f000 fb8a 	bl	8000fb0 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	3301      	adds	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
 80008a2:	7fbb      	ldrb	r3, [r7, #30]
 80008a4:	6a3a      	ldr	r2, [r7, #32]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	dbcf      	blt.n	800084a <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 80008aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ac:	3301      	adds	r3, #1
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80008b0:	7f7b      	ldrb	r3, [r7, #29]
 80008b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbc5      	blt.n	8000844 <ILI9341_DrawChar+0x72>
 80008b8:	e000      	b.n	80008bc <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80008ba:	bf00      	nop
			}
		}
	}
}
 80008bc:	372c      	adds	r7, #44	@ 0x2c
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd90      	pop	{r4, r7, pc}

080008c2 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b08a      	sub	sp, #40	@ 0x28
 80008c6:	af02      	add	r7, sp, #8
 80008c8:	60f8      	str	r0, [r7, #12]
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	4611      	mov	r1, r2
 80008ce:	461a      	mov	r2, r3
 80008d0:	460b      	mov	r3, r1
 80008d2:	80fb      	strh	r3, [r7, #6]
 80008d4:	4613      	mov	r3, r2
 80008d6:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	3301      	adds	r3, #1
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80008e6:	e02d      	b.n	8000944 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	7818      	ldrb	r0, [r3, #0]
 80008ec:	88b9      	ldrh	r1, [r7, #4]
 80008ee:	88fa      	ldrh	r2, [r7, #6]
 80008f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	460b      	mov	r3, r1
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	f7ff ff69 	bl	80007d2 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	3b20      	subs	r3, #32
 8000906:	7ffa      	ldrb	r2, [r7, #31]
 8000908:	fb02 f303 	mul.w	r3, r2, r3
 800090c:	3304      	adds	r3, #4
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	4413      	add	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800091a:	7dfb      	ldrb	r3, [r7, #23]
 800091c:	1c9a      	adds	r2, r3, #2
 800091e:	7fbb      	ldrb	r3, [r7, #30]
 8000920:	429a      	cmp	r2, r3
 8000922:	da07      	bge.n	8000934 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	b29a      	uxth	r2, r3
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	4413      	add	r3, r2
 800092c:	b29b      	uxth	r3, r3
 800092e:	3302      	adds	r3, #2
 8000930:	80fb      	strh	r3, [r7, #6]
 8000932:	e004      	b.n	800093e <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8000934:	7fbb      	ldrb	r3, [r7, #30]
 8000936:	b29a      	uxth	r2, r3
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	4413      	add	r3, r2
 800093c:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3301      	adds	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1cd      	bne.n	80008e8 <ILI9341_DrawText+0x26>
	}
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a06      	ldr	r2, [pc, #24]	@ (800097c <HAL_SPI_TxCpltCallback+0x24>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d105      	bne.n	8000974 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800096e:	4804      	ldr	r0, [pc, #16]	@ (8000980 <HAL_SPI_TxCpltCallback+0x28>)
 8000970:	f001 fcb6 	bl	80022e0 <HAL_GPIO_WritePin>
  }
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000007c 	.word	0x2000007c
 8000980:	40010c00 	.word	0x40010c00

08000984 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800098e:	bf00      	nop
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <ILI9341_SPI_Tx+0x30>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	2b02      	cmp	r3, #2
 800099c:	d1f8      	bne.n	8000990 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <ILI9341_SPI_Tx+0x30>)
 80009a6:	f002 fa59 	bl	8002e5c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000007c 	.word	0x2000007c

080009b8 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80009c4:	bf00      	nop
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <ILI9341_SPI_TxBuffer+0x30>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f003 0302 	and.w	r3, r3, #2
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d1f8      	bne.n	80009c6 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80009d4:	887b      	ldrh	r3, [r7, #2]
 80009d6:	461a      	mov	r2, r3
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <ILI9341_SPI_TxBuffer+0x30>)
 80009dc:	f002 fa3e 	bl	8002e5c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000007c 	.word	0x2000007c

080009ec <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80009f6:	2200      	movs	r2, #0
 80009f8:	2101      	movs	r1, #1
 80009fa:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <ILI9341_WriteCommand+0x30>)
 80009fc:	f001 fc70 	bl	80022e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <ILI9341_WriteCommand+0x30>)
 8000a08:	f001 fc6a 	bl	80022e0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ffb8 	bl	8000984 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40010c00 	.word	0x40010c00

08000a20 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <ILI9341_WriteData+0x30>)
 8000a30:	f001 fc56 	bl	80022e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <ILI9341_WriteData+0x30>)
 8000a3c:	f001 fc50 	bl	80022e0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff9e 	bl	8000984 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40010c00 	.word	0x40010c00

08000a54 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000a60:	2201      	movs	r2, #1
 8000a62:	2101      	movs	r1, #1
 8000a64:	4808      	ldr	r0, [pc, #32]	@ (8000a88 <ILI9341_WriteBuffer+0x34>)
 8000a66:	f001 fc3b 	bl	80022e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a70:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <ILI9341_WriteBuffer+0x34>)
 8000a72:	f001 fc35 	bl	80022e0 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000a76:	887b      	ldrh	r3, [r7, #2]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ff9c 	bl	80009b8 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40010c00 	.word	0x40010c00

08000a8c <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4604      	mov	r4, r0
 8000a94:	4608      	mov	r0, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4623      	mov	r3, r4
 8000a9c:	80fb      	strh	r3, [r7, #6]
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80bb      	strh	r3, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	807b      	strh	r3, [r7, #2]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000ac4:	887b      	ldrh	r3, [r7, #2]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000aca:	202a      	movs	r0, #42	@ 0x2a
 8000acc:	f7ff ff8e 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ffbc 	bl	8000a54 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000adc:	88bb      	ldrh	r3, [r7, #4]
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000aec:	883b      	ldrh	r3, [r7, #0]
 8000aee:	0a1b      	lsrs	r3, r3, #8
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000af6:	883b      	ldrh	r3, [r7, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000afc:	202b      	movs	r0, #43	@ 0x2b
 8000afe:	f7ff ff75 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	2104      	movs	r1, #4
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ffa3 	bl	8000a54 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000b0e:	202c      	movs	r0, #44	@ 0x2c
 8000b10:	f7ff ff6c 	bl	80009ec <ILI9341_WriteCommand>
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd90      	pop	{r4, r7, pc}

08000b1c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000b20:	2200      	movs	r2, #0
 8000b22:	2102      	movs	r1, #2
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <ILI9341_Reset+0x40>)
 8000b26:	f001 fbdb 	bl	80022e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f000 ff34 	bl	8001998 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b36:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <ILI9341_Reset+0x40>)
 8000b38:	f001 fbd2 	bl	80022e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b3c:	200a      	movs	r0, #10
 8000b3e:	f000 ff2b 	bl	8001998 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000b42:	2201      	movs	r2, #1
 8000b44:	2102      	movs	r1, #2
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <ILI9341_Reset+0x40>)
 8000b48:	f001 fbca 	bl	80022e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b52:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <ILI9341_Reset+0x40>)
 8000b54:	f001 fbc4 	bl	80022e0 <HAL_GPIO_WritePin>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40010c00 	.word	0x40010c00

08000b60 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000b64:	2201      	movs	r2, #1
 8000b66:	2102      	movs	r1, #2
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <ILI9341_Enable+0x14>)
 8000b6a:	f001 fbb9 	bl	80022e0 <HAL_GPIO_WritePin>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010c00 	.word	0x40010c00

08000b78 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000b7c:	f7ff fff0 	bl	8000b60 <ILI9341_Enable>
	ILI9341_Reset();
 8000b80:	f7ff ffcc 	bl	8000b1c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f7ff ff31 	bl	80009ec <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000b8a:	200a      	movs	r0, #10
 8000b8c:	f000 ff04 	bl	8001998 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000b90:	20cb      	movs	r0, #203	@ 0xcb
 8000b92:	f7ff ff2b 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000b96:	2039      	movs	r0, #57	@ 0x39
 8000b98:	f7ff ff42 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000b9c:	202c      	movs	r0, #44	@ 0x2c
 8000b9e:	f7ff ff3f 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff ff3c 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000ba8:	2034      	movs	r0, #52	@ 0x34
 8000baa:	f7ff ff39 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f7ff ff36 	bl	8000a20 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000bb4:	20cf      	movs	r0, #207	@ 0xcf
 8000bb6:	f7ff ff19 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff ff30 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000bc0:	20c1      	movs	r0, #193	@ 0xc1
 8000bc2:	f7ff ff2d 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000bc6:	2030      	movs	r0, #48	@ 0x30
 8000bc8:	f7ff ff2a 	bl	8000a20 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000bcc:	20e8      	movs	r0, #232	@ 0xe8
 8000bce:	f7ff ff0d 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000bd2:	2085      	movs	r0, #133	@ 0x85
 8000bd4:	f7ff ff24 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff ff21 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000bde:	2078      	movs	r0, #120	@ 0x78
 8000be0:	f7ff ff1e 	bl	8000a20 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000be4:	20ea      	movs	r0, #234	@ 0xea
 8000be6:	f7ff ff01 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ff18 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff ff15 	bl	8000a20 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000bf6:	20ed      	movs	r0, #237	@ 0xed
 8000bf8:	f7ff fef8 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000bfc:	2064      	movs	r0, #100	@ 0x64
 8000bfe:	f7ff ff0f 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000c02:	2003      	movs	r0, #3
 8000c04:	f7ff ff0c 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000c08:	2012      	movs	r0, #18
 8000c0a:	f7ff ff09 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000c0e:	2081      	movs	r0, #129	@ 0x81
 8000c10:	f7ff ff06 	bl	8000a20 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000c14:	20f7      	movs	r0, #247	@ 0xf7
 8000c16:	f7ff fee9 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000c1a:	2020      	movs	r0, #32
 8000c1c:	f7ff ff00 	bl	8000a20 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000c20:	20c0      	movs	r0, #192	@ 0xc0
 8000c22:	f7ff fee3 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000c26:	2023      	movs	r0, #35	@ 0x23
 8000c28:	f7ff fefa 	bl	8000a20 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000c2c:	20c1      	movs	r0, #193	@ 0xc1
 8000c2e:	f7ff fedd 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000c32:	2010      	movs	r0, #16
 8000c34:	f7ff fef4 	bl	8000a20 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000c38:	20c5      	movs	r0, #197	@ 0xc5
 8000c3a:	f7ff fed7 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000c3e:	203e      	movs	r0, #62	@ 0x3e
 8000c40:	f7ff feee 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000c44:	2028      	movs	r0, #40	@ 0x28
 8000c46:	f7ff feeb 	bl	8000a20 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000c4a:	20c7      	movs	r0, #199	@ 0xc7
 8000c4c:	f7ff fece 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000c50:	2086      	movs	r0, #134	@ 0x86
 8000c52:	f7ff fee5 	bl	8000a20 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000c56:	2036      	movs	r0, #54	@ 0x36
 8000c58:	f7ff fec8 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000c5c:	2048      	movs	r0, #72	@ 0x48
 8000c5e:	f7ff fedf 	bl	8000a20 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000c62:	203a      	movs	r0, #58	@ 0x3a
 8000c64:	f7ff fec2 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000c68:	2055      	movs	r0, #85	@ 0x55
 8000c6a:	f7ff fed9 	bl	8000a20 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000c6e:	20b1      	movs	r0, #177	@ 0xb1
 8000c70:	f7ff febc 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fed3 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000c7a:	2018      	movs	r0, #24
 8000c7c:	f7ff fed0 	bl	8000a20 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000c80:	20b6      	movs	r0, #182	@ 0xb6
 8000c82:	f7ff feb3 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000c86:	2008      	movs	r0, #8
 8000c88:	f7ff feca 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000c8c:	2082      	movs	r0, #130	@ 0x82
 8000c8e:	f7ff fec7 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000c92:	2027      	movs	r0, #39	@ 0x27
 8000c94:	f7ff fec4 	bl	8000a20 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000c98:	20f2      	movs	r0, #242	@ 0xf2
 8000c9a:	f7ff fea7 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff febe 	bl	8000a20 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000ca4:	2026      	movs	r0, #38	@ 0x26
 8000ca6:	f7ff fea1 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff feb8 	bl	8000a20 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000cb0:	20e0      	movs	r0, #224	@ 0xe0
 8000cb2:	f7ff fe9b 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f7ff feb2 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000cbc:	2031      	movs	r0, #49	@ 0x31
 8000cbe:	f7ff feaf 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000cc2:	202b      	movs	r0, #43	@ 0x2b
 8000cc4:	f7ff feac 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000cc8:	200c      	movs	r0, #12
 8000cca:	f7ff fea9 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000cce:	200e      	movs	r0, #14
 8000cd0:	f7ff fea6 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000cd4:	2008      	movs	r0, #8
 8000cd6:	f7ff fea3 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000cda:	204e      	movs	r0, #78	@ 0x4e
 8000cdc:	f7ff fea0 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000ce0:	20f1      	movs	r0, #241	@ 0xf1
 8000ce2:	f7ff fe9d 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000ce6:	2037      	movs	r0, #55	@ 0x37
 8000ce8:	f7ff fe9a 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000cec:	2007      	movs	r0, #7
 8000cee:	f7ff fe97 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000cf2:	2010      	movs	r0, #16
 8000cf4:	f7ff fe94 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f7ff fe91 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000cfe:	200e      	movs	r0, #14
 8000d00:	f7ff fe8e 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000d04:	2009      	movs	r0, #9
 8000d06:	f7ff fe8b 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff fe88 	bl	8000a20 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000d10:	20e1      	movs	r0, #225	@ 0xe1
 8000d12:	f7ff fe6b 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fe82 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d1c:	200e      	movs	r0, #14
 8000d1e:	f7ff fe7f 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000d22:	2014      	movs	r0, #20
 8000d24:	f7ff fe7c 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f7ff fe79 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000d2e:	2011      	movs	r0, #17
 8000d30:	f7ff fe76 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000d34:	2007      	movs	r0, #7
 8000d36:	f7ff fe73 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000d3a:	2031      	movs	r0, #49	@ 0x31
 8000d3c:	f7ff fe70 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000d40:	20c1      	movs	r0, #193	@ 0xc1
 8000d42:	f7ff fe6d 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000d46:	2048      	movs	r0, #72	@ 0x48
 8000d48:	f7ff fe6a 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000d4c:	2008      	movs	r0, #8
 8000d4e:	f7ff fe67 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000d52:	200f      	movs	r0, #15
 8000d54:	f7ff fe64 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000d58:	200c      	movs	r0, #12
 8000d5a:	f7ff fe61 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000d5e:	2031      	movs	r0, #49	@ 0x31
 8000d60:	f7ff fe5e 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000d64:	2036      	movs	r0, #54	@ 0x36
 8000d66:	f7ff fe5b 	bl	8000a20 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f7ff fe58 	bl	8000a20 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000d70:	2011      	movs	r0, #17
 8000d72:	f7ff fe3b 	bl	80009ec <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000d76:	2064      	movs	r0, #100	@ 0x64
 8000d78:	f000 fe0e 	bl	8001998 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000d7c:	2029      	movs	r0, #41	@ 0x29
 8000d7e:	f7ff fe35 	bl	80009ec <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f802 	bl	8000d8c <ILI9341_SetRotation>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000d96:	2036      	movs	r0, #54	@ 0x36
 8000d98:	f7ff fe28 	bl	80009ec <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f000 fdfb 	bl	8001998 <HAL_Delay>

	switch(rotation)
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d837      	bhi.n	8000e18 <ILI9341_SetRotation+0x8c>
 8000da8:	a201      	add	r2, pc, #4	@ (adr r2, 8000db0 <ILI9341_SetRotation+0x24>)
 8000daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dae:	bf00      	nop
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000dd7 	.word	0x08000dd7
 8000db8:	08000ded 	.word	0x08000ded
 8000dbc:	08000e03 	.word	0x08000e03
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000dc0:	2048      	movs	r0, #72	@ 0x48
 8000dc2:	f7ff fe2d 	bl	8000a20 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <ILI9341_SetRotation+0x98>)
 8000dc8:	22f0      	movs	r2, #240	@ 0xf0
 8000dca:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <ILI9341_SetRotation+0x9c>)
 8000dce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000dd2:	801a      	strh	r2, [r3, #0]
		break;
 8000dd4:	e021      	b.n	8000e1a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000dd6:	2028      	movs	r0, #40	@ 0x28
 8000dd8:	f7ff fe22 	bl	8000a20 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <ILI9341_SetRotation+0x98>)
 8000dde:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000de2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000de4:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <ILI9341_SetRotation+0x9c>)
 8000de6:	22f0      	movs	r2, #240	@ 0xf0
 8000de8:	801a      	strh	r2, [r3, #0]
		break;
 8000dea:	e016      	b.n	8000e1a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000dec:	2088      	movs	r0, #136	@ 0x88
 8000dee:	f7ff fe17 	bl	8000a20 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <ILI9341_SetRotation+0x98>)
 8000df4:	22f0      	movs	r2, #240	@ 0xf0
 8000df6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <ILI9341_SetRotation+0x9c>)
 8000dfa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000dfe:	801a      	strh	r2, [r3, #0]
		break;
 8000e00:	e00b      	b.n	8000e1a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000e02:	20e8      	movs	r0, #232	@ 0xe8
 8000e04:	f7ff fe0c 	bl	8000a20 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <ILI9341_SetRotation+0x98>)
 8000e0a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e0e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <ILI9341_SetRotation+0x9c>)
 8000e12:	22f0      	movs	r2, #240	@ 0xf0
 8000e14:	801a      	strh	r2, [r3, #0]
		break;
 8000e16:	e000      	b.n	8000e1a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000e18:	bf00      	nop
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000002 	.word	0x20000002
 8000e28:	20000000 	.word	0x20000000

08000e2c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e30:	b08d      	sub	sp, #52	@ 0x34
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	6039      	str	r1, [r7, #0]
 8000e38:	80fb      	strh	r3, [r7, #6]
 8000e3a:	466b      	mov	r3, sp
 8000e3c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e4a:	d202      	bcs.n	8000e52 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e50:	e002      	b.n	8000e58 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000e52:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	483f      	ldr	r0, [pc, #252]	@ (8000f5c <ILI9341_DrawColorBurst+0x130>)
 8000e5e:	f001 fa3f 	bl	80022e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e68:	483c      	ldr	r0, [pc, #240]	@ (8000f5c <ILI9341_DrawColorBurst+0x130>)
 8000e6a:	f001 fa39 	bl	80022e0 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8000e78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	61fb      	str	r3, [r7, #28]
 8000e80:	2300      	movs	r3, #0
 8000e82:	4688      	mov	r8, r1
 8000e84:	4699      	mov	r9, r3
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	460c      	mov	r4, r1
 8000e9e:	461d      	mov	r5, r3
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	f04f 0300 	mov.w	r3, #0
 8000ea8:	00eb      	lsls	r3, r5, #3
 8000eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000eae:	00e2      	lsls	r2, r4, #3
 8000eb0:	1dcb      	adds	r3, r1, #7
 8000eb2:	08db      	lsrs	r3, r3, #3
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	ebad 0d03 	sub.w	sp, sp, r3
 8000eba:	466b      	mov	r3, sp
 8000ebc:	3300      	adds	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ec4:	e00e      	b.n	8000ee4 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eca:	4413      	add	r3, r2
 8000ecc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000ed0:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	b2d1      	uxtb	r1, r2
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d3ec      	bcc.n	8000ec6 <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f00:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f06:	fb01 f202 	mul.w	r2, r1, r2
 8000f0a:	1a9b      	subs	r3, r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d010      	beq.n	8000f36 <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f18:	e009      	b.n	8000f2e <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	230a      	movs	r3, #10
 8000f20:	69b9      	ldr	r1, [r7, #24]
 8000f22:	480f      	ldr	r0, [pc, #60]	@ (8000f60 <ILI9341_DrawColorBurst+0x134>)
 8000f24:	f001 fe56 	bl	8002bd4 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d3f1      	bcc.n	8000f1a <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	69b9      	ldr	r1, [r7, #24]
 8000f3e:	4808      	ldr	r0, [pc, #32]	@ (8000f60 <ILI9341_DrawColorBurst+0x134>)
 8000f40:	f001 fe48 	bl	8002bd4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f4a:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <ILI9341_DrawColorBurst+0x130>)
 8000f4c:	f001 f9c8 	bl	80022e0 <HAL_GPIO_WritePin>
 8000f50:	46b5      	mov	sp, r6
}
 8000f52:	bf00      	nop
 8000f54:	3734      	adds	r7, #52	@ 0x34
 8000f56:	46bd      	mov	sp, r7
 8000f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f5c:	40010c00 	.word	0x40010c00
 8000f60:	2000007c 	.word	0x2000007c

08000f64 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <ILI9341_FillScreen+0x44>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <ILI9341_FillScreen+0x48>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fd85 	bl	8000a8c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <ILI9341_FillScreen+0x44>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <ILI9341_FillScreen+0x48>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	fb02 f303 	mul.w	r3, r2, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff46 	bl	8000e2c <ILI9341_DrawColorBurst>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000002 	.word	0x20000002
 8000fac:	20000000 	.word	0x20000000

08000fb0 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	80bb      	strh	r3, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <ILI9341_DrawPixel+0xc4>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	88fa      	ldrh	r2, [r7, #6]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d24d      	bcs.n	800106a <ILI9341_DrawPixel+0xba>
 8000fce:	4b2a      	ldr	r3, [pc, #168]	@ (8001078 <ILI9341_DrawPixel+0xc8>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	88ba      	ldrh	r2, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d247      	bcs.n	800106a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	753b      	strb	r3, [r7, #20]
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	757b      	strb	r3, [r7, #21]
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	3301      	adds	r3, #1
 8000fee:	121b      	asrs	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	75bb      	strb	r3, [r7, #22]
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000ffe:	88bb      	ldrh	r3, [r7, #4]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b29b      	uxth	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	743b      	strb	r3, [r7, #16]
 8001008:	88bb      	ldrh	r3, [r7, #4]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	747b      	strb	r3, [r7, #17]
 800100e:	88bb      	ldrh	r3, [r7, #4]
 8001010:	3301      	adds	r3, #1
 8001012:	121b      	asrs	r3, r3, #8
 8001014:	b2db      	uxtb	r3, r3
 8001016:	74bb      	strb	r3, [r7, #18]
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	3301      	adds	r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	b29b      	uxth	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	733b      	strb	r3, [r7, #12]
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001032:	202a      	movs	r0, #42	@ 0x2a
 8001034:	f7ff fcda 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2104      	movs	r1, #4
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fd08 	bl	8000a54 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001044:	202b      	movs	r0, #43	@ 0x2b
 8001046:	f7ff fcd1 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2104      	movs	r1, #4
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fcff 	bl	8000a54 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001056:	202c      	movs	r0, #44	@ 0x2c
 8001058:	f7ff fcc8 	bl	80009ec <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2102      	movs	r1, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fcf6 	bl	8000a54 <ILI9341_WriteBuffer>
 8001068:	e000      	b.n	800106c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800106a:	bf00      	nop
}
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000002 	.word	0x20000002
 8001078:	20000000 	.word	0x20000000

0800107c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4604      	mov	r4, r0
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4623      	mov	r3, r4
 800108c:	80fb      	strh	r3, [r7, #6]
 800108e:	4603      	mov	r3, r0
 8001090:	80bb      	strh	r3, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <ILI9341_DrawRectangle+0xb0>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	88fa      	ldrh	r2, [r7, #6]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d23d      	bcs.n	8001122 <ILI9341_DrawRectangle+0xa6>
 80010a6:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <ILI9341_DrawRectangle+0xb4>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	88ba      	ldrh	r2, [r7, #4]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d237      	bcs.n	8001122 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80010b2:	88fa      	ldrh	r2, [r7, #6]
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <ILI9341_DrawRectangle+0xb0>)
 80010ba:	8812      	ldrh	r2, [r2, #0]
 80010bc:	b292      	uxth	r2, r2
 80010be:	4293      	cmp	r3, r2
 80010c0:	dd05      	ble.n	80010ce <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <ILI9341_DrawRectangle+0xb0>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80010ce:	88ba      	ldrh	r2, [r7, #4]
 80010d0:	883b      	ldrh	r3, [r7, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <ILI9341_DrawRectangle+0xb4>)
 80010d6:	8812      	ldrh	r2, [r2, #0]
 80010d8:	b292      	uxth	r2, r2
 80010da:	4293      	cmp	r3, r2
 80010dc:	dd05      	ble.n	80010ea <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <ILI9341_DrawRectangle+0xb4>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80010ea:	88fa      	ldrh	r2, [r7, #6]
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	4413      	add	r3, r2
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b29c      	uxth	r4, r3
 80010f6:	88ba      	ldrh	r2, [r7, #4]
 80010f8:	883b      	ldrh	r3, [r7, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	3b01      	subs	r3, #1
 8001100:	b29b      	uxth	r3, r3
 8001102:	88b9      	ldrh	r1, [r7, #4]
 8001104:	88f8      	ldrh	r0, [r7, #6]
 8001106:	4622      	mov	r2, r4
 8001108:	f7ff fcc0 	bl	8000a8c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 800110c:	883b      	ldrh	r3, [r7, #0]
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	fb02 f303 	mul.w	r3, r2, r3
 8001114:	461a      	mov	r2, r3
 8001116:	8b3b      	ldrh	r3, [r7, #24]
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fe86 	bl	8000e2c <ILI9341_DrawColorBurst>
 8001120:	e000      	b.n	8001124 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001122:	bf00      	nop
}
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	bf00      	nop
 800112c:	20000002 	.word	0x20000002
 8001130:	20000000 	.word	0x20000000

08001134 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4623      	mov	r3, r4
 8001144:	80fb      	strh	r3, [r7, #6]
 8001146:	4603      	mov	r3, r0
 8001148:	80bb      	strh	r3, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	807b      	strh	r3, [r7, #2]
 800114e:	4613      	mov	r3, r2
 8001150:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <ILI9341_DrawHLine+0x80>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	88fa      	ldrh	r2, [r7, #6]
 800115a:	429a      	cmp	r2, r3
 800115c:	d225      	bcs.n	80011aa <ILI9341_DrawHLine+0x76>
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <ILI9341_DrawHLine+0x84>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	88ba      	ldrh	r2, [r7, #4]
 8001166:	429a      	cmp	r2, r3
 8001168:	d21f      	bcs.n	80011aa <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 800116a:	88fa      	ldrh	r2, [r7, #6]
 800116c:	887b      	ldrh	r3, [r7, #2]
 800116e:	4413      	add	r3, r2
 8001170:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <ILI9341_DrawHLine+0x80>)
 8001172:	8812      	ldrh	r2, [r2, #0]
 8001174:	b292      	uxth	r2, r2
 8001176:	4293      	cmp	r3, r2
 8001178:	dd05      	ble.n	8001186 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <ILI9341_DrawHLine+0x80>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	b29a      	uxth	r2, r3
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001186:	88fa      	ldrh	r2, [r7, #6]
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	4413      	add	r3, r2
 800118c:	b29b      	uxth	r3, r3
 800118e:	3b01      	subs	r3, #1
 8001190:	b29a      	uxth	r2, r3
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	88b9      	ldrh	r1, [r7, #4]
 8001196:	88f8      	ldrh	r0, [r7, #6]
 8001198:	f7ff fc78 	bl	8000a8c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 800119c:	887a      	ldrh	r2, [r7, #2]
 800119e:	883b      	ldrh	r3, [r7, #0]
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fe42 	bl	8000e2c <ILI9341_DrawColorBurst>
 80011a8:	e000      	b.n	80011ac <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80011aa:	bf00      	nop
}
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000002 	.word	0x20000002
 80011b8:	20000000 	.word	0x20000000

080011bc <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4604      	mov	r4, r0
 80011c4:	4608      	mov	r0, r1
 80011c6:	4611      	mov	r1, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	4623      	mov	r3, r4
 80011cc:	80fb      	strh	r3, [r7, #6]
 80011ce:	4603      	mov	r3, r0
 80011d0:	80bb      	strh	r3, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	807b      	strh	r3, [r7, #2]
 80011d6:	4613      	mov	r3, r2
 80011d8:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <ILI9341_DrawVLine+0x80>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	88fa      	ldrh	r2, [r7, #6]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d225      	bcs.n	8001232 <ILI9341_DrawVLine+0x76>
 80011e6:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <ILI9341_DrawVLine+0x84>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	88ba      	ldrh	r2, [r7, #4]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d21f      	bcs.n	8001232 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 80011f2:	88ba      	ldrh	r2, [r7, #4]
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a11      	ldr	r2, [pc, #68]	@ (8001240 <ILI9341_DrawVLine+0x84>)
 80011fa:	8812      	ldrh	r2, [r2, #0]
 80011fc:	b292      	uxth	r2, r2
 80011fe:	4293      	cmp	r3, r2
 8001200:	dd05      	ble.n	800120e <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <ILI9341_DrawVLine+0x84>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b29a      	uxth	r2, r3
 8001208:	88bb      	ldrh	r3, [r7, #4]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 800120e:	88ba      	ldrh	r2, [r7, #4]
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	4413      	add	r3, r2
 8001214:	b29b      	uxth	r3, r3
 8001216:	3b01      	subs	r3, #1
 8001218:	b29b      	uxth	r3, r3
 800121a:	88fa      	ldrh	r2, [r7, #6]
 800121c:	88b9      	ldrh	r1, [r7, #4]
 800121e:	88f8      	ldrh	r0, [r7, #6]
 8001220:	f7ff fc34 	bl	8000a8c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001224:	887a      	ldrh	r2, [r7, #2]
 8001226:	883b      	ldrh	r3, [r7, #0]
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fdfe 	bl	8000e2c <ILI9341_DrawColorBurst>
 8001230:	e000      	b.n	8001234 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001232:	bf00      	nop
}
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	bf00      	nop
 800123c:	20000002 	.word	0x20000002
 8001240:	20000000 	.word	0x20000000

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f000 fb43 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f91b 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 f9af 	bl	80015b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001256:	f000 f98f 	bl	8001578 <MX_DMA_Init>
  MX_SPI1_Init();
 800125a:	f000 f957 	bl	800150c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 800125e:	f7ff fc8b 	bl	8000b78 <ILI9341_Init>

  // Simple Text writing (Text, Font, X, Y, Color, BackColor)
  // Available Fonts are FONT1, FONT2, FONT3 and FONT4
  ILI9341_FillScreen(WHITE);
 8001262:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001266:	f7ff fe7d 	bl	8000f64 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fd8e 	bl	8000d8c <ILI9341_SetRotation>
  ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 8001270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	2300      	movs	r3, #0
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	236e      	movs	r3, #110	@ 0x6e
 800127c:	225a      	movs	r2, #90	@ 0x5a
 800127e:	497d      	ldr	r1, [pc, #500]	@ (8001474 <main+0x230>)
 8001280:	487d      	ldr	r0, [pc, #500]	@ (8001478 <main+0x234>)
 8001282:	f7ff fb1e 	bl	80008c2 <ILI9341_DrawText>
  HAL_Delay(1000);
 8001286:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800128a:	f000 fb85 	bl	8001998 <HAL_Delay>

  //Writing numbers
  ILI9341_FillScreen(WHITE);
 800128e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001292:	f7ff fe67 	bl	8000f64 <ILI9341_FillScreen>
  static char BufferText[30];
  for(uint8_t i = 0; i <= 5; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	e07b      	b.n	8001394 <main+0x150>
  {
    sprintf(BufferText, "COUNT : %d", i);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	461a      	mov	r2, r3
 80012a0:	4976      	ldr	r1, [pc, #472]	@ (800147c <main+0x238>)
 80012a2:	4877      	ldr	r0, [pc, #476]	@ (8001480 <main+0x23c>)
 80012a4:	f001 ffda 	bl	800325c <siprintf>
    ILI9341_DrawText(BufferText, FONT3, 10, 10, BLACK, WHITE);
 80012a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	2300      	movs	r3, #0
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	230a      	movs	r3, #10
 80012b4:	220a      	movs	r2, #10
 80012b6:	4973      	ldr	r1, [pc, #460]	@ (8001484 <main+0x240>)
 80012b8:	4871      	ldr	r0, [pc, #452]	@ (8001480 <main+0x23c>)
 80012ba:	f7ff fb02 	bl	80008c2 <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 30, BLUE, WHITE);
 80012be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	231f      	movs	r3, #31
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	231e      	movs	r3, #30
 80012ca:	220a      	movs	r2, #10
 80012cc:	496d      	ldr	r1, [pc, #436]	@ (8001484 <main+0x240>)
 80012ce:	486c      	ldr	r0, [pc, #432]	@ (8001480 <main+0x23c>)
 80012d0:	f7ff faf7 	bl	80008c2 <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 50, RED, WHITE);
 80012d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2332      	movs	r3, #50	@ 0x32
 80012e2:	220a      	movs	r2, #10
 80012e4:	4967      	ldr	r1, [pc, #412]	@ (8001484 <main+0x240>)
 80012e6:	4866      	ldr	r0, [pc, #408]	@ (8001480 <main+0x23c>)
 80012e8:	f7ff faeb 	bl	80008c2 <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 70, GREEN, WHITE);
 80012ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2346      	movs	r3, #70	@ 0x46
 80012fa:	220a      	movs	r2, #10
 80012fc:	4961      	ldr	r1, [pc, #388]	@ (8001484 <main+0x240>)
 80012fe:	4860      	ldr	r0, [pc, #384]	@ (8001480 <main+0x23c>)
 8001300:	f7ff fadf 	bl	80008c2 <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 90, YELLOW, WHITE);
 8001304:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	235a      	movs	r3, #90	@ 0x5a
 8001312:	220a      	movs	r2, #10
 8001314:	495b      	ldr	r1, [pc, #364]	@ (8001484 <main+0x240>)
 8001316:	485a      	ldr	r0, [pc, #360]	@ (8001480 <main+0x23c>)
 8001318:	f7ff fad3 	bl	80008c2 <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 110, PURPLE, WHITE);
 800131c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f647 030f 	movw	r3, #30735	@ 0x780f
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	236e      	movs	r3, #110	@ 0x6e
 800132a:	220a      	movs	r2, #10
 800132c:	4955      	ldr	r1, [pc, #340]	@ (8001484 <main+0x240>)
 800132e:	4854      	ldr	r0, [pc, #336]	@ (8001480 <main+0x23c>)
 8001330:	f7ff fac7 	bl	80008c2 <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 130, ORANGE, WHITE);
 8001334:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2382      	movs	r3, #130	@ 0x82
 8001342:	220a      	movs	r2, #10
 8001344:	494f      	ldr	r1, [pc, #316]	@ (8001484 <main+0x240>)
 8001346:	484e      	ldr	r0, [pc, #312]	@ (8001480 <main+0x23c>)
 8001348:	f7ff fabb 	bl	80008c2 <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 150, MAROON, WHITE);
 800134c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2396      	movs	r3, #150	@ 0x96
 800135a:	220a      	movs	r2, #10
 800135c:	4949      	ldr	r1, [pc, #292]	@ (8001484 <main+0x240>)
 800135e:	4848      	ldr	r0, [pc, #288]	@ (8001480 <main+0x23c>)
 8001360:	f7ff faaf 	bl	80008c2 <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 170, WHITE, BLACK);
 8001364:	2300      	movs	r3, #0
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	23aa      	movs	r3, #170	@ 0xaa
 8001370:	220a      	movs	r2, #10
 8001372:	4944      	ldr	r1, [pc, #272]	@ (8001484 <main+0x240>)
 8001374:	4842      	ldr	r0, [pc, #264]	@ (8001480 <main+0x23c>)
 8001376:	f7ff faa4 	bl	80008c2 <ILI9341_DrawText>
    ILI9341_DrawText(BufferText, FONT3, 10, 190, BLUE, BLACK);
 800137a:	2300      	movs	r3, #0
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	231f      	movs	r3, #31
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	23be      	movs	r3, #190	@ 0xbe
 8001384:	220a      	movs	r2, #10
 8001386:	493f      	ldr	r1, [pc, #252]	@ (8001484 <main+0x240>)
 8001388:	483d      	ldr	r0, [pc, #244]	@ (8001480 <main+0x23c>)
 800138a:	f7ff fa9a 	bl	80008c2 <ILI9341_DrawText>
  for(uint8_t i = 0; i <= 5; i++)
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	3301      	adds	r3, #1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b05      	cmp	r3, #5
 8001398:	d980      	bls.n	800129c <main+0x58>
  }

  // Horizontal Line (X, Y, Length, Color)
  ILI9341_FillScreen(WHITE);
 800139a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800139e:	f7ff fde1 	bl	8000f64 <ILI9341_FillScreen>
  ILI9341_DrawHLine(50, 120, 200, NAVY);
 80013a2:	230f      	movs	r3, #15
 80013a4:	22c8      	movs	r2, #200	@ 0xc8
 80013a6:	2178      	movs	r1, #120	@ 0x78
 80013a8:	2032      	movs	r0, #50	@ 0x32
 80013aa:	f7ff fec3 	bl	8001134 <ILI9341_DrawHLine>
  HAL_Delay(1000);
 80013ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013b2:	f000 faf1 	bl	8001998 <HAL_Delay>

  // Vertical Line (X, Y, Length, Color)
  ILI9341_FillScreen(WHITE);
 80013b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80013ba:	f7ff fdd3 	bl	8000f64 <ILI9341_FillScreen>
  ILI9341_DrawVLine(160, 40, 150, DARKGREEN);
 80013be:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80013c2:	2296      	movs	r2, #150	@ 0x96
 80013c4:	2128      	movs	r1, #40	@ 0x28
 80013c6:	20a0      	movs	r0, #160	@ 0xa0
 80013c8:	f7ff fef8 	bl	80011bc <ILI9341_DrawVLine>
  HAL_Delay(1000);
 80013cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013d0:	f000 fae2 	bl	8001998 <HAL_Delay>

  // Hollow Circle (Centre X, Centre Y, Radius, Color)
  ILI9341_FillScreen(WHITE);
 80013d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80013d8:	f7ff fdc4 	bl	8000f64 <ILI9341_FillScreen>
  ILI9341_DrawHollowCircle(160, 120, 80, PINK);
 80013dc:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80013e0:	2250      	movs	r2, #80	@ 0x50
 80013e2:	2178      	movs	r1, #120	@ 0x78
 80013e4:	20a0      	movs	r0, #160	@ 0xa0
 80013e6:	f7ff f835 	bl	8000454 <ILI9341_DrawHollowCircle>
  HAL_Delay(1000);
 80013ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ee:	f000 fad3 	bl	8001998 <HAL_Delay>

  // Filled Circle (Centre X, Centre Y, Radius, Color)
  ILI9341_FillScreen(WHITE);
 80013f2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80013f6:	f7ff fdb5 	bl	8000f64 <ILI9341_FillScreen>
  ILI9341_DrawFilledCircle(160, 120, 50, CYAN);
 80013fa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80013fe:	2232      	movs	r2, #50	@ 0x32
 8001400:	2178      	movs	r1, #120	@ 0x78
 8001402:	20a0      	movs	r0, #160	@ 0xa0
 8001404:	f7ff f8dc 	bl	80005c0 <ILI9341_DrawFilledCircle>
  HAL_Delay(1000);
 8001408:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800140c:	f000 fac4 	bl	8001998 <HAL_Delay>

  // Filled Rectangle (Start X, Start Y, Length X, Length Y)
  ILI9341_FillScreen(WHITE);
 8001410:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001414:	f7ff fda6 	bl	8000f64 <ILI9341_FillScreen>
  ILI9341_DrawRectangle(50, 50, 220, 140, GREENYELLOW);
 8001418:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	238c      	movs	r3, #140	@ 0x8c
 8001420:	22dc      	movs	r2, #220	@ 0xdc
 8001422:	2132      	movs	r1, #50	@ 0x32
 8001424:	2032      	movs	r0, #50	@ 0x32
 8001426:	f7ff fe29 	bl	800107c <ILI9341_DrawRectangle>
  HAL_Delay(1000);
 800142a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800142e:	f000 fab3 	bl	8001998 <HAL_Delay>

  // Hollow Rectangle (Start X, Start Y, End X, End Y)
  ILI9341_FillScreen(WHITE);
 8001432:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001436:	f7ff fd95 	bl	8000f64 <ILI9341_FillScreen>
  ILI9341_DrawHollowRectangleCoord(50, 50, 270, 190, DARKCYAN);
 800143a:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	23be      	movs	r3, #190	@ 0xbe
 8001442:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8001446:	2132      	movs	r1, #50	@ 0x32
 8001448:	2032      	movs	r0, #50	@ 0x32
 800144a:	f7ff f941 	bl	80006d0 <ILI9341_DrawHollowRectangleCoord>
  HAL_Delay(1000);
 800144e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001452:	f000 faa1 	bl	8001998 <HAL_Delay>

  // Simple Pixel Only (X, Y, Color)
  ILI9341_FillScreen(WHITE);
 8001456:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800145a:	f7ff fd83 	bl	8000f64 <ILI9341_FillScreen>
  ILI9341_DrawPixel(100, 100, BLACK);
 800145e:	2200      	movs	r2, #0
 8001460:	2164      	movs	r1, #100	@ 0x64
 8001462:	2064      	movs	r0, #100	@ 0x64
 8001464:	f7ff fda4 	bl	8000fb0 <ILI9341_DrawPixel>
  HAL_Delay(1000);
 8001468:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800146c:	f000 fa94 	bl	8001998 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <main+0x22c>
 8001474:	08004550 	.word	0x08004550
 8001478:	08003bd4 	.word	0x08003bd4
 800147c:	08003be0 	.word	0x08003be0
 8001480:	20000118 	.word	0x20000118
 8001484:	08003bec 	.word	0x08003bec

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b090      	sub	sp, #64	@ 0x40
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	2228      	movs	r2, #40	@ 0x28
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f001 ff00 	bl	800329c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ae:	2301      	movs	r3, #1
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b2:	2310      	movs	r3, #16
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b6:	2302      	movs	r3, #2
 80014b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80014ba:	2300      	movs	r3, #0
 80014bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80014be:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80014c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 ff21 	bl	8002310 <HAL_RCC_OscConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014d4:	f000 f8ba 	bl	800164c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d8:	230f      	movs	r3, #15
 80014da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014dc:	2302      	movs	r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2102      	movs	r1, #2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 f98e 	bl	8002814 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80014fe:	f000 f8a5 	bl	800164c <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3740      	adds	r7, #64	@ 0x40
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001510:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <MX_SPI1_Init+0x64>)
 8001512:	4a18      	ldr	r2, [pc, #96]	@ (8001574 <MX_SPI1_Init+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001516:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <MX_SPI1_Init+0x64>)
 8001518:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800151c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800151e:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <MX_SPI1_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <MX_SPI1_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_SPI1_Init+0x64>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001530:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <MX_SPI1_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_SPI1_Init+0x64>)
 8001538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800153c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_SPI1_Init+0x64>)
 8001540:	2208      	movs	r2, #8
 8001542:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001544:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <MX_SPI1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_SPI1_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <MX_SPI1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_SPI1_Init+0x64>)
 8001558:	220a      	movs	r2, #10
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	@ (8001570 <MX_SPI1_Init+0x64>)
 800155e:	f001 fab5 	bl	8002acc <HAL_SPI_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001568:	f000 f870 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000007c 	.word	0x2000007c
 8001574:	40013000 	.word	0x40013000

08001578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_DMA_Init+0x38>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a0b      	ldr	r2, [pc, #44]	@ (80015b0 <MX_DMA_Init+0x38>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6153      	str	r3, [r2, #20]
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_DMA_Init+0x38>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	200d      	movs	r0, #13
 800159c:	f000 faf7 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015a0:	200d      	movs	r0, #13
 80015a2:	f000 fb10 	bl	8001bc6 <HAL_NVIC_EnableIRQ>

}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <MX_GPIO_Init+0x90>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001644 <MX_GPIO_Init+0x90>)
 80015ce:	f043 0320 	orr.w	r3, r3, #32
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <MX_GPIO_Init+0x90>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <MX_GPIO_Init+0x90>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a17      	ldr	r2, [pc, #92]	@ (8001644 <MX_GPIO_Init+0x90>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <MX_GPIO_Init+0x90>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <MX_GPIO_Init+0x90>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a11      	ldr	r2, [pc, #68]	@ (8001644 <MX_GPIO_Init+0x90>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <MX_GPIO_Init+0x90>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	f240 4103 	movw	r1, #1027	@ 0x403
 8001616:	480c      	ldr	r0, [pc, #48]	@ (8001648 <MX_GPIO_Init+0x94>)
 8001618:	f000 fe62 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 800161c:	f240 4303 	movw	r3, #1027	@ 0x403
 8001620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001622:	2311      	movs	r3, #17
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	4619      	mov	r1, r3
 8001634:	4804      	ldr	r0, [pc, #16]	@ (8001648 <MX_GPIO_Init+0x94>)
 8001636:	f000 fccf 	bl	8001fd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163a:	bf00      	nop
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	40010c00 	.word	0x40010c00

0800164c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
}
 8001652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <Error_Handler+0x8>

08001658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_MspInit+0x5c>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <HAL_MspInit+0x5c>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6193      	str	r3, [r2, #24]
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_MspInit+0x5c>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <HAL_MspInit+0x5c>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a0e      	ldr	r2, [pc, #56]	@ (80016b4 <HAL_MspInit+0x5c>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001680:	61d3      	str	r3, [r2, #28]
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <HAL_MspInit+0x5c>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800168e:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_MspInit+0x60>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <HAL_MspInit+0x60>)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010000 	.word	0x40010000

080016bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001790 <HAL_SPI_MspInit+0xd4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d155      	bne.n	8001788 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <HAL_SPI_MspInit+0xd8>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001794 <HAL_SPI_MspInit+0xd8>)
 80016e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <HAL_SPI_MspInit+0xd8>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <HAL_SPI_MspInit+0xd8>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a26      	ldr	r2, [pc, #152]	@ (8001794 <HAL_SPI_MspInit+0xd8>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <HAL_SPI_MspInit+0xd8>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800170c:	23a0      	movs	r3, #160	@ 0xa0
 800170e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	481e      	ldr	r0, [pc, #120]	@ (8001798 <HAL_SPI_MspInit+0xdc>)
 8001720:	f000 fc5a 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001724:	2340      	movs	r3, #64	@ 0x40
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	4818      	ldr	r0, [pc, #96]	@ (8001798 <HAL_SPI_MspInit+0xdc>)
 8001738:	f000 fc4e 	bl	8001fd8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <HAL_SPI_MspInit+0xe0>)
 800173e:	4a18      	ldr	r2, [pc, #96]	@ (80017a0 <HAL_SPI_MspInit+0xe4>)
 8001740:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <HAL_SPI_MspInit+0xe0>)
 8001744:	2210      	movs	r2, #16
 8001746:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <HAL_SPI_MspInit+0xe0>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <HAL_SPI_MspInit+0xe0>)
 8001750:	2280      	movs	r2, #128	@ 0x80
 8001752:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <HAL_SPI_MspInit+0xe0>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <HAL_SPI_MspInit+0xe0>)
 800175c:	2200      	movs	r2, #0
 800175e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_SPI_MspInit+0xe0>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <HAL_SPI_MspInit+0xe0>)
 8001768:	2200      	movs	r2, #0
 800176a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800176c:	480b      	ldr	r0, [pc, #44]	@ (800179c <HAL_SPI_MspInit+0xe0>)
 800176e:	f000 fa45 	bl	8001bfc <HAL_DMA_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8001778:	f7ff ff68 	bl	800164c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_SPI_MspInit+0xe0>)
 8001780:	649a      	str	r2, [r3, #72]	@ 0x48
 8001782:	4a06      	ldr	r2, [pc, #24]	@ (800179c <HAL_SPI_MspInit+0xe0>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40013000 	.word	0x40013000
 8001794:	40021000 	.word	0x40021000
 8001798:	40010800 	.word	0x40010800
 800179c:	200000d4 	.word	0x200000d4
 80017a0:	40020030 	.word	0x40020030

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <NMI_Handler+0x4>

080017ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <MemManage_Handler+0x4>

080017bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <UsageFault_Handler+0x4>

080017cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 f8b4 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <DMA1_Channel3_IRQHandler+0x10>)
 8001802:	f000 fab5 	bl	8001d70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200000d4 	.word	0x200000d4

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	@ (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f001 fd34 	bl	80032ac <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20005000 	.word	0x20005000
 8001870:	00000400 	.word	0x00000400
 8001874:	20000138 	.word	0x20000138
 8001878:	20000288 	.word	0x20000288

0800187c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001888:	f7ff fff8 	bl	800187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800188c:	480b      	ldr	r0, [pc, #44]	@ (80018bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800188e:	490c      	ldr	r1, [pc, #48]	@ (80018c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001890:	4a0c      	ldr	r2, [pc, #48]	@ (80018c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a09      	ldr	r2, [pc, #36]	@ (80018c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018a4:	4c09      	ldr	r4, [pc, #36]	@ (80018cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b2:	f001 fd01 	bl	80032b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b6:	f7ff fcc5 	bl	8001244 <main>
  bx lr
 80018ba:	4770      	bx	lr
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80018c4:	080056f4 	.word	0x080056f4
  ldr r2, =_sbss
 80018c8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80018cc:	20000288 	.word	0x20000288

080018d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC1_2_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <HAL_Init+0x28>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	@ (80018fc <HAL_Init+0x28>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f947 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f000 f808 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff feb2 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40022000 	.word	0x40022000

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_InitTick+0x54>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_InitTick+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f95f 	bl	8001be2 <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 f927 	bl	8001b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	@ (800195c <HAL_InitTick+0x5c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000004 	.word	0x20000004
 8001958:	2000000c 	.word	0x2000000c
 800195c:	20000008 	.word	0x20000008

08001960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_IncTick+0x1c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_IncTick+0x20>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a03      	ldr	r2, [pc, #12]	@ (8001980 <HAL_IncTick+0x20>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	2000000c 	.word	0x2000000c
 8001980:	2000013c 	.word	0x2000013c

08001984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b02      	ldr	r3, [pc, #8]	@ (8001994 <HAL_GetTick+0x10>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	2000013c 	.word	0x2000013c

08001998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff fff0 	bl	8001984 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffe0 	bl	8001984 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000000c 	.word	0x2000000c

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4906      	ldr	r1, [pc, #24]	@ (8001a78 <__NVIC_EnableIRQ+0x34>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	@ (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	@ (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	@ 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	@ 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff90 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff2d 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff42 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ff90 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff5f 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff35 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffa2 	bl	8001b34 <SysTick_Config>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e043      	b.n	8001c9a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <HAL_DMA_Init+0xa8>)
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ca8 <HAL_DMA_Init+0xac>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	009a      	lsls	r2, r3, #2
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cac <HAL_DMA_Init+0xb0>)
 8001c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c46:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001c4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	bffdfff8 	.word	0xbffdfff8
 8001ca8:	cccccccd 	.word	0xcccccccd
 8001cac:	40020000 	.word	0x40020000

08001cb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_DMA_Start_IT+0x20>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e04b      	b.n	8001d68 <HAL_DMA_Start_IT+0xb8>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d13a      	bne.n	8001d5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0201 	bic.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 f937 	bl	8001f7c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 020e 	orr.w	r2, r2, #14
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e00f      	b.n	8001d48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0204 	bic.w	r2, r2, #4
 8001d36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 020a 	orr.w	r2, r2, #10
 8001d46:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e005      	b.n	8001d66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
 8001d64:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d04f      	beq.n	8001e38 <HAL_DMA_IRQHandler+0xc8>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d04a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0204 	bic.w	r2, r2, #4
 8001dbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a66      	ldr	r2, [pc, #408]	@ (8001f60 <HAL_DMA_IRQHandler+0x1f0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d029      	beq.n	8001e1e <HAL_DMA_IRQHandler+0xae>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a65      	ldr	r2, [pc, #404]	@ (8001f64 <HAL_DMA_IRQHandler+0x1f4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d022      	beq.n	8001e1a <HAL_DMA_IRQHandler+0xaa>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a63      	ldr	r2, [pc, #396]	@ (8001f68 <HAL_DMA_IRQHandler+0x1f8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01a      	beq.n	8001e14 <HAL_DMA_IRQHandler+0xa4>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a62      	ldr	r2, [pc, #392]	@ (8001f6c <HAL_DMA_IRQHandler+0x1fc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d012      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x9e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a60      	ldr	r2, [pc, #384]	@ (8001f70 <HAL_DMA_IRQHandler+0x200>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00a      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x98>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5f      	ldr	r2, [pc, #380]	@ (8001f74 <HAL_DMA_IRQHandler+0x204>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d102      	bne.n	8001e02 <HAL_DMA_IRQHandler+0x92>
 8001dfc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e00:	e00e      	b.n	8001e20 <HAL_DMA_IRQHandler+0xb0>
 8001e02:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001e06:	e00b      	b.n	8001e20 <HAL_DMA_IRQHandler+0xb0>
 8001e08:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001e0c:	e008      	b.n	8001e20 <HAL_DMA_IRQHandler+0xb0>
 8001e0e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e12:	e005      	b.n	8001e20 <HAL_DMA_IRQHandler+0xb0>
 8001e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e18:	e002      	b.n	8001e20 <HAL_DMA_IRQHandler+0xb0>
 8001e1a:	2340      	movs	r3, #64	@ 0x40
 8001e1c:	e000      	b.n	8001e20 <HAL_DMA_IRQHandler+0xb0>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	4a55      	ldr	r2, [pc, #340]	@ (8001f78 <HAL_DMA_IRQHandler+0x208>)
 8001e22:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8094 	beq.w	8001f56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e36:	e08e      	b.n	8001f56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d056      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x186>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d051      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10b      	bne.n	8001e78 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 020a 	bic.w	r2, r2, #10
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a38      	ldr	r2, [pc, #224]	@ (8001f60 <HAL_DMA_IRQHandler+0x1f0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d029      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x166>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a37      	ldr	r2, [pc, #220]	@ (8001f64 <HAL_DMA_IRQHandler+0x1f4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d022      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x162>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a35      	ldr	r2, [pc, #212]	@ (8001f68 <HAL_DMA_IRQHandler+0x1f8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01a      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x15c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a34      	ldr	r2, [pc, #208]	@ (8001f6c <HAL_DMA_IRQHandler+0x1fc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d012      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x156>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a32      	ldr	r2, [pc, #200]	@ (8001f70 <HAL_DMA_IRQHandler+0x200>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x150>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a31      	ldr	r2, [pc, #196]	@ (8001f74 <HAL_DMA_IRQHandler+0x204>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d102      	bne.n	8001eba <HAL_DMA_IRQHandler+0x14a>
 8001eb4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001eb8:	e00e      	b.n	8001ed8 <HAL_DMA_IRQHandler+0x168>
 8001eba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ebe:	e00b      	b.n	8001ed8 <HAL_DMA_IRQHandler+0x168>
 8001ec0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec4:	e008      	b.n	8001ed8 <HAL_DMA_IRQHandler+0x168>
 8001ec6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eca:	e005      	b.n	8001ed8 <HAL_DMA_IRQHandler+0x168>
 8001ecc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ed0:	e002      	b.n	8001ed8 <HAL_DMA_IRQHandler+0x168>
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	e000      	b.n	8001ed8 <HAL_DMA_IRQHandler+0x168>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	4a27      	ldr	r2, [pc, #156]	@ (8001f78 <HAL_DMA_IRQHandler+0x208>)
 8001eda:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d034      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ef4:	e02f      	b.n	8001f56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	2208      	movs	r2, #8
 8001efc:	409a      	lsls	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d028      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x1e8>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d023      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 020e 	bic.w	r2, r2, #14
 8001f1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d004      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
    }
  }
  return;
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
}
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40020008 	.word	0x40020008
 8001f64:	4002001c 	.word	0x4002001c
 8001f68:	40020030 	.word	0x40020030
 8001f6c:	40020044 	.word	0x40020044
 8001f70:	40020058 	.word	0x40020058
 8001f74:	4002006c 	.word	0x4002006c
 8001f78:	40020000 	.word	0x40020000

08001f7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f92:	2101      	movs	r1, #1
 8001f94:	fa01 f202 	lsl.w	r2, r1, r2
 8001f98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d108      	bne.n	8001fbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fba:	e007      	b.n	8001fcc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b08b      	sub	sp, #44	@ 0x2c
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fea:	e169      	b.n	80022c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fec:	2201      	movs	r2, #1
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	429a      	cmp	r2, r3
 8002006:	f040 8158 	bne.w	80022ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4a9a      	ldr	r2, [pc, #616]	@ (8002278 <HAL_GPIO_Init+0x2a0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d05e      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
 8002014:	4a98      	ldr	r2, [pc, #608]	@ (8002278 <HAL_GPIO_Init+0x2a0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d875      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 800201a:	4a98      	ldr	r2, [pc, #608]	@ (800227c <HAL_GPIO_Init+0x2a4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d058      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
 8002020:	4a96      	ldr	r2, [pc, #600]	@ (800227c <HAL_GPIO_Init+0x2a4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d86f      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 8002026:	4a96      	ldr	r2, [pc, #600]	@ (8002280 <HAL_GPIO_Init+0x2a8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d052      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
 800202c:	4a94      	ldr	r2, [pc, #592]	@ (8002280 <HAL_GPIO_Init+0x2a8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d869      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 8002032:	4a94      	ldr	r2, [pc, #592]	@ (8002284 <HAL_GPIO_Init+0x2ac>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d04c      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
 8002038:	4a92      	ldr	r2, [pc, #584]	@ (8002284 <HAL_GPIO_Init+0x2ac>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d863      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 800203e:	4a92      	ldr	r2, [pc, #584]	@ (8002288 <HAL_GPIO_Init+0x2b0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d046      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
 8002044:	4a90      	ldr	r2, [pc, #576]	@ (8002288 <HAL_GPIO_Init+0x2b0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d85d      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 800204a:	2b12      	cmp	r3, #18
 800204c:	d82a      	bhi.n	80020a4 <HAL_GPIO_Init+0xcc>
 800204e:	2b12      	cmp	r3, #18
 8002050:	d859      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 8002052:	a201      	add	r2, pc, #4	@ (adr r2, 8002058 <HAL_GPIO_Init+0x80>)
 8002054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002058:	080020d3 	.word	0x080020d3
 800205c:	080020ad 	.word	0x080020ad
 8002060:	080020bf 	.word	0x080020bf
 8002064:	08002101 	.word	0x08002101
 8002068:	08002107 	.word	0x08002107
 800206c:	08002107 	.word	0x08002107
 8002070:	08002107 	.word	0x08002107
 8002074:	08002107 	.word	0x08002107
 8002078:	08002107 	.word	0x08002107
 800207c:	08002107 	.word	0x08002107
 8002080:	08002107 	.word	0x08002107
 8002084:	08002107 	.word	0x08002107
 8002088:	08002107 	.word	0x08002107
 800208c:	08002107 	.word	0x08002107
 8002090:	08002107 	.word	0x08002107
 8002094:	08002107 	.word	0x08002107
 8002098:	08002107 	.word	0x08002107
 800209c:	080020b5 	.word	0x080020b5
 80020a0:	080020c9 	.word	0x080020c9
 80020a4:	4a79      	ldr	r2, [pc, #484]	@ (800228c <HAL_GPIO_Init+0x2b4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020aa:	e02c      	b.n	8002106 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	623b      	str	r3, [r7, #32]
          break;
 80020b2:	e029      	b.n	8002108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	3304      	adds	r3, #4
 80020ba:	623b      	str	r3, [r7, #32]
          break;
 80020bc:	e024      	b.n	8002108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	3308      	adds	r3, #8
 80020c4:	623b      	str	r3, [r7, #32]
          break;
 80020c6:	e01f      	b.n	8002108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	330c      	adds	r3, #12
 80020ce:	623b      	str	r3, [r7, #32]
          break;
 80020d0:	e01a      	b.n	8002108 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020da:	2304      	movs	r3, #4
 80020dc:	623b      	str	r3, [r7, #32]
          break;
 80020de:	e013      	b.n	8002108 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d105      	bne.n	80020f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e8:	2308      	movs	r3, #8
 80020ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	611a      	str	r2, [r3, #16]
          break;
 80020f2:	e009      	b.n	8002108 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f4:	2308      	movs	r3, #8
 80020f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	615a      	str	r2, [r3, #20]
          break;
 80020fe:	e003      	b.n	8002108 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002100:	2300      	movs	r3, #0
 8002102:	623b      	str	r3, [r7, #32]
          break;
 8002104:	e000      	b.n	8002108 <HAL_GPIO_Init+0x130>
          break;
 8002106:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2bff      	cmp	r3, #255	@ 0xff
 800210c:	d801      	bhi.n	8002112 <HAL_GPIO_Init+0x13a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	e001      	b.n	8002116 <HAL_GPIO_Init+0x13e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2bff      	cmp	r3, #255	@ 0xff
 800211c:	d802      	bhi.n	8002124 <HAL_GPIO_Init+0x14c>
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	e002      	b.n	800212a <HAL_GPIO_Init+0x152>
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	3b08      	subs	r3, #8
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	210f      	movs	r1, #15
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	401a      	ands	r2, r3
 800213c:	6a39      	ldr	r1, [r7, #32]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	431a      	orrs	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80b1 	beq.w	80022ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002158:	4b4d      	ldr	r3, [pc, #308]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	4a4c      	ldr	r2, [pc, #304]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6193      	str	r3, [r2, #24]
 8002164:	4b4a      	ldr	r3, [pc, #296]	@ (8002290 <HAL_GPIO_Init+0x2b8>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002170:	4a48      	ldr	r2, [pc, #288]	@ (8002294 <HAL_GPIO_Init+0x2bc>)
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a40      	ldr	r2, [pc, #256]	@ (8002298 <HAL_GPIO_Init+0x2c0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_GPIO_Init+0x1ec>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a3f      	ldr	r2, [pc, #252]	@ (800229c <HAL_GPIO_Init+0x2c4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d00d      	beq.n	80021c0 <HAL_GPIO_Init+0x1e8>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a3e      	ldr	r2, [pc, #248]	@ (80022a0 <HAL_GPIO_Init+0x2c8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d007      	beq.n	80021bc <HAL_GPIO_Init+0x1e4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a3d      	ldr	r2, [pc, #244]	@ (80022a4 <HAL_GPIO_Init+0x2cc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_GPIO_Init+0x1e0>
 80021b4:	2303      	movs	r3, #3
 80021b6:	e006      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021b8:	2304      	movs	r3, #4
 80021ba:	e004      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021bc:	2302      	movs	r3, #2
 80021be:	e002      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021c4:	2300      	movs	r3, #0
 80021c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c8:	f002 0203 	and.w	r2, r2, #3
 80021cc:	0092      	lsls	r2, r2, #2
 80021ce:	4093      	lsls	r3, r2
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021d6:	492f      	ldr	r1, [pc, #188]	@ (8002294 <HAL_GPIO_Init+0x2bc>)
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	3302      	adds	r3, #2
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021f0:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	492c      	ldr	r1, [pc, #176]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021fe:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	43db      	mvns	r3, r3
 8002206:	4928      	ldr	r1, [pc, #160]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002208:	4013      	ands	r3, r2
 800220a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002218:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	4922      	ldr	r1, [pc, #136]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	60cb      	str	r3, [r1, #12]
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002226:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	43db      	mvns	r3, r3
 800222e:	491e      	ldr	r1, [pc, #120]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002230:	4013      	ands	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d006      	beq.n	800224e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002240:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4918      	ldr	r1, [pc, #96]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800224e:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	43db      	mvns	r3, r3
 8002256:	4914      	ldr	r1, [pc, #80]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002258:	4013      	ands	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d021      	beq.n	80022ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002268:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	490e      	ldr	r1, [pc, #56]	@ (80022a8 <HAL_GPIO_Init+0x2d0>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e021      	b.n	80022ba <HAL_GPIO_Init+0x2e2>
 8002276:	bf00      	nop
 8002278:	10320000 	.word	0x10320000
 800227c:	10310000 	.word	0x10310000
 8002280:	10220000 	.word	0x10220000
 8002284:	10210000 	.word	0x10210000
 8002288:	10120000 	.word	0x10120000
 800228c:	10110000 	.word	0x10110000
 8002290:	40021000 	.word	0x40021000
 8002294:	40010000 	.word	0x40010000
 8002298:	40010800 	.word	0x40010800
 800229c:	40010c00 	.word	0x40010c00
 80022a0:	40011000 	.word	0x40011000
 80022a4:	40011400 	.word	0x40011400
 80022a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022ac:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <HAL_GPIO_Init+0x304>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	4909      	ldr	r1, [pc, #36]	@ (80022dc <HAL_GPIO_Init+0x304>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	3301      	adds	r3, #1
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f47f ae8e 	bne.w	8001fec <HAL_GPIO_Init+0x14>
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	372c      	adds	r7, #44	@ 0x2c
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40010400 	.word	0x40010400

080022e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
 80022ec:	4613      	mov	r3, r2
 80022ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f0:	787b      	ldrb	r3, [r7, #1]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022fc:	e003      	b.n	8002306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022fe:	887b      	ldrh	r3, [r7, #2]
 8002300:	041a      	lsls	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	611a      	str	r2, [r3, #16]
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e272      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8087 	beq.w	800243e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002330:	4b92      	ldr	r3, [pc, #584]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d00c      	beq.n	8002356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800233c:	4b8f      	ldr	r3, [pc, #572]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d112      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
 8002348:	4b8c      	ldr	r3, [pc, #560]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002354:	d10b      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	4b89      	ldr	r3, [pc, #548]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d06c      	beq.n	800243c <HAL_RCC_OscConfig+0x12c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d168      	bne.n	800243c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e24c      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x76>
 8002378:	4b80      	ldr	r3, [pc, #512]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a7f      	ldr	r2, [pc, #508]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e02e      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b7b      	ldr	r3, [pc, #492]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7a      	ldr	r2, [pc, #488]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b78      	ldr	r3, [pc, #480]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a77      	ldr	r2, [pc, #476]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e01d      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0xbc>
 80023b2:	4b72      	ldr	r3, [pc, #456]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a71      	ldr	r2, [pc, #452]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b6f      	ldr	r3, [pc, #444]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6e      	ldr	r2, [pc, #440]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023cc:	4b6b      	ldr	r3, [pc, #428]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b68      	ldr	r3, [pc, #416]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a67      	ldr	r2, [pc, #412]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7ff faca 	bl	8001984 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7ff fac6 	bl	8001984 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	@ 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e200      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b5d      	ldr	r3, [pc, #372]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe4>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff fab6 	bl	8001984 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7ff fab2 	bl	8001984 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	@ 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1ec      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	4b53      	ldr	r3, [pc, #332]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x10c>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d063      	beq.n	8002512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800244a:	4b4c      	ldr	r3, [pc, #304]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002456:	4b49      	ldr	r3, [pc, #292]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d11c      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
 8002462:	4b46      	ldr	r3, [pc, #280]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d116      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e1c0      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4939      	ldr	r1, [pc, #228]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	e03a      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a4:	4b36      	ldr	r3, [pc, #216]	@ (8002580 <HAL_RCC_OscConfig+0x270>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7ff fa6b 	bl	8001984 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7ff fa67 	bl	8001984 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e1a1      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	4b2d      	ldr	r3, [pc, #180]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4927      	ldr	r1, [pc, #156]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e015      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e6:	4b26      	ldr	r3, [pc, #152]	@ (8002580 <HAL_RCC_OscConfig+0x270>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fa4a 	bl	8001984 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7ff fa46 	bl	8001984 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e180      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03a      	beq.n	8002594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <HAL_RCC_OscConfig+0x274>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7ff fa2a 	bl	8001984 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7ff fa26 	bl	8001984 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e160      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <HAL_RCC_OscConfig+0x26c>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002552:	2001      	movs	r0, #1
 8002554:	f000 fa9c 	bl	8002a90 <RCC_Delay>
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <HAL_RCC_OscConfig+0x274>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7ff fa10 	bl	8001984 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002566:	e00f      	b.n	8002588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7ff fa0c 	bl	8001984 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d908      	bls.n	8002588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e146      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	42420000 	.word	0x42420000
 8002584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b92      	ldr	r3, [pc, #584]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e9      	bne.n	8002568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a6 	beq.w	80026ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b8b      	ldr	r3, [pc, #556]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b88      	ldr	r3, [pc, #544]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a87      	ldr	r2, [pc, #540]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b85      	ldr	r3, [pc, #532]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b82      	ldr	r3, [pc, #520]	@ (80027d8 <HAL_RCC_OscConfig+0x4c8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b7f      	ldr	r3, [pc, #508]	@ (80027d8 <HAL_RCC_OscConfig+0x4c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a7e      	ldr	r2, [pc, #504]	@ (80027d8 <HAL_RCC_OscConfig+0x4c8>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7ff f9cd 	bl	8001984 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7ff f9c9 	bl	8001984 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	@ 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e103      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b75      	ldr	r3, [pc, #468]	@ (80027d8 <HAL_RCC_OscConfig+0x4c8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x312>
 8002614:	4b6f      	ldr	r3, [pc, #444]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a6e      	ldr	r2, [pc, #440]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	e02d      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x334>
 800262a:	4b6a      	ldr	r3, [pc, #424]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a69      	ldr	r2, [pc, #420]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b67      	ldr	r3, [pc, #412]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a66      	ldr	r2, [pc, #408]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	e01c      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x356>
 800264c:	4b61      	ldr	r3, [pc, #388]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a60      	ldr	r2, [pc, #384]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	4b5e      	ldr	r3, [pc, #376]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a5d      	ldr	r2, [pc, #372]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e00b      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002666:	4b5b      	ldr	r3, [pc, #364]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a5a      	ldr	r2, [pc, #360]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	4b58      	ldr	r3, [pc, #352]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a57      	ldr	r2, [pc, #348]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d015      	beq.n	80026b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7ff f97d 	bl	8001984 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7ff f979 	bl	8001984 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0b1      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	4b4b      	ldr	r3, [pc, #300]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ee      	beq.n	800268e <HAL_RCC_OscConfig+0x37e>
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7ff f967 	bl	8001984 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7ff f963 	bl	8001984 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e09b      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d0:	4b40      	ldr	r3, [pc, #256]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ee      	bne.n	80026ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d105      	bne.n	80026ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e2:	4b3c      	ldr	r3, [pc, #240]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a3b      	ldr	r2, [pc, #236]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8087 	beq.w	8002806 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	4b36      	ldr	r3, [pc, #216]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d061      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d146      	bne.n	800279a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b33      	ldr	r3, [pc, #204]	@ (80027dc <HAL_RCC_OscConfig+0x4cc>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7ff f937 	bl	8001984 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7ff f933 	bl	8001984 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e06d      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272c:	4b29      	ldr	r3, [pc, #164]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002740:	d108      	bne.n	8002754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002742:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4921      	ldr	r1, [pc, #132]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002754:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a19      	ldr	r1, [r3, #32]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	430b      	orrs	r3, r1
 8002766:	491b      	ldr	r1, [pc, #108]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_RCC_OscConfig+0x4cc>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7ff f907 	bl	8001984 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7ff f903 	bl	8001984 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e03d      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x46a>
 8002798:	e035      	b.n	8002806 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <HAL_RCC_OscConfig+0x4cc>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7ff f8f0 	bl	8001984 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7ff f8ec 	bl	8001984 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e026      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x498>
 80027c6:	e01e      	b.n	8002806 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e019      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40007000 	.word	0x40007000
 80027dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <HAL_RCC_OscConfig+0x500>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000

08002814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0d0      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002828:	4b6a      	ldr	r3, [pc, #424]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d910      	bls.n	8002858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b67      	ldr	r3, [pc, #412]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	4965      	ldr	r1, [pc, #404]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b63      	ldr	r3, [pc, #396]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b8      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002870:	4b59      	ldr	r3, [pc, #356]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a58      	ldr	r2, [pc, #352]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800287a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002888:	4b53      	ldr	r3, [pc, #332]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a52      	ldr	r2, [pc, #328]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002892:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b50      	ldr	r3, [pc, #320]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	494d      	ldr	r1, [pc, #308]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d040      	beq.n	8002934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b47      	ldr	r3, [pc, #284]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d115      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	4b41      	ldr	r3, [pc, #260]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e073      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e2:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e06b      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f2:	4b39      	ldr	r3, [pc, #228]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4936      	ldr	r1, [pc, #216]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002904:	f7ff f83e 	bl	8001984 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	e00a      	b.n	8002922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290c:	f7ff f83a 	bl	8001984 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e053      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	4b2d      	ldr	r3, [pc, #180]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 020c 	and.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	429a      	cmp	r2, r3
 8002932:	d1eb      	bne.n	800290c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002934:	4b27      	ldr	r3, [pc, #156]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d210      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b24      	ldr	r3, [pc, #144]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 0207 	bic.w	r2, r3, #7
 800294a:	4922      	ldr	r1, [pc, #136]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e032      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4916      	ldr	r1, [pc, #88]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800298e:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	490e      	ldr	r1, [pc, #56]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029a2:	f000 f821 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	490a      	ldr	r1, [pc, #40]	@ (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <HAL_RCC_ClockConfig+0x1cc>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <HAL_RCC_ClockConfig+0x1d0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe ff9c 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40021000 	.word	0x40021000
 80029dc:	08005694 	.word	0x08005694
 80029e0:	20000004 	.word	0x20000004
 80029e4:	20000008 	.word	0x20000008

080029e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a02:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d002      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x30>
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x36>
 8002a16:	e027      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a18:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a1a:	613b      	str	r3, [r7, #16]
      break;
 8002a1c:	e027      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	0c9b      	lsrs	r3, r3, #18
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	4a17      	ldr	r2, [pc, #92]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a28:	5cd3      	ldrb	r3, [r2, r3]
 8002a2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d010      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a36:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	0c5b      	lsrs	r3, r3, #17
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	4a11      	ldr	r2, [pc, #68]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a42:	5cd3      	ldrb	r3, [r2, r3]
 8002a44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a4a:	fb03 f202 	mul.w	r2, r3, r2
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e004      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	613b      	str	r3, [r7, #16]
      break;
 8002a66:	e002      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a6a:	613b      	str	r3, [r7, #16]
      break;
 8002a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6e:	693b      	ldr	r3, [r7, #16]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	007a1200 	.word	0x007a1200
 8002a84:	080056a4 	.word	0x080056a4
 8002a88:	080056b4 	.word	0x080056b4
 8002a8c:	003d0900 	.word	0x003d0900

08002a90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a98:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac4 <RCC_Delay+0x34>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <RCC_Delay+0x38>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	0a5b      	lsrs	r3, r3, #9
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002aac:	bf00      	nop
  }
  while (Delay --);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1e5a      	subs	r2, r3, #1
 8002ab2:	60fa      	str	r2, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f9      	bne.n	8002aac <RCC_Delay+0x1c>
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	20000004 	.word	0x20000004
 8002ac8:	10624dd3 	.word	0x10624dd3

08002acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e076      	b.n	8002bcc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d108      	bne.n	8002af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aee:	d009      	beq.n	8002b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
 8002af6:	e005      	b.n	8002b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe fdcc 	bl	80016bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b88:	ea42 0103 	orr.w	r1, r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	0c1a      	lsrs	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f002 0204 	and.w	r2, r2, #4
 8002baa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002be4:	f7fe fece 	bl	8001984 <HAL_GetTick>
 8002be8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d001      	beq.n	8002bfe <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e12a      	b.n	8002e54 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_SPI_Transmit+0x36>
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e122      	b.n	8002e54 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_SPI_Transmit+0x48>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e11b      	b.n	8002e54 <HAL_SPI_Transmit+0x280>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2203      	movs	r2, #3
 8002c28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	88fa      	ldrh	r2, [r7, #6]
 8002c42:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c6a:	d10f      	bne.n	8002c8c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c96:	2b40      	cmp	r3, #64	@ 0x40
 8002c98:	d007      	beq.n	8002caa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cb2:	d152      	bne.n	8002d5a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_SPI_Transmit+0xee>
 8002cbc:	8b7b      	ldrh	r3, [r7, #26]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d145      	bne.n	8002d4e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	881a      	ldrh	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	1c9a      	adds	r2, r3, #2
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ce6:	e032      	b.n	8002d4e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d112      	bne.n	8002d1c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	1c9a      	adds	r2, r3, #2
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d1a:	e018      	b.n	8002d4e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d1c:	f7fe fe32 	bl	8001984 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d803      	bhi.n	8002d34 <HAL_SPI_Transmit+0x160>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d32:	d102      	bne.n	8002d3a <HAL_SPI_Transmit+0x166>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e082      	b.n	8002e54 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1c7      	bne.n	8002ce8 <HAL_SPI_Transmit+0x114>
 8002d58:	e053      	b.n	8002e02 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_SPI_Transmit+0x194>
 8002d62:	8b7b      	ldrh	r3, [r7, #26]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d147      	bne.n	8002df8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	7812      	ldrb	r2, [r2, #0]
 8002d74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d8e:	e033      	b.n	8002df8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d113      	bne.n	8002dc6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	7812      	ldrb	r2, [r2, #0]
 8002daa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002dc4:	e018      	b.n	8002df8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc6:	f7fe fddd 	bl	8001984 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d803      	bhi.n	8002dde <HAL_SPI_Transmit+0x20a>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d102      	bne.n	8002de4 <HAL_SPI_Transmit+0x210>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e02d      	b.n	8002e54 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1c6      	bne.n	8002d90 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f9f6 	bl	80031f8 <SPI_EndRxTxTransaction>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002e52:	2300      	movs	r3, #0
  }
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	4613      	mov	r3, r2
 8002e68:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d001      	beq.n	8002e7a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
 8002e78:	e097      	b.n	8002faa <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_SPI_Transmit_DMA+0x2a>
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e08f      	b.n	8002faa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_SPI_Transmit_DMA+0x3c>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e088      	b.n	8002faa <HAL_SPI_Transmit_DMA+0x14e>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee6:	d10f      	bne.n	8002f08 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ef6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0c:	4a29      	ldr	r2, [pc, #164]	@ (8002fb4 <HAL_SPI_Transmit_DMA+0x158>)
 8002f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f14:	4a28      	ldr	r2, [pc, #160]	@ (8002fb8 <HAL_SPI_Transmit_DMA+0x15c>)
 8002f16:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f1c:	4a27      	ldr	r2, [pc, #156]	@ (8002fbc <HAL_SPI_Transmit_DMA+0x160>)
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f24:	2200      	movs	r2, #0
 8002f26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f30:	4619      	mov	r1, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f40:	f7fe feb6 	bl	8001cb0 <HAL_DMA_Start_IT>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4e:	f043 0210 	orr.w	r2, r3, #16
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e023      	b.n	8002faa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6c:	2b40      	cmp	r3, #64	@ 0x40
 8002f6e:	d007      	beq.n	8002f80 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0220 	orr.w	r2, r2, #32
 8002f96:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0202 	orr.w	r2, r2, #2
 8002fa6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	0800308b 	.word	0x0800308b
 8002fb8:	08002fe5 	.word	0x08002fe5
 8002fbc:	080030a7 	.word	0x080030a7

08002fc0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ff2:	f7fe fcc7 	bl	8001984 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b20      	cmp	r3, #32
 8003004:	d03b      	beq.n	800307e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0220 	bic.w	r2, r2, #32
 8003014:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0202 	bic.w	r2, r2, #2
 8003024:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	2164      	movs	r1, #100	@ 0x64
 800302a:	6978      	ldr	r0, [r7, #20]
 800302c:	f000 f8e4 	bl	80031f8 <SPI_EndRxTxTransaction>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303a:	f043 0220 	orr.w	r2, r3, #32
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2200      	movs	r2, #0
 8003064:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ffab 	bl	8002fd2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800307c:	e002      	b.n	8003084 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800307e:	6978      	ldr	r0, [r7, #20]
 8003080:	f7fd fc6a 	bl	8000958 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7ff ff91 	bl	8002fc0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0203 	bic.w	r2, r2, #3
 80030c2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c8:	f043 0210 	orr.w	r2, r3, #16
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f7ff ff7a 	bl	8002fd2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030f8:	f7fe fc44 	bl	8001984 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4413      	add	r3, r2
 8003106:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003108:	f7fe fc3c 	bl	8001984 <HAL_GetTick>
 800310c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800310e:	4b39      	ldr	r3, [pc, #228]	@ (80031f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	015b      	lsls	r3, r3, #5
 8003114:	0d1b      	lsrs	r3, r3, #20
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800311e:	e054      	b.n	80031ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003126:	d050      	beq.n	80031ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003128:	f7fe fc2c 	bl	8001984 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	429a      	cmp	r2, r3
 8003136:	d902      	bls.n	800313e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d13d      	bne.n	80031ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800314c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003156:	d111      	bne.n	800317c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003160:	d004      	beq.n	800316c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316a:	d107      	bne.n	800317c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800317a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003184:	d10f      	bne.n	80031a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e017      	b.n	80031ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d19b      	bne.n	8003120 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000004 	.word	0x20000004

080031f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2201      	movs	r2, #1
 800320c:	2102      	movs	r1, #2
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f7ff ff6a 	bl	80030e8 <SPI_WaitFlagStateUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e013      	b.n	8003252 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2200      	movs	r2, #0
 8003232:	2180      	movs	r1, #128	@ 0x80
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff ff57 	bl	80030e8 <SPI_WaitFlagStateUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e000      	b.n	8003252 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <siprintf>:
 800325c:	b40e      	push	{r1, r2, r3}
 800325e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003262:	b500      	push	{lr}
 8003264:	b09c      	sub	sp, #112	@ 0x70
 8003266:	ab1d      	add	r3, sp, #116	@ 0x74
 8003268:	9002      	str	r0, [sp, #8]
 800326a:	9006      	str	r0, [sp, #24]
 800326c:	9107      	str	r1, [sp, #28]
 800326e:	9104      	str	r1, [sp, #16]
 8003270:	4808      	ldr	r0, [pc, #32]	@ (8003294 <siprintf+0x38>)
 8003272:	4909      	ldr	r1, [pc, #36]	@ (8003298 <siprintf+0x3c>)
 8003274:	f853 2b04 	ldr.w	r2, [r3], #4
 8003278:	9105      	str	r1, [sp, #20]
 800327a:	6800      	ldr	r0, [r0, #0]
 800327c:	a902      	add	r1, sp, #8
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	f000 f992 	bl	80035a8 <_svfiprintf_r>
 8003284:	2200      	movs	r2, #0
 8003286:	9b02      	ldr	r3, [sp, #8]
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	b01c      	add	sp, #112	@ 0x70
 800328c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003290:	b003      	add	sp, #12
 8003292:	4770      	bx	lr
 8003294:	20000010 	.word	0x20000010
 8003298:	ffff0208 	.word	0xffff0208

0800329c <memset>:
 800329c:	4603      	mov	r3, r0
 800329e:	4402      	add	r2, r0
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d100      	bne.n	80032a6 <memset+0xa>
 80032a4:	4770      	bx	lr
 80032a6:	f803 1b01 	strb.w	r1, [r3], #1
 80032aa:	e7f9      	b.n	80032a0 <memset+0x4>

080032ac <__errno>:
 80032ac:	4b01      	ldr	r3, [pc, #4]	@ (80032b4 <__errno+0x8>)
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000010 	.word	0x20000010

080032b8 <__libc_init_array>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	2600      	movs	r6, #0
 80032bc:	4d0c      	ldr	r5, [pc, #48]	@ (80032f0 <__libc_init_array+0x38>)
 80032be:	4c0d      	ldr	r4, [pc, #52]	@ (80032f4 <__libc_init_array+0x3c>)
 80032c0:	1b64      	subs	r4, r4, r5
 80032c2:	10a4      	asrs	r4, r4, #2
 80032c4:	42a6      	cmp	r6, r4
 80032c6:	d109      	bne.n	80032dc <__libc_init_array+0x24>
 80032c8:	f000 fc78 	bl	8003bbc <_init>
 80032cc:	2600      	movs	r6, #0
 80032ce:	4d0a      	ldr	r5, [pc, #40]	@ (80032f8 <__libc_init_array+0x40>)
 80032d0:	4c0a      	ldr	r4, [pc, #40]	@ (80032fc <__libc_init_array+0x44>)
 80032d2:	1b64      	subs	r4, r4, r5
 80032d4:	10a4      	asrs	r4, r4, #2
 80032d6:	42a6      	cmp	r6, r4
 80032d8:	d105      	bne.n	80032e6 <__libc_init_array+0x2e>
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e0:	4798      	blx	r3
 80032e2:	3601      	adds	r6, #1
 80032e4:	e7ee      	b.n	80032c4 <__libc_init_array+0xc>
 80032e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ea:	4798      	blx	r3
 80032ec:	3601      	adds	r6, #1
 80032ee:	e7f2      	b.n	80032d6 <__libc_init_array+0x1e>
 80032f0:	080056ec 	.word	0x080056ec
 80032f4:	080056ec 	.word	0x080056ec
 80032f8:	080056ec 	.word	0x080056ec
 80032fc:	080056f0 	.word	0x080056f0

08003300 <__retarget_lock_acquire_recursive>:
 8003300:	4770      	bx	lr

08003302 <__retarget_lock_release_recursive>:
 8003302:	4770      	bx	lr

08003304 <_free_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4605      	mov	r5, r0
 8003308:	2900      	cmp	r1, #0
 800330a:	d040      	beq.n	800338e <_free_r+0x8a>
 800330c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003310:	1f0c      	subs	r4, r1, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	bfb8      	it	lt
 8003316:	18e4      	addlt	r4, r4, r3
 8003318:	f000 f8de 	bl	80034d8 <__malloc_lock>
 800331c:	4a1c      	ldr	r2, [pc, #112]	@ (8003390 <_free_r+0x8c>)
 800331e:	6813      	ldr	r3, [r2, #0]
 8003320:	b933      	cbnz	r3, 8003330 <_free_r+0x2c>
 8003322:	6063      	str	r3, [r4, #4]
 8003324:	6014      	str	r4, [r2, #0]
 8003326:	4628      	mov	r0, r5
 8003328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800332c:	f000 b8da 	b.w	80034e4 <__malloc_unlock>
 8003330:	42a3      	cmp	r3, r4
 8003332:	d908      	bls.n	8003346 <_free_r+0x42>
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	1821      	adds	r1, r4, r0
 8003338:	428b      	cmp	r3, r1
 800333a:	bf01      	itttt	eq
 800333c:	6819      	ldreq	r1, [r3, #0]
 800333e:	685b      	ldreq	r3, [r3, #4]
 8003340:	1809      	addeq	r1, r1, r0
 8003342:	6021      	streq	r1, [r4, #0]
 8003344:	e7ed      	b.n	8003322 <_free_r+0x1e>
 8003346:	461a      	mov	r2, r3
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	b10b      	cbz	r3, 8003350 <_free_r+0x4c>
 800334c:	42a3      	cmp	r3, r4
 800334e:	d9fa      	bls.n	8003346 <_free_r+0x42>
 8003350:	6811      	ldr	r1, [r2, #0]
 8003352:	1850      	adds	r0, r2, r1
 8003354:	42a0      	cmp	r0, r4
 8003356:	d10b      	bne.n	8003370 <_free_r+0x6c>
 8003358:	6820      	ldr	r0, [r4, #0]
 800335a:	4401      	add	r1, r0
 800335c:	1850      	adds	r0, r2, r1
 800335e:	4283      	cmp	r3, r0
 8003360:	6011      	str	r1, [r2, #0]
 8003362:	d1e0      	bne.n	8003326 <_free_r+0x22>
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4408      	add	r0, r1
 800336a:	6010      	str	r0, [r2, #0]
 800336c:	6053      	str	r3, [r2, #4]
 800336e:	e7da      	b.n	8003326 <_free_r+0x22>
 8003370:	d902      	bls.n	8003378 <_free_r+0x74>
 8003372:	230c      	movs	r3, #12
 8003374:	602b      	str	r3, [r5, #0]
 8003376:	e7d6      	b.n	8003326 <_free_r+0x22>
 8003378:	6820      	ldr	r0, [r4, #0]
 800337a:	1821      	adds	r1, r4, r0
 800337c:	428b      	cmp	r3, r1
 800337e:	bf01      	itttt	eq
 8003380:	6819      	ldreq	r1, [r3, #0]
 8003382:	685b      	ldreq	r3, [r3, #4]
 8003384:	1809      	addeq	r1, r1, r0
 8003386:	6021      	streq	r1, [r4, #0]
 8003388:	6063      	str	r3, [r4, #4]
 800338a:	6054      	str	r4, [r2, #4]
 800338c:	e7cb      	b.n	8003326 <_free_r+0x22>
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	20000284 	.word	0x20000284

08003394 <sbrk_aligned>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	4e0f      	ldr	r6, [pc, #60]	@ (80033d4 <sbrk_aligned+0x40>)
 8003398:	460c      	mov	r4, r1
 800339a:	6831      	ldr	r1, [r6, #0]
 800339c:	4605      	mov	r5, r0
 800339e:	b911      	cbnz	r1, 80033a6 <sbrk_aligned+0x12>
 80033a0:	f000 fbaa 	bl	8003af8 <_sbrk_r>
 80033a4:	6030      	str	r0, [r6, #0]
 80033a6:	4621      	mov	r1, r4
 80033a8:	4628      	mov	r0, r5
 80033aa:	f000 fba5 	bl	8003af8 <_sbrk_r>
 80033ae:	1c43      	adds	r3, r0, #1
 80033b0:	d103      	bne.n	80033ba <sbrk_aligned+0x26>
 80033b2:	f04f 34ff 	mov.w	r4, #4294967295
 80033b6:	4620      	mov	r0, r4
 80033b8:	bd70      	pop	{r4, r5, r6, pc}
 80033ba:	1cc4      	adds	r4, r0, #3
 80033bc:	f024 0403 	bic.w	r4, r4, #3
 80033c0:	42a0      	cmp	r0, r4
 80033c2:	d0f8      	beq.n	80033b6 <sbrk_aligned+0x22>
 80033c4:	1a21      	subs	r1, r4, r0
 80033c6:	4628      	mov	r0, r5
 80033c8:	f000 fb96 	bl	8003af8 <_sbrk_r>
 80033cc:	3001      	adds	r0, #1
 80033ce:	d1f2      	bne.n	80033b6 <sbrk_aligned+0x22>
 80033d0:	e7ef      	b.n	80033b2 <sbrk_aligned+0x1e>
 80033d2:	bf00      	nop
 80033d4:	20000280 	.word	0x20000280

080033d8 <_malloc_r>:
 80033d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033dc:	1ccd      	adds	r5, r1, #3
 80033de:	f025 0503 	bic.w	r5, r5, #3
 80033e2:	3508      	adds	r5, #8
 80033e4:	2d0c      	cmp	r5, #12
 80033e6:	bf38      	it	cc
 80033e8:	250c      	movcc	r5, #12
 80033ea:	2d00      	cmp	r5, #0
 80033ec:	4606      	mov	r6, r0
 80033ee:	db01      	blt.n	80033f4 <_malloc_r+0x1c>
 80033f0:	42a9      	cmp	r1, r5
 80033f2:	d904      	bls.n	80033fe <_malloc_r+0x26>
 80033f4:	230c      	movs	r3, #12
 80033f6:	6033      	str	r3, [r6, #0]
 80033f8:	2000      	movs	r0, #0
 80033fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034d4 <_malloc_r+0xfc>
 8003402:	f000 f869 	bl	80034d8 <__malloc_lock>
 8003406:	f8d8 3000 	ldr.w	r3, [r8]
 800340a:	461c      	mov	r4, r3
 800340c:	bb44      	cbnz	r4, 8003460 <_malloc_r+0x88>
 800340e:	4629      	mov	r1, r5
 8003410:	4630      	mov	r0, r6
 8003412:	f7ff ffbf 	bl	8003394 <sbrk_aligned>
 8003416:	1c43      	adds	r3, r0, #1
 8003418:	4604      	mov	r4, r0
 800341a:	d158      	bne.n	80034ce <_malloc_r+0xf6>
 800341c:	f8d8 4000 	ldr.w	r4, [r8]
 8003420:	4627      	mov	r7, r4
 8003422:	2f00      	cmp	r7, #0
 8003424:	d143      	bne.n	80034ae <_malloc_r+0xd6>
 8003426:	2c00      	cmp	r4, #0
 8003428:	d04b      	beq.n	80034c2 <_malloc_r+0xea>
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	4639      	mov	r1, r7
 800342e:	4630      	mov	r0, r6
 8003430:	eb04 0903 	add.w	r9, r4, r3
 8003434:	f000 fb60 	bl	8003af8 <_sbrk_r>
 8003438:	4581      	cmp	r9, r0
 800343a:	d142      	bne.n	80034c2 <_malloc_r+0xea>
 800343c:	6821      	ldr	r1, [r4, #0]
 800343e:	4630      	mov	r0, r6
 8003440:	1a6d      	subs	r5, r5, r1
 8003442:	4629      	mov	r1, r5
 8003444:	f7ff ffa6 	bl	8003394 <sbrk_aligned>
 8003448:	3001      	adds	r0, #1
 800344a:	d03a      	beq.n	80034c2 <_malloc_r+0xea>
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	442b      	add	r3, r5
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	f8d8 3000 	ldr.w	r3, [r8]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	bb62      	cbnz	r2, 80034b4 <_malloc_r+0xdc>
 800345a:	f8c8 7000 	str.w	r7, [r8]
 800345e:	e00f      	b.n	8003480 <_malloc_r+0xa8>
 8003460:	6822      	ldr	r2, [r4, #0]
 8003462:	1b52      	subs	r2, r2, r5
 8003464:	d420      	bmi.n	80034a8 <_malloc_r+0xd0>
 8003466:	2a0b      	cmp	r2, #11
 8003468:	d917      	bls.n	800349a <_malloc_r+0xc2>
 800346a:	1961      	adds	r1, r4, r5
 800346c:	42a3      	cmp	r3, r4
 800346e:	6025      	str	r5, [r4, #0]
 8003470:	bf18      	it	ne
 8003472:	6059      	strne	r1, [r3, #4]
 8003474:	6863      	ldr	r3, [r4, #4]
 8003476:	bf08      	it	eq
 8003478:	f8c8 1000 	streq.w	r1, [r8]
 800347c:	5162      	str	r2, [r4, r5]
 800347e:	604b      	str	r3, [r1, #4]
 8003480:	4630      	mov	r0, r6
 8003482:	f000 f82f 	bl	80034e4 <__malloc_unlock>
 8003486:	f104 000b 	add.w	r0, r4, #11
 800348a:	1d23      	adds	r3, r4, #4
 800348c:	f020 0007 	bic.w	r0, r0, #7
 8003490:	1ac2      	subs	r2, r0, r3
 8003492:	bf1c      	itt	ne
 8003494:	1a1b      	subne	r3, r3, r0
 8003496:	50a3      	strne	r3, [r4, r2]
 8003498:	e7af      	b.n	80033fa <_malloc_r+0x22>
 800349a:	6862      	ldr	r2, [r4, #4]
 800349c:	42a3      	cmp	r3, r4
 800349e:	bf0c      	ite	eq
 80034a0:	f8c8 2000 	streq.w	r2, [r8]
 80034a4:	605a      	strne	r2, [r3, #4]
 80034a6:	e7eb      	b.n	8003480 <_malloc_r+0xa8>
 80034a8:	4623      	mov	r3, r4
 80034aa:	6864      	ldr	r4, [r4, #4]
 80034ac:	e7ae      	b.n	800340c <_malloc_r+0x34>
 80034ae:	463c      	mov	r4, r7
 80034b0:	687f      	ldr	r7, [r7, #4]
 80034b2:	e7b6      	b.n	8003422 <_malloc_r+0x4a>
 80034b4:	461a      	mov	r2, r3
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	d1fb      	bne.n	80034b4 <_malloc_r+0xdc>
 80034bc:	2300      	movs	r3, #0
 80034be:	6053      	str	r3, [r2, #4]
 80034c0:	e7de      	b.n	8003480 <_malloc_r+0xa8>
 80034c2:	230c      	movs	r3, #12
 80034c4:	4630      	mov	r0, r6
 80034c6:	6033      	str	r3, [r6, #0]
 80034c8:	f000 f80c 	bl	80034e4 <__malloc_unlock>
 80034cc:	e794      	b.n	80033f8 <_malloc_r+0x20>
 80034ce:	6005      	str	r5, [r0, #0]
 80034d0:	e7d6      	b.n	8003480 <_malloc_r+0xa8>
 80034d2:	bf00      	nop
 80034d4:	20000284 	.word	0x20000284

080034d8 <__malloc_lock>:
 80034d8:	4801      	ldr	r0, [pc, #4]	@ (80034e0 <__malloc_lock+0x8>)
 80034da:	f7ff bf11 	b.w	8003300 <__retarget_lock_acquire_recursive>
 80034de:	bf00      	nop
 80034e0:	2000027c 	.word	0x2000027c

080034e4 <__malloc_unlock>:
 80034e4:	4801      	ldr	r0, [pc, #4]	@ (80034ec <__malloc_unlock+0x8>)
 80034e6:	f7ff bf0c 	b.w	8003302 <__retarget_lock_release_recursive>
 80034ea:	bf00      	nop
 80034ec:	2000027c 	.word	0x2000027c

080034f0 <__ssputs_r>:
 80034f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f4:	461f      	mov	r7, r3
 80034f6:	688e      	ldr	r6, [r1, #8]
 80034f8:	4682      	mov	sl, r0
 80034fa:	42be      	cmp	r6, r7
 80034fc:	460c      	mov	r4, r1
 80034fe:	4690      	mov	r8, r2
 8003500:	680b      	ldr	r3, [r1, #0]
 8003502:	d82d      	bhi.n	8003560 <__ssputs_r+0x70>
 8003504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003508:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800350c:	d026      	beq.n	800355c <__ssputs_r+0x6c>
 800350e:	6965      	ldr	r5, [r4, #20]
 8003510:	6909      	ldr	r1, [r1, #16]
 8003512:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003516:	eba3 0901 	sub.w	r9, r3, r1
 800351a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800351e:	1c7b      	adds	r3, r7, #1
 8003520:	444b      	add	r3, r9
 8003522:	106d      	asrs	r5, r5, #1
 8003524:	429d      	cmp	r5, r3
 8003526:	bf38      	it	cc
 8003528:	461d      	movcc	r5, r3
 800352a:	0553      	lsls	r3, r2, #21
 800352c:	d527      	bpl.n	800357e <__ssputs_r+0x8e>
 800352e:	4629      	mov	r1, r5
 8003530:	f7ff ff52 	bl	80033d8 <_malloc_r>
 8003534:	4606      	mov	r6, r0
 8003536:	b360      	cbz	r0, 8003592 <__ssputs_r+0xa2>
 8003538:	464a      	mov	r2, r9
 800353a:	6921      	ldr	r1, [r4, #16]
 800353c:	f000 fafa 	bl	8003b34 <memcpy>
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800354a:	81a3      	strh	r3, [r4, #12]
 800354c:	6126      	str	r6, [r4, #16]
 800354e:	444e      	add	r6, r9
 8003550:	6026      	str	r6, [r4, #0]
 8003552:	463e      	mov	r6, r7
 8003554:	6165      	str	r5, [r4, #20]
 8003556:	eba5 0509 	sub.w	r5, r5, r9
 800355a:	60a5      	str	r5, [r4, #8]
 800355c:	42be      	cmp	r6, r7
 800355e:	d900      	bls.n	8003562 <__ssputs_r+0x72>
 8003560:	463e      	mov	r6, r7
 8003562:	4632      	mov	r2, r6
 8003564:	4641      	mov	r1, r8
 8003566:	6820      	ldr	r0, [r4, #0]
 8003568:	f000 faac 	bl	8003ac4 <memmove>
 800356c:	2000      	movs	r0, #0
 800356e:	68a3      	ldr	r3, [r4, #8]
 8003570:	1b9b      	subs	r3, r3, r6
 8003572:	60a3      	str	r3, [r4, #8]
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	4433      	add	r3, r6
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800357e:	462a      	mov	r2, r5
 8003580:	f000 fae6 	bl	8003b50 <_realloc_r>
 8003584:	4606      	mov	r6, r0
 8003586:	2800      	cmp	r0, #0
 8003588:	d1e0      	bne.n	800354c <__ssputs_r+0x5c>
 800358a:	4650      	mov	r0, sl
 800358c:	6921      	ldr	r1, [r4, #16]
 800358e:	f7ff feb9 	bl	8003304 <_free_r>
 8003592:	230c      	movs	r3, #12
 8003594:	f8ca 3000 	str.w	r3, [sl]
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	f04f 30ff 	mov.w	r0, #4294967295
 800359e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035a2:	81a3      	strh	r3, [r4, #12]
 80035a4:	e7e9      	b.n	800357a <__ssputs_r+0x8a>
	...

080035a8 <_svfiprintf_r>:
 80035a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ac:	4698      	mov	r8, r3
 80035ae:	898b      	ldrh	r3, [r1, #12]
 80035b0:	4607      	mov	r7, r0
 80035b2:	061b      	lsls	r3, r3, #24
 80035b4:	460d      	mov	r5, r1
 80035b6:	4614      	mov	r4, r2
 80035b8:	b09d      	sub	sp, #116	@ 0x74
 80035ba:	d510      	bpl.n	80035de <_svfiprintf_r+0x36>
 80035bc:	690b      	ldr	r3, [r1, #16]
 80035be:	b973      	cbnz	r3, 80035de <_svfiprintf_r+0x36>
 80035c0:	2140      	movs	r1, #64	@ 0x40
 80035c2:	f7ff ff09 	bl	80033d8 <_malloc_r>
 80035c6:	6028      	str	r0, [r5, #0]
 80035c8:	6128      	str	r0, [r5, #16]
 80035ca:	b930      	cbnz	r0, 80035da <_svfiprintf_r+0x32>
 80035cc:	230c      	movs	r3, #12
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	b01d      	add	sp, #116	@ 0x74
 80035d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035da:	2340      	movs	r3, #64	@ 0x40
 80035dc:	616b      	str	r3, [r5, #20]
 80035de:	2300      	movs	r3, #0
 80035e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80035e2:	2320      	movs	r3, #32
 80035e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035e8:	2330      	movs	r3, #48	@ 0x30
 80035ea:	f04f 0901 	mov.w	r9, #1
 80035ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80035f2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800378c <_svfiprintf_r+0x1e4>
 80035f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035fa:	4623      	mov	r3, r4
 80035fc:	469a      	mov	sl, r3
 80035fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003602:	b10a      	cbz	r2, 8003608 <_svfiprintf_r+0x60>
 8003604:	2a25      	cmp	r2, #37	@ 0x25
 8003606:	d1f9      	bne.n	80035fc <_svfiprintf_r+0x54>
 8003608:	ebba 0b04 	subs.w	fp, sl, r4
 800360c:	d00b      	beq.n	8003626 <_svfiprintf_r+0x7e>
 800360e:	465b      	mov	r3, fp
 8003610:	4622      	mov	r2, r4
 8003612:	4629      	mov	r1, r5
 8003614:	4638      	mov	r0, r7
 8003616:	f7ff ff6b 	bl	80034f0 <__ssputs_r>
 800361a:	3001      	adds	r0, #1
 800361c:	f000 80a7 	beq.w	800376e <_svfiprintf_r+0x1c6>
 8003620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003622:	445a      	add	r2, fp
 8003624:	9209      	str	r2, [sp, #36]	@ 0x24
 8003626:	f89a 3000 	ldrb.w	r3, [sl]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 809f 	beq.w	800376e <_svfiprintf_r+0x1c6>
 8003630:	2300      	movs	r3, #0
 8003632:	f04f 32ff 	mov.w	r2, #4294967295
 8003636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800363a:	f10a 0a01 	add.w	sl, sl, #1
 800363e:	9304      	str	r3, [sp, #16]
 8003640:	9307      	str	r3, [sp, #28]
 8003642:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003646:	931a      	str	r3, [sp, #104]	@ 0x68
 8003648:	4654      	mov	r4, sl
 800364a:	2205      	movs	r2, #5
 800364c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003650:	484e      	ldr	r0, [pc, #312]	@ (800378c <_svfiprintf_r+0x1e4>)
 8003652:	f000 fa61 	bl	8003b18 <memchr>
 8003656:	9a04      	ldr	r2, [sp, #16]
 8003658:	b9d8      	cbnz	r0, 8003692 <_svfiprintf_r+0xea>
 800365a:	06d0      	lsls	r0, r2, #27
 800365c:	bf44      	itt	mi
 800365e:	2320      	movmi	r3, #32
 8003660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003664:	0711      	lsls	r1, r2, #28
 8003666:	bf44      	itt	mi
 8003668:	232b      	movmi	r3, #43	@ 0x2b
 800366a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800366e:	f89a 3000 	ldrb.w	r3, [sl]
 8003672:	2b2a      	cmp	r3, #42	@ 0x2a
 8003674:	d015      	beq.n	80036a2 <_svfiprintf_r+0xfa>
 8003676:	4654      	mov	r4, sl
 8003678:	2000      	movs	r0, #0
 800367a:	f04f 0c0a 	mov.w	ip, #10
 800367e:	9a07      	ldr	r2, [sp, #28]
 8003680:	4621      	mov	r1, r4
 8003682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003686:	3b30      	subs	r3, #48	@ 0x30
 8003688:	2b09      	cmp	r3, #9
 800368a:	d94b      	bls.n	8003724 <_svfiprintf_r+0x17c>
 800368c:	b1b0      	cbz	r0, 80036bc <_svfiprintf_r+0x114>
 800368e:	9207      	str	r2, [sp, #28]
 8003690:	e014      	b.n	80036bc <_svfiprintf_r+0x114>
 8003692:	eba0 0308 	sub.w	r3, r0, r8
 8003696:	fa09 f303 	lsl.w	r3, r9, r3
 800369a:	4313      	orrs	r3, r2
 800369c:	46a2      	mov	sl, r4
 800369e:	9304      	str	r3, [sp, #16]
 80036a0:	e7d2      	b.n	8003648 <_svfiprintf_r+0xa0>
 80036a2:	9b03      	ldr	r3, [sp, #12]
 80036a4:	1d19      	adds	r1, r3, #4
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	9103      	str	r1, [sp, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bfbb      	ittet	lt
 80036ae:	425b      	neglt	r3, r3
 80036b0:	f042 0202 	orrlt.w	r2, r2, #2
 80036b4:	9307      	strge	r3, [sp, #28]
 80036b6:	9307      	strlt	r3, [sp, #28]
 80036b8:	bfb8      	it	lt
 80036ba:	9204      	strlt	r2, [sp, #16]
 80036bc:	7823      	ldrb	r3, [r4, #0]
 80036be:	2b2e      	cmp	r3, #46	@ 0x2e
 80036c0:	d10a      	bne.n	80036d8 <_svfiprintf_r+0x130>
 80036c2:	7863      	ldrb	r3, [r4, #1]
 80036c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80036c6:	d132      	bne.n	800372e <_svfiprintf_r+0x186>
 80036c8:	9b03      	ldr	r3, [sp, #12]
 80036ca:	3402      	adds	r4, #2
 80036cc:	1d1a      	adds	r2, r3, #4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	9203      	str	r2, [sp, #12]
 80036d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036d6:	9305      	str	r3, [sp, #20]
 80036d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003790 <_svfiprintf_r+0x1e8>
 80036dc:	2203      	movs	r2, #3
 80036de:	4650      	mov	r0, sl
 80036e0:	7821      	ldrb	r1, [r4, #0]
 80036e2:	f000 fa19 	bl	8003b18 <memchr>
 80036e6:	b138      	cbz	r0, 80036f8 <_svfiprintf_r+0x150>
 80036e8:	2240      	movs	r2, #64	@ 0x40
 80036ea:	9b04      	ldr	r3, [sp, #16]
 80036ec:	eba0 000a 	sub.w	r0, r0, sl
 80036f0:	4082      	lsls	r2, r0
 80036f2:	4313      	orrs	r3, r2
 80036f4:	3401      	adds	r4, #1
 80036f6:	9304      	str	r3, [sp, #16]
 80036f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036fc:	2206      	movs	r2, #6
 80036fe:	4825      	ldr	r0, [pc, #148]	@ (8003794 <_svfiprintf_r+0x1ec>)
 8003700:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003704:	f000 fa08 	bl	8003b18 <memchr>
 8003708:	2800      	cmp	r0, #0
 800370a:	d036      	beq.n	800377a <_svfiprintf_r+0x1d2>
 800370c:	4b22      	ldr	r3, [pc, #136]	@ (8003798 <_svfiprintf_r+0x1f0>)
 800370e:	bb1b      	cbnz	r3, 8003758 <_svfiprintf_r+0x1b0>
 8003710:	9b03      	ldr	r3, [sp, #12]
 8003712:	3307      	adds	r3, #7
 8003714:	f023 0307 	bic.w	r3, r3, #7
 8003718:	3308      	adds	r3, #8
 800371a:	9303      	str	r3, [sp, #12]
 800371c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800371e:	4433      	add	r3, r6
 8003720:	9309      	str	r3, [sp, #36]	@ 0x24
 8003722:	e76a      	b.n	80035fa <_svfiprintf_r+0x52>
 8003724:	460c      	mov	r4, r1
 8003726:	2001      	movs	r0, #1
 8003728:	fb0c 3202 	mla	r2, ip, r2, r3
 800372c:	e7a8      	b.n	8003680 <_svfiprintf_r+0xd8>
 800372e:	2300      	movs	r3, #0
 8003730:	f04f 0c0a 	mov.w	ip, #10
 8003734:	4619      	mov	r1, r3
 8003736:	3401      	adds	r4, #1
 8003738:	9305      	str	r3, [sp, #20]
 800373a:	4620      	mov	r0, r4
 800373c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003740:	3a30      	subs	r2, #48	@ 0x30
 8003742:	2a09      	cmp	r2, #9
 8003744:	d903      	bls.n	800374e <_svfiprintf_r+0x1a6>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0c6      	beq.n	80036d8 <_svfiprintf_r+0x130>
 800374a:	9105      	str	r1, [sp, #20]
 800374c:	e7c4      	b.n	80036d8 <_svfiprintf_r+0x130>
 800374e:	4604      	mov	r4, r0
 8003750:	2301      	movs	r3, #1
 8003752:	fb0c 2101 	mla	r1, ip, r1, r2
 8003756:	e7f0      	b.n	800373a <_svfiprintf_r+0x192>
 8003758:	ab03      	add	r3, sp, #12
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	462a      	mov	r2, r5
 800375e:	4638      	mov	r0, r7
 8003760:	4b0e      	ldr	r3, [pc, #56]	@ (800379c <_svfiprintf_r+0x1f4>)
 8003762:	a904      	add	r1, sp, #16
 8003764:	f3af 8000 	nop.w
 8003768:	1c42      	adds	r2, r0, #1
 800376a:	4606      	mov	r6, r0
 800376c:	d1d6      	bne.n	800371c <_svfiprintf_r+0x174>
 800376e:	89ab      	ldrh	r3, [r5, #12]
 8003770:	065b      	lsls	r3, r3, #25
 8003772:	f53f af2d 	bmi.w	80035d0 <_svfiprintf_r+0x28>
 8003776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003778:	e72c      	b.n	80035d4 <_svfiprintf_r+0x2c>
 800377a:	ab03      	add	r3, sp, #12
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	462a      	mov	r2, r5
 8003780:	4638      	mov	r0, r7
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <_svfiprintf_r+0x1f4>)
 8003784:	a904      	add	r1, sp, #16
 8003786:	f000 f87d 	bl	8003884 <_printf_i>
 800378a:	e7ed      	b.n	8003768 <_svfiprintf_r+0x1c0>
 800378c:	080056b6 	.word	0x080056b6
 8003790:	080056bc 	.word	0x080056bc
 8003794:	080056c0 	.word	0x080056c0
 8003798:	00000000 	.word	0x00000000
 800379c:	080034f1 	.word	0x080034f1

080037a0 <_printf_common>:
 80037a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a4:	4616      	mov	r6, r2
 80037a6:	4698      	mov	r8, r3
 80037a8:	688a      	ldr	r2, [r1, #8]
 80037aa:	690b      	ldr	r3, [r1, #16]
 80037ac:	4607      	mov	r7, r0
 80037ae:	4293      	cmp	r3, r2
 80037b0:	bfb8      	it	lt
 80037b2:	4613      	movlt	r3, r2
 80037b4:	6033      	str	r3, [r6, #0]
 80037b6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037ba:	460c      	mov	r4, r1
 80037bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037c0:	b10a      	cbz	r2, 80037c6 <_printf_common+0x26>
 80037c2:	3301      	adds	r3, #1
 80037c4:	6033      	str	r3, [r6, #0]
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	0699      	lsls	r1, r3, #26
 80037ca:	bf42      	ittt	mi
 80037cc:	6833      	ldrmi	r3, [r6, #0]
 80037ce:	3302      	addmi	r3, #2
 80037d0:	6033      	strmi	r3, [r6, #0]
 80037d2:	6825      	ldr	r5, [r4, #0]
 80037d4:	f015 0506 	ands.w	r5, r5, #6
 80037d8:	d106      	bne.n	80037e8 <_printf_common+0x48>
 80037da:	f104 0a19 	add.w	sl, r4, #25
 80037de:	68e3      	ldr	r3, [r4, #12]
 80037e0:	6832      	ldr	r2, [r6, #0]
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	42ab      	cmp	r3, r5
 80037e6:	dc2b      	bgt.n	8003840 <_printf_common+0xa0>
 80037e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037ec:	6822      	ldr	r2, [r4, #0]
 80037ee:	3b00      	subs	r3, #0
 80037f0:	bf18      	it	ne
 80037f2:	2301      	movne	r3, #1
 80037f4:	0692      	lsls	r2, r2, #26
 80037f6:	d430      	bmi.n	800385a <_printf_common+0xba>
 80037f8:	4641      	mov	r1, r8
 80037fa:	4638      	mov	r0, r7
 80037fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003800:	47c8      	blx	r9
 8003802:	3001      	adds	r0, #1
 8003804:	d023      	beq.n	800384e <_printf_common+0xae>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	6922      	ldr	r2, [r4, #16]
 800380a:	f003 0306 	and.w	r3, r3, #6
 800380e:	2b04      	cmp	r3, #4
 8003810:	bf14      	ite	ne
 8003812:	2500      	movne	r5, #0
 8003814:	6833      	ldreq	r3, [r6, #0]
 8003816:	f04f 0600 	mov.w	r6, #0
 800381a:	bf08      	it	eq
 800381c:	68e5      	ldreq	r5, [r4, #12]
 800381e:	f104 041a 	add.w	r4, r4, #26
 8003822:	bf08      	it	eq
 8003824:	1aed      	subeq	r5, r5, r3
 8003826:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800382a:	bf08      	it	eq
 800382c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003830:	4293      	cmp	r3, r2
 8003832:	bfc4      	itt	gt
 8003834:	1a9b      	subgt	r3, r3, r2
 8003836:	18ed      	addgt	r5, r5, r3
 8003838:	42b5      	cmp	r5, r6
 800383a:	d11a      	bne.n	8003872 <_printf_common+0xd2>
 800383c:	2000      	movs	r0, #0
 800383e:	e008      	b.n	8003852 <_printf_common+0xb2>
 8003840:	2301      	movs	r3, #1
 8003842:	4652      	mov	r2, sl
 8003844:	4641      	mov	r1, r8
 8003846:	4638      	mov	r0, r7
 8003848:	47c8      	blx	r9
 800384a:	3001      	adds	r0, #1
 800384c:	d103      	bne.n	8003856 <_printf_common+0xb6>
 800384e:	f04f 30ff 	mov.w	r0, #4294967295
 8003852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003856:	3501      	adds	r5, #1
 8003858:	e7c1      	b.n	80037de <_printf_common+0x3e>
 800385a:	2030      	movs	r0, #48	@ 0x30
 800385c:	18e1      	adds	r1, r4, r3
 800385e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003868:	4422      	add	r2, r4
 800386a:	3302      	adds	r3, #2
 800386c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003870:	e7c2      	b.n	80037f8 <_printf_common+0x58>
 8003872:	2301      	movs	r3, #1
 8003874:	4622      	mov	r2, r4
 8003876:	4641      	mov	r1, r8
 8003878:	4638      	mov	r0, r7
 800387a:	47c8      	blx	r9
 800387c:	3001      	adds	r0, #1
 800387e:	d0e6      	beq.n	800384e <_printf_common+0xae>
 8003880:	3601      	adds	r6, #1
 8003882:	e7d9      	b.n	8003838 <_printf_common+0x98>

08003884 <_printf_i>:
 8003884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003888:	7e0f      	ldrb	r7, [r1, #24]
 800388a:	4691      	mov	r9, r2
 800388c:	2f78      	cmp	r7, #120	@ 0x78
 800388e:	4680      	mov	r8, r0
 8003890:	460c      	mov	r4, r1
 8003892:	469a      	mov	sl, r3
 8003894:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003896:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800389a:	d807      	bhi.n	80038ac <_printf_i+0x28>
 800389c:	2f62      	cmp	r7, #98	@ 0x62
 800389e:	d80a      	bhi.n	80038b6 <_printf_i+0x32>
 80038a0:	2f00      	cmp	r7, #0
 80038a2:	f000 80d3 	beq.w	8003a4c <_printf_i+0x1c8>
 80038a6:	2f58      	cmp	r7, #88	@ 0x58
 80038a8:	f000 80ba 	beq.w	8003a20 <_printf_i+0x19c>
 80038ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038b4:	e03a      	b.n	800392c <_printf_i+0xa8>
 80038b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038ba:	2b15      	cmp	r3, #21
 80038bc:	d8f6      	bhi.n	80038ac <_printf_i+0x28>
 80038be:	a101      	add	r1, pc, #4	@ (adr r1, 80038c4 <_printf_i+0x40>)
 80038c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038c4:	0800391d 	.word	0x0800391d
 80038c8:	08003931 	.word	0x08003931
 80038cc:	080038ad 	.word	0x080038ad
 80038d0:	080038ad 	.word	0x080038ad
 80038d4:	080038ad 	.word	0x080038ad
 80038d8:	080038ad 	.word	0x080038ad
 80038dc:	08003931 	.word	0x08003931
 80038e0:	080038ad 	.word	0x080038ad
 80038e4:	080038ad 	.word	0x080038ad
 80038e8:	080038ad 	.word	0x080038ad
 80038ec:	080038ad 	.word	0x080038ad
 80038f0:	08003a33 	.word	0x08003a33
 80038f4:	0800395b 	.word	0x0800395b
 80038f8:	080039ed 	.word	0x080039ed
 80038fc:	080038ad 	.word	0x080038ad
 8003900:	080038ad 	.word	0x080038ad
 8003904:	08003a55 	.word	0x08003a55
 8003908:	080038ad 	.word	0x080038ad
 800390c:	0800395b 	.word	0x0800395b
 8003910:	080038ad 	.word	0x080038ad
 8003914:	080038ad 	.word	0x080038ad
 8003918:	080039f5 	.word	0x080039f5
 800391c:	6833      	ldr	r3, [r6, #0]
 800391e:	1d1a      	adds	r2, r3, #4
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6032      	str	r2, [r6, #0]
 8003924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003928:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800392c:	2301      	movs	r3, #1
 800392e:	e09e      	b.n	8003a6e <_printf_i+0x1ea>
 8003930:	6833      	ldr	r3, [r6, #0]
 8003932:	6820      	ldr	r0, [r4, #0]
 8003934:	1d19      	adds	r1, r3, #4
 8003936:	6031      	str	r1, [r6, #0]
 8003938:	0606      	lsls	r6, r0, #24
 800393a:	d501      	bpl.n	8003940 <_printf_i+0xbc>
 800393c:	681d      	ldr	r5, [r3, #0]
 800393e:	e003      	b.n	8003948 <_printf_i+0xc4>
 8003940:	0645      	lsls	r5, r0, #25
 8003942:	d5fb      	bpl.n	800393c <_printf_i+0xb8>
 8003944:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003948:	2d00      	cmp	r5, #0
 800394a:	da03      	bge.n	8003954 <_printf_i+0xd0>
 800394c:	232d      	movs	r3, #45	@ 0x2d
 800394e:	426d      	negs	r5, r5
 8003950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003954:	230a      	movs	r3, #10
 8003956:	4859      	ldr	r0, [pc, #356]	@ (8003abc <_printf_i+0x238>)
 8003958:	e011      	b.n	800397e <_printf_i+0xfa>
 800395a:	6821      	ldr	r1, [r4, #0]
 800395c:	6833      	ldr	r3, [r6, #0]
 800395e:	0608      	lsls	r0, r1, #24
 8003960:	f853 5b04 	ldr.w	r5, [r3], #4
 8003964:	d402      	bmi.n	800396c <_printf_i+0xe8>
 8003966:	0649      	lsls	r1, r1, #25
 8003968:	bf48      	it	mi
 800396a:	b2ad      	uxthmi	r5, r5
 800396c:	2f6f      	cmp	r7, #111	@ 0x6f
 800396e:	6033      	str	r3, [r6, #0]
 8003970:	bf14      	ite	ne
 8003972:	230a      	movne	r3, #10
 8003974:	2308      	moveq	r3, #8
 8003976:	4851      	ldr	r0, [pc, #324]	@ (8003abc <_printf_i+0x238>)
 8003978:	2100      	movs	r1, #0
 800397a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800397e:	6866      	ldr	r6, [r4, #4]
 8003980:	2e00      	cmp	r6, #0
 8003982:	bfa8      	it	ge
 8003984:	6821      	ldrge	r1, [r4, #0]
 8003986:	60a6      	str	r6, [r4, #8]
 8003988:	bfa4      	itt	ge
 800398a:	f021 0104 	bicge.w	r1, r1, #4
 800398e:	6021      	strge	r1, [r4, #0]
 8003990:	b90d      	cbnz	r5, 8003996 <_printf_i+0x112>
 8003992:	2e00      	cmp	r6, #0
 8003994:	d04b      	beq.n	8003a2e <_printf_i+0x1aa>
 8003996:	4616      	mov	r6, r2
 8003998:	fbb5 f1f3 	udiv	r1, r5, r3
 800399c:	fb03 5711 	mls	r7, r3, r1, r5
 80039a0:	5dc7      	ldrb	r7, [r0, r7]
 80039a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039a6:	462f      	mov	r7, r5
 80039a8:	42bb      	cmp	r3, r7
 80039aa:	460d      	mov	r5, r1
 80039ac:	d9f4      	bls.n	8003998 <_printf_i+0x114>
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d10b      	bne.n	80039ca <_printf_i+0x146>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	07df      	lsls	r7, r3, #31
 80039b6:	d508      	bpl.n	80039ca <_printf_i+0x146>
 80039b8:	6923      	ldr	r3, [r4, #16]
 80039ba:	6861      	ldr	r1, [r4, #4]
 80039bc:	4299      	cmp	r1, r3
 80039be:	bfde      	ittt	le
 80039c0:	2330      	movle	r3, #48	@ 0x30
 80039c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039ca:	1b92      	subs	r2, r2, r6
 80039cc:	6122      	str	r2, [r4, #16]
 80039ce:	464b      	mov	r3, r9
 80039d0:	4621      	mov	r1, r4
 80039d2:	4640      	mov	r0, r8
 80039d4:	f8cd a000 	str.w	sl, [sp]
 80039d8:	aa03      	add	r2, sp, #12
 80039da:	f7ff fee1 	bl	80037a0 <_printf_common>
 80039de:	3001      	adds	r0, #1
 80039e0:	d14a      	bne.n	8003a78 <_printf_i+0x1f4>
 80039e2:	f04f 30ff 	mov.w	r0, #4294967295
 80039e6:	b004      	add	sp, #16
 80039e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	f043 0320 	orr.w	r3, r3, #32
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	2778      	movs	r7, #120	@ 0x78
 80039f6:	4832      	ldr	r0, [pc, #200]	@ (8003ac0 <_printf_i+0x23c>)
 80039f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	6831      	ldr	r1, [r6, #0]
 8003a00:	061f      	lsls	r7, r3, #24
 8003a02:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a06:	d402      	bmi.n	8003a0e <_printf_i+0x18a>
 8003a08:	065f      	lsls	r7, r3, #25
 8003a0a:	bf48      	it	mi
 8003a0c:	b2ad      	uxthmi	r5, r5
 8003a0e:	6031      	str	r1, [r6, #0]
 8003a10:	07d9      	lsls	r1, r3, #31
 8003a12:	bf44      	itt	mi
 8003a14:	f043 0320 	orrmi.w	r3, r3, #32
 8003a18:	6023      	strmi	r3, [r4, #0]
 8003a1a:	b11d      	cbz	r5, 8003a24 <_printf_i+0x1a0>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	e7ab      	b.n	8003978 <_printf_i+0xf4>
 8003a20:	4826      	ldr	r0, [pc, #152]	@ (8003abc <_printf_i+0x238>)
 8003a22:	e7e9      	b.n	80039f8 <_printf_i+0x174>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	f023 0320 	bic.w	r3, r3, #32
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	e7f6      	b.n	8003a1c <_printf_i+0x198>
 8003a2e:	4616      	mov	r6, r2
 8003a30:	e7bd      	b.n	80039ae <_printf_i+0x12a>
 8003a32:	6833      	ldr	r3, [r6, #0]
 8003a34:	6825      	ldr	r5, [r4, #0]
 8003a36:	1d18      	adds	r0, r3, #4
 8003a38:	6961      	ldr	r1, [r4, #20]
 8003a3a:	6030      	str	r0, [r6, #0]
 8003a3c:	062e      	lsls	r6, r5, #24
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	d501      	bpl.n	8003a46 <_printf_i+0x1c2>
 8003a42:	6019      	str	r1, [r3, #0]
 8003a44:	e002      	b.n	8003a4c <_printf_i+0x1c8>
 8003a46:	0668      	lsls	r0, r5, #25
 8003a48:	d5fb      	bpl.n	8003a42 <_printf_i+0x1be>
 8003a4a:	8019      	strh	r1, [r3, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	4616      	mov	r6, r2
 8003a50:	6123      	str	r3, [r4, #16]
 8003a52:	e7bc      	b.n	80039ce <_printf_i+0x14a>
 8003a54:	6833      	ldr	r3, [r6, #0]
 8003a56:	2100      	movs	r1, #0
 8003a58:	1d1a      	adds	r2, r3, #4
 8003a5a:	6032      	str	r2, [r6, #0]
 8003a5c:	681e      	ldr	r6, [r3, #0]
 8003a5e:	6862      	ldr	r2, [r4, #4]
 8003a60:	4630      	mov	r0, r6
 8003a62:	f000 f859 	bl	8003b18 <memchr>
 8003a66:	b108      	cbz	r0, 8003a6c <_printf_i+0x1e8>
 8003a68:	1b80      	subs	r0, r0, r6
 8003a6a:	6060      	str	r0, [r4, #4]
 8003a6c:	6863      	ldr	r3, [r4, #4]
 8003a6e:	6123      	str	r3, [r4, #16]
 8003a70:	2300      	movs	r3, #0
 8003a72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a76:	e7aa      	b.n	80039ce <_printf_i+0x14a>
 8003a78:	4632      	mov	r2, r6
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	6923      	ldr	r3, [r4, #16]
 8003a80:	47d0      	blx	sl
 8003a82:	3001      	adds	r0, #1
 8003a84:	d0ad      	beq.n	80039e2 <_printf_i+0x15e>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	079b      	lsls	r3, r3, #30
 8003a8a:	d413      	bmi.n	8003ab4 <_printf_i+0x230>
 8003a8c:	68e0      	ldr	r0, [r4, #12]
 8003a8e:	9b03      	ldr	r3, [sp, #12]
 8003a90:	4298      	cmp	r0, r3
 8003a92:	bfb8      	it	lt
 8003a94:	4618      	movlt	r0, r3
 8003a96:	e7a6      	b.n	80039e6 <_printf_i+0x162>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	4632      	mov	r2, r6
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	4640      	mov	r0, r8
 8003aa0:	47d0      	blx	sl
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d09d      	beq.n	80039e2 <_printf_i+0x15e>
 8003aa6:	3501      	adds	r5, #1
 8003aa8:	68e3      	ldr	r3, [r4, #12]
 8003aaa:	9903      	ldr	r1, [sp, #12]
 8003aac:	1a5b      	subs	r3, r3, r1
 8003aae:	42ab      	cmp	r3, r5
 8003ab0:	dcf2      	bgt.n	8003a98 <_printf_i+0x214>
 8003ab2:	e7eb      	b.n	8003a8c <_printf_i+0x208>
 8003ab4:	2500      	movs	r5, #0
 8003ab6:	f104 0619 	add.w	r6, r4, #25
 8003aba:	e7f5      	b.n	8003aa8 <_printf_i+0x224>
 8003abc:	080056c7 	.word	0x080056c7
 8003ac0:	080056d8 	.word	0x080056d8

08003ac4 <memmove>:
 8003ac4:	4288      	cmp	r0, r1
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	eb01 0402 	add.w	r4, r1, r2
 8003acc:	d902      	bls.n	8003ad4 <memmove+0x10>
 8003ace:	4284      	cmp	r4, r0
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	d807      	bhi.n	8003ae4 <memmove+0x20>
 8003ad4:	1e43      	subs	r3, r0, #1
 8003ad6:	42a1      	cmp	r1, r4
 8003ad8:	d008      	beq.n	8003aec <memmove+0x28>
 8003ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ade:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ae2:	e7f8      	b.n	8003ad6 <memmove+0x12>
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	4402      	add	r2, r0
 8003ae8:	428a      	cmp	r2, r1
 8003aea:	d100      	bne.n	8003aee <memmove+0x2a>
 8003aec:	bd10      	pop	{r4, pc}
 8003aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003af2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003af6:	e7f7      	b.n	8003ae8 <memmove+0x24>

08003af8 <_sbrk_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	2300      	movs	r3, #0
 8003afc:	4d05      	ldr	r5, [pc, #20]	@ (8003b14 <_sbrk_r+0x1c>)
 8003afe:	4604      	mov	r4, r0
 8003b00:	4608      	mov	r0, r1
 8003b02:	602b      	str	r3, [r5, #0]
 8003b04:	f7fd fe84 	bl	8001810 <_sbrk>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d102      	bne.n	8003b12 <_sbrk_r+0x1a>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	b103      	cbz	r3, 8003b12 <_sbrk_r+0x1a>
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
 8003b14:	20000278 	.word	0x20000278

08003b18 <memchr>:
 8003b18:	4603      	mov	r3, r0
 8003b1a:	b510      	push	{r4, lr}
 8003b1c:	b2c9      	uxtb	r1, r1
 8003b1e:	4402      	add	r2, r0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	d101      	bne.n	8003b2a <memchr+0x12>
 8003b26:	2000      	movs	r0, #0
 8003b28:	e003      	b.n	8003b32 <memchr+0x1a>
 8003b2a:	7804      	ldrb	r4, [r0, #0]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	428c      	cmp	r4, r1
 8003b30:	d1f6      	bne.n	8003b20 <memchr+0x8>
 8003b32:	bd10      	pop	{r4, pc}

08003b34 <memcpy>:
 8003b34:	440a      	add	r2, r1
 8003b36:	4291      	cmp	r1, r2
 8003b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b3c:	d100      	bne.n	8003b40 <memcpy+0xc>
 8003b3e:	4770      	bx	lr
 8003b40:	b510      	push	{r4, lr}
 8003b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b46:	4291      	cmp	r1, r2
 8003b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b4c:	d1f9      	bne.n	8003b42 <memcpy+0xe>
 8003b4e:	bd10      	pop	{r4, pc}

08003b50 <_realloc_r>:
 8003b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b54:	4680      	mov	r8, r0
 8003b56:	4615      	mov	r5, r2
 8003b58:	460c      	mov	r4, r1
 8003b5a:	b921      	cbnz	r1, 8003b66 <_realloc_r+0x16>
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b62:	f7ff bc39 	b.w	80033d8 <_malloc_r>
 8003b66:	b92a      	cbnz	r2, 8003b74 <_realloc_r+0x24>
 8003b68:	f7ff fbcc 	bl	8003304 <_free_r>
 8003b6c:	2400      	movs	r4, #0
 8003b6e:	4620      	mov	r0, r4
 8003b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b74:	f000 f81a 	bl	8003bac <_malloc_usable_size_r>
 8003b78:	4285      	cmp	r5, r0
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	d802      	bhi.n	8003b84 <_realloc_r+0x34>
 8003b7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b82:	d8f4      	bhi.n	8003b6e <_realloc_r+0x1e>
 8003b84:	4629      	mov	r1, r5
 8003b86:	4640      	mov	r0, r8
 8003b88:	f7ff fc26 	bl	80033d8 <_malloc_r>
 8003b8c:	4607      	mov	r7, r0
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d0ec      	beq.n	8003b6c <_realloc_r+0x1c>
 8003b92:	42b5      	cmp	r5, r6
 8003b94:	462a      	mov	r2, r5
 8003b96:	4621      	mov	r1, r4
 8003b98:	bf28      	it	cs
 8003b9a:	4632      	movcs	r2, r6
 8003b9c:	f7ff ffca 	bl	8003b34 <memcpy>
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	f7ff fbae 	bl	8003304 <_free_r>
 8003ba8:	463c      	mov	r4, r7
 8003baa:	e7e0      	b.n	8003b6e <_realloc_r+0x1e>

08003bac <_malloc_usable_size_r>:
 8003bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bb0:	1f18      	subs	r0, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bfbc      	itt	lt
 8003bb6:	580b      	ldrlt	r3, [r1, r0]
 8003bb8:	18c0      	addlt	r0, r0, r3
 8003bba:	4770      	bx	lr

08003bbc <_init>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr

08003bc8 <_fini>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr

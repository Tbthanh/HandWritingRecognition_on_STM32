
afiskon_ILI9341_BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f74  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001eb30  08003108  08003108  00004108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021c38  08021c38  00023024  2**0
                  CONTENTS
  4 .ARM          00000008  08021c38  08021c38  00022c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021c40  08021c40  00023024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021c40  08021c40  00022c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021c44  08021c44  00022c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08021c48  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000024  08021c6c  00023024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08021c6c  000230fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000754f  00000000  00000000  00023054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190f  00000000  00000000  0002a5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0002beb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000154c7  00000000  00000000  0002c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00008dfa  00000000  00000000  00041abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008435d  00000000  00000000  0004a8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000cec16  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000556  00000000  00000000  000cec59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c00  00000000  00000000  000cf1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b9  00000000  00000000  000d0db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080030f0 	.word	0x080030f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080030f0 	.word	0x080030f0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2110      	movs	r1, #16
 80004cc:	4802      	ldr	r0, [pc, #8]	@ (80004d8 <ILI9341_Select+0x14>)
 80004ce:	f001 fed3 	bl	8002278 <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40020000 	.word	0x40020000

080004dc <ILI9341_Unselect>:

void ILI9341_Unselect() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	4802      	ldr	r0, [pc, #8]	@ (80004f0 <ILI9341_Unselect+0x14>)
 80004e6:	f001 fec7 	bl	8002278 <HAL_GPIO_WritePin>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40020000 	.word	0x40020000

080004f4 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2108      	movs	r1, #8
 80004fc:	4806      	ldr	r0, [pc, #24]	@ (8000518 <ILI9341_Reset+0x24>)
 80004fe:	f001 febb 	bl	8002278 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000502:	2005      	movs	r0, #5
 8000504:	f000 ffd2 	bl	80014ac <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2108      	movs	r1, #8
 800050c:	4802      	ldr	r0, [pc, #8]	@ (8000518 <ILI9341_Reset+0x24>)
 800050e:	f001 feb3 	bl	8002278 <HAL_GPIO_WritePin>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40020000 	.word	0x40020000

0800051c <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2102      	movs	r1, #2
 800052a:	4807      	ldr	r0, [pc, #28]	@ (8000548 <ILI9341_WriteCommand+0x2c>)
 800052c:	f001 fea4 	bl	8002278 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000530:	1df9      	adds	r1, r7, #7
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
 8000536:	2201      	movs	r2, #1
 8000538:	4804      	ldr	r0, [pc, #16]	@ (800054c <ILI9341_WriteCommand+0x30>)
 800053a:	f002 fb8c 	bl	8002c56 <HAL_SPI_Transmit>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40020000 	.word	0x40020000
 800054c:	20000040 	.word	0x20000040

08000550 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2102      	movs	r1, #2
 800055e:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <ILI9341_WriteData+0x54>)
 8000560:	f001 fe8a 	bl	8002278 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000564:	e015      	b.n	8000592 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800056c:	bf28      	it	cs
 800056e:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000572:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000574:	89fa      	ldrh	r2, [r7, #14]
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	480a      	ldr	r0, [pc, #40]	@ (80005a8 <ILI9341_WriteData+0x58>)
 800057e:	f002 fb6a 	bl	8002c56 <HAL_SPI_Transmit>
        buff += chunk_size;
 8000582:	89fb      	ldrh	r3, [r7, #14]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800058a:	89fb      	ldrh	r3, [r7, #14]
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1e6      	bne.n	8000566 <ILI9341_WriteData+0x16>
    }
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020000 	.word	0x40020000
 80005a8:	20000040 	.word	0x20000040

080005ac <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4604      	mov	r4, r0
 80005b4:	4608      	mov	r0, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	4623      	mov	r3, r4
 80005bc:	80fb      	strh	r3, [r7, #6]
 80005be:	4603      	mov	r3, r0
 80005c0:	80bb      	strh	r3, [r7, #4]
 80005c2:	460b      	mov	r3, r1
 80005c4:	807b      	strh	r3, [r7, #2]
 80005c6:	4613      	mov	r3, r2
 80005c8:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80005ca:	202a      	movs	r0, #42	@ 0x2a
 80005cc:	f7ff ffa6 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80005d0:	88fb      	ldrh	r3, [r7, #6]
 80005d2:	0a1b      	lsrs	r3, r3, #8
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	733b      	strb	r3, [r7, #12]
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	737b      	strb	r3, [r7, #13]
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	0a1b      	lsrs	r3, r3, #8
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	73bb      	strb	r3, [r7, #14]
 80005ea:	887b      	ldrh	r3, [r7, #2]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffaa 	bl	8000550 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80005fc:	202b      	movs	r0, #43	@ 0x2b
 80005fe:	f7ff ff8d 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000602:	88bb      	ldrh	r3, [r7, #4]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	b29b      	uxth	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	723b      	strb	r3, [r7, #8]
 800060c:	88bb      	ldrh	r3, [r7, #4]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	727b      	strb	r3, [r7, #9]
 8000612:	883b      	ldrh	r3, [r7, #0]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	b29b      	uxth	r3, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	72bb      	strb	r3, [r7, #10]
 800061c:	883b      	ldrh	r3, [r7, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	2104      	movs	r1, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff91 	bl	8000550 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800062e:	202c      	movs	r0, #44	@ 0x2c
 8000630:	f7ff ff74 	bl	800051c <ILI9341_WriteCommand>
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	bd90      	pop	{r4, r7, pc}

0800063c <ILI9341_Init>:

void ILI9341_Init() {
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b09b      	sub	sp, #108	@ 0x6c
 8000640:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000642:	f7ff ff3f 	bl	80004c4 <ILI9341_Select>
    ILI9341_Reset();
 8000646:	f7ff ff55 	bl	80004f4 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800064a:	2001      	movs	r0, #1
 800064c:	f7ff ff66 	bl	800051c <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000654:	f000 ff2a 	bl	80014ac <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000658:	20cb      	movs	r0, #203	@ 0xcb
 800065a:	f7ff ff5f 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800065e:	4a87      	ldr	r2, [pc, #540]	@ (800087c <ILI9341_Init+0x240>)
 8000660:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000668:	6018      	str	r0, [r3, #0]
 800066a:	3304      	adds	r3, #4
 800066c:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800066e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000672:	2105      	movs	r1, #5
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff6b 	bl	8000550 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800067a:	20cf      	movs	r0, #207	@ 0xcf
 800067c:	f7ff ff4e 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000680:	4a7f      	ldr	r2, [pc, #508]	@ (8000880 <ILI9341_Init+0x244>)
 8000682:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000686:	6812      	ldr	r2, [r2, #0]
 8000688:	4611      	mov	r1, r2
 800068a:	8019      	strh	r1, [r3, #0]
 800068c:	3302      	adds	r3, #2
 800068e:	0c12      	lsrs	r2, r2, #16
 8000690:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000692:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000696:	2103      	movs	r1, #3
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff59 	bl	8000550 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800069e:	20e8      	movs	r0, #232	@ 0xe8
 80006a0:	f7ff ff3c 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80006a4:	4a77      	ldr	r2, [pc, #476]	@ (8000884 <ILI9341_Init+0x248>)
 80006a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006aa:	6812      	ldr	r2, [r2, #0]
 80006ac:	4611      	mov	r1, r2
 80006ae:	8019      	strh	r1, [r3, #0]
 80006b0:	3302      	adds	r3, #2
 80006b2:	0c12      	lsrs	r2, r2, #16
 80006b4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80006b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006ba:	2103      	movs	r1, #3
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff47 	bl	8000550 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80006c2:	20ea      	movs	r0, #234	@ 0xea
 80006c4:	f7ff ff2a 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 80006ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006d2:	2102      	movs	r1, #2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff3b 	bl	8000550 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 80006da:	20ed      	movs	r0, #237	@ 0xed
 80006dc:	f7ff ff1e 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80006e0:	4b69      	ldr	r3, [pc, #420]	@ (8000888 <ILI9341_Init+0x24c>)
 80006e2:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 80006e4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006e8:	2104      	movs	r1, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff30 	bl	8000550 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80006f0:	20f7      	movs	r0, #247	@ 0xf7
 80006f2:	f7ff ff13 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80006f6:	2320      	movs	r3, #32
 80006f8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80006fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000700:	2101      	movs	r1, #1
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff24 	bl	8000550 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000708:	20c0      	movs	r0, #192	@ 0xc0
 800070a:	f7ff ff07 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800070e:	2323      	movs	r3, #35	@ 0x23
 8000710:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000714:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000718:	2101      	movs	r1, #1
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff18 	bl	8000550 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000720:	20c1      	movs	r0, #193	@ 0xc1
 8000722:	f7ff fefb 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000726:	2310      	movs	r3, #16
 8000728:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 800072c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000730:	2101      	movs	r1, #1
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff0c 	bl	8000550 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000738:	20c5      	movs	r0, #197	@ 0xc5
 800073a:	f7ff feef 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800073e:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000742:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000746:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800074a:	2102      	movs	r1, #2
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff feff 	bl	8000550 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000752:	20c7      	movs	r0, #199	@ 0xc7
 8000754:	f7ff fee2 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000758:	2386      	movs	r3, #134	@ 0x86
 800075a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800075e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000762:	2101      	movs	r1, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fef3 	bl	8000550 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800076a:	2036      	movs	r0, #54	@ 0x36
 800076c:	f7ff fed6 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000770:	2348      	movs	r3, #72	@ 0x48
 8000772:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000776:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800077a:	2101      	movs	r1, #1
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fee7 	bl	8000550 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000782:	203a      	movs	r0, #58	@ 0x3a
 8000784:	f7ff feca 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000788:	2355      	movs	r3, #85	@ 0x55
 800078a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 800078e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fedb 	bl	8000550 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800079a:	20b1      	movs	r0, #177	@ 0xb1
 800079c:	f7ff febe 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80007a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007a4:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 80007a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007aa:	2102      	movs	r1, #2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fecf 	bl	8000550 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80007b2:	20b6      	movs	r0, #182	@ 0xb6
 80007b4:	f7ff feb2 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80007b8:	4a34      	ldr	r2, [pc, #208]	@ (800088c <ILI9341_Init+0x250>)
 80007ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007be:	6812      	ldr	r2, [r2, #0]
 80007c0:	4611      	mov	r1, r2
 80007c2:	8019      	strh	r1, [r3, #0]
 80007c4:	3302      	adds	r3, #2
 80007c6:	0c12      	lsrs	r2, r2, #16
 80007c8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80007ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ce:	2103      	movs	r1, #3
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff febd 	bl	8000550 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 80007d6:	20f2      	movs	r0, #242	@ 0xf2
 80007d8:	f7ff fea0 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 80007e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007e6:	2101      	movs	r1, #1
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff feb1 	bl	8000550 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80007ee:	2026      	movs	r0, #38	@ 0x26
 80007f0:	f7ff fe94 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80007f4:	2301      	movs	r3, #1
 80007f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 80007fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fe:	2101      	movs	r1, #1
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fea5 	bl	8000550 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8000806:	20e0      	movs	r0, #224	@ 0xe0
 8000808:	f7ff fe88 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 800080c:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <ILI9341_Init+0x254>)
 800080e:	f107 0414 	add.w	r4, r7, #20
 8000812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000814:	c407      	stmia	r4!, {r0, r1, r2}
 8000816:	8023      	strh	r3, [r4, #0]
 8000818:	3402      	adds	r4, #2
 800081a:	0c1b      	lsrs	r3, r3, #16
 800081c:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	210f      	movs	r1, #15
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fe93 	bl	8000550 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800082a:	20e1      	movs	r0, #225	@ 0xe1
 800082c:	f7ff fe76 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <ILI9341_Init+0x258>)
 8000832:	1d3c      	adds	r4, r7, #4
 8000834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000836:	c407      	stmia	r4!, {r0, r1, r2}
 8000838:	8023      	strh	r3, [r4, #0]
 800083a:	3402      	adds	r4, #2
 800083c:	0c1b      	lsrs	r3, r3, #16
 800083e:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	210f      	movs	r1, #15
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fe83 	bl	8000550 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800084a:	2011      	movs	r0, #17
 800084c:	f7ff fe66 	bl	800051c <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000850:	2078      	movs	r0, #120	@ 0x78
 8000852:	f000 fe2b 	bl	80014ac <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000856:	2029      	movs	r0, #41	@ 0x29
 8000858:	f7ff fe60 	bl	800051c <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800085c:	2036      	movs	r0, #54	@ 0x36
 800085e:	f7ff fe5d 	bl	800051c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000862:	2348      	movs	r3, #72	@ 0x48
 8000864:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000866:	463b      	mov	r3, r7
 8000868:	2101      	movs	r1, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fe70 	bl	8000550 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000870:	f7ff fe34 	bl	80004dc <ILI9341_Unselect>
}
 8000874:	bf00      	nop
 8000876:	376c      	adds	r7, #108	@ 0x6c
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	08003108 	.word	0x08003108
 8000880:	08003110 	.word	0x08003110
 8000884:	08003114 	.word	0x08003114
 8000888:	81120364 	.word	0x81120364
 800088c:	08003118 	.word	0x08003118
 8000890:	0800311c 	.word	0x0800311c
 8000894:	0800312c 	.word	0x0800312c

08000898 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
 80008a2:	460b      	mov	r3, r1
 80008a4:	80bb      	strh	r3, [r7, #4]
 80008a6:	4613      	mov	r3, r2
 80008a8:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	2bef      	cmp	r3, #239	@ 0xef
 80008ae:	d820      	bhi.n	80008f2 <ILI9341_DrawPixel+0x5a>
 80008b0:	88bb      	ldrh	r3, [r7, #4]
 80008b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80008b6:	d21c      	bcs.n	80008f2 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 80008b8:	f7ff fe04 	bl	80004c4 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	3301      	adds	r3, #1
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	3301      	adds	r3, #1
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	88b9      	ldrh	r1, [r7, #4]
 80008ca:	88f8      	ldrh	r0, [r7, #6]
 80008cc:	f7ff fe6e 	bl	80005ac <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80008d0:	887b      	ldrh	r3, [r7, #2]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	733b      	strb	r3, [r7, #12]
 80008da:	887b      	ldrh	r3, [r7, #2]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2102      	movs	r1, #2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fe32 	bl	8000550 <ILI9341_WriteData>

    ILI9341_Unselect();
 80008ec:	f7ff fdf6 	bl	80004dc <ILI9341_Unselect>
 80008f0:	e000      	b.n	80008f4 <ILI9341_DrawPixel+0x5c>
        return;
 80008f2:	bf00      	nop
}
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80008fa:	b082      	sub	sp, #8
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000904:	4603      	mov	r3, r0
 8000906:	80fb      	strh	r3, [r7, #6]
 8000908:	460b      	mov	r3, r1
 800090a:	80bb      	strh	r3, [r7, #4]
 800090c:	4613      	mov	r3, r2
 800090e:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000910:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000914:	461a      	mov	r2, r3
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	4413      	add	r3, r2
 800091a:	b29b      	uxth	r3, r3
 800091c:	3b01      	subs	r3, #1
 800091e:	b29a      	uxth	r2, r3
 8000920:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000924:	4619      	mov	r1, r3
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	440b      	add	r3, r1
 800092a:	b29b      	uxth	r3, r3
 800092c:	3b01      	subs	r3, #1
 800092e:	b29b      	uxth	r3, r3
 8000930:	88b9      	ldrh	r1, [r7, #4]
 8000932:	88f8      	ldrh	r0, [r7, #6]
 8000934:	f7ff fe3a 	bl	80005ac <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	e041      	b.n	80009c2 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 800093e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	3b20      	subs	r3, #32
 8000944:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000948:	fb01 f303 	mul.w	r3, r1, r3
 800094c:	4619      	mov	r1, r3
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	440b      	add	r3, r1
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	e027      	b.n	80009b0 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00e      	beq.n	800098e <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000970:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000972:	0a1b      	lsrs	r3, r3, #8
 8000974:	b29b      	uxth	r3, r3
 8000976:	b2db      	uxtb	r3, r3
 8000978:	743b      	strb	r3, [r7, #16]
 800097a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800097c:	b2db      	uxtb	r3, r3
 800097e:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fde2 	bl	8000550 <ILI9341_WriteData>
 800098c:	e00d      	b.n	80009aa <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800098e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	b29b      	uxth	r3, r3
 8000994:	b2db      	uxtb	r3, r3
 8000996:	733b      	strb	r3, [r7, #12]
 8000998:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800099a:	b2db      	uxtb	r3, r3
 800099c:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2102      	movs	r1, #2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fdd3 	bl	8000550 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	3301      	adds	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80009b4:	461a      	mov	r2, r3
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d3d1      	bcc.n	8000960 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	3301      	adds	r3, #1
 80009c0:	61fb      	str	r3, [r7, #28]
 80009c2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80009c6:	461a      	mov	r2, r3
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d3b7      	bcc.n	800093e <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009da:	b002      	add	sp, #8
 80009dc:	4770      	bx	lr

080009de <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009de:	b082      	sub	sp, #8
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af04      	add	r7, sp, #16
 80009e6:	603a      	str	r2, [r7, #0]
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
 80009ee:	460b      	mov	r3, r1
 80009f0:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80009f2:	f7ff fd67 	bl	80004c4 <ILI9341_Select>

    while(*str) {
 80009f6:	e02e      	b.n	8000a56 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	7d3a      	ldrb	r2, [r7, #20]
 80009fc:	4413      	add	r3, r2
 80009fe:	2bef      	cmp	r3, #239	@ 0xef
 8000a00:	dd14      	ble.n	8000a2c <ILI9341_WriteString+0x4e>
            x = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000a06:	7d7b      	ldrb	r3, [r7, #21]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	88bb      	ldrh	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000a10:	88bb      	ldrh	r3, [r7, #4]
 8000a12:	7d7a      	ldrb	r2, [r7, #21]
 8000a14:	4413      	add	r3, r2
 8000a16:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a1a:	da21      	bge.n	8000a60 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b20      	cmp	r3, #32
 8000a22:	d103      	bne.n	8000a2c <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	603b      	str	r3, [r7, #0]
                continue;
 8000a2a:	e014      	b.n	8000a56 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	781a      	ldrb	r2, [r3, #0]
 8000a30:	88b9      	ldrh	r1, [r7, #4]
 8000a32:	88f8      	ldrh	r0, [r7, #6]
 8000a34:	8c3b      	ldrh	r3, [r7, #32]
 8000a36:	9302      	str	r3, [sp, #8]
 8000a38:	8bbb      	ldrh	r3, [r7, #28]
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	f7ff ff5a 	bl	80008fa <ILI9341_WriteChar>
        x += font.width;
 8000a46:	7d3b      	ldrb	r3, [r7, #20]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	80fb      	strh	r3, [r7, #6]
        str++;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1cc      	bne.n	80009f8 <ILI9341_WriteString+0x1a>
 8000a5e:	e000      	b.n	8000a62 <ILI9341_WriteString+0x84>
                break;
 8000a60:	bf00      	nop
    }

    ILI9341_Unselect();
 8000a62:	f7ff fd3b 	bl	80004dc <ILI9341_Unselect>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a70:	b002      	add	sp, #8
 8000a72:	4770      	bx	lr

08000a74 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4608      	mov	r0, r1
 8000a7e:	4611      	mov	r1, r2
 8000a80:	461a      	mov	r2, r3
 8000a82:	4623      	mov	r3, r4
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	4603      	mov	r3, r0
 8000a88:	80bb      	strh	r3, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	807b      	strh	r3, [r7, #2]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	2bef      	cmp	r3, #239	@ 0xef
 8000a96:	d853      	bhi.n	8000b40 <ILI9341_FillRectangle+0xcc>
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a9e:	d24f      	bcs.n	8000b40 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000aa0:	88fa      	ldrh	r2, [r7, #6]
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	2bf0      	cmp	r3, #240	@ 0xf0
 8000aa8:	dd03      	ble.n	8000ab2 <ILI9341_FillRectangle+0x3e>
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000ab0:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000ab2:	88ba      	ldrh	r2, [r7, #4]
 8000ab4:	883b      	ldrh	r3, [r7, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000abc:	dd03      	ble.n	8000ac6 <ILI9341_FillRectangle+0x52>
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000ac4:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000ac6:	f7ff fcfd 	bl	80004c4 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000aca:	88fa      	ldrh	r2, [r7, #6]
 8000acc:	887b      	ldrh	r3, [r7, #2]
 8000ace:	4413      	add	r3, r2
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	b29c      	uxth	r4, r3
 8000ad6:	88ba      	ldrh	r2, [r7, #4]
 8000ad8:	883b      	ldrh	r3, [r7, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	88b9      	ldrh	r1, [r7, #4]
 8000ae4:	88f8      	ldrh	r0, [r7, #6]
 8000ae6:	4622      	mov	r2, r4
 8000ae8:	f7ff fd60 	bl	80005ac <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000aec:	8c3b      	ldrh	r3, [r7, #32]
 8000aee:	0a1b      	lsrs	r3, r3, #8
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	733b      	strb	r3, [r7, #12]
 8000af6:	8c3b      	ldrh	r3, [r7, #32]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2102      	movs	r1, #2
 8000b00:	4811      	ldr	r0, [pc, #68]	@ (8000b48 <ILI9341_FillRectangle+0xd4>)
 8000b02:	f001 fbb9 	bl	8002278 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000b06:	883b      	ldrh	r3, [r7, #0]
 8000b08:	80bb      	strh	r3, [r7, #4]
 8000b0a:	e013      	b.n	8000b34 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	80fb      	strh	r3, [r7, #6]
 8000b10:	e00a      	b.n	8000b28 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000b12:	f107 010c 	add.w	r1, r7, #12
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	480b      	ldr	r0, [pc, #44]	@ (8000b4c <ILI9341_FillRectangle+0xd8>)
 8000b1e:	f002 f89a 	bl	8002c56 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	80fb      	strh	r3, [r7, #6]
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f1      	bne.n	8000b12 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	80bb      	strh	r3, [r7, #4]
 8000b34:	88bb      	ldrh	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1e8      	bne.n	8000b0c <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 8000b3a:	f7ff fccf 	bl	80004dc <ILI9341_Unselect>
 8000b3e:	e000      	b.n	8000b42 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b40:	bf00      	nop
}
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd90      	pop	{r4, r7, pc}
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	20000040 	.word	0x20000040

08000b50 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b62:	22f0      	movs	r2, #240	@ 0xf0
 8000b64:	2100      	movs	r1, #0
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff ff84 	bl	8000a74 <ILI9341_FillRectangle>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	4611      	mov	r1, r2
 8000b80:	461a      	mov	r2, r3
 8000b82:	4623      	mov	r3, r4
 8000b84:	80fb      	strh	r3, [r7, #6]
 8000b86:	4603      	mov	r3, r0
 8000b88:	80bb      	strh	r3, [r7, #4]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	807b      	strh	r3, [r7, #2]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	2bef      	cmp	r3, #239	@ 0xef
 8000b96:	d82d      	bhi.n	8000bf4 <ILI9341_DrawImage+0x80>
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b9e:	d229      	bcs.n	8000bf4 <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8000ba0:	88fa      	ldrh	r2, [r7, #6]
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	2bf0      	cmp	r3, #240	@ 0xf0
 8000ba8:	dc26      	bgt.n	8000bf8 <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000baa:	88ba      	ldrh	r2, [r7, #4]
 8000bac:	883b      	ldrh	r3, [r7, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000bb4:	dc22      	bgt.n	8000bfc <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 8000bb6:	f7ff fc85 	bl	80004c4 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	887b      	ldrh	r3, [r7, #2]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	b29c      	uxth	r4, r3
 8000bc6:	88ba      	ldrh	r2, [r7, #4]
 8000bc8:	883b      	ldrh	r3, [r7, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	88b9      	ldrh	r1, [r7, #4]
 8000bd4:	88f8      	ldrh	r0, [r7, #6]
 8000bd6:	4622      	mov	r2, r4
 8000bd8:	f7ff fce8 	bl	80005ac <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	883a      	ldrh	r2, [r7, #0]
 8000be0:	fb02 f303 	mul.w	r3, r2, r3
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4619      	mov	r1, r3
 8000be8:	69b8      	ldr	r0, [r7, #24]
 8000bea:	f7ff fcb1 	bl	8000550 <ILI9341_WriteData>
    ILI9341_Unselect();
 8000bee:	f7ff fc75 	bl	80004dc <ILI9341_Unselect>
 8000bf2:	e004      	b.n	8000bfe <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000bf4:	bf00      	nop
 8000bf6:	e002      	b.n	8000bfe <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8000bf8:	bf00      	nop
 8000bfa:	e000      	b.n	8000bfe <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000bfc:	bf00      	nop
}
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}

08000c04 <ILI9341_InvertColors>:

void ILI9341_InvertColors(bool invert) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
    ILI9341_Select();
 8000c0e:	f7ff fc59 	bl	80004c4 <ILI9341_Select>
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <ILI9341_InvertColors+0x18>
 8000c18:	2321      	movs	r3, #33	@ 0x21
 8000c1a:	e000      	b.n	8000c1e <ILI9341_InvertColors+0x1a>
 8000c1c:	2320      	movs	r3, #32
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fc7c 	bl	800051c <ILI9341_WriteCommand>
    ILI9341_Unselect();
 8000c24:	f7ff fc5a 	bl	80004dc <ILI9341_Unselect>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c34:	f000 fbc8 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f80c 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f000 f8cc 	bl	8000dd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c40:	f000 f8aa 	bl	8000d98 <MX_DMA_Init>
  MX_SPI1_Init();
 8000c44:	f000 f870 	bl	8000d28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000c48:	f000 f908 	bl	8000e5c <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	loop();
 8000c4c:	f000 f90e 	bl	8000e6c <loop>
 8000c50:	e7fc      	b.n	8000c4c <main+0x1c>
	...

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	@ 0x50
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	2230      	movs	r2, #48	@ 0x30
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 fa18 	bl	8003098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	4b28      	ldr	r3, [pc, #160]	@ (8000d20 <SystemClock_Config+0xcc>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	4a27      	ldr	r2, [pc, #156]	@ (8000d20 <SystemClock_Config+0xcc>)
 8000c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c88:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <SystemClock_Config+0xcc>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <SystemClock_Config+0xd0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ca0:	4a20      	ldr	r2, [pc, #128]	@ (8000d24 <SystemClock_Config+0xd0>)
 8000ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <SystemClock_Config+0xd0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000cc8:	2319      	movs	r3, #25
 8000cca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ccc:	23a8      	movs	r3, #168	@ 0xa8
 8000cce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd8:	f107 0320 	add.w	r3, r7, #32
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fae5 	bl	80022ac <HAL_RCC_OscConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ce8:	f000 fa2e 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cec:	230f      	movs	r3, #15
 8000cee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2102      	movs	r1, #2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fd47 	bl	800279c <HAL_RCC_ClockConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d14:	f000 fa18 	bl	8001148 <Error_Handler>
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3750      	adds	r7, #80	@ 0x50
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40007000 	.word	0x40007000

08000d28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d2e:	4a19      	ldr	r2, [pc, #100]	@ (8000d94 <MX_SPI1_Init+0x6c>)
 8000d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d3c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d40:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d42:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d76:	220a      	movs	r2, #10
 8000d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d7c:	f001 feba 	bl	8002af4 <HAL_SPI_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000d86:	f000 f9df 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000040 	.word	0x20000040
 8000d94:	40013000 	.word	0x40013000

08000d98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <MX_DMA_Init+0x3c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd4 <MX_DMA_Init+0x3c>)
 8000da8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <MX_DMA_Init+0x3c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	203b      	movs	r0, #59	@ 0x3b
 8000dc0:	f000 fc73 	bl	80016aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000dc4:	203b      	movs	r0, #59	@ 0x3b
 8000dc6:	f000 fc8c 	bl	80016e2 <HAL_NVIC_EnableIRQ>

}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <MX_GPIO_Init+0x7c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a17      	ldr	r2, [pc, #92]	@ (8000e54 <MX_GPIO_Init+0x7c>)
 8000df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <MX_GPIO_Init+0x7c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <MX_GPIO_Init+0x7c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a10      	ldr	r2, [pc, #64]	@ (8000e54 <MX_GPIO_Init+0x7c>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_GPIO_Init+0x7c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	211a      	movs	r1, #26
 8000e2a:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <MX_GPIO_Init+0x80>)
 8000e2c:	f001 fa24 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000e30:	231a      	movs	r3, #26
 8000e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e34:	2311      	movs	r3, #17
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_GPIO_Init+0x80>)
 8000e48:	f000 ffae 	bl	8001da8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <init>:

/* USER CODE BEGIN 4 */

void init() {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 8000e60:	f7ff fb3c 	bl	80004dc <ILI9341_Unselect>
//    ILI9341_TouchUnselect();
    ILI9341_Init();
 8000e64:	f7ff fbea 	bl	800063c <ILI9341_Init>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <loop>:

void loop() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af04      	add	r7, sp, #16
    if(HAL_SPI_DeInit(&hspi1) != HAL_OK) {
 8000e72:	48a5      	ldr	r0, [pc, #660]	@ (8001108 <loop+0x29c>)
 8000e74:	f001 fec7 	bl	8002c06 <HAL_SPI_DeInit>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f040 813d 	bne.w	80010fa <loop+0x28e>
//        UART_Printf("HAL_SPI_DeInit failed!\r\n");
        return;
    }

    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e80:	4ba1      	ldr	r3, [pc, #644]	@ (8001108 <loop+0x29c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]

    if(HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000e86:	48a0      	ldr	r0, [pc, #640]	@ (8001108 <loop+0x29c>)
 8000e88:	f001 fe34 	bl	8002af4 <HAL_SPI_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 8135 	bne.w	80010fe <loop+0x292>
//        UART_Printf("HAL_SPI_Init failed!\r\n");
        return;
    }

    // Check border
    ILI9341_FillScreen(ILI9341_BLACK);
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff fe5b 	bl	8000b50 <ILI9341_FillScreen>

    for(int x = 0; x < ILI9341_WIDTH; x++) {
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	e013      	b.n	8000ec8 <loop+0x5c>
        ILI9341_DrawPixel(x, 0, ILI9341_RED);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fcf4 	bl	8000898 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x, ILI9341_HEIGHT-1, ILI9341_RED);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000eb8:	f240 113f 	movw	r1, #319	@ 0x13f
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fceb 	bl	8000898 <ILI9341_DrawPixel>
    for(int x = 0; x < ILI9341_WIDTH; x++) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2bef      	cmp	r3, #239	@ 0xef
 8000ecc:	dde8      	ble.n	8000ea0 <loop+0x34>
    }

    for(int y = 0; y < ILI9341_HEIGHT; y++) {
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	e012      	b.n	8000efa <loop+0x8e>
        ILI9341_DrawPixel(0, y, ILI9341_RED);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000edc:	4619      	mov	r1, r3
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff fcda 	bl	8000898 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(ILI9341_WIDTH-1, y, ILI9341_RED);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000eec:	4619      	mov	r1, r3
 8000eee:	20ef      	movs	r0, #239	@ 0xef
 8000ef0:	f7ff fcd2 	bl	8000898 <ILI9341_DrawPixel>
    for(int y = 0; y < ILI9341_HEIGHT; y++) {
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f00:	dbe8      	blt.n	8000ed4 <loop+0x68>
    }

    HAL_Delay(3000);
 8000f02:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f06:	f000 fad1 	bl	80014ac <HAL_Delay>

    // Check fonts
    ILI9341_FillScreen(ILI9341_BLACK);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff fe20 	bl	8000b50 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ILI9341_RED, ILI9341_BLACK);
 8000f10:	4b7e      	ldr	r3, [pc, #504]	@ (800110c <loop+0x2a0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	9202      	str	r2, [sp, #8]
 8000f16:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000f1a:	9201      	str	r2, [sp, #4]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	9200      	str	r2, [sp, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a7b      	ldr	r2, [pc, #492]	@ (8001110 <loop+0x2a4>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff fd59 	bl	80009de <ILI9341_WriteString>
    ILI9341_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum dolor sit amet", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8000f2c:	4b79      	ldr	r3, [pc, #484]	@ (8001114 <loop+0x2a8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	9202      	str	r2, [sp, #8]
 8000f32:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000f36:	9201      	str	r2, [sp, #4]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	9200      	str	r2, [sp, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a76      	ldr	r2, [pc, #472]	@ (8001118 <loop+0x2ac>)
 8000f40:	211e      	movs	r1, #30
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff fd4b 	bl	80009de <ILI9341_WriteString>
    ILI9341_WriteString(0, 3*10+3*18, "Font_16x26, blue, lorem ipsum dolor sit amet", Font_16x26, ILI9341_BLUE, ILI9341_BLACK);
 8000f48:	4b74      	ldr	r3, [pc, #464]	@ (800111c <loop+0x2b0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	9202      	str	r2, [sp, #8]
 8000f4e:	221f      	movs	r2, #31
 8000f50:	9201      	str	r2, [sp, #4]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	9200      	str	r2, [sp, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a71      	ldr	r2, [pc, #452]	@ (8001120 <loop+0x2b4>)
 8000f5a:	2154      	movs	r1, #84	@ 0x54
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff fd3e 	bl	80009de <ILI9341_WriteString>

    HAL_Delay(1000);
 8000f62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f66:	f000 faa1 	bl	80014ac <HAL_Delay>
    ILI9341_InvertColors(true);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f7ff fe4a 	bl	8000c04 <ILI9341_InvertColors>
    HAL_Delay(1000);
 8000f70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f74:	f000 fa9a 	bl	80014ac <HAL_Delay>
    ILI9341_InvertColors(false);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff fe43 	bl	8000c04 <ILI9341_InvertColors>

    HAL_Delay(5000);
 8000f7e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f82:	f000 fa93 	bl	80014ac <HAL_Delay>

    // Check colors
    ILI9341_FillScreen(ILI9341_WHITE);
 8000f86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f8a:	f7ff fde1 	bl	8000b50 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "WHITE", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8000f8e:	4b61      	ldr	r3, [pc, #388]	@ (8001114 <loop+0x2a8>)
 8000f90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f94:	9202      	str	r2, [sp, #8]
 8000f96:	2200      	movs	r2, #0
 8000f98:	9201      	str	r2, [sp, #4]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	9200      	str	r2, [sp, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a60      	ldr	r2, [pc, #384]	@ (8001124 <loop+0x2b8>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fd1a 	bl	80009de <ILI9341_WriteString>
    HAL_Delay(500);
 8000faa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fae:	f000 fa7d 	bl	80014ac <HAL_Delay>

    ILI9341_FillScreen(ILI9341_BLUE);
 8000fb2:	201f      	movs	r0, #31
 8000fb4:	f7ff fdcc 	bl	8000b50 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "BLUE", Font_11x18, ILI9341_BLACK, ILI9341_BLUE);
 8000fb8:	4b56      	ldr	r3, [pc, #344]	@ (8001114 <loop+0x2a8>)
 8000fba:	221f      	movs	r2, #31
 8000fbc:	9202      	str	r2, [sp, #8]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	9201      	str	r2, [sp, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	9200      	str	r2, [sp, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a57      	ldr	r2, [pc, #348]	@ (8001128 <loop+0x2bc>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fd06 	bl	80009de <ILI9341_WriteString>
    HAL_Delay(500);
 8000fd2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fd6:	f000 fa69 	bl	80014ac <HAL_Delay>

    ILI9341_FillScreen(ILI9341_RED);
 8000fda:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000fde:	f7ff fdb7 	bl	8000b50 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "RED", Font_11x18, ILI9341_BLACK, ILI9341_RED);
 8000fe2:	4b4c      	ldr	r3, [pc, #304]	@ (8001114 <loop+0x2a8>)
 8000fe4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000fe8:	9202      	str	r2, [sp, #8]
 8000fea:	2200      	movs	r2, #0
 8000fec:	9201      	str	r2, [sp, #4]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	9200      	str	r2, [sp, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800112c <loop+0x2c0>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff fcf0 	bl	80009de <ILI9341_WriteString>
    HAL_Delay(500);
 8000ffe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001002:	f000 fa53 	bl	80014ac <HAL_Delay>

    ILI9341_FillScreen(ILI9341_GREEN);
 8001006:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800100a:	f7ff fda1 	bl	8000b50 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "GREEN", Font_11x18, ILI9341_BLACK, ILI9341_GREEN);
 800100e:	4b41      	ldr	r3, [pc, #260]	@ (8001114 <loop+0x2a8>)
 8001010:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001014:	9202      	str	r2, [sp, #8]
 8001016:	2200      	movs	r2, #0
 8001018:	9201      	str	r2, [sp, #4]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	9200      	str	r2, [sp, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a43      	ldr	r2, [pc, #268]	@ (8001130 <loop+0x2c4>)
 8001022:	2100      	movs	r1, #0
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fcda 	bl	80009de <ILI9341_WriteString>
    HAL_Delay(500);
 800102a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800102e:	f000 fa3d 	bl	80014ac <HAL_Delay>

    ILI9341_FillScreen(ILI9341_CYAN);
 8001032:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001036:	f7ff fd8b 	bl	8000b50 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "CYAN", Font_11x18, ILI9341_BLACK, ILI9341_CYAN);
 800103a:	4b36      	ldr	r3, [pc, #216]	@ (8001114 <loop+0x2a8>)
 800103c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001040:	9202      	str	r2, [sp, #8]
 8001042:	2200      	movs	r2, #0
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	9200      	str	r2, [sp, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a39      	ldr	r2, [pc, #228]	@ (8001134 <loop+0x2c8>)
 800104e:	2100      	movs	r1, #0
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff fcc4 	bl	80009de <ILI9341_WriteString>
    HAL_Delay(500);
 8001056:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800105a:	f000 fa27 	bl	80014ac <HAL_Delay>

    ILI9341_FillScreen(ILI9341_MAGENTA);
 800105e:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8001062:	f7ff fd75 	bl	8000b50 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "MAGENTA", Font_11x18, ILI9341_BLACK, ILI9341_MAGENTA);
 8001066:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <loop+0x2a8>)
 8001068:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800106c:	9202      	str	r2, [sp, #8]
 800106e:	2200      	movs	r2, #0
 8001070:	9201      	str	r2, [sp, #4]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a2f      	ldr	r2, [pc, #188]	@ (8001138 <loop+0x2cc>)
 800107a:	2100      	movs	r1, #0
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff fcae 	bl	80009de <ILI9341_WriteString>
    HAL_Delay(500);
 8001082:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001086:	f000 fa11 	bl	80014ac <HAL_Delay>

    ILI9341_FillScreen(ILI9341_YELLOW);
 800108a:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800108e:	f7ff fd5f 	bl	8000b50 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "YELLOW", Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <loop+0x2a8>)
 8001094:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001098:	9202      	str	r2, [sp, #8]
 800109a:	2200      	movs	r2, #0
 800109c:	9201      	str	r2, [sp, #4]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	9200      	str	r2, [sp, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a25      	ldr	r2, [pc, #148]	@ (800113c <loop+0x2d0>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fc98 	bl	80009de <ILI9341_WriteString>
    HAL_Delay(500);
 80010ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010b2:	f000 f9fb 	bl	80014ac <HAL_Delay>

    ILI9341_FillScreen(ILI9341_BLACK);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fd4a 	bl	8000b50 <ILI9341_FillScreen>
    ILI9341_WriteString(0, 0, "BLACK", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <loop+0x2a8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	9202      	str	r2, [sp, #8]
 80010c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010c6:	9201      	str	r2, [sp, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <loop+0x2d4>)
 80010d0:	2100      	movs	r1, #0
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fc83 	bl	80009de <ILI9341_WriteString>
    HAL_Delay(500);
 80010d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010dc:	f000 f9e6 	bl	80014ac <HAL_Delay>

    ILI9341_DrawImage((ILI9341_WIDTH - 240) / 2, (ILI9341_HEIGHT - 240) / 2, 240, 240, (const uint16_t*)test_img_240x240);
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <loop+0x2d8>)
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	23f0      	movs	r3, #240	@ 0xf0
 80010e6:	22f0      	movs	r2, #240	@ 0xf0
 80010e8:	2128      	movs	r1, #40	@ 0x28
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fd42 	bl	8000b74 <ILI9341_DrawImage>

    HAL_Delay(3000);
 80010f0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80010f4:	f000 f9da 	bl	80014ac <HAL_Delay>
 80010f8:	e002      	b.n	8001100 <loop+0x294>
        return;
 80010fa:	bf00      	nop
 80010fc:	e000      	b.n	8001100 <loop+0x294>
        return;
 80010fe:	bf00      	nop
//        if(ILI9341_TouchGetCoordinates(&x, &y)) {
//            ILI9341_DrawPixel(x, 320-y, ILI9341_WHITE);
//            npoints++;
//        }
//    }
}
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000040 	.word	0x20000040
 800110c:	20000000 	.word	0x20000000
 8001110:	0800313c 	.word	0x0800313c
 8001114:	20000008 	.word	0x20000008
 8001118:	08003170 	.word	0x08003170
 800111c:	20000010 	.word	0x20000010
 8001120:	080031a0 	.word	0x080031a0
 8001124:	080031d0 	.word	0x080031d0
 8001128:	080031d8 	.word	0x080031d8
 800112c:	080031e0 	.word	0x080031e0
 8001130:	080031e4 	.word	0x080031e4
 8001134:	080031ec 	.word	0x080031ec
 8001138:	080031f4 	.word	0x080031f4
 800113c:	080031fc 	.word	0x080031fc
 8001140:	08003204 	.word	0x08003204
 8001144:	08005a20 	.word	0x08005a20

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <Error_Handler+0x8>

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	@ 0x40
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a30      	ldr	r2, [pc, #192]	@ (8001284 <HAL_SPI_MspInit+0xe0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d159      	bne.n	800127a <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <HAL_SPI_MspInit+0xe4>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001288 <HAL_SPI_MspInit+0xe4>)
 80011d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <HAL_SPI_MspInit+0xe4>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <HAL_SPI_MspInit+0xe4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a27      	ldr	r2, [pc, #156]	@ (8001288 <HAL_SPI_MspInit+0xe4>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <HAL_SPI_MspInit+0xe4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011fe:	23a0      	movs	r3, #160	@ 0xa0
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800120e:	2305      	movs	r3, #5
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	481c      	ldr	r0, [pc, #112]	@ (800128c <HAL_SPI_MspInit+0xe8>)
 800121a:	f000 fdc5 	bl	8001da8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 8001220:	4a1c      	ldr	r2, [pc, #112]	@ (8001294 <HAL_SPI_MspInit+0xf0>)
 8001222:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 8001226:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800122a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 800122e:	2240      	movs	r2, #64	@ 0x40
 8001230:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001232:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 800123a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800123e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001246:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800124c:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001258:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800125e:	480c      	ldr	r0, [pc, #48]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 8001260:	f000 fa5a 	bl	8001718 <HAL_DMA_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800126a:	f7ff ff6d 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 8001272:	649a      	str	r2, [r3, #72]	@ 0x48
 8001274:	4a06      	ldr	r2, [pc, #24]	@ (8001290 <HAL_SPI_MspInit+0xec>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	@ 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40013000 	.word	0x40013000
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000
 8001290:	20000098 	.word	0x20000098
 8001294:	40026458 	.word	0x40026458

08001298 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <HAL_SPI_MspDeInit+0x38>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10e      	bne.n	80012c8 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_SPI_MspDeInit+0x3c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a09      	ldr	r2, [pc, #36]	@ (80012d4 <HAL_SPI_MspDeInit+0x3c>)
 80012b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80012b6:	21a0      	movs	r1, #160	@ 0xa0
 80012b8:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <HAL_SPI_MspDeInit+0x40>)
 80012ba:	f000 fef9 	bl	80020b0 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmatx);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fad6 	bl	8001874 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40013000 	.word	0x40013000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <NMI_Handler+0x4>

080012e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <MemManage_Handler+0x4>

080012f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <UsageFault_Handler+0x4>

08001304 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001332:	f000 f89b 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001340:	4802      	ldr	r0, [pc, #8]	@ (800134c <DMA2_Stream3_IRQHandler+0x10>)
 8001342:	f000 faf5 	bl	8001930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000098 	.word	0x20000098

08001350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001378:	f7ff ffea 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	@ (80013b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	@ (80013c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f001 fe81 	bl	80030a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a6:	f7ff fc43 	bl	8000c30 <main>
  bx  lr    
 80013aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80013b8:	08021c48 	.word	0x08021c48
  ldr r2, =_sbss
 80013bc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80013c0:	200000fc 	.word	0x200000fc

080013c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <HAL_Init+0x40>)
 80013d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <HAL_Init+0x40>)
 80013de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e4:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a07      	ldr	r2, [pc, #28]	@ (8001408 <HAL_Init+0x40>)
 80013ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f000 f94f 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f6:	200f      	movs	r0, #15
 80013f8:	f000 f808 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013fc:	f7ff feaa 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023c00 	.word	0x40023c00

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_InitTick+0x54>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_InitTick+0x58>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f967 	bl	80016fe <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f000 f92f 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	@ (8001468 <HAL_InitTick+0x5c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000018 	.word	0x20000018
 8001464:	20000020 	.word	0x20000020
 8001468:	2000001c 	.word	0x2000001c

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000020 	.word	0x20000020
 8001490:	200000f8 	.word	0x200000f8

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	200000f8 	.word	0x200000f8

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff ffee 	bl	8001494 <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d005      	beq.n	80014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_Delay+0x44>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014d2:	bf00      	nop
 80014d4:	f7ff ffde 	bl	8001494 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f7      	bhi.n	80014d4 <HAL_Delay+0x28>
  {
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000020 	.word	0x20000020

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	@ (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	@ (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	@ (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff29 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff3e 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff8e 	bl	80015e8 <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5d 	bl	8001594 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff31 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffa2 	bl	8001650 <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff feb6 	bl	8001494 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e099      	b.n	8001868 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2202      	movs	r2, #2
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001754:	e00f      	b.n	8001776 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001756:	f7ff fe9d 	bl	8001494 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b05      	cmp	r3, #5
 8001762:	d908      	bls.n	8001776 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2220      	movs	r2, #32
 8001768:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2203      	movs	r2, #3
 800176e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e078      	b.n	8001868 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e8      	bne.n	8001756 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <HAL_DMA_Init+0x158>)
 8001790:	4013      	ands	r3, r2
 8001792:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d107      	bne.n	80017e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d8:	4313      	orrs	r3, r2
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4313      	orrs	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f023 0307 	bic.w	r3, r3, #7
 80017f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4313      	orrs	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	2b04      	cmp	r3, #4
 8001808:	d117      	bne.n	800183a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00e      	beq.n	800183a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fa47 	bl	8001cb0 <DMA_CheckFifoParam>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2240      	movs	r2, #64	@ 0x40
 800182c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001836:	2301      	movs	r3, #1
 8001838:	e016      	b.n	8001868 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f9fe 	bl	8001c44 <DMA_CalcBaseAndBitshift>
 8001848:	4603      	mov	r3, r0
 800184a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001850:	223f      	movs	r2, #63	@ 0x3f
 8001852:	409a      	lsls	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	f010803f 	.word	0xf010803f

08001874 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e050      	b.n	8001928 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d101      	bne.n	8001896 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001892:	2302      	movs	r3, #2
 8001894:	e048      	b.n	8001928 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2221      	movs	r2, #33	@ 0x21
 80018d4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f9b4 	bl	8001c44 <DMA_CalcBaseAndBitshift>
 80018dc:	4603      	mov	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001908:	223f      	movs	r2, #63	@ 0x3f
 800190a:	409a      	lsls	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800193c:	4b8e      	ldr	r3, [pc, #568]	@ (8001b78 <HAL_DMA_IRQHandler+0x248>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a8e      	ldr	r2, [pc, #568]	@ (8001b7c <HAL_DMA_IRQHandler+0x24c>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	0a9b      	lsrs	r3, r3, #10
 8001948:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195a:	2208      	movs	r2, #8
 800195c:	409a      	lsls	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d01a      	beq.n	800199c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0204 	bic.w	r2, r2, #4
 8001982:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001988:	2208      	movs	r2, #8
 800198a:	409a      	lsls	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a0:	2201      	movs	r2, #1
 80019a2:	409a      	lsls	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d012      	beq.n	80019d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019be:	2201      	movs	r2, #1
 80019c0:	409a      	lsls	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ca:	f043 0202 	orr.w	r2, r3, #2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d6:	2204      	movs	r2, #4
 80019d8:	409a      	lsls	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d012      	beq.n	8001a08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00b      	beq.n	8001a08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f4:	2204      	movs	r2, #4
 80019f6:	409a      	lsls	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a00:	f043 0204 	orr.w	r2, r3, #4
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d043      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d03c      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d018      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d108      	bne.n	8001a60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d024      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4798      	blx	r3
 8001a5e:	e01f      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01b      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	4798      	blx	r3
 8001a70:	e016      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d107      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0208 	bic.w	r2, r2, #8
 8001a8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 808f 	beq.w	8001bd0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 8087 	beq.w	8001bd0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d136      	bne.n	8001b48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0216 	bic.w	r2, r2, #22
 8001ae8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001af8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d103      	bne.n	8001b0a <HAL_DMA_IRQHandler+0x1da>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0208 	bic.w	r2, r2, #8
 8001b18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1e:	223f      	movs	r2, #63	@ 0x3f
 8001b20:	409a      	lsls	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d07e      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
        }
        return;
 8001b46:	e079      	b.n	8001c3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d01d      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10d      	bne.n	8001b80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d031      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
 8001b74:	e02c      	b.n	8001bd0 <HAL_DMA_IRQHandler+0x2a0>
 8001b76:	bf00      	nop
 8001b78:	20000018 	.word	0x20000018
 8001b7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d023      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
 8001b90:	e01e      	b.n	8001bd0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10f      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0210 	bic.w	r2, r2, #16
 8001bae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d032      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d022      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2205      	movs	r2, #5
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d307      	bcc.n	8001c18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f2      	bne.n	8001bfc <HAL_DMA_IRQHandler+0x2cc>
 8001c16:	e000      	b.n	8001c1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
 8001c3a:	e000      	b.n	8001c3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c3c:	bf00      	nop
    }
  }
}
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	3b10      	subs	r3, #16
 8001c54:	4a14      	ldr	r2, [pc, #80]	@ (8001ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c5e:	4a13      	ldr	r2, [pc, #76]	@ (8001cac <DMA_CalcBaseAndBitshift+0x68>)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d909      	bls.n	8001c86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c7a:	f023 0303 	bic.w	r3, r3, #3
 8001c7e:	1d1a      	adds	r2, r3, #4
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c84:	e007      	b.n	8001c96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c8e:	f023 0303 	bic.w	r3, r3, #3
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	aaaaaaab 	.word	0xaaaaaaab
 8001cac:	08021c30 	.word	0x08021c30

08001cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d11f      	bne.n	8001d0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d856      	bhi.n	8001d7e <DMA_CheckFifoParam+0xce>
 8001cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd8 <DMA_CheckFifoParam+0x28>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001cfb 	.word	0x08001cfb
 8001ce0:	08001ce9 	.word	0x08001ce9
 8001ce4:	08001d7f 	.word	0x08001d7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d046      	beq.n	8001d82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cf8:	e043      	b.n	8001d82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d02:	d140      	bne.n	8001d86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d08:	e03d      	b.n	8001d86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d12:	d121      	bne.n	8001d58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d837      	bhi.n	8001d8a <DMA_CheckFifoParam+0xda>
 8001d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d20 <DMA_CheckFifoParam+0x70>)
 8001d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d20:	08001d31 	.word	0x08001d31
 8001d24:	08001d37 	.word	0x08001d37
 8001d28:	08001d31 	.word	0x08001d31
 8001d2c:	08001d49 	.word	0x08001d49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
      break;
 8001d34:	e030      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d025      	beq.n	8001d8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d46:	e022      	b.n	8001d8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d50:	d11f      	bne.n	8001d92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d56:	e01c      	b.n	8001d92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d903      	bls.n	8001d66 <DMA_CheckFifoParam+0xb6>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d003      	beq.n	8001d6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d64:	e018      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
      break;
 8001d6a:	e015      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00e      	beq.n	8001d96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d7c:	e00b      	b.n	8001d96 <DMA_CheckFifoParam+0xe6>
      break;
 8001d7e:	bf00      	nop
 8001d80:	e00a      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;
 8001d82:	bf00      	nop
 8001d84:	e008      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;
 8001d86:	bf00      	nop
 8001d88:	e006      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;
 8001d8a:	bf00      	nop
 8001d8c:	e004      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;
 8001d8e:	bf00      	nop
 8001d90:	e002      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d92:	bf00      	nop
 8001d94:	e000      	b.n	8001d98 <DMA_CheckFifoParam+0xe8>
      break;
 8001d96:	bf00      	nop
    }
  } 
  
  return status; 
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	@ 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	e159      	b.n	8002078 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 8148 	bne.w	8002072 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d005      	beq.n	8001dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d130      	bne.n	8001e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e30:	2201      	movs	r2, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 0201 	and.w	r2, r3, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d017      	beq.n	8001e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d123      	bne.n	8001eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	220f      	movs	r2, #15
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	08da      	lsrs	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	69b9      	ldr	r1, [r7, #24]
 8001ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0203 	and.w	r2, r3, #3
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80a2 	beq.w	8002072 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b57      	ldr	r3, [pc, #348]	@ (8002090 <HAL_GPIO_Init+0x2e8>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	4a56      	ldr	r2, [pc, #344]	@ (8002090 <HAL_GPIO_Init+0x2e8>)
 8001f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3e:	4b54      	ldr	r3, [pc, #336]	@ (8002090 <HAL_GPIO_Init+0x2e8>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4a:	4a52      	ldr	r2, [pc, #328]	@ (8002094 <HAL_GPIO_Init+0x2ec>)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a49      	ldr	r2, [pc, #292]	@ (8002098 <HAL_GPIO_Init+0x2f0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <HAL_GPIO_Init+0x202>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a48      	ldr	r2, [pc, #288]	@ (800209c <HAL_GPIO_Init+0x2f4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <HAL_GPIO_Init+0x1fe>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a47      	ldr	r2, [pc, #284]	@ (80020a0 <HAL_GPIO_Init+0x2f8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00d      	beq.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a46      	ldr	r2, [pc, #280]	@ (80020a4 <HAL_GPIO_Init+0x2fc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d007      	beq.n	8001f9e <HAL_GPIO_Init+0x1f6>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a45      	ldr	r2, [pc, #276]	@ (80020a8 <HAL_GPIO_Init+0x300>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_GPIO_Init+0x1f2>
 8001f96:	2304      	movs	r3, #4
 8001f98:	e008      	b.n	8001fac <HAL_GPIO_Init+0x204>
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x204>
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e004      	b.n	8001fac <HAL_GPIO_Init+0x204>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_Init+0x204>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x204>
 8001faa:	2300      	movs	r3, #0
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	f002 0203 	and.w	r2, r2, #3
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	4093      	lsls	r3, r2
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fbc:	4935      	ldr	r1, [pc, #212]	@ (8002094 <HAL_GPIO_Init+0x2ec>)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fca:	4b38      	ldr	r3, [pc, #224]	@ (80020ac <HAL_GPIO_Init+0x304>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fee:	4a2f      	ldr	r2, [pc, #188]	@ (80020ac <HAL_GPIO_Init+0x304>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80020ac <HAL_GPIO_Init+0x304>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002018:	4a24      	ldr	r2, [pc, #144]	@ (80020ac <HAL_GPIO_Init+0x304>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800201e:	4b23      	ldr	r3, [pc, #140]	@ (80020ac <HAL_GPIO_Init+0x304>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002042:	4a1a      	ldr	r2, [pc, #104]	@ (80020ac <HAL_GPIO_Init+0x304>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002048:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <HAL_GPIO_Init+0x304>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800206c:	4a0f      	ldr	r2, [pc, #60]	@ (80020ac <HAL_GPIO_Init+0x304>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3301      	adds	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	2b0f      	cmp	r3, #15
 800207c:	f67f aea2 	bls.w	8001dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3724      	adds	r7, #36	@ 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40013800 	.word	0x40013800
 8002098:	40020000 	.word	0x40020000
 800209c:	40020400 	.word	0x40020400
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40020c00 	.word	0x40020c00
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40013c00 	.word	0x40013c00

080020b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e0bb      	b.n	8002244 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020cc:	2201      	movs	r2, #1
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	f040 80ab 	bne.w	800223e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80020e8:	4a5c      	ldr	r2, [pc, #368]	@ (800225c <HAL_GPIO_DeInit+0x1ac>)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	4013      	ands	r3, r2
 8002108:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a54      	ldr	r2, [pc, #336]	@ (8002260 <HAL_GPIO_DeInit+0x1b0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_DeInit+0x96>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a53      	ldr	r2, [pc, #332]	@ (8002264 <HAL_GPIO_DeInit+0x1b4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_DeInit+0x92>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a52      	ldr	r2, [pc, #328]	@ (8002268 <HAL_GPIO_DeInit+0x1b8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_DeInit+0x8e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a51      	ldr	r2, [pc, #324]	@ (800226c <HAL_GPIO_DeInit+0x1bc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_DeInit+0x8a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a50      	ldr	r2, [pc, #320]	@ (8002270 <HAL_GPIO_DeInit+0x1c0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_DeInit+0x86>
 8002132:	2304      	movs	r3, #4
 8002134:	e008      	b.n	8002148 <HAL_GPIO_DeInit+0x98>
 8002136:	2307      	movs	r3, #7
 8002138:	e006      	b.n	8002148 <HAL_GPIO_DeInit+0x98>
 800213a:	2303      	movs	r3, #3
 800213c:	e004      	b.n	8002148 <HAL_GPIO_DeInit+0x98>
 800213e:	2302      	movs	r3, #2
 8002140:	e002      	b.n	8002148 <HAL_GPIO_DeInit+0x98>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_GPIO_DeInit+0x98>
 8002146:	2300      	movs	r3, #0
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	f002 0203 	and.w	r2, r2, #3
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	4093      	lsls	r3, r2
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	429a      	cmp	r2, r3
 8002156:	d132      	bne.n	80021be <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002158:	4b46      	ldr	r3, [pc, #280]	@ (8002274 <HAL_GPIO_DeInit+0x1c4>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	43db      	mvns	r3, r3
 8002160:	4944      	ldr	r1, [pc, #272]	@ (8002274 <HAL_GPIO_DeInit+0x1c4>)
 8002162:	4013      	ands	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002166:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <HAL_GPIO_DeInit+0x1c4>)
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	4941      	ldr	r1, [pc, #260]	@ (8002274 <HAL_GPIO_DeInit+0x1c4>)
 8002170:	4013      	ands	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002174:	4b3f      	ldr	r3, [pc, #252]	@ (8002274 <HAL_GPIO_DeInit+0x1c4>)
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	43db      	mvns	r3, r3
 800217c:	493d      	ldr	r1, [pc, #244]	@ (8002274 <HAL_GPIO_DeInit+0x1c4>)
 800217e:	4013      	ands	r3, r2
 8002180:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002182:	4b3c      	ldr	r3, [pc, #240]	@ (8002274 <HAL_GPIO_DeInit+0x1c4>)
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43db      	mvns	r3, r3
 800218a:	493a      	ldr	r1, [pc, #232]	@ (8002274 <HAL_GPIO_DeInit+0x1c4>)
 800218c:	4013      	ands	r3, r2
 800218e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	220f      	movs	r2, #15
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80021a0:	4a2e      	ldr	r2, [pc, #184]	@ (800225c <HAL_GPIO_DeInit+0x1ac>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	43da      	mvns	r2, r3
 80021b0:	482a      	ldr	r0, [pc, #168]	@ (800225c <HAL_GPIO_DeInit+0x1ac>)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	400a      	ands	r2, r1
 80021b8:	3302      	adds	r3, #2
 80021ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2103      	movs	r1, #3
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	08d2      	lsrs	r2, r2, #3
 80021f4:	4019      	ands	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3208      	adds	r2, #8
 80021fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2103      	movs	r1, #3
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	401a      	ands	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	2101      	movs	r1, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	401a      	ands	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2103      	movs	r1, #3
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	401a      	ands	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b0f      	cmp	r3, #15
 8002248:	f67f af40 	bls.w	80020cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40013800 	.word	0x40013800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40021000 	.word	0x40021000
 8002274:	40013c00 	.word	0x40013c00

08002278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002294:	e003      	b.n	800229e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	041a      	lsls	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	619a      	str	r2, [r3, #24]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e267      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d075      	beq.n	80023b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022ca:	4b88      	ldr	r3, [pc, #544]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d00c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d6:	4b85      	ldr	r3, [pc, #532]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d112      	bne.n	8002308 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e2:	4b82      	ldr	r3, [pc, #520]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ee:	d10b      	bne.n	8002308 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	4b7e      	ldr	r3, [pc, #504]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d05b      	beq.n	80023b4 <HAL_RCC_OscConfig+0x108>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d157      	bne.n	80023b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e242      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0x74>
 8002312:	4b76      	ldr	r3, [pc, #472]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a75      	ldr	r2, [pc, #468]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e01d      	b.n	800235c <HAL_RCC_OscConfig+0xb0>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x98>
 800232a:	4b70      	ldr	r3, [pc, #448]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6f      	ldr	r2, [pc, #444]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b6d      	ldr	r3, [pc, #436]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6c      	ldr	r2, [pc, #432]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0xb0>
 8002344:	4b69      	ldr	r3, [pc, #420]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a68      	ldr	r2, [pc, #416]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800234a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b66      	ldr	r3, [pc, #408]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a65      	ldr	r2, [pc, #404]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800235a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff f896 	bl	8001494 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236c:	f7ff f892 	bl	8001494 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	@ 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e207      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b5b      	ldr	r3, [pc, #364]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0xc0>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff f882 	bl	8001494 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff f87e 	bl	8001494 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	@ 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1f3      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	4b51      	ldr	r3, [pc, #324]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0xe8>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d063      	beq.n	800248a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023c2:	4b4a      	ldr	r3, [pc, #296]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ce:	4b47      	ldr	r3, [pc, #284]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d11c      	bne.n	8002414 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023da:	4b44      	ldr	r3, [pc, #272]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d116      	bne.n	8002414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	4b41      	ldr	r3, [pc, #260]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x152>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1c7      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b3b      	ldr	r3, [pc, #236]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4937      	ldr	r1, [pc, #220]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	e03a      	b.n	800248a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241c:	4b34      	ldr	r3, [pc, #208]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7ff f837 	bl	8001494 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242a:	f7ff f833 	bl	8001494 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e1a8      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b28      	ldr	r3, [pc, #160]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4925      	ldr	r1, [pc, #148]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245e:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7ff f816 	bl	8001494 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7ff f812 	bl	8001494 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e187      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d036      	beq.n	8002504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <HAL_RCC_OscConfig+0x248>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe fff6 	bl	8001494 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ac:	f7fe fff2 	bl	8001494 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e167      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80024c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x200>
 80024ca:	e01b      	b.n	8002504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCC_OscConfig+0x248>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7fe ffdf 	bl	8001494 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d8:	e00e      	b.n	80024f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024da:	f7fe ffdb 	bl	8001494 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d907      	bls.n	80024f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e150      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
 80024ec:	40023800 	.word	0x40023800
 80024f0:	42470000 	.word	0x42470000
 80024f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	4b88      	ldr	r3, [pc, #544]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ea      	bne.n	80024da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8097 	beq.w	8002640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002516:	4b81      	ldr	r3, [pc, #516]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	4b7d      	ldr	r3, [pc, #500]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	4a7c      	ldr	r2, [pc, #496]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002530:	6413      	str	r3, [r2, #64]	@ 0x40
 8002532:	4b7a      	ldr	r3, [pc, #488]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002542:	4b77      	ldr	r3, [pc, #476]	@ (8002720 <HAL_RCC_OscConfig+0x474>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d118      	bne.n	8002580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254e:	4b74      	ldr	r3, [pc, #464]	@ (8002720 <HAL_RCC_OscConfig+0x474>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a73      	ldr	r2, [pc, #460]	@ (8002720 <HAL_RCC_OscConfig+0x474>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255a:	f7fe ff9b 	bl	8001494 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7fe ff97 	bl	8001494 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e10c      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	4b6a      	ldr	r3, [pc, #424]	@ (8002720 <HAL_RCC_OscConfig+0x474>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x2ea>
 8002588:	4b64      	ldr	r3, [pc, #400]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258c:	4a63      	ldr	r2, [pc, #396]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6713      	str	r3, [r2, #112]	@ 0x70
 8002594:	e01c      	b.n	80025d0 <HAL_RCC_OscConfig+0x324>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x30c>
 800259e:	4b5f      	ldr	r3, [pc, #380]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a2:	4a5e      	ldr	r2, [pc, #376]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025aa:	4b5c      	ldr	r3, [pc, #368]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ae:	4a5b      	ldr	r2, [pc, #364]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0x324>
 80025b8:	4b58      	ldr	r3, [pc, #352]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025bc:	4a57      	ldr	r2, [pc, #348]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c4:	4b55      	ldr	r3, [pc, #340]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	4a54      	ldr	r2, [pc, #336]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025ca:	f023 0304 	bic.w	r3, r3, #4
 80025ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d015      	beq.n	8002604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe ff5c 	bl	8001494 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe ff58 	bl	8001494 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e0cb      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f6:	4b49      	ldr	r3, [pc, #292]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ee      	beq.n	80025e0 <HAL_RCC_OscConfig+0x334>
 8002602:	e014      	b.n	800262e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002604:	f7fe ff46 	bl	8001494 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7fe ff42 	bl	8001494 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e0b5      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002622:	4b3e      	ldr	r3, [pc, #248]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ee      	bne.n	800260c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b39      	ldr	r3, [pc, #228]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	4a38      	ldr	r2, [pc, #224]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 800263a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800263e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80a1 	beq.w	800278c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800264a:	4b34      	ldr	r3, [pc, #208]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b08      	cmp	r3, #8
 8002654:	d05c      	beq.n	8002710 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d141      	bne.n	80026e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b31      	ldr	r3, [pc, #196]	@ (8002724 <HAL_RCC_OscConfig+0x478>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7fe ff16 	bl	8001494 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe ff12 	bl	8001494 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e087      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	4b27      	ldr	r3, [pc, #156]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002698:	019b      	lsls	r3, r3, #6
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	3b01      	subs	r3, #1
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	491b      	ldr	r1, [pc, #108]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_RCC_OscConfig+0x478>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7fe feeb 	bl	8001494 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe fee7 	bl	8001494 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e05c      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x416>
 80026e0:	e054      	b.n	800278c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_RCC_OscConfig+0x478>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe fed4 	bl	8001494 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fed0 	bl	8001494 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e045      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x444>
 800270e:	e03d      	b.n	800278c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d107      	bne.n	8002728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e038      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
 800271c:	40023800 	.word	0x40023800
 8002720:	40007000 	.word	0x40007000
 8002724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002728:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <HAL_RCC_OscConfig+0x4ec>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d028      	beq.n	8002788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d121      	bne.n	8002788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274e:	429a      	cmp	r2, r3
 8002750:	d11a      	bne.n	8002788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002758:	4013      	ands	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800275e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002760:	4293      	cmp	r3, r2
 8002762:	d111      	bne.n	8002788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	3b01      	subs	r3, #1
 8002772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d107      	bne.n	8002788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800

0800279c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0cc      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b0:	4b68      	ldr	r3, [pc, #416]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d90c      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b65      	ldr	r3, [pc, #404]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b63      	ldr	r3, [pc, #396]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0b8      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f0:	4b59      	ldr	r3, [pc, #356]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a58      	ldr	r2, [pc, #352]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002808:	4b53      	ldr	r3, [pc, #332]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a52      	ldr	r2, [pc, #328]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002814:	4b50      	ldr	r3, [pc, #320]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	494d      	ldr	r1, [pc, #308]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d044      	beq.n	80028bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b47      	ldr	r3, [pc, #284]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d119      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e07f      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d003      	beq.n	800285a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002856:	2b03      	cmp	r3, #3
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285a:	4b3f      	ldr	r3, [pc, #252]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e06f      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	4b3b      	ldr	r3, [pc, #236]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e067      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800287a:	4b37      	ldr	r3, [pc, #220]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f023 0203 	bic.w	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4934      	ldr	r1, [pc, #208]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800288c:	f7fe fe02 	bl	8001494 <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002892:	e00a      	b.n	80028aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002894:	f7fe fdfe 	bl	8001494 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e04f      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 020c 	and.w	r2, r3, #12
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d1eb      	bne.n	8002894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028bc:	4b25      	ldr	r3, [pc, #148]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d20c      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e032      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4916      	ldr	r1, [pc, #88]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290e:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	490e      	ldr	r1, [pc, #56]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002922:	f000 f821 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002926:	4602      	mov	r2, r0
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	490a      	ldr	r1, [pc, #40]	@ (800295c <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	5ccb      	ldrb	r3, [r1, r3]
 8002936:	fa22 f303 	lsr.w	r3, r2, r3
 800293a:	4a09      	ldr	r2, [pc, #36]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800293e:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <HAL_RCC_ClockConfig+0x1c8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fd62 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023c00 	.word	0x40023c00
 8002958:	40023800 	.word	0x40023800
 800295c:	08021c20 	.word	0x08021c20
 8002960:	20000018 	.word	0x20000018
 8002964:	2000001c 	.word	0x2000001c

08002968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b090      	sub	sp, #64	@ 0x40
 800296e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002980:	4b59      	ldr	r3, [pc, #356]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b08      	cmp	r3, #8
 800298a:	d00d      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x40>
 800298c:	2b08      	cmp	r3, #8
 800298e:	f200 80a1 	bhi.w	8002ad4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x34>
 8002996:	2b04      	cmp	r3, #4
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800299a:	e09b      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800299c:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x184>)
 800299e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a0:	e09b      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029a2:	4b53      	ldr	r3, [pc, #332]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80029a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a6:	e098      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029b2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d028      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029be:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	099b      	lsrs	r3, r3, #6
 80029c4:	2200      	movs	r2, #0
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029d0:	2100      	movs	r1, #0
 80029d2:	4b47      	ldr	r3, [pc, #284]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80029d4:	fb03 f201 	mul.w	r2, r3, r1
 80029d8:	2300      	movs	r3, #0
 80029da:	fb00 f303 	mul.w	r3, r0, r3
 80029de:	4413      	add	r3, r2
 80029e0:	4a43      	ldr	r2, [pc, #268]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80029e2:	fba0 1202 	umull	r1, r2, r0, r2
 80029e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029e8:	460a      	mov	r2, r1
 80029ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ee:	4413      	add	r3, r2
 80029f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f4:	2200      	movs	r2, #0
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	61fa      	str	r2, [r7, #28]
 80029fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a02:	f7fd fbe7 	bl	80001d4 <__aeabi_uldivmod>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a0e:	e053      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a10:	4b35      	ldr	r3, [pc, #212]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	2200      	movs	r2, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	617a      	str	r2, [r7, #20]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a22:	f04f 0b00 	mov.w	fp, #0
 8002a26:	4652      	mov	r2, sl
 8002a28:	465b      	mov	r3, fp
 8002a2a:	f04f 0000 	mov.w	r0, #0
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	0159      	lsls	r1, r3, #5
 8002a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a38:	0150      	lsls	r0, r2, #5
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	ebb2 080a 	subs.w	r8, r2, sl
 8002a42:	eb63 090b 	sbc.w	r9, r3, fp
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a5a:	ebb2 0408 	subs.w	r4, r2, r8
 8002a5e:	eb63 0509 	sbc.w	r5, r3, r9
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	00eb      	lsls	r3, r5, #3
 8002a6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a70:	00e2      	lsls	r2, r4, #3
 8002a72:	4614      	mov	r4, r2
 8002a74:	461d      	mov	r5, r3
 8002a76:	eb14 030a 	adds.w	r3, r4, sl
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	eb45 030b 	adc.w	r3, r5, fp
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a8e:	4629      	mov	r1, r5
 8002a90:	028b      	lsls	r3, r1, #10
 8002a92:	4621      	mov	r1, r4
 8002a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a98:	4621      	mov	r1, r4
 8002a9a:	028a      	lsls	r2, r1, #10
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	60fa      	str	r2, [r7, #12]
 8002aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aac:	f7fd fb92 	bl	80001d4 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ac8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ad2:	e002      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x184>)
 8002ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3740      	adds	r7, #64	@ 0x40
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	00f42400 	.word	0x00f42400
 8002af0:	017d7840 	.word	0x017d7840

08002af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07b      	b.n	8002bfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d108      	bne.n	8002b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b16:	d009      	beq.n	8002b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
 8002b1e:	e005      	b.n	8002b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fb2c 	bl	80011a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb0:	ea42 0103 	orr.w	r1, r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	f003 0104 	and.w	r1, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	f003 0210 	and.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e01a      	b.n	8002c4e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c2e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fe fb31 	bl	8001298 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b088      	sub	sp, #32
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c66:	f7fe fc15 	bl	8001494 <HAL_GetTick>
 8002c6a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d001      	beq.n	8002c80 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e12a      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_SPI_Transmit+0x36>
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e122      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_SPI_Transmit+0x48>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e11b      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cec:	d10f      	bne.n	8002d0e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	d007      	beq.n	8002d2c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d34:	d152      	bne.n	8002ddc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_SPI_Transmit+0xee>
 8002d3e:	8b7b      	ldrh	r3, [r7, #26]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d145      	bne.n	8002dd0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	881a      	ldrh	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	1c9a      	adds	r2, r3, #2
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d68:	e032      	b.n	8002dd0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d112      	bne.n	8002d9e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	881a      	ldrh	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	1c9a      	adds	r2, r3, #2
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d9c:	e018      	b.n	8002dd0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d9e:	f7fe fb79 	bl	8001494 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d803      	bhi.n	8002db6 <HAL_SPI_Transmit+0x160>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d102      	bne.n	8002dbc <HAL_SPI_Transmit+0x166>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e082      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1c7      	bne.n	8002d6a <HAL_SPI_Transmit+0x114>
 8002dda:	e053      	b.n	8002e84 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_SPI_Transmit+0x194>
 8002de4:	8b7b      	ldrh	r3, [r7, #26]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d147      	bne.n	8002e7a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e10:	e033      	b.n	8002e7a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d113      	bne.n	8002e48 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e46:	e018      	b.n	8002e7a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e48:	f7fe fb24 	bl	8001494 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d803      	bhi.n	8002e60 <HAL_SPI_Transmit+0x20a>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d102      	bne.n	8002e66 <HAL_SPI_Transmit+0x210>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e02d      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1c6      	bne.n	8002e12 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	6839      	ldr	r1, [r7, #0]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f8b1 	bl	8002ff0 <SPI_EndRxTxTransaction>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ef0:	f7fe fad0 	bl	8001494 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f00:	f7fe fac8 	bl	8001494 <HAL_GetTick>
 8002f04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f06:	4b39      	ldr	r3, [pc, #228]	@ (8002fec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	015b      	lsls	r3, r3, #5
 8002f0c:	0d1b      	lsrs	r3, r3, #20
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	fb02 f303 	mul.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f16:	e054      	b.n	8002fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d050      	beq.n	8002fc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f20:	f7fe fab8 	bl	8001494 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d902      	bls.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d13d      	bne.n	8002fb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f4e:	d111      	bne.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f58:	d004      	beq.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f62:	d107      	bne.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f7c:	d10f      	bne.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e017      	b.n	8002fe2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	bf0c      	ite	eq
 8002fd2:	2301      	moveq	r3, #1
 8002fd4:	2300      	movne	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d19b      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000018 	.word	0x20000018

08002ff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2201      	movs	r2, #1
 8003004:	2102      	movs	r1, #2
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7ff ff6a 	bl	8002ee0 <SPI_WaitFlagStateUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e032      	b.n	8003088 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003022:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <SPI_EndRxTxTransaction+0xa0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <SPI_EndRxTxTransaction+0xa4>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	0d5b      	lsrs	r3, r3, #21
 800302e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003040:	d112      	bne.n	8003068 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2200      	movs	r2, #0
 800304a:	2180      	movs	r1, #128	@ 0x80
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff ff47 	bl	8002ee0 <SPI_WaitFlagStateUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d016      	beq.n	8003086 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e00f      	b.n	8003088 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	3b01      	subs	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307e:	2b80      	cmp	r3, #128	@ 0x80
 8003080:	d0f2      	beq.n	8003068 <SPI_EndRxTxTransaction+0x78>
 8003082:	e000      	b.n	8003086 <SPI_EndRxTxTransaction+0x96>
        break;
 8003084:	bf00      	nop
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000018 	.word	0x20000018
 8003094:	165e9f81 	.word	0x165e9f81

08003098 <memset>:
 8003098:	4402      	add	r2, r0
 800309a:	4603      	mov	r3, r0
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	f803 1b01 	strb.w	r1, [r3], #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <__libc_init_array>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	4d0d      	ldr	r5, [pc, #52]	@ (80030e0 <__libc_init_array+0x38>)
 80030ac:	4c0d      	ldr	r4, [pc, #52]	@ (80030e4 <__libc_init_array+0x3c>)
 80030ae:	1b64      	subs	r4, r4, r5
 80030b0:	10a4      	asrs	r4, r4, #2
 80030b2:	2600      	movs	r6, #0
 80030b4:	42a6      	cmp	r6, r4
 80030b6:	d109      	bne.n	80030cc <__libc_init_array+0x24>
 80030b8:	4d0b      	ldr	r5, [pc, #44]	@ (80030e8 <__libc_init_array+0x40>)
 80030ba:	4c0c      	ldr	r4, [pc, #48]	@ (80030ec <__libc_init_array+0x44>)
 80030bc:	f000 f818 	bl	80030f0 <_init>
 80030c0:	1b64      	subs	r4, r4, r5
 80030c2:	10a4      	asrs	r4, r4, #2
 80030c4:	2600      	movs	r6, #0
 80030c6:	42a6      	cmp	r6, r4
 80030c8:	d105      	bne.n	80030d6 <__libc_init_array+0x2e>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d0:	4798      	blx	r3
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7ee      	b.n	80030b4 <__libc_init_array+0xc>
 80030d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030da:	4798      	blx	r3
 80030dc:	3601      	adds	r6, #1
 80030de:	e7f2      	b.n	80030c6 <__libc_init_array+0x1e>
 80030e0:	08021c40 	.word	0x08021c40
 80030e4:	08021c40 	.word	0x08021c40
 80030e8:	08021c40 	.word	0x08021c40
 80030ec:	08021c44 	.word	0x08021c44

080030f0 <_init>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	bf00      	nop
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr

080030fc <_fini>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr
